{"version":3,"sources":["webpack:///./node_modules/mux.js/lib/m2ts/m2ts.js","webpack:///./node_modules/es-abstract/es5.js","webpack:///./node_modules/function-bind/index.js","webpack:///./node_modules/mux.js/lib/mp4/audio-frame-utils.js","webpack:///./node_modules/mux.js/lib/mp4/mp4-generator.js","webpack:///./node_modules/string.prototype.trim/polyfill.js","webpack:///./node_modules/tsml/tsml.js","webpack:///./node_modules/es-abstract/helpers/isNaN.js","webpack:///./node_modules/is-callable/index.js","webpack:///./node_modules/mux.js/lib/m2ts/timestamp-rollover-stream.js","webpack:///./node_modules/mux.js/lib/mp4/probe.js","webpack:///./node_modules/mux.js/lib/mp4/index.js","webpack:///./node_modules/videojs-vtt.js/lib/browser-index.js","webpack:///./node_modules/mux.js/lib/mp4/frame-utils.js","webpack:///./node_modules/es-to-primitive/es5.js","webpack:///./node_modules/mux.js/lib/mp4/transmuxer.js","webpack:///./node_modules/mux.js/lib/utils/exp-golomb.js","webpack:///./node_modules/mux.js/lib/utils/clock.js","webpack:///./node_modules/mux.js/lib/m2ts/probe.js","webpack:///./node_modules/mux.js/lib/utils/stream.js","webpack:///./node_modules/es-to-primitive/helpers/isPrimitive.js","webpack:///./node_modules/mux.js/lib/m2ts/caption-stream.js","webpack:///./node_modules/mux.js/lib/codecs/adts.js","webpack:///./node_modules/xtend/immutable.js","webpack:///./node_modules/string.prototype.trim/implementation.js","webpack:///./node_modules/es-abstract/helpers/sign.js","webpack:///./node_modules/mux.js/lib/m2ts/metadata-stream.js","webpack:///./src/views/VideoView.vue?1496","webpack:///./src/components/video-player/VideoView.vue?59be","webpack:///./src/components/video-player/Video.vue?3076","webpack:///./node_modules/m3u8-parser/dist/m3u8-parser.es.js","webpack:///./node_modules/pkcs7/dist/pkcs7.es.js","webpack:///./node_modules/aes-decrypter/dist/aes-decrypter.es.js","webpack:///./node_modules/video.js/dist/video.es.js","webpack:///src/components/video-player/Video.vue","webpack:///./src/components/video-player/Video.vue?f3a0","webpack:///./src/components/video-player/Video.vue","webpack:///src/components/video-player/VideoView.vue","webpack:///./src/components/video-player/VideoView.vue?c2e3","webpack:///./src/components/video-player/VideoView.vue","webpack:///src/views/VideoView.vue","webpack:///./src/views/VideoView.vue?d7d1","webpack:///./src/views/VideoView.vue","webpack:///./src/components/video-player/VideoView.vue?0df6","webpack:///./node_modules/mux.js/lib/codecs/h264.js","webpack:///./node_modules/parse-headers/parse-headers.js","webpack:///./node_modules/function-bind/implementation.js","webpack:///./node_modules/mux.js/lib/data/silence.js","webpack:///./node_modules/core-js/modules/es6.function.name.js","webpack:///./node_modules/mux.js/lib/utils/bin.js","webpack:///./node_modules/is-function/index.js","webpack:///./node_modules/mpd-parser/dist/mpd-parser.es.js","webpack:///./node_modules/safe-json-parse/tuple.js","webpack:///./src/components/video-player/VideoView.vue?6a81","webpack:///./node_modules/mux.js/lib/tools/mp4-inspector.js","webpack:///./node_modules/mux.js/lib/aac/index.js","webpack:///./node_modules/has/src/index.js","webpack:///./node_modules/mux.js/lib/mp4/caption-parser.js","webpack:///./node_modules/mux.js/lib/m2ts/stream-types.js","webpack:///./node_modules/videojs-vtt.js/lib/vttcue.js","webpack:///./node_modules/object-keys/implementation.js","webpack:///./node_modules/string.prototype.trim/shim.js","webpack:///./node_modules/es-abstract/helpers/mod.js","webpack:///./src/components/video-player/Video.vue?a200","webpack:///./node_modules/global/window.js","webpack:///./node_modules/es-abstract/helpers/assertRecord.js","webpack:///./node_modules/es-abstract/helpers/isFinite.js","webpack:///./node_modules/string.prototype.trim/index.js","webpack:///./node_modules/for-each/index.js","webpack:///./node_modules/videojs-vtt.js/lib/vtt.js","webpack:///./node_modules/url-toolkit/src/url-toolkit.js","webpack:///./node_modules/object-keys/isArguments.js","webpack:///./node_modules/object-keys/index.js","webpack:///./node_modules/mux.js/lib/tools/ts-inspector.js","webpack:///./node_modules/mux.js/lib/tools/caption-packet-parser.js","webpack:///./node_modules/keycode/index.js","webpack:///./node_modules/es-abstract/GetIntrinsic.js","webpack:///./node_modules/mux.js/lib/mp4/track-decode-info.js","webpack:///./node_modules/xhr/index.js","webpack:///./node_modules/global/document.js","webpack:///./node_modules/define-properties/index.js","webpack:///./node_modules/videojs-vtt.js/lib/vttregion.js","webpack:///./node_modules/mux.js/lib/aac/utils.js"],"names":["TransportPacketStream","TransportParseStream","ElementaryStream","Stream","__webpack_require__","CaptionStream","StreamTypes","TimestampRolloverStream","m2tsStreamTypes","MP2T_PACKET_LENGTH","SYNC_BYTE","buffer","Uint8Array","bytesInBuffer","prototype","init","call","this","push","bytes","everything","startIndex","endIndex","byteLength","set","subarray","trigger","flush","parsePsi","parsePat","parsePmt","self","packetsWaitingForPmt","programMapTable","undefined","payload","psi","offset","payloadUnitStartIndicator","type","pat","section_number","last_section_number","pmtPid","pmt","sectionLength","tableEnd","programInfoLength","video","audio","timed-metadata","streamType","pid","H264_STREAM_TYPE","ADTS_STREAM_TYPE","METADATA_STREAM_TYPE","packet","result","length","processPes_","apply","shift","data","STREAM_TYPES","h264","adts","size","timedMetadata","parsePes","pes","ptsDtsFlags","packetLength","dataAlignmentIndicator","pts","dts","flushStream","stream","forceFlush","fragment","packetData","event","i","packetFlushable","trackId","tracks","timelineStartInfo","baseMediaDecodeTime","id","codec","m2ts","PAT_PID","Cea608Stream","MetadataStream","hasOwnProperty","module","exports","GetIntrinsic","$Object","$TypeError","$String","assertRecord","$isNaN","$isFinite","sign","mod","IsCallable","toPrimitive","has","ES5","ToPrimitive","ToBoolean","value","ToNumber","ToInteger","number","Math","floor","abs","ToInt32","x","ToUint32","ToUint16","posInt","ToString","ToObject","CheckObjectCoercible","optMessage","SameValue","y","Type","IsPropertyDescriptor","Desc","allowed","[[Configurable]]","[[Enumerable]]","[[Get]]","[[Set]]","[[Value]]","[[Writable]]","key","isData","IsAccessor","IsAccessorDescriptor","IsDataDescriptor","IsGenericDescriptor","FromPropertyDescriptor","writable","enumerable","configurable","get","ToPropertyDescriptor","Obj","desc","getter","TypeError","setter","implementation","Function","bind","coneOfSilence","clock","ONE_SECOND_IN_TS","sumFrameByteLengths","array","currentObj","sum","prefixWithSilence","track","frames","audioAppendStartTs","videoBaseMediaDecodeTime","baseMediaDecodeTimeTs","silentFrame","frameDuration","audioGapDuration","audioFillFrameCount","audioFillDuration","audioTsToVideoTs","samplerate","ceil","max","splice","videoTsToAudioTs","trimAdtsFramesByEarliestDts","adtsFrames","earliestAllowedDts","minSegmentDts","Infinity","filter","currentFrame","min","minSegmentPts","generateSampleTable","samples","duration","concatenateFrameData","dataOffset","box","dinf","esds","ftyp","mdat","mfhd","minf","moof","moov","mvex","mvhd","trak","tkhd","mdia","mdhd","hdlr","sdtp","stbl","stsd","traf","trex","trun","types","MAJOR_BRAND","MINOR_VERSION","AVC1_BRAND","VIDEO_HDLR","AUDIO_HDLR","HDLR_TYPES","VMHD","SMHD","DREF","STCO","STSC","STSZ","STTS","UINT32_MAX","pow","avc1","avcC","btrt","dref","mp4a","smhd","stco","stsc","stsz","stts","styp","tfdt","tfhd","vmhd","charCodeAt","view","arguments","DataView","byteOffset","setUint32","audioobjecttype","samplingfrequencyindex","channelcount","sequenceNumber","trackFragments","concat","boxes","flags","dependsOn","isDependedOn","videoSample","audioSample","sps","pps","sequenceParameterSets","pictureParameterSets","Array","slice","width","height","profileIdc","profileCompatibility","levelIdc","samplesize","trackFragmentHeader","trackFragmentDecodeTime","trackFragmentRun","sampleDependencyTable","upperWordBaseMediaDecodeTime","lowerWordBaseMediaDecodeTime","audioTrun","videoTrun","trunHeader","durationPresent","sizePresent","flagsPresent","compositionTimeOffset","sample","isLeading","hasRedundancy","paddingValue","isNonSyncSample","degradationPriority","initSegment","fileType","movie","zeroWidthSpace","String","trim","clean","s","replace","sa","Number","isNaN","a","fnToStr","toString","constructorRegex","isES6ClassFn","fnStr","test","e","tryFunctionObject","toStr","Object","fnClass","genClass","hasToStringTag","Symbol","toStringTag","strClass","MAX_TS","RO_THRESH","handleRollover","reference","direction","lastDTS","referenceDTS","type_","discontinuity","findBox","parseType","timescale","startTime","getVideoTrackIds","toUnsigned","path","end","subresults","results","fromCharCode","traks","reduce","version","index","trafs","baseTimes","map","scale","baseTime","isFinite","videoTrackIds","forEach","hdlrs","tkhds","handlerType","getUint8","getUint32","generator","probe","Transmuxer","AudioSegmentStream","VideoSegmentStream","CaptionParser","window","vttjs","WebVTT","VTTCue","VTTRegion","cueShim","regionShim","nativeVTTCue","nativeVTTRegion","shim","restore","groupNalsIntoFrames","nalUnits","currentNal","nalUnitType","keyFrame","groupFramesIntoGops","currentGop","gops","nalCount","extendFirstKeyFrame","createDefaultSample","sampleForFrame","frame","baseDataOffset","h","concatenateNalData","j","nalsByteLength","numberOfNals","totalByteLength","isPrimitive","isCallable","ES5internalSlots","[[DefaultValue]]","O","actualHint","methods","input","CoalesceStream","mp4","frameUtils","audioFrameUtils","trackDecodeInfo","AdtsStream","H264Stream","AacStream","isLikelyAacData","AUDIO_PROPERTIES","VIDEO_PROPERTIES","arrayEquals","b","generateVideoSegmentTimingInfo","startDts","startPts","endDts","endPts","prependedContentDuration","ptsOffsetFromDts","decodeDuration","presentationDuration","start","options","collectDtsInfo","prop","setEarliestDts","earliestDts","setVideoBaseMediaDecodeTime","setAudioAppendStart","timestamp","calculateTrackBaseMediaDecodeTime","keepOriginalTimestamps","clearDtsInfo","config","gopsToAlignWith","minPTS","gopCache_","nalUnit","gopForFusion","firstGop","lastGop","resetStream_","getGopForFusion_","unshift","alignedGops","alignGopsAtEnd","alignGopsAtEnd_","alignGopsAtStart_","gop","pop","dtsDistance","nearestGopObj","currentGopObj","halfSecond","allowableOverlap","nearestDistance","alignIndex","gopIndex","align","alignEndIndex","matchFound","trimIndex","metadata","total","alignGopsWith","newGopsToAlignWith","metadataStream","numberOfTracks","remux","remuxTracks","pendingTracks","videoTrack","pendingBoxes","pendingCaptions","pendingMetadata","pendingBytes","emittedTracks","output","text","audioTrack","flushSource","caption","id3","captions","captionStreams","info","timelineStartPts","endTime","cueTime","dispatchType","hasFlushed","transmuxPipeline_","setupAacPipeline","pipeline","aacStream","audioTimestampRolloverStream","timedMetadataTimestampRolloverStream","adtsStream","coalesceStream","headOfPipeline","pipe","on","setTimestamp","timeStamp","audioSegmentStream","setupTsPipeline","packetStream","parseStream","elementaryStream","videoTimestampRolloverStream","h264Stream","captionStream","videoSegmentStream","setBaseMediaDecodeTime","reset","isAac","resetCaptions","ExpGolomb","workingData","workingBytesAvailable","workingWord","workingBitsAvailable","bitsAvailable","loadWord","position","workingBytes","availableBytes","Error","skipBits","count","skipBytes","readBits","bits","valu","skipLeadingZeros","leadingZeroCount","skipUnsignedExpGolomb","skipExpGolomb","readUnsignedExpGolomb","clz","readExpGolomb","readBoolean","readUnsignedByte","secondsToVideoTs","secondsToAudioTs","videoTsToSeconds","audioTsToSeconds","seconds","sampleRate","parsePid","parsePayloadUnitStartIndicator","parseAdaptionField","pusi","payloadOffset","parsePesType","parsePesTime","parseNalUnitType","videoPacketContainsKeyFrame","nalType","frameBuffer","frameI","frameSyncPoint","foundKeyFrame","listeners","listener","off","indexOf","callbacks","args","dispose","destination","cea708Parser","captionPackets_","ccStreams_","cc","sei","userData","newCaptionPackets","parseSei","escapedRBSP","payloadType","USER_DATA_REGISTERED_ITU_T_T35","parseUserData","latestDts_","ignoreNextEqualDts_","numSameDts_","parseCaptionPackets","elem","idx","presortIndex","sort","dispatchCea608Packet","activeCea608Channel_","ccStream","setsTextOrXDSActive","setsChannel1Active","setsChannel2Active","ccData","CHARACTER_TRANSLATION","42","92","94","95","96","123","124","125","126","127","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","544","545","546","547","548","549","550","551","552","553","554","555","556","557","558","559","560","561","562","563","564","565","566","567","568","569","570","571","572","573","574","575","800","801","802","803","804","805","806","807","808","809","810","811","812","813","814","815","816","817","818","819","820","821","822","823","824","825","826","827","828","829","830","831","getCharFromCode","code","BOTTOM_ROW","ROWS","createDisplayBuffer","field","dataChannel","field_","dataChannel_","name_","setConstants","swap","char0","char1","lastControlCode_","PADDING_","RESUME_CAPTION_LOADING_","mode_","END_OF_CAPTION_","clearFormatting","flushDisplayed","displayed_","nonDisplayed_","startPts_","ROLL_UP_2_ROWS_","rollUpRows_","setRollUp","ROLL_UP_3_ROWS_","ROLL_UP_4_ROWS_","CARRIAGE_RETURN_","shiftRowsUp_","BACKSPACE_","row_","ERASE_DISPLAYED_MEMORY_","ERASE_NON_DISPLAYED_MEMORY_","RESUME_DIRECT_CAPTIONING_","isSpecialCharacter","column_","isExtCharacter","isMidRowCode","addFormatting","isOffsetControlCode","isPAC","row","formatting_","isColorPAC","isNormalChar","content","console","error","join","topRow_","BASE_","EXT_","CONTROL_","OFFSET_","char","newBaseRow","format","reverse","popOn","baseRow","rollUp","paintOn","ADTS_SAMPLING_FREQUENCIES","frameLength","protectionSkipBytes","frameEnd","oldBuffer","sampleCount","adtsFrameDuration","frameNum","extend","target","source","ES","leftWhitespace","rightWhitespace","S","percentEncode","parseUtf8","decodeURIComponent","parseIso88591","unescape","parseSyncSafeInteger","tagParsers","TXXX","tag","description","WXXX","url","PRIV","owner","privateData","settings","debug","descriptor","tagSize","bufferSize","chunk","frameStart","frameSize","frameHeader","log","d","render","_vm","_h","$createElement","_c","_self","staticClass","attrs","name","staticRenderFns","VideoViewvue_type_template_id_7ee749f4_scoped_true_render","dark","videoOptions","_e","VideoViewvue_type_template_id_7ee749f4_scoped_true_staticRenderFns","Videovue_type_template_id_a73de09c_scoped_true_render","ref","Videovue_type_template_id_a73de09c_scoped_true_staticRenderFns","_extends","assign","_inheritsLoose","subClass","superClass","create","constructor","__proto__","_assertThisInitialized","ReferenceError","_proto","LineStream","_Stream","_this","nextNewline","substring","attributeSeparator","keyvalue","RegExp","parseAttributes","attributes","attr","split","exec","ParseStream","customParsers","tagMappers","line","match","_this2","newLines","acc","mapper","mappedLine","newLine","tagType","parseFloat","title","parseInt","playlistType","URI","uri","BYTERANGE","_attributes$BYTERANGE","byterange","RESOLUTION","resolution","BANDWIDTH","dateTimeString","dateTimeObject","Date","IV","toLowerCase","Uint32Array","PRECISE","addParser","_ref","_this3","expression","customType","dataParser","segment","addTagMapper","_ref2","mapFn","Parser","lineStream","currentMap","_key","uris","currentUri","noop","defaultMediaGroups","AUDIO","VIDEO","CLOSED-CAPTIONS","SUBTITLES","currentTimeline","manifest","allowCache","discontinuityStarts","segments","entry","mediaGroup","rendition","allow-cache","message","endlist","endList","inf","mediaSequence","discontinuitySequence","METHOD","method","iv","media-sequence","discontinuity-sequence","playlist-type","playlist","stream-inf","playlists","mediaGroups","media","TYPE","NAME","mediaGroupType","default","DEFAULT","autoselect","AUTOSELECT","LANGUAGE","language","instreamId","CHARACTERISTICS","characteristics","FORCED","forced","program-date-time","targetduration","targetDuration","totalduration","totalDuration","timeOffset","precise","cue-out","cueOut","cue-out-cont","cueOutCont","cue-in","cueIn","timeline","comment","custom","unpad","padded","classCallCheck","instance","Constructor","createClass","defineProperties","props","defineProperty","protoProps","staticProps","inherits","setPrototypeOf","possibleConstructorReturn","precompute","tables","encTable","decTable","sbox","sboxInv","xInv","th","x2","x4","x8","tEnc","tDec","aesTables","AES","_tables","tmp","encKey","decKey","keyLen","rcon","decrypt","encrypted0","encrypted1","encrypted2","encrypted3","out","c","a2","b2","c2","nInnerRounds","kIndex","table","table0","table1","table2","table3","aes_decrypter_es_Stream","_length","_i","AsyncStream","jobs","delay","timeout_","processJob_","setTimeout","job","ntoh","word","encrypted","initVector","encrypted32","Int32Array","decipher","decrypted","decrypted32","init0","init1","init2","init3","wordIx","aes_decrypter_es_Decrypter","Decrypter","done","step","STEP","asyncStream_","decryptChunk_","video_es_version","video_es_inheritsLoose","_setPrototypeOf","o","p","isNativeReflectConstruct","Reflect","construct","sham","Proxy","_construct","Parent","Class","video_es_assertThisInitialized","_taggedTemplateLiteralLoose","strings","raw","video_es_history","video_es_LogByTypeFactory","level","lvl","levels","lvlRegExp","toUpperCase","window_default","fn","isArray","createLogger","logByType","_len","subname","all","warn","history","fname","historyItem","clear","disable","enable","_len2","_key2","_len3","_key3","_len4","_key4","video_es_log","createLogger$1","video_es_toString","keys","object","isObject","each","initial","accum","video_es_assign","sources","isPlain","video_es_computedStyle","el","getComputedStyle","cs","_templateObject","isNonBlankString","str","throwIfWhitespace","classRegExp","className","isReal","document_default","document","isEl","nodeType","isInFrame","parent","createQuerier","selector","context","querySelector","ctx","video_es_createEl","tagName","properties","createElement","getOwnPropertyNames","propName","val","tsml_default","setAttribute","textContent","attrName","appendContent","innerText","prependTo","child","firstChild","insertBefore","appendChild","hasClass","element","classToCheck","classList","contains","addClass","classToAdd","add","removeClass","classToRemove","remove","toggleClass","classToToggle","predicate","setAttributes","attrValue","removeAttribute","getAttributes","obj","knownBooleans","attrVal","getAttribute","attribute","blockTextSelection","body","focus","onselectstart","unblockTextSelection","getBoundingClientRect","parentNode","rect","k","findPosition","left","top","docEl","documentElement","clientLeft","scrollLeft","pageXOffset","clientTop","scrollTop","pageYOffset","round","getPointerPosition","boxW","offsetWidth","boxH","offsetHeight","boxY","boxX","pageY","pageX","changedTouches","isTextNode","emptyEl","removeChild","normalizeContent","createTextNode","node","insertContent","isSingleLeftClick","button","buttons","$","$$","Dom","freeze","createEl","_guid","newGUID","elData","elIdAttr","performance","now","getData","hasData","removeData","_cleanUpEvents","handlers","removeEventListener","dispatcher","detachEvent","disabled","_handleMultipleEvents","callback","fixEvent","returnTrue","returnFalse","isPropagationStopped","old","preventDefault","srcElement","relatedTarget","fromElement","toElement","returnValue","defaultPrevented","stopPropagation","cancelBubble","stopImmediatePropagation","isImmediatePropagationStopped","clientX","doc","clientY","which","charCode","keyCode","_supportsPassive","opts","addEventListener","passiveEvents","guid","hash","handlersCopy","m","n","passive","attachEvent","removeType","t","elemData","ownerDocument","bubbles","targetData","one","func","any","videojs","Events","_windowLoaded","video_es_autoSetup","autoSetup","vids","getElementsByTagName","audios","divs","mediaEls","mediaEl","autoSetupTimeout","player","wait","vjs","readyState","EVENT_MAP","video_es_createStyleElement","style","setTextContent","styleSheet","cssText","uid","bound","video_es_throttle","last","throttled","video_es_debounce","immediate","timeout","cancel","clearTimeout","debounced","_later","EventTarget","allowedEvents_","ael","dispatchEvent","queueTrigger","Map","oldTimeout","isEvented","eventBusEl_","every","addEventedCallback","eventedCallbacks","isValidEventType","validateTarget","nodeName","validateEventType","validateListener","normalizeListenArgs","isTargetingSelf","listen","EventedMixin","_normalizeListenArgs","removeListenerOnDispose","removeRemoverOnTargetDispose","_normalizeListenArgs2","wrapper","largs","_normalizeListenArgs3","_len5","_key5","targetOrType","typeOrListener","evented","_options","eventBusKey","StatefulMixin","state","setState","stateUpdates","changes","from","to","stateful","defaultState","handleStateChanged","toTitleCase","string","charAt","titleCaseEquals","str1","str2","mergeOptions","video_es_Component","Component","ready","play","player_","parentComponent_","options_","id_","el_","children_","childIndex_","childNameIndex_","initChildren","reportTouchActivity","enableTouchActivity","localize","tokens","defaultValue","languages","primaryCode","primaryLang","localizedString","ret","contentEl","contentEl_","children","getChildById","getChild","addChild","component","componentName","componentClassName","componentClass","ComponentClass","getComponent","childNodes","refNode","childFound","compEl","workingChildren","parentOptions","handleAdd","playerOptions","newChild","Tech","some","wchild","isTech","buildCSSClass","sync","isReady_","readyQueue_","triggerReady","readyQueue","show","hide","lockShowing","unlockShowing","num","skipListeners","dimension","dimensions","widthOrHeight","pxIndex","currentDimension","computedWidthOrHeight","computedStyle","getPropertyValue","rule","currentDimensions","currentWidth","currentHeight","blur","handleKeyDown","handleKeyPress","emitTapEvents","couldBeTap","touchStart","firstTouch","tapMovementThreshold","touchTimeThreshold","touches","xdiff","ydiff","touchDistance","sqrt","noTap","touchTime","reportUserActivity","touchHolding","report","clearInterval","setInterval","touchEnd","timeoutId","disposeFn","interval","intervalId","requestAnimationFrame","_this4","supportsRaf_","cancelAnimationFrame","registerComponent","ComponentToRegister","reason","isComp","isPrototypeOf","components_","Player","players","playerNames","pname","Boolean","USER_AGENT","navigator","userAgent","webkitVersionMap","appleWebkitVersion","IS_IPAD","IS_IPHONE","IS_IPOD","IS_IOS","IOS_VERSION","IS_ANDROID","ANDROID_VERSION","major","minor","IS_NATIVE_ANDROID","IS_FIREFOX","IS_EDGE","IS_CHROME","CHROME_VERSION","IE_VERSION","IS_SAFARI","IS_ANY_SAFARI","IS_WINDOWS","TOUCH_ENABLED","maxTouchPoints","DocumentTouch","browser","rangeCheck","fnName","maxIndex","getRange","valueIndex","ranges","rangeIndex","createTimeRangesObj","createTimeRanges","bufferedPercent","buffered","bufferedDuration","browserApi","FullscreenApi","prefixed","apiMap","specApi","video_es_i","MediaError","defaultMessages","status","errorTypes","1","2","3","4","5","errNum","isPromise","then","silencePromise","trackToJson_","cues","cue","textTracksToJson","tech","trackEls","trackObjs","trackEl","json","src","textTracks","jsonToTextTracks","addedTrack","addRemoteTextTrack","addCue","textTrackConverter","MODAL_CLASS_NAME","video_es_ModalDialog","_Component","ModalDialog","opened_","hasBeenOpened_","hasBeenFilled_","closeable","uncloseable","role","descEl_","tabIndex","aria-describedby","aria-hidden","aria-label","label","previouslyActiveEl_","open","fillAlways","fill","wasPlaying_","paused","pauseOnOpen","pause","hadControls_","controls","conditionalFocus_","opened","close","conditionalBlur_","temporary","closeable_","temp","controlText","fillWith","parentEl","nextSiblingEl","nextSibling","empty","closeButton","content_","activeEl","activeElement","playerEl","keycode_default","isEventKey","focusIndex","focusableEls","focusableEls_","shiftKey","allChildren","querySelectorAll","HTMLAnchorElement","HTMLAreaElement","hasAttribute","HTMLInputElement","HTMLSelectElement","HTMLTextAreaElement","HTMLButtonElement","HTMLIFrameElement","HTMLObjectElement","HTMLEmbedElement","TrackList","_EventTarget","tracks_","addTrack","removeTrack","rtrack","l","getTrackById","video_es_event","change","addtrack","removetrack","disableOthers","list","enabled","AudioTrackList","_TrackList","changing_","enabledChange_","disableOthers$1","selected","VideoTrackList","selectedChange_","TextTrackList","queueChange_","triggerSelectedlanguagechange","triggerSelectedlanguagechange_","nonLanguageTextTrackKind","kind","selectedlanguagechange_","HtmlTrackElementList","trackElements","trackElements_","addTrackElement_","trackElement","getTrackElementByTrack_","trackElement_","removeTrackElement_","TextTrackCueList","setCues_","length_","oldLength","cues_","defineProp","getCueById","VideoTrackKind","alternative","main","subtitles","commentary","AudioTrackKind","descriptions","main-desc","translation","TextTrackKind","chapters","TextTrackMode","hidden","showing","Track","trackProps","_loop","video_es_parseUrl","href","div","addToBody","host","protocol","innerHTML","details","location","video_es_getAbsoluteURL","getFileExtension","splitPathRe","pathParts","video_es_isCrossOrigin","winLoc","urlInfo","srcProtocol","crossOrigin","Url","parseUrl","getAbsoluteURL","isCrossOrigin","video_es_parseCues","srcContent","parser","StringDecoder","errors","oncue","onparsingerror","onflush","parse","groupCollapsed","groupEnd","video_es_loadTrack","cors","xhr_default","err","response","responseBody","loaded_","tech_","loadHandler","errorHandler","video_es_TextTrack","_Track","TextTrack","srclang","mode","default_","activeCues_","activeCues","changed","timeupdateHandler","newMode","ct","currentTime","active","originalCue","originalCue_","removeCue","_removeCue","cuechange","AudioTrack","newEnabled","VideoTrack","newSelected","NONE","LOADING","LOADED","ERROR","HTMLTrackElement","load","NORMAL","ListClass","TrackClass","capitalName","getterName","privateName","REMOTE","remoteText","remoteTextEl","ALL","createTrackHelper","names","video_es_Tech","hasStarted_","featuresProgressEvents","manualProgressOn","featuresTimeupdateEvents","manualTimeUpdatesOn","nativeCaptions","nativeTextTracks","featuresNativeTextTracks","emulateTextTracks","autoRemoteTextTracks_","initTrackListeners","nativeControlsForTouch","triggerSourceset","onDurationChange","manualProgress","trackProgress","manualProgressOff","stopTrackingProgress","progressInterval","numBufferedPercent","bufferedPercent_","duration_","manualTimeUpdates","trackCurrentTime","stopTrackingCurrentTime","manualTimeUpdatesOff","currentTimeInterval","manuallyTriggered","clearTracks","removeRemoteTextTrack","cleanupAutoTextTracks","error_","played","setCurrentTime","trackListChanges","addWebVttScript_","_this5","browser_index_default","script","onload","onerror","_this6","remoteTracks","remoteTextTracks","handleAddTrack","handleRemoveTrack","updateDisplay","textTracksChanges","addTextTrack","createRemoteTextTrack","manualCleanup","_this7","htmlTrackElement","remoteTextTrackEls","getVideoPlaybackQuality","requestPictureInPicture","PromiseClass","Promise","reject","setPoster","playsinline","setPlaysinline","overrideNativeAudioTracks","overrideNativeVideoTracks","canPlayType","canPlaySource","srcObj","registerTech","techs_","defaultTechOrder_","getTech","featuresVolumeControl","featuresMuteControl","featuresFullscreenResize","featuresPlaybackRate","featuresSourceset","withSourceHandlers","_Tech","registerSourceHandler","handler","sourceHandlers","can","selectSourceHandler","canHandleSource","sh","deferrable","originalFn","sourceHandler_","setSource","nativeSourceHandler","disposeSourceHandler","currentSource_","handleSource","middlewares","middlewareInstances","TERMINATOR","use","middleware","next","setSourceHelper","setTech","mw","video_es_get","reduceRight","middlewareIterator","video_es_set","arg","mediate","callMethod","middlewareValue","terminated","executeRight","allowedGetters","seekable","volume","allowedSetters","setVolume","allowedMediators","mws","clearCacheForPlayer","getOrCreateFactory","mwFactory","_mws$i","mwf","mwi","lastRun","_middleware","mwrest","_src","MimetypesKind","opus","ogv","mov","m4v","mkv","m4a","mp3","aac","oga","m3u8","jpg","jpeg","gif","png","svg","webp","getMimetype","ext","mimetype","findMimetype","cache_","matchingSources","filterSource","newsrc","srcobj","fixSource","MediaLoader","techOrder","techName","isSupported","loadTech_","video_es_ClickableComponent","ClickableComponent","tabIndex_","createControlTextEl","controlTextEl_","aria-live","controlText_","localizedText","nonIconControl","enabled_","handleClick","PosterImage","_ClickableComponent","update","poster","setSrc","backgroundImage","darkGray","lightGray","fontMap","monospace","sansSerif","serif","monospaceSansSerif","monospaceSerif","proportionalSansSerif","proportionalSerif","casual","smallcaps","constructColor","color","opacity","hex","tryUpdateStyle","video_es_TextTrackDisplay","TextTrackDisplay","updateDisplayHandler","toggleDisplay","preselectTrack","firstDesc","firstCaptions","preferredTrack","modes","trackList","userPref","selectedLanguage","aria-atomic","clearDisplay","processCues","allowMultipleShowingTracks","showingTracks","updateForTrack","descriptionsTrack","captionsSubtitlesTrack","_track","updateDisplayState","overrides","textTrackSettings","getValues","cueDiv","displayState","textOpacity","backgroundColor","backgroundOpacity","windowColor","windowOpacity","edgeStyle","textShadow","fontPercent","fontSize","bottom","fontFamily","fontVariant","_i2","_track2","_j","cueEl","LoadingSpinner","isAudio","playerType","dir","video_es_Button","Button","BigPlayButton","_Button","mouseused_","handleMouseDown","playPromise","cb","playToggle","playFocus","video_es_CloseButton","CloseButton","video_es_PlayToggle","PlayToggle","replay","handlePlay","handlePause","handleEnded","handleSeeked","defaultImplementation","guide","gm","gh","setFormatTime","customImplementation","resetFormatTime","formatTime","video_es_TimeDisplay","TimeDisplay","throttledUpdateContent","updateContent","labelText_","updateTextNode_","textNode_","formattedTime_","formatTime_","time","updateFormattedTime_","formattedTime","CurrentTimeDisplay","_TimeDisplay","scrubbing","getCache","DurationDisplay","TimeDivider","RemainingTimeDisplay","remainingTimeDisplay","remainingTime","LiveDisplay","updateShowing","SeekToLive","updateLiveEdgeStatus","liveTracker","textEl_","atLiveEdge","seekToLiveEdge","video_es_Slider","Slider","bar","barName","vertical","playerEvent","handleMouseMove","handleMouseUp","aria-valuenow","aria-valuemin","aria-valuemax","progress","getPercent","percentage","toFixed","calculateDistance","stepBack","stepForward","bool","vertical_","LoadProgressBar","partEls_","isLive","seekableEnd","bufferedEnd","controlTextPercentage","percentify","rounded","percent","part","TimeTooltip","seekBarRect","seekBarPoint","tooltipRect","playerRect","seekBarPointPx","spaceLeftOfPoint","spaceRightOfPoint","right","pullTooltipBy","write","updateTime","rafId_","liveWindow","secondsBehind","PlayProgressBar","timeTooltip","MouseTimeDisplay","STEP_SECONDS","PAGE_KEY_MULTIPLIER","UPDATE_REFRESH_INTERVAL","video_es_SeekBar","_Slider","SeekBar","setEventHandlers_","updateInterval","enableInterval_","disableInterval_","toggleVisibility_","update_","liveCurrentTime","offsetParent","getCurrentTime_","seekableStart","videoWasPlaying","newTime","distance","mouseTimeDisplay","handleAction","gotoFraction","codes","ProgressControl","throttledHandleMouseSeek","handleMouseSeek","seekBar","seekBarEl","video_es_PictureInPictureToggle","PictureInPictureToggle","handlePictureInPictureChange","pictureInPictureEnabled","isInPictureInPicture","exitPictureInPicture","video_es_FullscreenToggle","FullscreenToggle","handleFullscreenChange","fsApi_","fullscreenEnabled","isFullscreen","exitFullscreen","requestFullscreen","checkVolumeSupport","VolumeLevel","VolumeBar","updateLastVolume_","updateARIAAttributes","checkMuted","muted","ariaValue","volumeAsPercentage_","volumeBeforeDrag","lastVolume_","VolumeControl","volumeBar","throttledHandleMouseMove","orientationClass","checkMuteSupport","video_es_MuteToggle","MuteToggle","vol","lastVolume","volumeToSet","updateIcon_","updateControlText_","soundOff","VolumePanel","inline","volumeControl","volumePanelState_","sliderActive_","sliderInactive_","muteToggle","video_es_Menu","Menu","menuButton_","menuButton","focusedChild_","boundHandleBlur_","handleBlur","boundHandleTapClick_","handleTapClick","addEventListenerForItem","removeEventListenerForItem","addItem","childComponent","contentElType","append","btn","buttonPressed_","unpressButton","childComponents","foundComponent","stepChild","item","haveTitle","video_es_MenuButton","MenuButton","buttonClass","menu","handleSubmenuKeyDown","createMenu","items","hideThreshold_","titleEl","titleComponent","createItems","buildWrapperCSSClass","menuButtonClass","pressButton","handleSubmenuKeyPress","TrackButton","_MenuButton","updateHandler","MenuKeys","video_es_MenuItem","MenuItem","selectable","isSelected_","multiSelectable","_selected","video_es_TextTrackMenuItem","_MenuItem","TextTrackMenuItem","kinds","changeHandler","handleTracksChange","selectedLanguageChangeHandler","handleSelectedLanguageChange","onchange","Event","createEvent","initEvent","referenceTrack","shouldBeSelected","OffTextTrackMenuItem","_TextTrackMenuItem","allHidden","TextTrackButton","_TrackButton","TrackMenuItem","label_","kinds_","kind_","ChaptersTrackMenuItem","ChaptersButton","_TextTrackButton","track_","setTrack","findChaptersTrack","updateHandler_","remoteTextTrackEl","_remoteTextTrackEl","getMenuCaption","mi","DescriptionsButton","SubtitlesButton","CaptionSettingsMenuItem","CaptionsButton","SubsCapsMenuItem","SubsCapsButton","language_","AudioTrackMenuItem","audioTracks","AudioTrackButton","PlaybackRateMenuItem","rate","playbackRate","PlaybackRateMenuButton","updateVisibility","updateLabel","labelEl_","rates","playbackRates","currentRate","newRate","playbackRateSupported","Spacer","CustomControlSpacer","_Spacer","ControlBar","ErrorDisplay","_ModalDialog","LOCAL_STORAGE_KEY","COLOR_BLACK","COLOR_BLUE","COLOR_CYAN","COLOR_GREEN","COLOR_MAGENTA","COLOR_RED","COLOR_WHITE","COLOR_YELLOW","OPACITY_OPAQUE","OPACITY_SEMI","OPACITY_TRANS","selectConfigs","v","parseOptionValue","getSelectedOptionValue","selectedIndex","setSelectedOption","video_es_TextTrackSettings","TextTrackSettings","endDialog","setDefaults","persistTextTrackSettings","saveSettings","restoreSettings","createElSelect_","legendId","selectLabelledbyIds","optionId","createElFgColor_","createElBgColor_","createElWinColor_","createElColors_","createElFont_","createElControls_","defaultsDescription","setValues","values","JSON","localStorage","getItem","setItem","stringify","removeItem","ttDisplay","controlBar","subsCapsBtn","subsCapsButton","ccBtn","captionsButton","video_es_ResizeManager","ResizeManager","RESIZE_OBSERVER_AVAILABLE","ResizeObserver","loadListener_","resizeObserver_","debouncedHandler_","resizeHandler","observe","contentWindow","unloadListener_","unobserve","disconnect","resizeObserver","video_es_LiveTracker","LiveTracker","reset_","handleDurationchange","handleVisibilityChange","stopTracking","startTracking","isBehind_","timeupdateSeen_","seekableIncrement","seekableIncrement_","liveEdgeWindow","trackLive_","pastSeekEnd_","newSeekEnd","lastSeekEnd_","pastSeekEnd","behindLiveEdge","behindLiveEdge_","isTracking","hasStarted","trackingInterval_","handleTimeupdate","seekableEnds","seekableStarts","sourcesetLoad","srcUrls","innerHTMLDescriptorPolyfill","cloneNode","dummy","docFrag","createDocumentFragment","Element","getDescriptor","priority","getOwnPropertyDescriptor","video_es_getInnerHTMLDescriptor","HTMLMediaElement","firstSourceWatch","resetSourceWatch_","innerDescriptor","appendWrapper","appendFn","retval","srcDescriptorPolyfill","video_es_getSrcDescriptor","setupSourceset","resetSourceset_","srcDescriptor","oldSetAttribute","oldLoad","currentSrc","_templateObject$1","video_es_Html5","Html5","crossoriginTracks","initNetworkState_","handleLateInit_","enableSourceset","setupSourcesetHandling_","hasChildNodes","nodes","nodesLength","removeNodes","proxyNativeTracks_","restoreMetadataTracksInIOSNativePlayer_","setControls","proxyWebkitFullscreen_","disposeMediaElement","metadataTracksPreFullscreenState","takeMetadataTrackSnapshot","storedMode","restoreTrackMode","storedTrack","overrideNative_","override","lowerCaseType","eventName","elTracks","proxyNativeTracksForType_","techTracks","currentTarget","removeOldTracks","removeTracks","found","playerElIngest","movingMediaElementInDOM","clone","tagAttributes","techId","class","playerId","preload","settingsAttrs","networkState","loadstartFired","setLoadstartFired","triggerLoadstart","eventsToTrigger","checkProgress","NaN","endFn","beginFn","webkitPresentationMode","supportsFullScreen","webkitEnterFullScreen","enterFullScreen","HAVE_METADATA","exitFullScreen","webkitExitFullScreen","resetMediaElement","videoPlaybackQuality","webkitDroppedFrameCount","webkitDecodedFrameCount","droppedVideoFrames","totalVideoFrames","creationTime","timing","navigationStart","TEST_VID","video_es_track","canControlVolume","canMuteVolume","canControlPlaybackRate","canOverrideAttributes","supportsNativeTextTracks","supportsNativeVideoTracks","videoTracks","supportsNativeAudioTracks","featuresNativeVideoTracks","featuresNativeAudioTracks","mpegurlRE","_templateObject$2","patchCanPlayType","unpatchCanPlayType","r","TECH_EVENTS_RETRIGGER","TECH_EVENTS_QUEUE","canplay","canplaythrough","playing","seeked","BREAKPOINT_ORDER","BREAKPOINT_CLASSES","DEFAULT_BREAKPOINTS","tiny","xsmall","small","medium","large","xlarge","huge","video_es_Player","getTagSettings","closest","boundDocumentFullscreenChange_","documentFullscreenChange_","boundFullWindowOnEscKey_","fullWindowOnEscKey","isPosterFromTech_","queuedCallbacks_","userActive_","languagesToLower","languages_","resetCache_","poster_","controls_","changingSrc_","playCallbacks_","playTerminatedQueue_","autoplay","plugins","scrubbing_","fluid_","updateStyleEl_","playerOptionsCopy","middleware_","flexNotSupported_","majorVersion","userActive","listenForUserActivity_","handleStageClick_","breakpoints","responsive","fullscreenchange","styleEl_","playerElIngest_","divEmbed","tabindex","VIDEOJS_NO_DYNAMIC_STYLE","defaultsStyleEl","head","fill_","fluid","aspectRatio","links","linkEl","_dimension","privDimension","parsedVal","ratio","aspectRatio_","idClass","videoWidth","videoHeight","ratioParts","ratioMultiplier","width_","height_","_width","_height","techEl","unloadTech_","titleTechName","camelTechName","techName_","techOptions","loop","vtt.js","canOverridePoster","techCanOverridePoster","TechClass","handleTechReady_","textTracksJson_","eventObj","seeking","handleTechLoadStart_","handleTechSourceset_","handleTechWaiting_","handleTechEnded_","handleTechSeeking_","handleTechPlay_","handleTechFirstPlay_","handleTechPause_","handleTechDurationChange_","handleTechFullscreenChange_","handleTechEnterPictureInPicture_","handleTechLeavePictureInPicture_","handleTechError_","handleTechPosterChange_","handleTechTextData_","handleTechRateChange_","usingNativeControls","techGet_","addTechControlsListeners_","safety","removeTechControlsListeners_","handleTechClick_","handleTechDoubleClick_","handleTechTouchStart_","handleTechTouchMove_","handleTechTouchEnd_","handleTechTap_","techCall_","manualAutoplay_","promise","previouslyMuted","restoreMuted","mutedPromise","updateSourceCaches_","sourceElSources","sourceEls","matchingSourceEls","sourceObj","updateSourceCaches","playerSrc","currentSource","eventSrc","lastSource_","updateCache","techSrc","techGet","request","lastPlaybackRate","queued","timeWhenWaiting","timeUpdateListener","handleTechCanPlay_","handleTechCanPlayThrough_","handleTechPlaying_","handleTechSeeked_","starttime","inAllowedEls","userActions","doubleClick","userWasActive","toggleFullscreenClass_","isFs","fullscreenElement","matches","fullscreen","msMatchesSelector","togglePictureInPictureClass_","inactivityTimeout","defaultPlaybackRate","_this8","resolve","play_","_this9","isSrcReady","waitToPlay_","runPlayTerminatedQueue_","runPlayCallbacks_","queue","q","isScrubbing","liveui","percentAsDecimal","_muted","defaultMuted","_defaultMuted","isFS","isFullscreen_","fullscreenOptions","fsOptions","enterFullWindow","exitFullWindow","isFullWindow","docOrigOverflow","overflow","isPiP","isInPictureInPicture_","hotkeys","excludeElement","excludedTags","allowedInputTypes","handleHotkeys","_hotkeys$fullscreenKe","fullscreenKey","keydownEvent","_hotkeys$muteKey","muteKey","_hotkeys$playPauseKey","playPauseKey","FSToggle","selectSource","foundSourceAndTech","_this10","techs","findFirstPassingTechSourcePair","outerArray","innerArray","tester","outerChoice","innerChoice","flip","finder","sourceOrder","_this11","middlewareSource","src_","notSupportedMessage","_this12","sourceTech","_this13","doReset_","resetControlBarUI_","resetProgressBar_","resetPlaybackRate_","resetVolumeBar_","_this$controlBar","durationDisplay","currentSources","currentType","techAutoplay","newPoster","usingNativeControls_","suppressNotSupportedError","triggerSuppressedError","errorDisplay","userActivity_","mouseInProgress","lastMoveX","lastMoveY","handleActivity","screenX","screenY","isAudio_","_obj","toJSON","createModal","_this14","modal","updateCurrentBreakpoint_","currentBreakpoint","candidateBreakpoint","maxWidth","breakpoints_","breakpoint_","removeCurrentBreakpoint_","currentBreakpointClass","_breakpoints","responsive_","current","loadMedia","_this15","_this$cache_$media","artwork","tt","getMedia","baseOptions","tagOptions","dataSetup","_safeParseTuple","tuple_default","childName","video_es_navigator","html5","flash","userLanguage","navigationUI","BASE_PLUGIN_NAME","PLUGIN_CACHE_KEY","pluginStorage","pluginExists","getPlugin","markPluginAsActive","triggerSetupEvent","before","createBasicPlugin","plugin","basicPluginWrapper","createPluginFactory","PluginSubClass","getEventHash","Plugin","VERSION","isBasic","registerPlugin","deregisterPlugin","getPlugins","getPluginVersion","usingPlugin","hasPlugin","_inherits","super_","subClassMethods","normalizeId","videojs$1","getPlayer","defaultView","hooks","hookFunction","PlayerComponent","hooks_","hook","hookOnce","original","removeHook","video_es_style","video_es_head","getPlayers","nId","_tag","_player","getAllPlayers","comp","writeable","addLanguage","_mergeOptions","createTimeRange","xhr","dom","video_es_resolveUrl","baseURL","relativeURL","url_toolkit_default","buildAbsoluteURL","resolveManifestRedirect","handleManifestRedirect","req","responseURL","video_es_classCallCheck","video_es_createClass","get$1","property","receiver","getPrototypeOf","video_es_inherits","video_es_possibleConstructorReturn","slicedToArray","sliceIterator","arr","_arr","_n","_d","_s","iterator","mergeOptions$1","EventTarget$1","log$1","forEachMediaGroup","master","mediaType","groupKey","labelKey","mediaProperties","updateSegments","resolveSegmentUris","baseUri","resolvedUri","updateMaster","mergedPlaylist","setupMediaPlaylists","resolveMediaGroupUris","refreshDelay","lastSegment","video_es_PlaylistLoader","PlaylistLoader","srcUrl","hls","_options$withCredenti","withCredentials","_options$handleManife","handleManifestRedirects","hls_","hlsOptions","customTagParsers","customTagMappers","playlistRequestError","haveMetadata","startingState","responseText","customParser","media_","mediaUpdateTimeout","stopRequest","finalRenditionTimeout","oldRequest","onreadystatechange","abort","isFinalRendition","mediaChange","started","backwardDuration","endSequence","forwardDuration","intervalDuration","expired","backward","forward","video_es_duration","sumDurations","durations","safeLiveIndex","distanceFromEnd","safeDistance","playlistEnd","useSafeLiveEnd","isWholeNumber","roundSignificantDigit","increment","numDecimalDigits","ceilLeastSignificantDigit","floorLeastSignificantDigit","getMediaInfoForTime","numSegments","mediaIndex","isBlacklisted","excludeUntil","isIncompatible","isEnabled","blacklisted","isDisabled","isAes","isFmp4","estimateSegmentRequestTime","segmentDuration","bandwidth","bytesReceived","isLowestEnabledRendition","currentBandwidth","MAX_VALUE","Playlist","videojsXHR","mergeOptions$1$1","xhrFactory","XhrFunction","beforeRequest","Hls","newOptions","reqResponse","responseTime","roundTripTime","requestTime","headers","responseHeaders","timedout","aborted","statusCode","originalAbort","byterangeStr","byterangeStart","byterangeEnd","segmentXhrHeaders","Range","textRange","range","formatHexString","formatAsciiString","createTransferableMessage","transferable","ArrayBuffer","isView","initSegmentId","segmentKeyId","hexDump","ascii","tagDump","textRanges","utils","SEGMENT_END_FUDGE_PERCENT","playerTimeToProgramTime","playerTime","transmuxerPrependedSeconds","videoTimingInfo","transmuxedStart","transmuxedPresentationStart","startOfSegment","offsetFromSegmentStart","getTime","originalSegmentVideoDuration","transmuxedPresentationEnd","findSegmentForProgramTime","programTime","nextSegmentStart","lastSegmentStart","lastSegmentDuration","lastSegmentEnd","estimatedStart","findSegmentForPlayerTime","segmentEnd","getOffsetFromTimestamp","comparisonTimeStamp","segmentDateTime","programDateTime","segmentTimeEpoch","programTimeEpoch","verifyProgramDateTimeTags","getProgramTime","_ref$time","matchedSegment","seekTime","programTimeObject","mediaSeconds","toISOString","seekToProgramTime","_ref2$retryCount","retryCount","seekTo","_ref2$pauseAfterSeek","pauseAfterSeek","mediaOffset","seekToTime","seekedCallback","TIME_FUDGE_FACTOR","SAFE_TIME_DELTA","filterRanges","timeRanges","findRange","findNextRange","findGaps","printableRange","strArr","timeUntilRebuffer","timeRangesToArray","timeRangesList","createTextTracksIfNecessary","sourceBuffer","mediaSource","inbandTextTracks_","metadataTrack_","inBandMetadataTrackDispatchType","removeCuesFromTrack","deprecateOldCue","durationOfVideo","dur","video_es_addTextTrackData","sourceHandler","captionArray","metadataArray","Cue","WebKitDataCue","timestampOffset","videoDuration","mediaSource_","cuesArray","cuesGroupedByStartTime","timeSlot","sortedStartTimes","cueGroup","nextTime","win","TARGET","SCRIPT_TYPE","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","URL","webkitURL","msURL","Worker","shimWorker","filename","forceFallback","objURL","createSourceObject","wrapTerminate","selfShim","postMessage","onmessage","isThisThread","testWorker","testArray","revokeObjectURL","terminate","createObjectURL","Blob","blob","getBlob","worker","term","TransmuxWorker","document$$1","_findBox","mp4Generator","bin","toUnsigned$1","highPrefix","lowPrefix","zeroFill","makeTable","metaTable","96000","88200","64000","48000","44100","32000","24000","16000","12000","11025","8000","silence","ONE_SECOND_IN_TS$1","generateSampleTable$1","ONE_SECOND_IN_TS$2","maxSegmentPts","maxSegmentDts","RBSP_TRAILING_BITS","payloadSize","discardEmulationPreventionBytes","newLength","newData","emulationPreventionBytesPositions","sourceIndex","captionPacketParser","_char","streamTypes","_MetadataStream","timestampRolloverStream","_TransportPacketStream","_TransportParseStream","_ElementaryStream","TimestampRolloverStream$1","stream$$1","_AdtsStream","m2ts_1","_H264Stream","_NalByteStream","PROFILES_WITH_OPTIONAL_SPS_DATA","expGolomb","syncPoint","swapBuffer","100","110","122","244","44","83","86","118","128","138","139","134","currentPts","currentDts","readSequenceParameterSet","skipScalingList","nalByteStream","expGolombDecoder","deltaScale","lastScale","nextScale","chromaFormatIdc","picOrderCntType","numRefFramesInPicOrderCntCycle","picWidthInMbsMinus1","picHeightInMapUnitsMinus1","frameMbsOnlyFlag","scalingListCount","sarRatio","aspectRatioIdc","frameCropLeftOffset","frameCropRightOffset","frameCropTopOffset","frameCropBottomOffset","sarScale","_AacStream","NalByteStream","ADTS_SAMPLING_FREQUENCIES$1","parseSyncSafeInteger$1","percentEncode$1","parseIso88591$1","parseId3TagSize","header","byteIndex","returnSize","footerPresent","parseAdtsSize","lowThree","middle","highTwo","parseType$1","parseSampleRate","parseAacTimestamp","bytesLeft","tempLength","_VideoSegmentStream","_AudioSegmentStream","_Transmuxer","_CoalesceStream","isLikelyAacData$1","inspectMp4","_textifyMp","transmuxer","parseType$2","parseMp4Date","parseSampleFlags","nalParse","avcStream","avcView","parse$$1","dataReferenceIndex","getUint16","horizresolution","vertresolution","frameCount","depth","numOfPictureParameterSets","nalSize","configurationVersion","avcProfileIndication","avcLevelIndication","lengthSizeMinusOne","numOfSequenceParameterSets","bufferSizeDB","maxBitrate","avgBitrate","esId","streamPriority","decoderConfig","objectProfileIndication","decoderConfigDescriptor","audioObjectType","samplingFrequencyIndex","channelConfiguration","majorBrand","minorVersion","compatibleBrands","dataReferences","escape","nals","modificationTime","streamDescriptor","matrix","nextTrackId","pdin","initialDelay","sidx","references","referenceId","earliestPresentationTime","firstOffset","referenceCount","referenceType","referencedSize","subsegmentDuration","startsWithSap","sapType","sapDeltaTime","balance","chunkOffsets","entryCount","sampleToChunks","firstChunk","samplesPerChunk","sampleDescriptionIndex","sampleDescriptions","sampleSize","entries","timeToSamples","sampleDelta","baseDataOffsetPresent","sampleDescriptionIndexPresent","defaultSampleDurationPresent","defaultSampleSizePresent","defaultSampleFlagsPresent","durationIsEmpty","defaultBaseIsMoof","defaultSampleDuration","defaultSampleSize","defaultSampleFlags","baseDataOffsetIsMoof","layer","alternateGroup","defaultSampleDescriptionIndex","sampleDependsOn","sampleIsDependedOn","sampleHasRedundancy","samplePaddingValue","sampleIsDifferenceSample","sampleDegradationPriority","dataOffsetPresent","firstSampleFlagsPresent","sampleDurationPresent","sampleSizePresent","sampleFlagsPresent","sampleCompositionTimeOffsetPresent","getInt32","url ","graphicsmode","opcolor","Uint16Array","ab","z","inspectedMp4","indent","prefix","_byte","mp4Inspector$$1","inspect","textify","parseTfdt","parseHdlr","parseTfhd","parseTrun","parseSidx","discardEmulationPreventionBytes$1","CaptionStream$1","mapToSample","approximateOffset","findSeiNals","seiNal","lastMatchedSample","matchingSample","parseSamples","truns","allSamples","trackRun","parseCaptionNals","videoTrackId","mdats","captionNals","mdatTrafPairs","matchingTraf","pair","seiNals","headerInfo","parseEmbeddedCaptions","CaptionParser$$1","captionStream$$1","segmentCache","parsedCaptions","isInitialized","isNewInit","timescales","parsedData","cachedSegment","pushNals","nal","clearParsedCaptions","resetCaptionStream","clearAllCaptions","captionParser","wireTransmuxerEvents","initArray","typedArray","action","gopInfo","videoSegmentTimingInfo","MessageHandlers","appendStart","TransmuxerWorker","messageHandlers","transmuxerWorker","defaultCodecs","videoCodec","videoObjectTypeIndicator","audioProfile","translateLegacyCodecs","codecs","orig","profile","avcLevel","profileHex","avcLevelHex","parseCodecs","codecCount","parsed","mapLegacyAvcCodecs","codecString","makeMimeTypeString","container","getContainerType","getCodecs","mediaAttributes","CODECS","audioProfileFromDefault","audioGroupId","audioGroup","audioType","mimeTypesForPlaylist","containerType","codecInfo","isMuxed","isMaat","groupId","codecStrings","justAudio","justVideo","bothVideoAudio","parseContentType","parameters","parameter","isAudioCodec","isVideoCodec","gopsSafeToAlignWith","mapping","currentTimePts","updateGopBuffer","removeGopBuffer","updatedBuffer","videoBuffer","audioBuffer","audioDisabled","arity","extents","videoBuffered","audioBuffered","makeWrappedSourceBuffer","mimeType","addSourceBuffer","updating","realBuffer_","VirtualSourceBuffer","_videojs$EventTarget","timestampOffset_","pendingBuffers_","bufferUpdating_","codecs_","audioCodec_","videoCodec_","audioDisabled_","appendAudioInitSegment_","gopBuffer_","timeMapping_","safeAppend_","transmuxer_","data_","done_","appendGopInfo_","videoSegmentTimingInfo_","videoBuffer_","audioBuffer_","appendWindowStart","processPendingSegments_","timingInfo","timingInfoInSeconds","decode","presentation","codecProperty","nativeMediaSource_","shouldTrigger","sortedSegments","segmentObj","createRealSourceBuffers_","triggerUpdateend","concatAndAppendSegments_","destinationBuffer","tempBuffer","appendBuffer","originalError","video_es_HtmlMediaSource","HtmlMediaSource","MediaSource","activeSourceBuffers_","sourceBuffers","updateActiveSourceBuffers_","disableCombined","disableAudioOnly","onPlayerMediachange_","onHlsReset_","onHlsSegmentTimeMapping_","url_","sourcebuffer","parsedType","urlCount","mediaSources","video_es_open","msObjectURL","swfId","video_es_supportsNativeMediaSources","isTypeSupported","supportsNativeMediaSources","URL$1","objectUrlPrefix","EventTarget$1$1","mergeOptions$2","updateMaster$1","oldMaster","newMaster","noChanges","minimumUpdatePeriod","playlistUpdate","group","_playlistUpdate","generateSidxKey","sidxInfo","sidxByteRangeEnd","equivalentSidx","neitherMap","equivalentMap","compareSidxEntry","oldSidxMapping","newSidxMapping","currentSidxInfo","savedSidxInfo","video_es_filterChangedSidxMappings","masterXml","clientOffset","mpd_parser_es","manifestUri","videoSidx","mediaGroupSidx","requestSidx_","sidxRange","finishProcessingFn","sidxRequestOptions","responseType","video_es_DashPlaylistLoader","DashPlaylistLoader","srcUrlOrPlaylist","masterPlaylistLoader","refreshXml_","refreshMedia_","loadedPlaylists_","sidxMapping_","setupChildLoader","masterPlaylistLoader_","childPlaylist_","minimumUpdatePeriodTimeout_","mediaRequest_","doneFn","mp4_inspector_default","sidxMapping","sidxKey","sidxRequestFinished_","masterXml_","clientOffset_","phonyUri","_phonyUri","haveMaster_","date","masterLoaded_","syncClientServerClock_","onClientServerClockSync_","utcTiming","serverTime","parseMasterXml","hasPendingRequest","updatedMaster","mediaUri","logger","video_es_noop","SourceUpdater","sourceBufferEmitter","callbacks_","pendingCallback_","processedAppend_","mimeType_","logger_","createSourceBuffer_","sourceBuffer_","start_","started_","onUpdateendCallback_","pendingCallback","removing","runCallback_","queueCallback_","videoSegmentTimingInfoCallback","Config","GOAL_BUFFER_LENGTH","MAX_GOAL_BUFFER_LENGTH","GOAL_BUFFER_LENGTH_RATE","INITIAL_BANDWIDTH","BANDWIDTH_VARIANCE","BUFFER_LOW_WATER_LINE","MAX_BUFFER_LOW_WATER_LINE","BUFFER_LOW_WATER_LINE_RATE","REQUEST_ERRORS","FAILURE","TIMEOUT","ABORTED","abortAll","activeXhrs","getRequestStats","getProgressStats","progressEvent","stats","loaded","handleErrors","handleKeyResponse","errorObj","video_es_handleInitSegmentResponse","probe_default","handleSegmentResponse","encryptedBytes","fmp4Captions","decryptSegment","decrypter","decryptionHandler","requestId","keyBytes","waitForCompletion","didError","endOfAllRequests","handleProgress","progressFn","firstBytesReceivedAt","mediaSegmentRequest","xhrOptions","decryptionWorker","keyRequestOptions","keyRequestCallback","keyXhr","initSegmentOptions","initSegmentRequestCallback","initSegmentXhr","segmentRequestOptions","segmentRequestCallback","segmentXhr","video_es_safeGetComputedStyle","stableSort","sortFn","newArray","cmp","video_es_comparePlaylistBandwidth","leftBandwidth","rightBandwidth","video_es_comparePlaylistResolution","leftWidth","rightWidth","video_es_simpleSelector","playerBandwidth","playerWidth","playerHeight","limitRenditionByPlayerDimensions","sortedPlaylistReps","rep","enabledPlaylistReps","bandwidthPlaylistReps","highestRemainingBandwidthRep","bandwidthBestRep","_chosenRep","haveResolution","resolutionBestRepList","resolutionBestRep","resolutionPlusOneList","resolutionPlusOneSmallest","resolutionPlusOneRep","chosenRep","lastBandwidthSelector","systemBandwidth","minRebufferMaxBandwidthSelector","duration$$1","syncController","compatiblePlaylists","enabledPlaylists","bandwidthPlaylists","rebufferingEstimates","getSyncPoint","numRequests","requestTimeEstimate","rebufferingImpact","noRebufferingPlaylists","estimate","lowestBitrateCompatibleVariantSelector","playlistsWithVideo","createCaptionsTrackIfNotExists","inbandTextTracks","addCaptionData","CHECK_BUFFER_DELAY","detectEndOfStream","segmentIndex","appendedLastSegment","finite","illegalMediaSwitch","loaderType","startingMedia","newSegmentMedia","containsAudio","containsVideo","safeBackBufferTrimTime","seekable$$1","removeToTime","segmentInfoString","segmentInfo","_segmentInfo$segment","_segmentInfo$playlist","seq","_segmentInfo$playlist2","video_es_SegmentLoader","SegmentLoader","throughput","roundTrip","resetStats_","hasPlayed_","hasPlayed","currentTime_","seekable_","seeking_","loaderType_","startingMedia_","segmentMetadataTrack_","segmentMetadataTrack","goalBufferLength_","goalBufferLength","sourceType_","sourceType","state_","checkBufferTimeout_","currentTimeline_","pendingSegment_","sourceUpdater_","xhrOptions_","activeInitSegmentId_","initSegments_","cacheEncryptionKeys_","cacheEncryptionKeys","keyCache_","captionParser_","decrypter_","syncController_","syncPoint_","ended_","fetchAtBuffer_","newState","mediaBytesTransferred","mediaRequests","mediaRequestsAborted","mediaRequestsTimedout","mediaRequestsErrored","mediaTransferDuration","mediaSecondsLoaded","abort_","monitorBuffer_","abortRequests","_error","set$$1","storedMap","storedKey","playlist_","setDateTimeMapping","couldBeginLoading_","init_","sourceBufferEmitter_","resetEverything","newPlaylist","oldPlaylist","syncInfo","oldId","mediaSequenceDiff","saveExpiredSegmentInfo","resyncLoader","_mimeType","resetLoader","monitorBufferTick_","fillBuffer_","checkBuffer_","buffered_","isEndOfStream_","endOfStream","loadSegment_","lastBufferedEnd","bufferedTime","getSyncSegmentCandidate_","generateSegmentInfo_","mediaSourceInfo","_mediaSourceInfo","segmentIndexArray","isSyncRequest","random","measuredBandwidth","requestTimeRemaining","timeUntilRebuffer$$1","switchCandidate","timeSavedBySwitching","minimumTimeSaving","simpleSegment","abortRequestEarly_","trimBackBuffer_","createSimplifiedSegmentObj_","handleProgress_","segmentRequestFinished_","segmentKey","processSegmentResponse_","handleSegment_","probeSegmentInfo","illegalMediaSwitchError","blacklistDuration","timelineMapping","mappingForTimeline","initId","handleVideoSegmentTimingInfo_","handleUpdateEnd_","isWalkingForward","recordThroughput_","addSegmentMetadataCue_","segmentProcessingTime","segmentProcessingThroughput","uint8ToUtf8","uintArray","VTT_LINE_TERMINATORS","_char2","video_es_VTTSegmentLoader","_SegmentLoader","VTTSegmentLoader","subtitlesTrack_","combinedByteLength","combinedSegment","skipEmptySegments_","timestampOffsetForTimeline","checkTimestampOffset","requested","parseVTTCues_","updateTimeMapping_","timelines","decoder","decodeBytesToString","TextDecoder","timestampmap","MPEGTS","LOCAL","ontimestampmap","mapData","segmentData","mappingObj","diff","firstStart","lastStart","findAdCue","mediaTime","adStartTime","adEndTime","video_es_updateAdCues","adOffset","adTotal","_segment$cueOutCont$s","_segment$cueOutCont$s2","tsprobe","ts_inspector_default","syncPointStrategies","run","datetimeToDisplayTime","lastDistance","segmentTime","segmentStart","discontinuitySync","discontinuities","video_es_SyncController","SyncController","inspectCache_","syncPoints","runStrategies_","selectSyncPoint_","strategy","bestSyncPoint","bestDistance","bestStrategy","newDistance","lastRemovedSegment","playlistTimestamp","probeMp4Segment_","probeTsSegment_","calculateSegmentTimeMapping_","saveDiscontinuitySyncInfo_","timeInfo","segmentStartTime","segmentEndTime","dtsTime","probedInfo","accuracy","mediaIndexDiff","Decrypter$1","AsyncStream$$1","decrypt$$1","Decrypter$$1","DecrypterWorker","decrypterWorker","audioTrackKind_","stopLoaders","segmentLoader","activePlaylistLoader","startLoaders","playlistLoader","onGroupChanged","_settings$segmentLoad","segmentLoaders","mainSegmentLoader","mediaTypes","activeTrack","activeGroup","previousActiveLoader","onTrackChanged","_settings$segmentLoad2","onError","blacklistCurrentPlaylist","defaultTrack","setupListeners","requestOptions","initialize","_settings$mediaTypes$","groups","variantLabel","_settings$mediaTypes$2","_settings$mediaTypes$3","variants","setupMediaGroups","onAudioTrackChanged","createMediaTypes","ABORT_EARLY_BLACKLIST_SECONDS","loaderStats","sumLoaderStat","stat","audioSegmentLoader_","mainSegmentLoader_","video_es_MasterPlaylistController","MasterPlaylistController","externHls","useCueTags","enableLowInitialPlaylist","seekTo_","useCueTags_","cueTagsTrack_","requestOptions_","mediaTypes_","handleSourceOpen_","segmentLoaderSettings","setupMasterPlaylistLoaderListeners_","subtitleSegmentLoader_","setupSegmentLoaderListeners_","requestTimeout","triggerPresenceUsage_","setupSourceBuffers_","setupFirstPlay","updatedPlaylist","excludeUnsupportedVariants_","selectedMedia","selectInitialPlaylist","selectPlaylist","initialMedia_","updateAdCues_","updateDuration","addSeekableRange","addSeekableRange_","onDurationchange","playlistOutdated","stuckAtPlaylistEnd_","defaultDemuxed","audioGroupKeys","nextPlaylist","currentPlaylist","forwardBuffer","bufferLowWaterLine","onSyncInfoUpdate_","onEndOfStream","ended","isEndOfStream","getExpiredTime","absolutePlaylistEnd","mainSeekable","audioSeekable","oldEnd","oldStart","oldDuration","newDuration","setDuration","mimeTypes","configureLoaderMimeTypes_","excludeIncompatibleVariants_","variant","variantCodecs","enableFunction","loader","playlistUri","changePlaylistFn","incompatible","currentlyEnabled","Representation","hlsHandler","mpc","masterPlaylistController_","smoothQualityChange","changeType","qualityChangeFunction","renditionSelectionMixin","representations","timerCancelEvents","video_es_PlaybackWatcher","PlaybackWatcher","allowSeeksWithinUnsafeLiveWindow","consecutiveUpdates","lastRecordedTime","timer_","checkCurrentTimeTimeout_","canPlayHandler","monitorCurrentTime_","waitingHandler","techWaiting_","cancelTimerHandler","cancelTimer_","fixesBadSeeksHandler","fixesBadSeeks_","checkCurrentTime_","waiting_","isAfterSeekableRange","afterSeekableWindow_","beforeSeekableWindow_","currentRange","livePoint","nextRange","videoUnderflow_","difference","skipTheGap_","allowedEnd","gap","gapFromVideoUnderflow_","scheduledCurrentTime","gaps","defaultOptions","errorInterval","getSource","IWillNotUseThisInPlugins","initPlugin","lastCalled","localOptions","loadedMetadataHandler","cleanupEvents","reinitPlugin","reloadSourceOnError","version$1","vhs","source_","Hls$1","STANDARD_PLAYLIST_SELECTOR","INITIAL_PLAYLIST_SELECTOR","comparePlaylistBandwidth","comparePlaylistResolution","LOCAL_STORAGE_KEY$1","simpleTypeFromSourceType","dashRE","handleHlsMediaChange","qualityLevels","selectedIndex_","handleHlsLoadedMetadata","addQualityLevel","emeKeySystems","keySystemOptions","videoPlaylist","audioPlaylist","keySystemContentTypes","keySystem","audioContentType","videoContentType","contentProtection","pssh","setupEmeOptions","eme","sourceOptions","keySystems","initializeMediaKeys","getVhsLocalStorage","storedObject","updateVhsLocalStorage","objectToStore","supportsNativeHls","canPlay","canItPlay","supportsNativeDash","supportsTypeNatively","Component$1","video_es_HlsHandler","HlsHandler","dash","setOptions_","overrideNative","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","smoothQualityChange_","pauseLoading","useBandwidthFromLocalStorage","option","playbackWatcher_","invBandwidth","invThroughput","systemBitrate","mediaRequests_","mediaRequestsAborted_","mediaRequestsTimedout_","mediaRequestsErrored_","mediaTransferDuration_","mediaBytesTransferred_","mediaSecondsLoaded_","currentTech","playerDimensions","setupQualityLevels_","qualityLevels_","HlsSourceHandler","_videojs$mergeOptions","supportedType","canUseMsePlayback","video_es","Videovue_type_script_lang_js_","mounted","$refs","videoPlayer","beforeDestroy","video_player_Videovue_type_script_lang_js_","componentNormalizer","Video","electron","VideoViewvue_type_script_lang_js_","components","SystemBar","getUserConfig","userConfig","setPath","catch","video_player_VideoViewvue_type_script_lang_js_","VideoView_component","VideoView","installComponents_default","VApp","VContent","views_VideoViewvue_type_script_lang_js_","src_views_VideoViewvue_type_script_lang_js_","views_VideoView_component","__webpack_exports__","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_index_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_lib_loader_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_VideoView_vue_vue_type_style_index_1_id_7ee749f4_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_index_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_lib_loader_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_VideoView_vue_vue_type_style_index_1_id_7ee749f4_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default","ERROR_MESSAGE","funcType","that","binder","boundLength","boundArgs","Empty","dP","f","FProto","nameRE","isFunction","alert","confirm","prompt","global","parseUTCTiming","global_window__WEBPACK_IMPORTED_MODULE_0__","global_window__WEBPACK_IMPORTED_MODULE_0___default","merge","objects","flatten","lists","findIndexes","INVALID_NUMBER_OF_PERIOD","DASH_EMPTY_MANIFEST","DASH_INVALID_XML","NO_BASE_URL","MISSING_SEGMENT_INFORMATION","SEGMENT_TIME_UNSPECIFIED","UNSUPPORTED_UTC_TIMING_SCHEME","createCommonjsModule","urlToolkit","root","URL_REGEX","FIRST_SEGMENT_REGEX","SLASH_DOT_REGEX","SLASH_DOT_DOT_REGEX","URLToolkit","alwaysNormalize","basePartsForNormalise","parseURL","normalizePath","buildURLFromParts","relativeParts","scheme","baseParts","netLoc","builtParts","params","query","baseURLPath","newPath","lastIndexOf","parts","resolveUrl","baseUrl","relativeUrl","urlTypeToSegment","_ref$baseUrl","_ref$source","_ref$range","_ref$indexRange","indexRange","rangeStr","startRange","endRange","byteRangeToString","segmentRange","static","_attributes$timescale","sourceDuration","dynamic","NOW","availabilityStartTime","_attributes$timescale2","_attributes$start","_attributes$minimumUp","_attributes$timeShift","timeShiftBufferDepth","periodStartWC","periodEndWC","periodDuration","segmentCount","availableStart","availableEnd","toSegments","_attributes$timescale3","periodIndex","_attributes$startNumb","startNumber","parseByDuration","_attributes$type","_attributes$timescale4","_segmentRange$type","segmentsFromBase","_attributes$initializ","initialization","_attributes$indexRang","sourceURL","segmentTimeInfo","addSegmentsToPlaylist","sidxByteRange","sidxEnd","mediaReferences","mergeDiscontiguousPlaylists","mergedPlaylists","_acc$name$segments","lang","addSegmentInfoFromSidx","sidxMatch","formatAudioPlaylist","_attributes","formatVttPlaylist","_attributes2","organizeAudioPlaylists","mainPlaylist","formattedPlaylists","roleLabel","firstLabel","organizeVttPlaylists","formatVideoPlaylist","_ref3","_attributes3","toM3u8","dashPlaylists","_mediaGroups","_dashPlaylists$0$attr","_dashPlaylists$0$attr2","videoOnly","_ref4","contentType","audioOnly","_ref5","vttOnly","_ref6","videoPlaylists","audioPlaylists","vttPlaylists","subs","getLiveRValue","parseByTimeline","segmentTimeline","_attributes$minimumUp2","_attributes$media","sIndex","repeat","nextS","identifierPattern","identifierReplacement","identifier","constructTemplateUrl","parseTemplateInfo","segmentsFromTemplate","templateValues","RepresentationID","Bandwidth","mapSegment","Time","SegmentURLToSegmentObject","segmentUrl","mediaRange","segmentsFromList","_attributes$segmentUr","segmentUrls","segmentUrlMap","segmentUrlObject","generateSegments","segmentAttributes","segmentsFn","template","base","segmentsInfo","_segmentAttributes","_segmentAttributes$ti","toPlaylists","findChildren","getContent","parseDuration","SECONDS_IN_YEAR","SECONDS_IN_MONTH","SECONDS_IN_DAY","SECONDS_IN_HOUR","SECONDS_IN_MIN","durationRegex","_match$slice","year","month","day","hour","minute","second","parseDate","dateRegex","parsers","mediaPresentationDuration","parsedValue","parseFn","decodeB64ToUint8Array","b64Text","decodedString","atob","keySystemsMap","urn:uuid:1077efec-c0b2-4d02-ace3-3c1e52e2fb4b","urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed","urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95","urn:uuid:f239e769-efa3-4850-9c16-a903c6932efb","buildBaseUrls","referenceUrls","baseUrlElements","baseUrlElement","getSegmentInformation","adaptationSet","segmentTemplate","segmentList","segmentBase","segmentTimelineParentNode","segmentInitializationParentNode","segmentInitialization","inheritBaseUrls","adaptationSetAttributes","adaptationSetBaseUrls","adaptationSetSegmentInfo","representation","repBaseUrlElements","repBaseUrls","representationSegmentInfo","generateKeySystemInformation","contentProtectionNodes","schemeIdUri","psshNode","psshBuffer","toRepresentations","periodAttributes","periodBaseUrls","periodSegmentInfo","roleAttributes","toAdaptationSets","mpdAttributes","mpdBaseUrls","period","periodAtt","parsedPeriodId","adaptationSets","inheritAttributes","mpd","_options$manifestUri","_options$NOW","_options$clientOffset","periods","stringToMpdXml","manifestString","DOMParser","xml","parseFromString","parseUTCTimingScheme","UTCTimingNode","SafeParseTuple","reviver","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_index_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_lib_loader_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_VideoView_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_index_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_lib_loader_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_VideoView_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0___default","textifyMp4","byte","aacUtils","autoKeyword","directionSetting","","lr","rl","alignSetting","findDirectionSetting","findAlignSetting","hasBeenReset","_id","_pauseOnExit","_startTime","_endTime","_text","_region","_vertical","_snapToLines","_line","_lineAlign","_position","_positionAlign","_size","_align","pauseOnExit","region","setting","SyntaxError","snapToLines","lineAlign","positionAlign","getCueAsHTML","convertCueToDOMTree","keysShim","isArgs","isEnumerable","propertyIsEnumerable","hasDontEnumBug","hasProtoEnumBug","dontEnums","equalsConstructorPrototype","ctor","excludedKeys","$applicationCache","$console","$external","$frame","$frameElement","$frames","$innerHeight","$innerWidth","$onmozfullscreenchange","$onmozfullscreenerror","$outerHeight","$outerWidth","$pageXOffset","$pageYOffset","$parent","$scrollLeft","$scrollTop","$scrollX","$scrollY","$self","$webkitIndexedDB","$webkitStorageInfo","$window","hasAutomationEqualityBug","equalsConstructorPrototypeIfNotBuggy","isArguments","isString","theKeys","skipProto","skipConstructor","define","getPolyfill","polyfill","modulo","remain","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_index_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_lib_loader_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Video_vue_vue_type_style_index_0_id_a73de09c_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_index_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_lib_loader_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Video_vue_vue_type_style_index_0_id_a73de09c_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default","$SyntaxError","predicates","Property Descriptor","recordType","argumentName","boundTrim","forEachArray","len","forEachString","forEachObject","thisArg","_objCreate","F","ParsingError","errorData","parseTimeStamp","computeSeconds","Settings","parseOptions","keyValueDelim","groupDelim","kv","parseCue","regionList","oInput","consumeTimeStamp","ts","Errors","BadTimeStamp","consumeCueSettings","alt","vals","vals0","integer","skipWhitespace","substr","BadSignature","dflt","defaultKey","ESCAPE","&amp;","&lt;","&gt;","&lrm;","&rlm;","&nbsp;","TAG_NAME","u","ruby","rt","TAG_ANNOTATION","NEEDS_PARENT","parseContent","nextToken","consume","unescape1","shouldAdd","localName","annotation","rootDiv","tagStack","createProcessingInstruction","strongRTLRanges","isStrongRTLChar","determineBidi","nodeStack","pushNodes","nextTextNode","computeLinePos","textTrackList","mediaElement","StyleBox","CueStyleBox","styleOptions","styles","display","writingMode","unicodeBidi","applyStyles","textAlign","font","whiteSpace","textPos","formatStyle","move","BoxPosition","lh","offsetTop","rects","getClientRects","lineHeight","moveBoxToLinePosition","styleBox","containerBox","boxPositions","findBestPosition","axis","bestPosition","specifiedPosition","overlapsOppositeAxis","within","overlapsAny","intersectPercentage","boxPosition","linePos","maxPosition","initialAxis","calculatedPercentage","toCSSCompatValues","unit","toMove","overlaps","intersectArea","getSimpleBoxPosition","encodeURIComponent","cuetext","FONT_SIZE_PERCENT","FONT_STYLE","CUE_BACKGROUND_PADDING","overlay","paddedOverlay","shouldCompute","margin","reportOrThrowError","collectNextLine","pos","parseRegion","xy","anchor","lines","regionAnchorX","regionAnchorY","viewportAnchorX","viewportAnchorY","scroll","onregion","parseTimestampMap","parseHeader","alreadyCollectedLine","hasSubstring","callee","origKeys","originalKeys","keysWorksWithArguments","PES_TIMESCALE","parsePsi_","parseAudioPes_","pesType","endLoop","parseVideoPes_","firstKeyFrame","adjustTimestamp_","baseTimestamp","audioBaseTimestamp","ptsTime","videoBaseTimestamp","inspectAac_","audioCount","audioTimescale","inspectTs_","isAacData","searchInput","hasKeyCode","search","foundNamedKey","aliases","nameOrCode","backspace","tab","enter","ctrl","pause/break","caps lock","esc","space","page up","page down","home","up","down","insert","delete","command","left command","right command","numpad *","numpad +","numpad -","numpad .","numpad /","num lock","scroll lock","my computer","my calculator",";","=",",","-",".","/","`","[","\\","]","'","windows","⇧","⌥","⌃","⌘","ctl","control","break","caps","return","spc","spacebar","pgup","pgdn","ins","del","cmd","alias","asyncFn","asyncGen","ThrowTypeError","hasSymbols","getProto","generatorFunction","asyncFunction","asyncGenFunction","asyncGenIterator","TypedArray","INTRINSICS","$ %Array%","$ %ArrayBuffer%","$ %ArrayBufferPrototype%","$ %ArrayIteratorPrototype%","$ %ArrayPrototype%","$ %ArrayProto_entries%","$ %ArrayProto_forEach%","$ %ArrayProto_keys%","$ %ArrayProto_values%","$ %AsyncFromSyncIteratorPrototype%","$ %AsyncFunction%","$ %AsyncFunctionPrototype%","$ %AsyncGenerator%","$ %AsyncGeneratorFunction%","$ %AsyncGeneratorPrototype%","$ %AsyncIteratorPrototype%","asyncIterator","$ %Atomics%","Atomics","$ %Boolean%","$ %BooleanPrototype%","$ %DataView%","$ %DataViewPrototype%","$ %Date%","$ %DatePrototype%","$ %decodeURI%","decodeURI","$ %decodeURIComponent%","$ %encodeURI%","encodeURI","$ %encodeURIComponent%","$ %Error%","$ %ErrorPrototype%","$ %eval%","eval","$ %EvalError%","EvalError","$ %EvalErrorPrototype%","$ %Float32Array%","Float32Array","$ %Float32ArrayPrototype%","$ %Float64Array%","Float64Array","$ %Float64ArrayPrototype%","$ %Function%","$ %FunctionPrototype%","$ %Generator%","$ %GeneratorFunction%","$ %GeneratorPrototype%","$ %Int8Array%","Int8Array","$ %Int8ArrayPrototype%","$ %Int16Array%","Int16Array","$ %Int16ArrayPrototype%","$ %Int32Array%","$ %Int32ArrayPrototype%","$ %isFinite%","$ %isNaN%","$ %IteratorPrototype%","$ %JSON%","$ %JSONParse%","$ %Map%","$ %MapIteratorPrototype%","$ %MapPrototype%","$ %Math%","$ %Number%","$ %NumberPrototype%","$ %Object%","$ %ObjectPrototype%","$ %ObjProto_toString%","$ %ObjProto_valueOf%","valueOf","$ %parseFloat%","$ %parseInt%","$ %Promise%","$ %PromisePrototype%","$ %PromiseProto_then%","$ %Promise_all%","$ %Promise_reject%","$ %Promise_resolve%","$ %Proxy%","$ %RangeError%","RangeError","$ %RangeErrorPrototype%","$ %ReferenceError%","$ %ReferenceErrorPrototype%","$ %Reflect%","$ %RegExp%","$ %RegExpPrototype%","$ %Set%","Set","$ %SetIteratorPrototype%","$ %SetPrototype%","$ %SharedArrayBuffer%","SharedArrayBuffer","$ %SharedArrayBufferPrototype%","$ %String%","$ %StringIteratorPrototype%","$ %StringPrototype%","$ %Symbol%","$ %SymbolPrototype%","$ %SyntaxError%","$ %SyntaxErrorPrototype%","$ %ThrowTypeError%","$ %TypedArray%","$ %TypedArrayPrototype%","$ %TypeError%","$ %TypeErrorPrototype%","$ %Uint8Array%","$ %Uint8ArrayPrototype%","$ %Uint8ClampedArray%","Uint8ClampedArray","$ %Uint8ClampedArrayPrototype%","$ %Uint16Array%","$ %Uint16ArrayPrototype%","$ %Uint32Array%","$ %Uint32ArrayPrototype%","$ %URIError%","URIError","$ %URIErrorPrototype%","$ %WeakMap%","WeakMap","$ %WeakMapPrototype%","$ %WeakSet%","WeakSet","$ %WeakSetPrototype%","allowMissing","parseHeaders","xtend","isEmpty","initParams","createXHR","_createXHR","called","readystatechange","loadFunc","getBody","getXml","isJson","errorFunc","evt","timeoutTimer","failureResponse","useXDR","rawRequest","getAllResponseHeaders","XDomainRequest","XMLHttpRequest","onprogress","onabort","ontimeout","username","password","setRequestHeader","beforeSend","send","responseXML","firefoxBugTakenEffect","doccy","topLevel","minDoc","origDefineProperty","arePropertyDescriptorsSupported","_","supportsDescriptors","getOwnPropertySymbols","scrollSetting","findScrollSetting","isValidPercentValue","_lines","_regionAnchorX","_regionAnchorY","_viewportAnchorX","_viewportAnchorY","_scroll"],"mappings":"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","file":"js/chunk-a4d50d1a.e8f6273d.js","sourcesContent":["/**\n * mux.js\n *\n * Copyright (c) Brightcove\n * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n *\n * A stream-based mp2t to mp4 converter. This utility can be used to\n * deliver mp4s to a SourceBuffer on platforms that support native\n * Media Source Extensions.\n */\n'use strict';\nvar Stream = require('../utils/stream.js'),\n  CaptionStream = require('./caption-stream'),\n  StreamTypes = require('./stream-types'),\n  TimestampRolloverStream = require('./timestamp-rollover-stream').TimestampRolloverStream;\n\nvar m2tsStreamTypes = require('./stream-types.js');\n\n// object types\nvar TransportPacketStream, TransportParseStream, ElementaryStream;\n\n// constants\nvar\n  MP2T_PACKET_LENGTH = 188, // bytes\n  SYNC_BYTE = 0x47;\n\n/**\n * Splits an incoming stream of binary data into MPEG-2 Transport\n * Stream packets.\n */\nTransportPacketStream = function() {\n  var\n    buffer = new Uint8Array(MP2T_PACKET_LENGTH),\n    bytesInBuffer = 0;\n\n  TransportPacketStream.prototype.init.call(this);\n\n   // Deliver new bytes to the stream.\n\n  /**\n   * Split a stream of data into M2TS packets\n  **/\n  this.push = function(bytes) {\n    var\n      startIndex = 0,\n      endIndex = MP2T_PACKET_LENGTH,\n      everything;\n\n    // If there are bytes remaining from the last segment, prepend them to the\n    // bytes that were pushed in\n    if (bytesInBuffer) {\n      everything = new Uint8Array(bytes.byteLength + bytesInBuffer);\n      everything.set(buffer.subarray(0, bytesInBuffer));\n      everything.set(bytes, bytesInBuffer);\n      bytesInBuffer = 0;\n    } else {\n      everything = bytes;\n    }\n\n    // While we have enough data for a packet\n    while (endIndex < everything.byteLength) {\n      // Look for a pair of start and end sync bytes in the data..\n      if (everything[startIndex] === SYNC_BYTE && everything[endIndex] === SYNC_BYTE) {\n        // We found a packet so emit it and jump one whole packet forward in\n        // the stream\n        this.trigger('data', everything.subarray(startIndex, endIndex));\n        startIndex += MP2T_PACKET_LENGTH;\n        endIndex += MP2T_PACKET_LENGTH;\n        continue;\n      }\n      // If we get here, we have somehow become de-synchronized and we need to step\n      // forward one byte at a time until we find a pair of sync bytes that denote\n      // a packet\n      startIndex++;\n      endIndex++;\n    }\n\n    // If there was some data left over at the end of the segment that couldn't\n    // possibly be a whole packet, keep it because it might be the start of a packet\n    // that continues in the next segment\n    if (startIndex < everything.byteLength) {\n      buffer.set(everything.subarray(startIndex), 0);\n      bytesInBuffer = everything.byteLength - startIndex;\n    }\n  };\n\n  /**\n   * Passes identified M2TS packets to the TransportParseStream to be parsed\n  **/\n  this.flush = function() {\n    // If the buffer contains a whole packet when we are being flushed, emit it\n    // and empty the buffer. Otherwise hold onto the data because it may be\n    // important for decoding the next segment\n    if (bytesInBuffer === MP2T_PACKET_LENGTH && buffer[0] === SYNC_BYTE) {\n      this.trigger('data', buffer);\n      bytesInBuffer = 0;\n    }\n    this.trigger('done');\n  };\n};\nTransportPacketStream.prototype = new Stream();\n\n/**\n * Accepts an MP2T TransportPacketStream and emits data events with parsed\n * forms of the individual transport stream packets.\n */\nTransportParseStream = function() {\n  var parsePsi, parsePat, parsePmt, self;\n  TransportParseStream.prototype.init.call(this);\n  self = this;\n\n  this.packetsWaitingForPmt = [];\n  this.programMapTable = undefined;\n\n  parsePsi = function(payload, psi) {\n    var offset = 0;\n\n    // PSI packets may be split into multiple sections and those\n    // sections may be split into multiple packets. If a PSI\n    // section starts in this packet, the payload_unit_start_indicator\n    // will be true and the first byte of the payload will indicate\n    // the offset from the current position to the start of the\n    // section.\n    if (psi.payloadUnitStartIndicator) {\n      offset += payload[offset] + 1;\n    }\n\n    if (psi.type === 'pat') {\n      parsePat(payload.subarray(offset), psi);\n    } else {\n      parsePmt(payload.subarray(offset), psi);\n    }\n  };\n\n  parsePat = function(payload, pat) {\n    pat.section_number = payload[7]; // eslint-disable-line camelcase\n    pat.last_section_number = payload[8]; // eslint-disable-line camelcase\n\n    // skip the PSI header and parse the first PMT entry\n    self.pmtPid = (payload[10] & 0x1F) << 8 | payload[11];\n    pat.pmtPid = self.pmtPid;\n  };\n\n  /**\n   * Parse out the relevant fields of a Program Map Table (PMT).\n   * @param payload {Uint8Array} the PMT-specific portion of an MP2T\n   * packet. The first byte in this array should be the table_id\n   * field.\n   * @param pmt {object} the object that should be decorated with\n   * fields parsed from the PMT.\n   */\n  parsePmt = function(payload, pmt) {\n    var sectionLength, tableEnd, programInfoLength, offset;\n\n    // PMTs can be sent ahead of the time when they should actually\n    // take effect. We don't believe this should ever be the case\n    // for HLS but we'll ignore \"forward\" PMT declarations if we see\n    // them. Future PMT declarations have the current_next_indicator\n    // set to zero.\n    if (!(payload[5] & 0x01)) {\n      return;\n    }\n\n    // overwrite any existing program map table\n    self.programMapTable = {\n      video: null,\n      audio: null,\n      'timed-metadata': {}\n    };\n\n    // the mapping table ends at the end of the current section\n    sectionLength = (payload[1] & 0x0f) << 8 | payload[2];\n    tableEnd = 3 + sectionLength - 4;\n\n    // to determine where the table is, we have to figure out how\n    // long the program info descriptors are\n    programInfoLength = (payload[10] & 0x0f) << 8 | payload[11];\n\n    // advance the offset to the first entry in the mapping table\n    offset = 12 + programInfoLength;\n    while (offset < tableEnd) {\n      var streamType = payload[offset];\n      var pid = (payload[offset + 1] & 0x1F) << 8 | payload[offset + 2];\n\n      // only map a single elementary_pid for audio and video stream types\n      // TODO: should this be done for metadata too? for now maintain behavior of\n      //       multiple metadata streams\n      if (streamType === StreamTypes.H264_STREAM_TYPE &&\n          self.programMapTable.video === null) {\n        self.programMapTable.video = pid;\n      } else if (streamType === StreamTypes.ADTS_STREAM_TYPE &&\n                 self.programMapTable.audio === null) {\n        self.programMapTable.audio = pid;\n      } else if (streamType === StreamTypes.METADATA_STREAM_TYPE) {\n        // map pid to stream type for metadata streams\n        self.programMapTable['timed-metadata'][pid] = streamType;\n      }\n\n      // move to the next table entry\n      // skip past the elementary stream descriptors, if present\n      offset += ((payload[offset + 3] & 0x0F) << 8 | payload[offset + 4]) + 5;\n    }\n\n    // record the map on the packet as well\n    pmt.programMapTable = self.programMapTable;\n  };\n\n  /**\n   * Deliver a new MP2T packet to the next stream in the pipeline.\n   */\n  this.push = function(packet) {\n    var\n      result = {},\n      offset = 4;\n\n    result.payloadUnitStartIndicator = !!(packet[1] & 0x40);\n\n    // pid is a 13-bit field starting at the last bit of packet[1]\n    result.pid = packet[1] & 0x1f;\n    result.pid <<= 8;\n    result.pid |= packet[2];\n\n    // if an adaption field is present, its length is specified by the\n    // fifth byte of the TS packet header. The adaptation field is\n    // used to add stuffing to PES packets that don't fill a complete\n    // TS packet, and to specify some forms of timing and control data\n    // that we do not currently use.\n    if (((packet[3] & 0x30) >>> 4) > 0x01) {\n      offset += packet[offset] + 1;\n    }\n\n    // parse the rest of the packet based on the type\n    if (result.pid === 0) {\n      result.type = 'pat';\n      parsePsi(packet.subarray(offset), result);\n      this.trigger('data', result);\n    } else if (result.pid === this.pmtPid) {\n      result.type = 'pmt';\n      parsePsi(packet.subarray(offset), result);\n      this.trigger('data', result);\n\n      // if there are any packets waiting for a PMT to be found, process them now\n      while (this.packetsWaitingForPmt.length) {\n        this.processPes_.apply(this, this.packetsWaitingForPmt.shift());\n      }\n    } else if (this.programMapTable === undefined) {\n      // When we have not seen a PMT yet, defer further processing of\n      // PES packets until one has been parsed\n      this.packetsWaitingForPmt.push([packet, offset, result]);\n    } else {\n      this.processPes_(packet, offset, result);\n    }\n  };\n\n  this.processPes_ = function(packet, offset, result) {\n    // set the appropriate stream type\n    if (result.pid === this.programMapTable.video) {\n      result.streamType = StreamTypes.H264_STREAM_TYPE;\n    } else if (result.pid === this.programMapTable.audio) {\n      result.streamType = StreamTypes.ADTS_STREAM_TYPE;\n    } else {\n      // if not video or audio, it is timed-metadata or unknown\n      // if unknown, streamType will be undefined\n      result.streamType = this.programMapTable['timed-metadata'][result.pid];\n    }\n\n    result.type = 'pes';\n    result.data = packet.subarray(offset);\n\n    this.trigger('data', result);\n  };\n\n};\nTransportParseStream.prototype = new Stream();\nTransportParseStream.STREAM_TYPES  = {\n  h264: 0x1b,\n  adts: 0x0f\n};\n\n/**\n * Reconsistutes program elementary stream (PES) packets from parsed\n * transport stream packets. That is, if you pipe an\n * mp2t.TransportParseStream into a mp2t.ElementaryStream, the output\n * events will be events which capture the bytes for individual PES\n * packets plus relevant metadata that has been extracted from the\n * container.\n */\nElementaryStream = function() {\n  var\n    self = this,\n    // PES packet fragments\n    video = {\n      data: [],\n      size: 0\n    },\n    audio = {\n      data: [],\n      size: 0\n    },\n    timedMetadata = {\n      data: [],\n      size: 0\n    },\n    parsePes = function(payload, pes) {\n      var ptsDtsFlags;\n\n      // get the packet length, this will be 0 for video\n      pes.packetLength = 6 + ((payload[4] << 8) | payload[5]);\n\n      // find out if this packets starts a new keyframe\n      pes.dataAlignmentIndicator = (payload[6] & 0x04) !== 0;\n      // PES packets may be annotated with a PTS value, or a PTS value\n      // and a DTS value. Determine what combination of values is\n      // available to work with.\n      ptsDtsFlags = payload[7];\n\n      // PTS and DTS are normally stored as a 33-bit number.  Javascript\n      // performs all bitwise operations on 32-bit integers but javascript\n      // supports a much greater range (52-bits) of integer using standard\n      // mathematical operations.\n      // We construct a 31-bit value using bitwise operators over the 31\n      // most significant bits and then multiply by 4 (equal to a left-shift\n      // of 2) before we add the final 2 least significant bits of the\n      // timestamp (equal to an OR.)\n      if (ptsDtsFlags & 0xC0) {\n        // the PTS and DTS are not written out directly. For information\n        // on how they are encoded, see\n        // http://dvd.sourceforge.net/dvdinfo/pes-hdr.html\n        pes.pts = (payload[9] & 0x0E) << 27 |\n          (payload[10] & 0xFF) << 20 |\n          (payload[11] & 0xFE) << 12 |\n          (payload[12] & 0xFF) <<  5 |\n          (payload[13] & 0xFE) >>>  3;\n        pes.pts *= 4; // Left shift by 2\n        pes.pts += (payload[13] & 0x06) >>> 1; // OR by the two LSBs\n        pes.dts = pes.pts;\n        if (ptsDtsFlags & 0x40) {\n          pes.dts = (payload[14] & 0x0E) << 27 |\n            (payload[15] & 0xFF) << 20 |\n            (payload[16] & 0xFE) << 12 |\n            (payload[17] & 0xFF) << 5 |\n            (payload[18] & 0xFE) >>> 3;\n          pes.dts *= 4; // Left shift by 2\n          pes.dts += (payload[18] & 0x06) >>> 1; // OR by the two LSBs\n        }\n      }\n      // the data section starts immediately after the PES header.\n      // pes_header_data_length specifies the number of header bytes\n      // that follow the last byte of the field.\n      pes.data = payload.subarray(9 + payload[8]);\n    },\n    /**\n      * Pass completely parsed PES packets to the next stream in the pipeline\n     **/\n    flushStream = function(stream, type, forceFlush) {\n      var\n        packetData = new Uint8Array(stream.size),\n        event = {\n          type: type\n        },\n        i = 0,\n        offset = 0,\n        packetFlushable = false,\n        fragment;\n\n      // do nothing if there is not enough buffered data for a complete\n      // PES header\n      if (!stream.data.length || stream.size < 9) {\n        return;\n      }\n      event.trackId = stream.data[0].pid;\n\n      // reassemble the packet\n      for (i = 0; i < stream.data.length; i++) {\n        fragment = stream.data[i];\n\n        packetData.set(fragment.data, offset);\n        offset += fragment.data.byteLength;\n      }\n\n      // parse assembled packet's PES header\n      parsePes(packetData, event);\n\n      // non-video PES packets MUST have a non-zero PES_packet_length\n      // check that there is enough stream data to fill the packet\n      packetFlushable = type === 'video' || event.packetLength <= stream.size;\n\n      // flush pending packets if the conditions are right\n      if (forceFlush || packetFlushable) {\n        stream.size = 0;\n        stream.data.length = 0;\n      }\n\n      // only emit packets that are complete. this is to avoid assembling\n      // incomplete PES packets due to poor segmentation\n      if (packetFlushable) {\n        self.trigger('data', event);\n      }\n    };\n\n  ElementaryStream.prototype.init.call(this);\n\n  /**\n   * Identifies M2TS packet types and parses PES packets using metadata\n   * parsed from the PMT\n   **/\n  this.push = function(data) {\n    ({\n      pat: function() {\n        // we have to wait for the PMT to arrive as well before we\n        // have any meaningful metadata\n      },\n      pes: function() {\n        var stream, streamType;\n\n        switch (data.streamType) {\n        case StreamTypes.H264_STREAM_TYPE:\n        case m2tsStreamTypes.H264_STREAM_TYPE:\n          stream = video;\n          streamType = 'video';\n          break;\n        case StreamTypes.ADTS_STREAM_TYPE:\n          stream = audio;\n          streamType = 'audio';\n          break;\n        case StreamTypes.METADATA_STREAM_TYPE:\n          stream = timedMetadata;\n          streamType = 'timed-metadata';\n          break;\n        default:\n          // ignore unknown stream types\n          return;\n        }\n\n        // if a new packet is starting, we can flush the completed\n        // packet\n        if (data.payloadUnitStartIndicator) {\n          flushStream(stream, streamType, true);\n        }\n\n        // buffer this fragment until we are sure we've received the\n        // complete payload\n        stream.data.push(data);\n        stream.size += data.data.byteLength;\n      },\n      pmt: function() {\n        var\n          event = {\n            type: 'metadata',\n            tracks: []\n          },\n          programMapTable = data.programMapTable;\n\n        // translate audio and video streams to tracks\n        if (programMapTable.video !== null) {\n          event.tracks.push({\n            timelineStartInfo: {\n              baseMediaDecodeTime: 0\n            },\n            id: +programMapTable.video,\n            codec: 'avc',\n            type: 'video'\n          });\n        }\n        if (programMapTable.audio !== null) {\n          event.tracks.push({\n            timelineStartInfo: {\n              baseMediaDecodeTime: 0\n            },\n            id: +programMapTable.audio,\n            codec: 'adts',\n            type: 'audio'\n          });\n        }\n\n        self.trigger('data', event);\n      }\n    })[data.type]();\n  };\n\n  /**\n   * Flush any remaining input. Video PES packets may be of variable\n   * length. Normally, the start of a new video packet can trigger the\n   * finalization of the previous packet. That is not possible if no\n   * more video is forthcoming, however. In that case, some other\n   * mechanism (like the end of the file) has to be employed. When it is\n   * clear that no additional data is forthcoming, calling this method\n   * will flush the buffered packets.\n   */\n  this.flush = function() {\n    // !!THIS ORDER IS IMPORTANT!!\n    // video first then audio\n    flushStream(video, 'video');\n    flushStream(audio, 'audio');\n    flushStream(timedMetadata, 'timed-metadata');\n    this.trigger('done');\n  };\n};\nElementaryStream.prototype = new Stream();\n\nvar m2ts = {\n  PAT_PID: 0x0000,\n  MP2T_PACKET_LENGTH: MP2T_PACKET_LENGTH,\n  TransportPacketStream: TransportPacketStream,\n  TransportParseStream: TransportParseStream,\n  ElementaryStream: ElementaryStream,\n  TimestampRolloverStream: TimestampRolloverStream,\n  CaptionStream: CaptionStream.CaptionStream,\n  Cea608Stream: CaptionStream.Cea608Stream,\n  MetadataStream: require('./metadata-stream')\n};\n\nfor (var type in StreamTypes) {\n  if (StreamTypes.hasOwnProperty(type)) {\n    m2ts[type] = StreamTypes[type];\n  }\n}\n\nmodule.exports = m2ts;\n","'use strict';\n\nvar GetIntrinsic = require('./GetIntrinsic');\n\nvar $Object = GetIntrinsic('%Object%');\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar $String = GetIntrinsic('%String%');\n\nvar assertRecord = require('./helpers/assertRecord');\nvar $isNaN = require('./helpers/isNaN');\nvar $isFinite = require('./helpers/isFinite');\n\nvar sign = require('./helpers/sign');\nvar mod = require('./helpers/mod');\n\nvar IsCallable = require('is-callable');\nvar toPrimitive = require('es-to-primitive/es5');\n\nvar has = require('has');\n\n// https://es5.github.io/#x9\nvar ES5 = {\n\tToPrimitive: toPrimitive,\n\n\tToBoolean: function ToBoolean(value) {\n\t\treturn !!value;\n\t},\n\tToNumber: function ToNumber(value) {\n\t\treturn +value; // eslint-disable-line no-implicit-coercion\n\t},\n\tToInteger: function ToInteger(value) {\n\t\tvar number = this.ToNumber(value);\n\t\tif ($isNaN(number)) { return 0; }\n\t\tif (number === 0 || !$isFinite(number)) { return number; }\n\t\treturn sign(number) * Math.floor(Math.abs(number));\n\t},\n\tToInt32: function ToInt32(x) {\n\t\treturn this.ToNumber(x) >> 0;\n\t},\n\tToUint32: function ToUint32(x) {\n\t\treturn this.ToNumber(x) >>> 0;\n\t},\n\tToUint16: function ToUint16(value) {\n\t\tvar number = this.ToNumber(value);\n\t\tif ($isNaN(number) || number === 0 || !$isFinite(number)) { return 0; }\n\t\tvar posInt = sign(number) * Math.floor(Math.abs(number));\n\t\treturn mod(posInt, 0x10000);\n\t},\n\tToString: function ToString(value) {\n\t\treturn $String(value);\n\t},\n\tToObject: function ToObject(value) {\n\t\tthis.CheckObjectCoercible(value);\n\t\treturn $Object(value);\n\t},\n\tCheckObjectCoercible: function CheckObjectCoercible(value, optMessage) {\n\t\t/* jshint eqnull:true */\n\t\tif (value == null) {\n\t\t\tthrow new $TypeError(optMessage || 'Cannot call method on ' + value);\n\t\t}\n\t\treturn value;\n\t},\n\tIsCallable: IsCallable,\n\tSameValue: function SameValue(x, y) {\n\t\tif (x === y) { // 0 === -0, but they are not identical.\n\t\t\tif (x === 0) { return 1 / x === 1 / y; }\n\t\t\treturn true;\n\t\t}\n\t\treturn $isNaN(x) && $isNaN(y);\n\t},\n\n\t// https://www.ecma-international.org/ecma-262/5.1/#sec-8\n\tType: function Type(x) {\n\t\tif (x === null) {\n\t\t\treturn 'Null';\n\t\t}\n\t\tif (typeof x === 'undefined') {\n\t\t\treturn 'Undefined';\n\t\t}\n\t\tif (typeof x === 'function' || typeof x === 'object') {\n\t\t\treturn 'Object';\n\t\t}\n\t\tif (typeof x === 'number') {\n\t\t\treturn 'Number';\n\t\t}\n\t\tif (typeof x === 'boolean') {\n\t\t\treturn 'Boolean';\n\t\t}\n\t\tif (typeof x === 'string') {\n\t\t\treturn 'String';\n\t\t}\n\t},\n\n\t// https://ecma-international.org/ecma-262/6.0/#sec-property-descriptor-specification-type\n\tIsPropertyDescriptor: function IsPropertyDescriptor(Desc) {\n\t\tif (this.Type(Desc) !== 'Object') {\n\t\t\treturn false;\n\t\t}\n\t\tvar allowed = {\n\t\t\t'[[Configurable]]': true,\n\t\t\t'[[Enumerable]]': true,\n\t\t\t'[[Get]]': true,\n\t\t\t'[[Set]]': true,\n\t\t\t'[[Value]]': true,\n\t\t\t'[[Writable]]': true\n\t\t};\n\n\t\tfor (var key in Desc) { // eslint-disable-line\n\t\t\tif (has(Desc, key) && !allowed[key]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tvar isData = has(Desc, '[[Value]]');\n\t\tvar IsAccessor = has(Desc, '[[Get]]') || has(Desc, '[[Set]]');\n\t\tif (isData && IsAccessor) {\n\t\t\tthrow new $TypeError('Property Descriptors may not be both accessor and data descriptors');\n\t\t}\n\t\treturn true;\n\t},\n\n\t// https://ecma-international.org/ecma-262/5.1/#sec-8.10.1\n\tIsAccessorDescriptor: function IsAccessorDescriptor(Desc) {\n\t\tif (typeof Desc === 'undefined') {\n\t\t\treturn false;\n\t\t}\n\n\t\tassertRecord(this, 'Property Descriptor', 'Desc', Desc);\n\n\t\tif (!has(Desc, '[[Get]]') && !has(Desc, '[[Set]]')) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t// https://ecma-international.org/ecma-262/5.1/#sec-8.10.2\n\tIsDataDescriptor: function IsDataDescriptor(Desc) {\n\t\tif (typeof Desc === 'undefined') {\n\t\t\treturn false;\n\t\t}\n\n\t\tassertRecord(this, 'Property Descriptor', 'Desc', Desc);\n\n\t\tif (!has(Desc, '[[Value]]') && !has(Desc, '[[Writable]]')) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t// https://ecma-international.org/ecma-262/5.1/#sec-8.10.3\n\tIsGenericDescriptor: function IsGenericDescriptor(Desc) {\n\t\tif (typeof Desc === 'undefined') {\n\t\t\treturn false;\n\t\t}\n\n\t\tassertRecord(this, 'Property Descriptor', 'Desc', Desc);\n\n\t\tif (!this.IsAccessorDescriptor(Desc) && !this.IsDataDescriptor(Desc)) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t},\n\n\t// https://ecma-international.org/ecma-262/5.1/#sec-8.10.4\n\tFromPropertyDescriptor: function FromPropertyDescriptor(Desc) {\n\t\tif (typeof Desc === 'undefined') {\n\t\t\treturn Desc;\n\t\t}\n\n\t\tassertRecord(this, 'Property Descriptor', 'Desc', Desc);\n\n\t\tif (this.IsDataDescriptor(Desc)) {\n\t\t\treturn {\n\t\t\t\tvalue: Desc['[[Value]]'],\n\t\t\t\twritable: !!Desc['[[Writable]]'],\n\t\t\t\tenumerable: !!Desc['[[Enumerable]]'],\n\t\t\t\tconfigurable: !!Desc['[[Configurable]]']\n\t\t\t};\n\t\t} else if (this.IsAccessorDescriptor(Desc)) {\n\t\t\treturn {\n\t\t\t\tget: Desc['[[Get]]'],\n\t\t\t\tset: Desc['[[Set]]'],\n\t\t\t\tenumerable: !!Desc['[[Enumerable]]'],\n\t\t\t\tconfigurable: !!Desc['[[Configurable]]']\n\t\t\t};\n\t\t} else {\n\t\t\tthrow new $TypeError('FromPropertyDescriptor must be called with a fully populated Property Descriptor');\n\t\t}\n\t},\n\n\t// https://ecma-international.org/ecma-262/5.1/#sec-8.10.5\n\tToPropertyDescriptor: function ToPropertyDescriptor(Obj) {\n\t\tif (this.Type(Obj) !== 'Object') {\n\t\t\tthrow new $TypeError('ToPropertyDescriptor requires an object');\n\t\t}\n\n\t\tvar desc = {};\n\t\tif (has(Obj, 'enumerable')) {\n\t\t\tdesc['[[Enumerable]]'] = this.ToBoolean(Obj.enumerable);\n\t\t}\n\t\tif (has(Obj, 'configurable')) {\n\t\t\tdesc['[[Configurable]]'] = this.ToBoolean(Obj.configurable);\n\t\t}\n\t\tif (has(Obj, 'value')) {\n\t\t\tdesc['[[Value]]'] = Obj.value;\n\t\t}\n\t\tif (has(Obj, 'writable')) {\n\t\t\tdesc['[[Writable]]'] = this.ToBoolean(Obj.writable);\n\t\t}\n\t\tif (has(Obj, 'get')) {\n\t\t\tvar getter = Obj.get;\n\t\t\tif (typeof getter !== 'undefined' && !this.IsCallable(getter)) {\n\t\t\t\tthrow new TypeError('getter must be a function');\n\t\t\t}\n\t\t\tdesc['[[Get]]'] = getter;\n\t\t}\n\t\tif (has(Obj, 'set')) {\n\t\t\tvar setter = Obj.set;\n\t\t\tif (typeof setter !== 'undefined' && !this.IsCallable(setter)) {\n\t\t\t\tthrow new $TypeError('setter must be a function');\n\t\t\t}\n\t\t\tdesc['[[Set]]'] = setter;\n\t\t}\n\n\t\tif ((has(desc, '[[Get]]') || has(desc, '[[Set]]')) && (has(desc, '[[Value]]') || has(desc, '[[Writable]]'))) {\n\t\t\tthrow new $TypeError('Invalid property descriptor. Cannot both specify accessors and a value or writable attribute');\n\t\t}\n\t\treturn desc;\n\t}\n};\n\nmodule.exports = ES5;\n","'use strict';\n\nvar implementation = require('./implementation');\n\nmodule.exports = Function.prototype.bind || implementation;\n","/**\n * mux.js\n *\n * Copyright (c) Brightcove\n * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n */\nvar coneOfSilence = require('../data/silence');\nvar clock = require('../utils/clock');\n\nvar ONE_SECOND_IN_TS = 90000; // 90kHz clock\n\n/**\n * Sum the `byteLength` properties of the data in each AAC frame\n */\nvar sumFrameByteLengths = function(array) {\n  var\n    i,\n    currentObj,\n    sum = 0;\n\n  // sum the byteLength's all each nal unit in the frame\n  for (i = 0; i < array.length; i++) {\n    currentObj = array[i];\n    sum += currentObj.data.byteLength;\n  }\n\n  return sum;\n};\n\n// Possibly pad (prefix) the audio track with silence if appending this track\n// would lead to the introduction of a gap in the audio buffer\nvar prefixWithSilence = function(\n  track,\n  frames,\n  audioAppendStartTs,\n  videoBaseMediaDecodeTime\n) {\n  var\n    baseMediaDecodeTimeTs,\n    frameDuration = 0,\n    audioGapDuration = 0,\n    audioFillFrameCount = 0,\n    audioFillDuration = 0,\n    silentFrame,\n    i;\n\n  if (!frames.length) {\n    return;\n  }\n\n  baseMediaDecodeTimeTs =\n    clock.audioTsToVideoTs(track.baseMediaDecodeTime, track.samplerate);\n  // determine frame clock duration based on sample rate, round up to avoid overfills\n  frameDuration = Math.ceil(ONE_SECOND_IN_TS / (track.samplerate / 1024));\n\n  if (audioAppendStartTs && videoBaseMediaDecodeTime) {\n    // insert the shortest possible amount (audio gap or audio to video gap)\n    audioGapDuration =\n      baseMediaDecodeTimeTs - Math.max(audioAppendStartTs, videoBaseMediaDecodeTime);\n    // number of full frames in the audio gap\n    audioFillFrameCount = Math.floor(audioGapDuration / frameDuration);\n    audioFillDuration = audioFillFrameCount * frameDuration;\n  }\n\n  // don't attempt to fill gaps smaller than a single frame or larger\n  // than a half second\n  if (audioFillFrameCount < 1 || audioFillDuration > ONE_SECOND_IN_TS / 2) {\n    return;\n  }\n\n  silentFrame = coneOfSilence[track.samplerate];\n\n  if (!silentFrame) {\n    // we don't have a silent frame pregenerated for the sample rate, so use a frame\n    // from the content instead\n    silentFrame = frames[0].data;\n  }\n\n  for (i = 0; i < audioFillFrameCount; i++) {\n    frames.splice(i, 0, {\n      data: silentFrame\n    });\n  }\n\n  track.baseMediaDecodeTime -=\n    Math.floor(clock.videoTsToAudioTs(audioFillDuration, track.samplerate));\n};\n\n// If the audio segment extends before the earliest allowed dts\n// value, remove AAC frames until starts at or after the earliest\n// allowed DTS so that we don't end up with a negative baseMedia-\n// DecodeTime for the audio track\nvar trimAdtsFramesByEarliestDts = function(adtsFrames, track, earliestAllowedDts) {\n  if (track.minSegmentDts >= earliestAllowedDts) {\n    return adtsFrames;\n  }\n\n  // We will need to recalculate the earliest segment Dts\n  track.minSegmentDts = Infinity;\n\n  return adtsFrames.filter(function(currentFrame) {\n    // If this is an allowed frame, keep it and record it's Dts\n    if (currentFrame.dts >= earliestAllowedDts) {\n      track.minSegmentDts = Math.min(track.minSegmentDts, currentFrame.dts);\n      track.minSegmentPts = track.minSegmentDts;\n      return true;\n    }\n    // Otherwise, discard it\n    return false;\n  });\n};\n\n// generate the track's raw mdat data from an array of frames\nvar generateSampleTable = function(frames) {\n  var\n    i,\n    currentFrame,\n    samples = [];\n\n  for (i = 0; i < frames.length; i++) {\n    currentFrame = frames[i];\n    samples.push({\n      size: currentFrame.data.byteLength,\n      duration: 1024 // For AAC audio, all samples contain 1024 samples\n    });\n  }\n  return samples;\n};\n\n// generate the track's sample table from an array of frames\nvar concatenateFrameData = function(frames) {\n  var\n    i,\n    currentFrame,\n    dataOffset = 0,\n    data = new Uint8Array(sumFrameByteLengths(frames));\n\n  for (i = 0; i < frames.length; i++) {\n    currentFrame = frames[i];\n\n    data.set(currentFrame.data, dataOffset);\n    dataOffset += currentFrame.data.byteLength;\n  }\n  return data;\n};\n\nmodule.exports = {\n  prefixWithSilence: prefixWithSilence,\n  trimAdtsFramesByEarliestDts: trimAdtsFramesByEarliestDts,\n  generateSampleTable: generateSampleTable,\n  concatenateFrameData: concatenateFrameData\n};\n","/**\n * mux.js\n *\n * Copyright (c) Brightcove\n * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n *\n * Functions that generate fragmented MP4s suitable for use with Media\n * Source Extensions.\n */\n'use strict';\n\nvar UINT32_MAX = Math.pow(2, 32) - 1;\n\nvar box, dinf, esds, ftyp, mdat, mfhd, minf, moof, moov, mvex, mvhd,\n    trak, tkhd, mdia, mdhd, hdlr, sdtp, stbl, stsd, traf, trex,\n    trun, types, MAJOR_BRAND, MINOR_VERSION, AVC1_BRAND, VIDEO_HDLR,\n    AUDIO_HDLR, HDLR_TYPES, VMHD, SMHD, DREF, STCO, STSC, STSZ, STTS;\n\n// pre-calculate constants\n(function() {\n  var i;\n  types = {\n    avc1: [], // codingname\n    avcC: [],\n    btrt: [],\n    dinf: [],\n    dref: [],\n    esds: [],\n    ftyp: [],\n    hdlr: [],\n    mdat: [],\n    mdhd: [],\n    mdia: [],\n    mfhd: [],\n    minf: [],\n    moof: [],\n    moov: [],\n    mp4a: [], // codingname\n    mvex: [],\n    mvhd: [],\n    sdtp: [],\n    smhd: [],\n    stbl: [],\n    stco: [],\n    stsc: [],\n    stsd: [],\n    stsz: [],\n    stts: [],\n    styp: [],\n    tfdt: [],\n    tfhd: [],\n    traf: [],\n    trak: [],\n    trun: [],\n    trex: [],\n    tkhd: [],\n    vmhd: []\n  };\n\n  // In environments where Uint8Array is undefined (e.g., IE8), skip set up so that we\n  // don't throw an error\n  if (typeof Uint8Array === 'undefined') {\n    return;\n  }\n\n  for (i in types) {\n    if (types.hasOwnProperty(i)) {\n      types[i] = [\n        i.charCodeAt(0),\n        i.charCodeAt(1),\n        i.charCodeAt(2),\n        i.charCodeAt(3)\n      ];\n    }\n  }\n\n  MAJOR_BRAND = new Uint8Array([\n    'i'.charCodeAt(0),\n    's'.charCodeAt(0),\n    'o'.charCodeAt(0),\n    'm'.charCodeAt(0)\n  ]);\n  AVC1_BRAND = new Uint8Array([\n    'a'.charCodeAt(0),\n    'v'.charCodeAt(0),\n    'c'.charCodeAt(0),\n    '1'.charCodeAt(0)\n  ]);\n  MINOR_VERSION = new Uint8Array([0, 0, 0, 1]);\n  VIDEO_HDLR = new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00, // pre_defined\n    0x76, 0x69, 0x64, 0x65, // handler_type: 'vide'\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x56, 0x69, 0x64, 0x65,\n    0x6f, 0x48, 0x61, 0x6e,\n    0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'VideoHandler'\n  ]);\n  AUDIO_HDLR = new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00, // pre_defined\n    0x73, 0x6f, 0x75, 0x6e, // handler_type: 'soun'\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x53, 0x6f, 0x75, 0x6e,\n    0x64, 0x48, 0x61, 0x6e,\n    0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'SoundHandler'\n  ]);\n  HDLR_TYPES = {\n    video: VIDEO_HDLR,\n    audio: AUDIO_HDLR\n  };\n  DREF = new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x01, // entry_count\n    0x00, 0x00, 0x00, 0x0c, // entry_size\n    0x75, 0x72, 0x6c, 0x20, // 'url' type\n    0x00, // version 0\n    0x00, 0x00, 0x01 // entry_flags\n  ]);\n  SMHD = new Uint8Array([\n    0x00,             // version\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00,       // balance, 0 means centered\n    0x00, 0x00        // reserved\n  ]);\n  STCO = new Uint8Array([\n    0x00, // version\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00 // entry_count\n  ]);\n  STSC = STCO;\n  STSZ = new Uint8Array([\n    0x00, // version\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00, // sample_size\n    0x00, 0x00, 0x00, 0x00 // sample_count\n  ]);\n  STTS = STCO;\n  VMHD = new Uint8Array([\n    0x00, // version\n    0x00, 0x00, 0x01, // flags\n    0x00, 0x00, // graphicsmode\n    0x00, 0x00,\n    0x00, 0x00,\n    0x00, 0x00 // opcolor\n  ]);\n}());\n\nbox = function(type) {\n  var\n    payload = [],\n    size = 0,\n    i,\n    result,\n    view;\n\n  for (i = 1; i < arguments.length; i++) {\n    payload.push(arguments[i]);\n  }\n\n  i = payload.length;\n\n  // calculate the total size we need to allocate\n  while (i--) {\n    size += payload[i].byteLength;\n  }\n  result = new Uint8Array(size + 8);\n  view = new DataView(result.buffer, result.byteOffset, result.byteLength);\n  view.setUint32(0, result.byteLength);\n  result.set(type, 4);\n\n  // copy the payload into the result\n  for (i = 0, size = 8; i < payload.length; i++) {\n    result.set(payload[i], size);\n    size += payload[i].byteLength;\n  }\n  return result;\n};\n\ndinf = function() {\n  return box(types.dinf, box(types.dref, DREF));\n};\n\nesds = function(track) {\n  return box(types.esds, new Uint8Array([\n    0x00, // version\n    0x00, 0x00, 0x00, // flags\n\n    // ES_Descriptor\n    0x03, // tag, ES_DescrTag\n    0x19, // length\n    0x00, 0x00, // ES_ID\n    0x00, // streamDependenceFlag, URL_flag, reserved, streamPriority\n\n    // DecoderConfigDescriptor\n    0x04, // tag, DecoderConfigDescrTag\n    0x11, // length\n    0x40, // object type\n    0x15,  // streamType\n    0x00, 0x06, 0x00, // bufferSizeDB\n    0x00, 0x00, 0xda, 0xc0, // maxBitrate\n    0x00, 0x00, 0xda, 0xc0, // avgBitrate\n\n    // DecoderSpecificInfo\n    0x05, // tag, DecoderSpecificInfoTag\n    0x02, // length\n    // ISO/IEC 14496-3, AudioSpecificConfig\n    // for samplingFrequencyIndex see ISO/IEC 13818-7:2006, 8.1.3.2.2, Table 35\n    (track.audioobjecttype << 3) | (track.samplingfrequencyindex >>> 1),\n    (track.samplingfrequencyindex << 7) | (track.channelcount << 3),\n    0x06, 0x01, 0x02 // GASpecificConfig\n  ]));\n};\n\nftyp = function() {\n  return box(types.ftyp, MAJOR_BRAND, MINOR_VERSION, MAJOR_BRAND, AVC1_BRAND);\n};\n\nhdlr = function(type) {\n  return box(types.hdlr, HDLR_TYPES[type]);\n};\nmdat = function(data) {\n  return box(types.mdat, data);\n};\nmdhd = function(track) {\n  var result = new Uint8Array([\n    0x00,                   // version 0\n    0x00, 0x00, 0x00,       // flags\n    0x00, 0x00, 0x00, 0x02, // creation_time\n    0x00, 0x00, 0x00, 0x03, // modification_time\n    0x00, 0x01, 0x5f, 0x90, // timescale, 90,000 \"ticks\" per second\n\n    (track.duration >>> 24) & 0xFF,\n    (track.duration >>> 16) & 0xFF,\n    (track.duration >>>  8) & 0xFF,\n    track.duration & 0xFF,  // duration\n    0x55, 0xc4,             // 'und' language (undetermined)\n    0x00, 0x00\n  ]);\n\n  // Use the sample rate from the track metadata, when it is\n  // defined. The sample rate can be parsed out of an ADTS header, for\n  // instance.\n  if (track.samplerate) {\n    result[12] = (track.samplerate >>> 24) & 0xFF;\n    result[13] = (track.samplerate >>> 16) & 0xFF;\n    result[14] = (track.samplerate >>>  8) & 0xFF;\n    result[15] = (track.samplerate)        & 0xFF;\n  }\n\n  return box(types.mdhd, result);\n};\nmdia = function(track) {\n  return box(types.mdia, mdhd(track), hdlr(track.type), minf(track));\n};\nmfhd = function(sequenceNumber) {\n  return box(types.mfhd, new Uint8Array([\n    0x00,\n    0x00, 0x00, 0x00, // flags\n    (sequenceNumber & 0xFF000000) >> 24,\n    (sequenceNumber & 0xFF0000) >> 16,\n    (sequenceNumber & 0xFF00) >> 8,\n    sequenceNumber & 0xFF // sequence_number\n  ]));\n};\nminf = function(track) {\n  return box(types.minf,\n             track.type === 'video' ? box(types.vmhd, VMHD) : box(types.smhd, SMHD),\n             dinf(),\n             stbl(track));\n};\nmoof = function(sequenceNumber, tracks) {\n  var\n    trackFragments = [],\n    i = tracks.length;\n  // build traf boxes for each track fragment\n  while (i--) {\n    trackFragments[i] = traf(tracks[i]);\n  }\n  return box.apply(null, [\n    types.moof,\n    mfhd(sequenceNumber)\n  ].concat(trackFragments));\n};\n/**\n * Returns a movie box.\n * @param tracks {array} the tracks associated with this movie\n * @see ISO/IEC 14496-12:2012(E), section 8.2.1\n */\nmoov = function(tracks) {\n  var\n    i = tracks.length,\n    boxes = [];\n\n  while (i--) {\n    boxes[i] = trak(tracks[i]);\n  }\n\n  return box.apply(null, [types.moov, mvhd(0xffffffff)].concat(boxes).concat(mvex(tracks)));\n};\nmvex = function(tracks) {\n  var\n    i = tracks.length,\n    boxes = [];\n\n  while (i--) {\n    boxes[i] = trex(tracks[i]);\n  }\n  return box.apply(null, [types.mvex].concat(boxes));\n};\nmvhd = function(duration) {\n  var\n    bytes = new Uint8Array([\n      0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x01, // creation_time\n      0x00, 0x00, 0x00, 0x02, // modification_time\n      0x00, 0x01, 0x5f, 0x90, // timescale, 90,000 \"ticks\" per second\n      (duration & 0xFF000000) >> 24,\n      (duration & 0xFF0000) >> 16,\n      (duration & 0xFF00) >> 8,\n      duration & 0xFF, // duration\n      0x00, 0x01, 0x00, 0x00, // 1.0 rate\n      0x01, 0x00, // 1.0 volume\n      0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x01, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x40, 0x00, 0x00, 0x00, // transformation: unity matrix\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, // pre_defined\n      0xff, 0xff, 0xff, 0xff // next_track_ID\n    ]);\n  return box(types.mvhd, bytes);\n};\n\nsdtp = function(track) {\n  var\n    samples = track.samples || [],\n    bytes = new Uint8Array(4 + samples.length),\n    flags,\n    i;\n\n  // leave the full box header (4 bytes) all zero\n\n  // write the sample table\n  for (i = 0; i < samples.length; i++) {\n    flags = samples[i].flags;\n\n    bytes[i + 4] = (flags.dependsOn << 4) |\n      (flags.isDependedOn << 2) |\n      (flags.hasRedundancy);\n  }\n\n  return box(types.sdtp,\n             bytes);\n};\n\nstbl = function(track) {\n  return box(types.stbl,\n             stsd(track),\n             box(types.stts, STTS),\n             box(types.stsc, STSC),\n             box(types.stsz, STSZ),\n             box(types.stco, STCO));\n};\n\n(function() {\n  var videoSample, audioSample;\n\n  stsd = function(track) {\n\n    return box(types.stsd, new Uint8Array([\n      0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x01\n    ]), track.type === 'video' ? videoSample(track) : audioSample(track));\n  };\n\n  videoSample = function(track) {\n    var\n      sps = track.sps || [],\n      pps = track.pps || [],\n      sequenceParameterSets = [],\n      pictureParameterSets = [],\n      i;\n\n    // assemble the SPSs\n    for (i = 0; i < sps.length; i++) {\n      sequenceParameterSets.push((sps[i].byteLength & 0xFF00) >>> 8);\n      sequenceParameterSets.push((sps[i].byteLength & 0xFF)); // sequenceParameterSetLength\n      sequenceParameterSets = sequenceParameterSets.concat(Array.prototype.slice.call(sps[i])); // SPS\n    }\n\n    // assemble the PPSs\n    for (i = 0; i < pps.length; i++) {\n      pictureParameterSets.push((pps[i].byteLength & 0xFF00) >>> 8);\n      pictureParameterSets.push((pps[i].byteLength & 0xFF));\n      pictureParameterSets = pictureParameterSets.concat(Array.prototype.slice.call(pps[i]));\n    }\n\n    return box(types.avc1, new Uint8Array([\n      0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, // data_reference_index\n      0x00, 0x00, // pre_defined\n      0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, // pre_defined\n      (track.width & 0xff00) >> 8,\n      track.width & 0xff, // width\n      (track.height & 0xff00) >> 8,\n      track.height & 0xff, // height\n      0x00, 0x48, 0x00, 0x00, // horizresolution\n      0x00, 0x48, 0x00, 0x00, // vertresolution\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, // frame_count\n      0x13,\n      0x76, 0x69, 0x64, 0x65,\n      0x6f, 0x6a, 0x73, 0x2d,\n      0x63, 0x6f, 0x6e, 0x74,\n      0x72, 0x69, 0x62, 0x2d,\n      0x68, 0x6c, 0x73, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, // compressorname\n      0x00, 0x18, // depth = 24\n      0x11, 0x11 // pre_defined = -1\n    ]), box(types.avcC, new Uint8Array([\n      0x01, // configurationVersion\n      track.profileIdc, // AVCProfileIndication\n      track.profileCompatibility, // profile_compatibility\n      track.levelIdc, // AVCLevelIndication\n      0xff // lengthSizeMinusOne, hard-coded to 4 bytes\n    ].concat([\n      sps.length // numOfSequenceParameterSets\n    ]).concat(sequenceParameterSets).concat([\n      pps.length // numOfPictureParameterSets\n    ]).concat(pictureParameterSets))), // \"PPS\"\n            box(types.btrt, new Uint8Array([\n              0x00, 0x1c, 0x9c, 0x80, // bufferSizeDB\n              0x00, 0x2d, 0xc6, 0xc0, // maxBitrate\n              0x00, 0x2d, 0xc6, 0xc0\n            ])) // avgBitrate\n              );\n  };\n\n  audioSample = function(track) {\n    return box(types.mp4a, new Uint8Array([\n\n      // SampleEntry, ISO/IEC 14496-12\n      0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, // data_reference_index\n\n      // AudioSampleEntry, ISO/IEC 14496-12\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      (track.channelcount & 0xff00) >> 8,\n      (track.channelcount & 0xff), // channelcount\n\n      (track.samplesize & 0xff00) >> 8,\n      (track.samplesize & 0xff), // samplesize\n      0x00, 0x00, // pre_defined\n      0x00, 0x00, // reserved\n\n      (track.samplerate & 0xff00) >> 8,\n      (track.samplerate & 0xff),\n      0x00, 0x00 // samplerate, 16.16\n\n      // MP4AudioSampleEntry, ISO/IEC 14496-14\n    ]), esds(track));\n  };\n}());\n\ntkhd = function(track) {\n  var result = new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x07, // flags\n    0x00, 0x00, 0x00, 0x00, // creation_time\n    0x00, 0x00, 0x00, 0x00, // modification_time\n    (track.id & 0xFF000000) >> 24,\n    (track.id & 0xFF0000) >> 16,\n    (track.id & 0xFF00) >> 8,\n    track.id & 0xFF, // track_ID\n    0x00, 0x00, 0x00, 0x00, // reserved\n    (track.duration & 0xFF000000) >> 24,\n    (track.duration & 0xFF0000) >> 16,\n    (track.duration & 0xFF00) >> 8,\n    track.duration & 0xFF, // duration\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, // layer\n    0x00, 0x00, // alternate_group\n    0x01, 0x00, // non-audio track volume\n    0x00, 0x00, // reserved\n    0x00, 0x01, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x01, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x40, 0x00, 0x00, 0x00, // transformation: unity matrix\n    (track.width & 0xFF00) >> 8,\n    track.width & 0xFF,\n    0x00, 0x00, // width\n    (track.height & 0xFF00) >> 8,\n    track.height & 0xFF,\n    0x00, 0x00 // height\n  ]);\n\n  return box(types.tkhd, result);\n};\n\n/**\n * Generate a track fragment (traf) box. A traf box collects metadata\n * about tracks in a movie fragment (moof) box.\n */\ntraf = function(track) {\n  var trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun,\n      sampleDependencyTable, dataOffset,\n      upperWordBaseMediaDecodeTime, lowerWordBaseMediaDecodeTime;\n\n  trackFragmentHeader = box(types.tfhd, new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x3a, // flags\n    (track.id & 0xFF000000) >> 24,\n    (track.id & 0xFF0000) >> 16,\n    (track.id & 0xFF00) >> 8,\n    (track.id & 0xFF), // track_ID\n    0x00, 0x00, 0x00, 0x01, // sample_description_index\n    0x00, 0x00, 0x00, 0x00, // default_sample_duration\n    0x00, 0x00, 0x00, 0x00, // default_sample_size\n    0x00, 0x00, 0x00, 0x00  // default_sample_flags\n  ]));\n\n  upperWordBaseMediaDecodeTime = Math.floor(track.baseMediaDecodeTime / (UINT32_MAX + 1));\n  lowerWordBaseMediaDecodeTime = Math.floor(track.baseMediaDecodeTime % (UINT32_MAX + 1));\n\n  trackFragmentDecodeTime = box(types.tfdt, new Uint8Array([\n    0x01, // version 1\n    0x00, 0x00, 0x00, // flags\n    // baseMediaDecodeTime\n    (upperWordBaseMediaDecodeTime >>> 24) & 0xFF,\n    (upperWordBaseMediaDecodeTime >>> 16) & 0xFF,\n    (upperWordBaseMediaDecodeTime >>>  8) & 0xFF,\n    upperWordBaseMediaDecodeTime & 0xFF,\n    (lowerWordBaseMediaDecodeTime >>> 24) & 0xFF,\n    (lowerWordBaseMediaDecodeTime >>> 16) & 0xFF,\n    (lowerWordBaseMediaDecodeTime >>>  8) & 0xFF,\n    lowerWordBaseMediaDecodeTime & 0xFF\n  ]));\n\n  // the data offset specifies the number of bytes from the start of\n  // the containing moof to the first payload byte of the associated\n  // mdat\n  dataOffset = (32 + // tfhd\n                20 + // tfdt\n                8 +  // traf header\n                16 + // mfhd\n                8 +  // moof header\n                8);  // mdat header\n\n  // audio tracks require less metadata\n  if (track.type === 'audio') {\n    trackFragmentRun = trun(track, dataOffset);\n    return box(types.traf,\n               trackFragmentHeader,\n               trackFragmentDecodeTime,\n               trackFragmentRun);\n  }\n\n  // video tracks should contain an independent and disposable samples\n  // box (sdtp)\n  // generate one and adjust offsets to match\n  sampleDependencyTable = sdtp(track);\n  trackFragmentRun = trun(track,\n                          sampleDependencyTable.length + dataOffset);\n  return box(types.traf,\n             trackFragmentHeader,\n             trackFragmentDecodeTime,\n             trackFragmentRun,\n             sampleDependencyTable);\n};\n\n/**\n * Generate a track box.\n * @param track {object} a track definition\n * @return {Uint8Array} the track box\n */\ntrak = function(track) {\n  track.duration = track.duration || 0xffffffff;\n  return box(types.trak,\n             tkhd(track),\n             mdia(track));\n};\n\ntrex = function(track) {\n  var result = new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    (track.id & 0xFF000000) >> 24,\n    (track.id & 0xFF0000) >> 16,\n    (track.id & 0xFF00) >> 8,\n    (track.id & 0xFF), // track_ID\n    0x00, 0x00, 0x00, 0x01, // default_sample_description_index\n    0x00, 0x00, 0x00, 0x00, // default_sample_duration\n    0x00, 0x00, 0x00, 0x00, // default_sample_size\n    0x00, 0x01, 0x00, 0x01 // default_sample_flags\n  ]);\n  // the last two bytes of default_sample_flags is the sample\n  // degradation priority, a hint about the importance of this sample\n  // relative to others. Lower the degradation priority for all sample\n  // types other than video.\n  if (track.type !== 'video') {\n    result[result.length - 1] = 0x00;\n  }\n\n  return box(types.trex, result);\n};\n\n(function() {\n  var audioTrun, videoTrun, trunHeader;\n\n  // This method assumes all samples are uniform. That is, if a\n  // duration is present for the first sample, it will be present for\n  // all subsequent samples.\n  // see ISO/IEC 14496-12:2012, Section 8.8.8.1\n  trunHeader = function(samples, offset) {\n    var durationPresent = 0, sizePresent = 0,\n        flagsPresent = 0, compositionTimeOffset = 0;\n\n    // trun flag constants\n    if (samples.length) {\n      if (samples[0].duration !== undefined) {\n        durationPresent = 0x1;\n      }\n      if (samples[0].size !== undefined) {\n        sizePresent = 0x2;\n      }\n      if (samples[0].flags !== undefined) {\n        flagsPresent = 0x4;\n      }\n      if (samples[0].compositionTimeOffset !== undefined) {\n        compositionTimeOffset = 0x8;\n      }\n    }\n\n    return [\n      0x00, // version 0\n      0x00,\n      durationPresent | sizePresent | flagsPresent | compositionTimeOffset,\n      0x01, // flags\n      (samples.length & 0xFF000000) >>> 24,\n      (samples.length & 0xFF0000) >>> 16,\n      (samples.length & 0xFF00) >>> 8,\n      samples.length & 0xFF, // sample_count\n      (offset & 0xFF000000) >>> 24,\n      (offset & 0xFF0000) >>> 16,\n      (offset & 0xFF00) >>> 8,\n      offset & 0xFF // data_offset\n    ];\n  };\n\n  videoTrun = function(track, offset) {\n    var bytes, samples, sample, i;\n\n    samples = track.samples || [];\n    offset += 8 + 12 + (16 * samples.length);\n\n    bytes = trunHeader(samples, offset);\n\n    for (i = 0; i < samples.length; i++) {\n      sample = samples[i];\n      bytes = bytes.concat([\n        (sample.duration & 0xFF000000) >>> 24,\n        (sample.duration & 0xFF0000) >>> 16,\n        (sample.duration & 0xFF00) >>> 8,\n        sample.duration & 0xFF, // sample_duration\n        (sample.size & 0xFF000000) >>> 24,\n        (sample.size & 0xFF0000) >>> 16,\n        (sample.size & 0xFF00) >>> 8,\n        sample.size & 0xFF, // sample_size\n        (sample.flags.isLeading << 2) | sample.flags.dependsOn,\n        (sample.flags.isDependedOn << 6) |\n          (sample.flags.hasRedundancy << 4) |\n          (sample.flags.paddingValue << 1) |\n          sample.flags.isNonSyncSample,\n        sample.flags.degradationPriority & 0xF0 << 8,\n        sample.flags.degradationPriority & 0x0F, // sample_flags\n        (sample.compositionTimeOffset & 0xFF000000) >>> 24,\n        (sample.compositionTimeOffset & 0xFF0000) >>> 16,\n        (sample.compositionTimeOffset & 0xFF00) >>> 8,\n        sample.compositionTimeOffset & 0xFF // sample_composition_time_offset\n      ]);\n    }\n    return box(types.trun, new Uint8Array(bytes));\n  };\n\n  audioTrun = function(track, offset) {\n    var bytes, samples, sample, i;\n\n    samples = track.samples || [];\n    offset += 8 + 12 + (8 * samples.length);\n\n    bytes = trunHeader(samples, offset);\n\n    for (i = 0; i < samples.length; i++) {\n      sample = samples[i];\n      bytes = bytes.concat([\n        (sample.duration & 0xFF000000) >>> 24,\n        (sample.duration & 0xFF0000) >>> 16,\n        (sample.duration & 0xFF00) >>> 8,\n        sample.duration & 0xFF, // sample_duration\n        (sample.size & 0xFF000000) >>> 24,\n        (sample.size & 0xFF0000) >>> 16,\n        (sample.size & 0xFF00) >>> 8,\n        sample.size & 0xFF]); // sample_size\n    }\n\n    return box(types.trun, new Uint8Array(bytes));\n  };\n\n  trun = function(track, offset) {\n    if (track.type === 'audio') {\n      return audioTrun(track, offset);\n    }\n\n    return videoTrun(track, offset);\n  };\n}());\n\nmodule.exports = {\n  ftyp: ftyp,\n  mdat: mdat,\n  moof: moof,\n  moov: moov,\n  initSegment: function(tracks) {\n    var\n      fileType = ftyp(),\n      movie = moov(tracks),\n      result;\n\n    result = new Uint8Array(fileType.byteLength + movie.byteLength);\n    result.set(fileType);\n    result.set(movie, fileType.byteLength);\n    return result;\n  }\n};\n","'use strict';\n\nvar implementation = require('./implementation');\n\nvar zeroWidthSpace = '\\u200b';\n\nmodule.exports = function getPolyfill() {\n\tif (String.prototype.trim && zeroWidthSpace.trim() === zeroWidthSpace) {\n\t\treturn String.prototype.trim;\n\t}\n\treturn implementation;\n};\n","function clean (s) {\n  return s.replace(/\\n\\r?\\s*/g, '')\n}\n\n\nmodule.exports = function tsml (sa) {\n  var s = ''\n    , i = 0\n\n  for (; i < arguments.length; i++)\n    s += clean(sa[i]) + (arguments[i + 1] || '')\n\n  return s\n}","module.exports = Number.isNaN || function isNaN(a) {\n\treturn a !== a;\n};\n","'use strict';\n\nvar fnToStr = Function.prototype.toString;\n\nvar constructorRegex = /^\\s*class\\b/;\nvar isES6ClassFn = function isES6ClassFunction(value) {\n\ttry {\n\t\tvar fnStr = fnToStr.call(value);\n\t\treturn constructorRegex.test(fnStr);\n\t} catch (e) {\n\t\treturn false; // not a function\n\t}\n};\n\nvar tryFunctionObject = function tryFunctionToStr(value) {\n\ttry {\n\t\tif (isES6ClassFn(value)) { return false; }\n\t\tfnToStr.call(value);\n\t\treturn true;\n\t} catch (e) {\n\t\treturn false;\n\t}\n};\nvar toStr = Object.prototype.toString;\nvar fnClass = '[object Function]';\nvar genClass = '[object GeneratorFunction]';\nvar hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';\n\nmodule.exports = function isCallable(value) {\n\tif (!value) { return false; }\n\tif (typeof value !== 'function' && typeof value !== 'object') { return false; }\n\tif (typeof value === 'function' && !value.prototype) { return true; }\n\tif (hasToStringTag) { return tryFunctionObject(value); }\n\tif (isES6ClassFn(value)) { return false; }\n\tvar strClass = toStr.call(value);\n\treturn strClass === fnClass || strClass === genClass;\n};\n","/**\n * mux.js\n *\n * Copyright (c) Brightcove\n * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n *\n * Accepts program elementary stream (PES) data events and corrects\n * decode and presentation time stamps to account for a rollover\n * of the 33 bit value.\n */\n\n'use strict';\n\nvar Stream = require('../utils/stream');\n\nvar MAX_TS = 8589934592;\n\nvar RO_THRESH = 4294967296;\n\nvar handleRollover = function(value, reference) {\n  var direction = 1;\n\n  if (value > reference) {\n    // If the current timestamp value is greater than our reference timestamp and we detect a\n    // timestamp rollover, this means the roll over is happening in the opposite direction.\n    // Example scenario: Enter a long stream/video just after a rollover occurred. The reference\n    // point will be set to a small number, e.g. 1. The user then seeks backwards over the\n    // rollover point. In loading this segment, the timestamp values will be very large,\n    // e.g. 2^33 - 1. Since this comes before the data we loaded previously, we want to adjust\n    // the time stamp to be `value - 2^33`.\n    direction = -1;\n  }\n\n  // Note: A seek forwards or back that is greater than the RO_THRESH (2^32, ~13 hours) will\n  // cause an incorrect adjustment.\n  while (Math.abs(reference - value) > RO_THRESH) {\n    value += (direction * MAX_TS);\n  }\n\n  return value;\n};\n\nvar TimestampRolloverStream = function(type) {\n  var lastDTS, referenceDTS;\n\n  TimestampRolloverStream.prototype.init.call(this);\n\n  this.type_ = type;\n\n  this.push = function(data) {\n    if (data.type !== this.type_) {\n      return;\n    }\n\n    if (referenceDTS === undefined) {\n      referenceDTS = data.dts;\n    }\n\n    data.dts = handleRollover(data.dts, referenceDTS);\n    data.pts = handleRollover(data.pts, referenceDTS);\n\n    lastDTS = data.dts;\n\n    this.trigger('data', data);\n  };\n\n  this.flush = function() {\n    referenceDTS = lastDTS;\n    this.trigger('done');\n  };\n\n  this.discontinuity = function() {\n    referenceDTS = void 0;\n    lastDTS = void 0;\n  };\n\n};\n\nTimestampRolloverStream.prototype = new Stream();\n\nmodule.exports = {\n  TimestampRolloverStream: TimestampRolloverStream,\n  handleRollover: handleRollover\n};\n","/**\n * mux.js\n *\n * Copyright (c) Brightcove\n * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n *\n * Utilities to detect basic properties and metadata about MP4s.\n */\n'use strict';\n\nvar toUnsigned = require('../utils/bin').toUnsigned;\nvar findBox, parseType, timescale, startTime, getVideoTrackIds;\n\n// Find the data for a box specified by its path\nfindBox = function(data, path) {\n  var results = [],\n      i, size, type, end, subresults;\n\n  if (!path.length) {\n    // short-circuit the search for empty paths\n    return null;\n  }\n\n  for (i = 0; i < data.byteLength;) {\n    size  = toUnsigned(data[i]     << 24 |\n                       data[i + 1] << 16 |\n                       data[i + 2] <<  8 |\n                       data[i + 3]);\n\n    type = parseType(data.subarray(i + 4, i + 8));\n\n    end = size > 1 ? i + size : data.byteLength;\n\n    if (type === path[0]) {\n      if (path.length === 1) {\n        // this is the end of the path and we've found the box we were\n        // looking for\n        results.push(data.subarray(i + 8, end));\n      } else {\n        // recursively search for the next box along the path\n        subresults = findBox(data.subarray(i + 8, end), path.slice(1));\n        if (subresults.length) {\n          results = results.concat(subresults);\n        }\n      }\n    }\n    i = end;\n  }\n\n  // we've finished searching all of data\n  return results;\n};\n\n/**\n * Returns the string representation of an ASCII encoded four byte buffer.\n * @param buffer {Uint8Array} a four-byte buffer to translate\n * @return {string} the corresponding string\n */\nparseType = function(buffer) {\n  var result = '';\n  result += String.fromCharCode(buffer[0]);\n  result += String.fromCharCode(buffer[1]);\n  result += String.fromCharCode(buffer[2]);\n  result += String.fromCharCode(buffer[3]);\n  return result;\n};\n\n/**\n * Parses an MP4 initialization segment and extracts the timescale\n * values for any declared tracks. Timescale values indicate the\n * number of clock ticks per second to assume for time-based values\n * elsewhere in the MP4.\n *\n * To determine the start time of an MP4, you need two pieces of\n * information: the timescale unit and the earliest base media decode\n * time. Multiple timescales can be specified within an MP4 but the\n * base media decode time is always expressed in the timescale from\n * the media header box for the track:\n * ```\n * moov > trak > mdia > mdhd.timescale\n * ```\n * @param init {Uint8Array} the bytes of the init segment\n * @return {object} a hash of track ids to timescale values or null if\n * the init segment is malformed.\n */\ntimescale = function(init) {\n  var\n    result = {},\n    traks = findBox(init, ['moov', 'trak']);\n\n  // mdhd timescale\n  return traks.reduce(function(result, trak) {\n    var tkhd, version, index, id, mdhd;\n\n    tkhd = findBox(trak, ['tkhd'])[0];\n    if (!tkhd) {\n      return null;\n    }\n    version = tkhd[0];\n    index = version === 0 ? 12 : 20;\n    id = toUnsigned(tkhd[index]     << 24 |\n                    tkhd[index + 1] << 16 |\n                    tkhd[index + 2] <<  8 |\n                    tkhd[index + 3]);\n\n    mdhd = findBox(trak, ['mdia', 'mdhd'])[0];\n    if (!mdhd) {\n      return null;\n    }\n    version = mdhd[0];\n    index = version === 0 ? 12 : 20;\n    result[id] = toUnsigned(mdhd[index]     << 24 |\n                            mdhd[index + 1] << 16 |\n                            mdhd[index + 2] <<  8 |\n                            mdhd[index + 3]);\n    return result;\n  }, result);\n};\n\n/**\n * Determine the base media decode start time, in seconds, for an MP4\n * fragment. If multiple fragments are specified, the earliest time is\n * returned.\n *\n * The base media decode time can be parsed from track fragment\n * metadata:\n * ```\n * moof > traf > tfdt.baseMediaDecodeTime\n * ```\n * It requires the timescale value from the mdhd to interpret.\n *\n * @param timescale {object} a hash of track ids to timescale values.\n * @return {number} the earliest base media decode start time for the\n * fragment, in seconds\n */\nstartTime = function(timescale, fragment) {\n  var trafs, baseTimes, result;\n\n  // we need info from two childrend of each track fragment box\n  trafs = findBox(fragment, ['moof', 'traf']);\n\n  // determine the start times for each track\n  baseTimes = [].concat.apply([], trafs.map(function(traf) {\n    return findBox(traf, ['tfhd']).map(function(tfhd) {\n      var id, scale, baseTime;\n\n      // get the track id from the tfhd\n      id = toUnsigned(tfhd[4] << 24 |\n                      tfhd[5] << 16 |\n                      tfhd[6] <<  8 |\n                      tfhd[7]);\n      // assume a 90kHz clock if no timescale was specified\n      scale = timescale[id] || 90e3;\n\n      // get the base media decode time from the tfdt\n      baseTime = findBox(traf, ['tfdt']).map(function(tfdt) {\n        var version, result;\n\n        version = tfdt[0];\n        result = toUnsigned(tfdt[4] << 24 |\n                            tfdt[5] << 16 |\n                            tfdt[6] <<  8 |\n                            tfdt[7]);\n        if (version ===  1) {\n          result *= Math.pow(2, 32);\n          result += toUnsigned(tfdt[8]  << 24 |\n                               tfdt[9]  << 16 |\n                               tfdt[10] <<  8 |\n                               tfdt[11]);\n        }\n        return result;\n      })[0];\n      baseTime = baseTime || Infinity;\n\n      // convert base time to seconds\n      return baseTime / scale;\n    });\n  }));\n\n  // return the minimum\n  result = Math.min.apply(null, baseTimes);\n  return isFinite(result) ? result : 0;\n};\n\n/**\n  * Find the trackIds of the video tracks in this source.\n  * Found by parsing the Handler Reference and Track Header Boxes:\n  *   moov > trak > mdia > hdlr\n  *   moov > trak > tkhd\n  *\n  * @param {Uint8Array} init - The bytes of the init segment for this source\n  * @return {Number[]} A list of trackIds\n  *\n  * @see ISO-BMFF-12/2015, Section 8.4.3\n **/\ngetVideoTrackIds = function(init) {\n  var traks = findBox(init, ['moov', 'trak']);\n  var videoTrackIds = [];\n\n  traks.forEach(function(trak) {\n    var hdlrs = findBox(trak, ['mdia', 'hdlr']);\n    var tkhds = findBox(trak, ['tkhd']);\n\n    hdlrs.forEach(function(hdlr, index) {\n      var handlerType = parseType(hdlr.subarray(8, 12));\n      var tkhd = tkhds[index];\n      var view;\n      var version;\n      var trackId;\n\n      if (handlerType === 'vide') {\n        view = new DataView(tkhd.buffer, tkhd.byteOffset, tkhd.byteLength);\n        version = view.getUint8(0);\n        trackId = (version === 0) ? view.getUint32(12) : view.getUint32(20);\n\n        videoTrackIds.push(trackId);\n      }\n    });\n  });\n\n  return videoTrackIds;\n};\n\nmodule.exports = {\n  findBox: findBox,\n  parseType: parseType,\n  timescale: timescale,\n  startTime: startTime,\n  videoTrackIds: getVideoTrackIds\n};\n","/**\n * mux.js\n *\n * Copyright (c) Brightcove\n * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n */\nmodule.exports = {\n  generator: require('./mp4-generator'),\n  probe: require('./probe'),\n  Transmuxer: require('./transmuxer').Transmuxer,\n  AudioSegmentStream: require('./transmuxer').AudioSegmentStream,\n  VideoSegmentStream: require('./transmuxer').VideoSegmentStream,\n  CaptionParser: require('./caption-parser')\n};\n","/**\n * Copyright 2013 vtt.js Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Default exports for Node. Export the extended versions of VTTCue and\n// VTTRegion in Node since we likely want the capability to convert back and\n// forth between JSON. If we don't then it's not that big of a deal since we're\n// off browser.\n\nvar window = require('global/window');\n\nvar vttjs = module.exports = {\n  WebVTT: require(\"./vtt.js\"),\n  VTTCue: require(\"./vttcue.js\"),\n  VTTRegion: require(\"./vttregion.js\")\n};\n\nwindow.vttjs = vttjs;\nwindow.WebVTT = vttjs.WebVTT;\n\nvar cueShim = vttjs.VTTCue;\nvar regionShim = vttjs.VTTRegion;\nvar nativeVTTCue = window.VTTCue;\nvar nativeVTTRegion = window.VTTRegion;\n\nvttjs.shim = function() {\n  window.VTTCue = cueShim;\n  window.VTTRegion = regionShim;\n};\n\nvttjs.restore = function() {\n  window.VTTCue = nativeVTTCue;\n  window.VTTRegion = nativeVTTRegion;\n};\n\nif (!window.VTTCue) {\n  vttjs.shim();\n}\n","/**\n * mux.js\n *\n * Copyright (c) Brightcove\n * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n */\n// Convert an array of nal units into an array of frames with each frame being\n// composed of the nal units that make up that frame\n// Also keep track of cummulative data about the frame from the nal units such\n// as the frame duration, starting pts, etc.\nvar groupNalsIntoFrames = function(nalUnits) {\n  var\n    i,\n    currentNal,\n    currentFrame = [],\n    frames = [];\n\n  currentFrame.byteLength = 0;\n\n  for (i = 0; i < nalUnits.length; i++) {\n    currentNal = nalUnits[i];\n\n    // Split on 'aud'-type nal units\n    if (currentNal.nalUnitType === 'access_unit_delimiter_rbsp') {\n      // Since the very first nal unit is expected to be an AUD\n      // only push to the frames array when currentFrame is not empty\n      if (currentFrame.length) {\n        currentFrame.duration = currentNal.dts - currentFrame.dts;\n        frames.push(currentFrame);\n      }\n      currentFrame = [currentNal];\n      currentFrame.byteLength = currentNal.data.byteLength;\n      currentFrame.pts = currentNal.pts;\n      currentFrame.dts = currentNal.dts;\n    } else {\n      // Specifically flag key frames for ease of use later\n      if (currentNal.nalUnitType === 'slice_layer_without_partitioning_rbsp_idr') {\n        currentFrame.keyFrame = true;\n      }\n      currentFrame.duration = currentNal.dts - currentFrame.dts;\n      currentFrame.byteLength += currentNal.data.byteLength;\n      currentFrame.push(currentNal);\n    }\n  }\n\n  // For the last frame, use the duration of the previous frame if we\n  // have nothing better to go on\n  if (frames.length &&\n      (!currentFrame.duration ||\n       currentFrame.duration <= 0)) {\n    currentFrame.duration = frames[frames.length - 1].duration;\n  }\n\n  // Push the final frame\n  frames.push(currentFrame);\n  return frames;\n};\n\n// Convert an array of frames into an array of Gop with each Gop being composed\n// of the frames that make up that Gop\n// Also keep track of cummulative data about the Gop from the frames such as the\n// Gop duration, starting pts, etc.\nvar groupFramesIntoGops = function(frames) {\n  var\n    i,\n    currentFrame,\n    currentGop = [],\n    gops = [];\n\n  // We must pre-set some of the values on the Gop since we\n  // keep running totals of these values\n  currentGop.byteLength = 0;\n  currentGop.nalCount = 0;\n  currentGop.duration = 0;\n  currentGop.pts = frames[0].pts;\n  currentGop.dts = frames[0].dts;\n\n  // store some metadata about all the Gops\n  gops.byteLength = 0;\n  gops.nalCount = 0;\n  gops.duration = 0;\n  gops.pts = frames[0].pts;\n  gops.dts = frames[0].dts;\n\n  for (i = 0; i < frames.length; i++) {\n    currentFrame = frames[i];\n\n    if (currentFrame.keyFrame) {\n      // Since the very first frame is expected to be an keyframe\n      // only push to the gops array when currentGop is not empty\n      if (currentGop.length) {\n        gops.push(currentGop);\n        gops.byteLength += currentGop.byteLength;\n        gops.nalCount += currentGop.nalCount;\n        gops.duration += currentGop.duration;\n      }\n\n      currentGop = [currentFrame];\n      currentGop.nalCount = currentFrame.length;\n      currentGop.byteLength = currentFrame.byteLength;\n      currentGop.pts = currentFrame.pts;\n      currentGop.dts = currentFrame.dts;\n      currentGop.duration = currentFrame.duration;\n    } else {\n      currentGop.duration += currentFrame.duration;\n      currentGop.nalCount += currentFrame.length;\n      currentGop.byteLength += currentFrame.byteLength;\n      currentGop.push(currentFrame);\n    }\n  }\n\n  if (gops.length && currentGop.duration <= 0) {\n    currentGop.duration = gops[gops.length - 1].duration;\n  }\n  gops.byteLength += currentGop.byteLength;\n  gops.nalCount += currentGop.nalCount;\n  gops.duration += currentGop.duration;\n\n  // push the final Gop\n  gops.push(currentGop);\n  return gops;\n};\n\n/*\n * Search for the first keyframe in the GOPs and throw away all frames\n * until that keyframe. Then extend the duration of the pulled keyframe\n * and pull the PTS and DTS of the keyframe so that it covers the time\n * range of the frames that were disposed.\n *\n * @param {Array} gops video GOPs\n * @returns {Array} modified video GOPs\n */\nvar extendFirstKeyFrame = function(gops) {\n  var currentGop;\n\n  if (!gops[0][0].keyFrame && gops.length > 1) {\n    // Remove the first GOP\n    currentGop = gops.shift();\n\n    gops.byteLength -= currentGop.byteLength;\n    gops.nalCount -= currentGop.nalCount;\n\n    // Extend the first frame of what is now the\n    // first gop to cover the time period of the\n    // frames we just removed\n    gops[0][0].dts = currentGop.dts;\n    gops[0][0].pts = currentGop.pts;\n    gops[0][0].duration += currentGop.duration;\n  }\n\n  return gops;\n};\n\n/**\n * Default sample object\n * see ISO/IEC 14496-12:2012, section 8.6.4.3\n */\nvar createDefaultSample = function() {\n  return {\n    size: 0,\n    flags: {\n      isLeading: 0,\n      dependsOn: 1,\n      isDependedOn: 0,\n      hasRedundancy: 0,\n      degradationPriority: 0,\n      isNonSyncSample: 1\n    }\n  };\n};\n\n/*\n * Collates information from a video frame into an object for eventual\n * entry into an MP4 sample table.\n *\n * @param {Object} frame the video frame\n * @param {Number} dataOffset the byte offset to position the sample\n * @return {Object} object containing sample table info for a frame\n */\nvar sampleForFrame = function(frame, dataOffset) {\n  var sample = createDefaultSample();\n\n  sample.dataOffset = dataOffset;\n  sample.compositionTimeOffset = frame.pts - frame.dts;\n  sample.duration = frame.duration;\n  sample.size = 4 * frame.length; // Space for nal unit size\n  sample.size += frame.byteLength;\n\n  if (frame.keyFrame) {\n    sample.flags.dependsOn = 2;\n    sample.flags.isNonSyncSample = 0;\n  }\n\n  return sample;\n};\n\n// generate the track's sample table from an array of gops\nvar generateSampleTable = function(gops, baseDataOffset) {\n  var\n    h, i,\n    sample,\n    currentGop,\n    currentFrame,\n    dataOffset = baseDataOffset || 0,\n    samples = [];\n\n  for (h = 0; h < gops.length; h++) {\n    currentGop = gops[h];\n\n    for (i = 0; i < currentGop.length; i++) {\n      currentFrame = currentGop[i];\n\n      sample = sampleForFrame(currentFrame, dataOffset);\n\n      dataOffset += sample.size;\n\n      samples.push(sample);\n    }\n  }\n  return samples;\n};\n\n// generate the track's raw mdat data from an array of gops\nvar concatenateNalData = function(gops) {\n  var\n    h, i, j,\n    currentGop,\n    currentFrame,\n    currentNal,\n    dataOffset = 0,\n    nalsByteLength = gops.byteLength,\n    numberOfNals = gops.nalCount,\n    totalByteLength = nalsByteLength + 4 * numberOfNals,\n    data = new Uint8Array(totalByteLength),\n    view = new DataView(data.buffer);\n\n  // For each Gop..\n  for (h = 0; h < gops.length; h++) {\n    currentGop = gops[h];\n\n    // For each Frame..\n    for (i = 0; i < currentGop.length; i++) {\n      currentFrame = currentGop[i];\n\n      // For each NAL..\n      for (j = 0; j < currentFrame.length; j++) {\n        currentNal = currentFrame[j];\n\n        view.setUint32(dataOffset, currentNal.data.byteLength);\n        dataOffset += 4;\n        data.set(currentNal.data, dataOffset);\n        dataOffset += currentNal.data.byteLength;\n      }\n    }\n  }\n  return data;\n};\n\nmodule.exports = {\n  groupNalsIntoFrames: groupNalsIntoFrames,\n  groupFramesIntoGops: groupFramesIntoGops,\n  extendFirstKeyFrame: extendFirstKeyFrame,\n  generateSampleTable: generateSampleTable,\n  concatenateNalData: concatenateNalData\n};\n","'use strict';\n\nvar toStr = Object.prototype.toString;\n\nvar isPrimitive = require('./helpers/isPrimitive');\n\nvar isCallable = require('is-callable');\n\n// http://ecma-international.org/ecma-262/5.1/#sec-8.12.8\nvar ES5internalSlots = {\n\t'[[DefaultValue]]': function (O) {\n\t\tvar actualHint;\n\t\tif (arguments.length > 1) {\n\t\t\tactualHint = arguments[1];\n\t\t} else {\n\t\t\tactualHint = toStr.call(O) === '[object Date]' ? String : Number;\n\t\t}\n\n\t\tif (actualHint === String || actualHint === Number) {\n\t\t\tvar methods = actualHint === String ? ['toString', 'valueOf'] : ['valueOf', 'toString'];\n\t\t\tvar value, i;\n\t\t\tfor (i = 0; i < methods.length; ++i) {\n\t\t\t\tif (isCallable(O[methods[i]])) {\n\t\t\t\t\tvalue = O[methods[i]]();\n\t\t\t\t\tif (isPrimitive(value)) {\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrow new TypeError('No default value');\n\t\t}\n\t\tthrow new TypeError('invalid [[DefaultValue]] hint supplied');\n\t}\n};\n\n// http://ecma-international.org/ecma-262/5.1/#sec-9.1\nmodule.exports = function ToPrimitive(input) {\n\tif (isPrimitive(input)) {\n\t\treturn input;\n\t}\n\tif (arguments.length > 1) {\n\t\treturn ES5internalSlots['[[DefaultValue]]'](input, arguments[1]);\n\t}\n\treturn ES5internalSlots['[[DefaultValue]]'](input);\n};\n","/**\n * mux.js\n *\n * Copyright (c) Brightcove\n * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n *\n * A stream-based mp2t to mp4 converter. This utility can be used to\n * deliver mp4s to a SourceBuffer on platforms that support native\n * Media Source Extensions.\n */\n'use strict';\n\nvar Stream = require('../utils/stream.js');\nvar mp4 = require('./mp4-generator.js');\nvar frameUtils = require('./frame-utils');\nvar audioFrameUtils = require('./audio-frame-utils');\nvar trackDecodeInfo = require('./track-decode-info');\nvar m2ts = require('../m2ts/m2ts.js');\nvar AdtsStream = require('../codecs/adts.js');\nvar H264Stream = require('../codecs/h264').H264Stream;\nvar AacStream = require('../aac');\nvar isLikelyAacData = require('../aac/utils').isLikelyAacData;\n\n// constants\nvar AUDIO_PROPERTIES = [\n  'audioobjecttype',\n  'channelcount',\n  'samplerate',\n  'samplingfrequencyindex',\n  'samplesize'\n];\n\nvar VIDEO_PROPERTIES = [\n  'width',\n  'height',\n  'profileIdc',\n  'levelIdc',\n  'profileCompatibility'\n];\n\n// object types\nvar VideoSegmentStream, AudioSegmentStream, Transmuxer, CoalesceStream;\n\n/**\n * Compare two arrays (even typed) for same-ness\n */\nvar arrayEquals = function(a, b) {\n  var\n    i;\n\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  // compare the value of each element in the array\n  for (i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nvar generateVideoSegmentTimingInfo = function(\n  baseMediaDecodeTime,\n  startDts,\n  startPts,\n  endDts,\n  endPts,\n  prependedContentDuration\n) {\n  var\n    ptsOffsetFromDts = startPts - startDts,\n    decodeDuration = endDts - startDts,\n    presentationDuration = endPts - startPts;\n\n  // The PTS and DTS values are based on the actual stream times from the segment,\n  // however, the player time values will reflect a start from the baseMediaDecodeTime.\n  // In order to provide relevant values for the player times, base timing info on the\n  // baseMediaDecodeTime and the DTS and PTS durations of the segment.\n  return {\n    start: {\n      dts: baseMediaDecodeTime,\n      pts: baseMediaDecodeTime + ptsOffsetFromDts\n    },\n    end: {\n      dts: baseMediaDecodeTime + decodeDuration,\n      pts: baseMediaDecodeTime + presentationDuration\n    },\n    prependedContentDuration: prependedContentDuration,\n    baseMediaDecodeTime: baseMediaDecodeTime\n  };\n};\n\n/**\n * Constructs a single-track, ISO BMFF media segment from AAC data\n * events. The output of this stream can be fed to a SourceBuffer\n * configured with a suitable initialization segment.\n * @param track {object} track metadata configuration\n * @param options {object} transmuxer options object\n * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps\n *        in the source; false to adjust the first segment to start at 0.\n */\nAudioSegmentStream = function(track, options) {\n  var\n    adtsFrames = [],\n    sequenceNumber = 0,\n    earliestAllowedDts = 0,\n    audioAppendStartTs = 0,\n    videoBaseMediaDecodeTime = Infinity;\n\n  options = options || {};\n\n  AudioSegmentStream.prototype.init.call(this);\n\n  this.push = function(data) {\n    trackDecodeInfo.collectDtsInfo(track, data);\n\n    if (track) {\n      AUDIO_PROPERTIES.forEach(function(prop) {\n        track[prop] = data[prop];\n      });\n    }\n\n    // buffer audio data until end() is called\n    adtsFrames.push(data);\n  };\n\n  this.setEarliestDts = function(earliestDts) {\n    earliestAllowedDts = earliestDts - track.timelineStartInfo.baseMediaDecodeTime;\n  };\n\n  this.setVideoBaseMediaDecodeTime = function(baseMediaDecodeTime) {\n    videoBaseMediaDecodeTime = baseMediaDecodeTime;\n  };\n\n  this.setAudioAppendStart = function(timestamp) {\n    audioAppendStartTs = timestamp;\n  };\n\n  this.flush = function() {\n    var\n      frames,\n      moof,\n      mdat,\n      boxes;\n\n    // return early if no audio data has been observed\n    if (adtsFrames.length === 0) {\n      this.trigger('done', 'AudioSegmentStream');\n      return;\n    }\n\n    frames = audioFrameUtils.trimAdtsFramesByEarliestDts(\n      adtsFrames, track, earliestAllowedDts);\n    track.baseMediaDecodeTime = trackDecodeInfo.calculateTrackBaseMediaDecodeTime(\n      track, options.keepOriginalTimestamps);\n\n    audioFrameUtils.prefixWithSilence(\n      track, frames, audioAppendStartTs, videoBaseMediaDecodeTime);\n\n    // we have to build the index from byte locations to\n    // samples (that is, adts frames) in the audio data\n    track.samples = audioFrameUtils.generateSampleTable(frames);\n\n    // concatenate the audio data to constuct the mdat\n    mdat = mp4.mdat(audioFrameUtils.concatenateFrameData(frames));\n\n    adtsFrames = [];\n\n    moof = mp4.moof(sequenceNumber, [track]);\n    boxes = new Uint8Array(moof.byteLength + mdat.byteLength);\n\n    // bump the sequence number for next time\n    sequenceNumber++;\n\n    boxes.set(moof);\n    boxes.set(mdat, moof.byteLength);\n\n    trackDecodeInfo.clearDtsInfo(track);\n\n    this.trigger('data', {track: track, boxes: boxes});\n    this.trigger('done', 'AudioSegmentStream');\n  };\n};\n\nAudioSegmentStream.prototype = new Stream();\n\n/**\n * Constructs a single-track, ISO BMFF media segment from H264 data\n * events. The output of this stream can be fed to a SourceBuffer\n * configured with a suitable initialization segment.\n * @param track {object} track metadata configuration\n * @param options {object} transmuxer options object\n * @param options.alignGopsAtEnd {boolean} If true, start from the end of the\n *        gopsToAlignWith list when attempting to align gop pts\n * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps\n *        in the source; false to adjust the first segment to start at 0.\n */\nVideoSegmentStream = function(track, options) {\n  var\n    sequenceNumber = 0,\n    nalUnits = [],\n    gopsToAlignWith = [],\n    config,\n    pps;\n\n  options = options || {};\n\n  VideoSegmentStream.prototype.init.call(this);\n\n  delete track.minPTS;\n\n  this.gopCache_ = [];\n\n  /**\n    * Constructs a ISO BMFF segment given H264 nalUnits\n    * @param {Object} nalUnit A data event representing a nalUnit\n    * @param {String} nalUnit.nalUnitType\n    * @param {Object} nalUnit.config Properties for a mp4 track\n    * @param {Uint8Array} nalUnit.data The nalUnit bytes\n    * @see lib/codecs/h264.js\n   **/\n  this.push = function(nalUnit) {\n    trackDecodeInfo.collectDtsInfo(track, nalUnit);\n\n    // record the track config\n    if (nalUnit.nalUnitType === 'seq_parameter_set_rbsp' && !config) {\n      config = nalUnit.config;\n      track.sps = [nalUnit.data];\n\n      VIDEO_PROPERTIES.forEach(function(prop) {\n        track[prop] = config[prop];\n      }, this);\n    }\n\n    if (nalUnit.nalUnitType === 'pic_parameter_set_rbsp' &&\n        !pps) {\n      pps = nalUnit.data;\n      track.pps = [nalUnit.data];\n    }\n\n    // buffer video until flush() is called\n    nalUnits.push(nalUnit);\n  };\n\n  /**\n    * Pass constructed ISO BMFF track and boxes on to the\n    * next stream in the pipeline\n   **/\n  this.flush = function() {\n    var\n      frames,\n      gopForFusion,\n      gops,\n      moof,\n      mdat,\n      boxes,\n      prependedContentDuration = 0,\n      firstGop,\n      lastGop;\n\n    // Throw away nalUnits at the start of the byte stream until\n    // we find the first AUD\n    while (nalUnits.length) {\n      if (nalUnits[0].nalUnitType === 'access_unit_delimiter_rbsp') {\n        break;\n      }\n      nalUnits.shift();\n    }\n\n    // Return early if no video data has been observed\n    if (nalUnits.length === 0) {\n      this.resetStream_();\n      this.trigger('done', 'VideoSegmentStream');\n      return;\n    }\n\n    // Organize the raw nal-units into arrays that represent\n    // higher-level constructs such as frames and gops\n    // (group-of-pictures)\n    frames = frameUtils.groupNalsIntoFrames(nalUnits);\n    gops = frameUtils.groupFramesIntoGops(frames);\n\n    // If the first frame of this fragment is not a keyframe we have\n    // a problem since MSE (on Chrome) requires a leading keyframe.\n    //\n    // We have two approaches to repairing this situation:\n    // 1) GOP-FUSION:\n    //    This is where we keep track of the GOPS (group-of-pictures)\n    //    from previous fragments and attempt to find one that we can\n    //    prepend to the current fragment in order to create a valid\n    //    fragment.\n    // 2) KEYFRAME-PULLING:\n    //    Here we search for the first keyframe in the fragment and\n    //    throw away all the frames between the start of the fragment\n    //    and that keyframe. We then extend the duration and pull the\n    //    PTS of the keyframe forward so that it covers the time range\n    //    of the frames that were disposed of.\n    //\n    // #1 is far prefereable over #2 which can cause \"stuttering\" but\n    // requires more things to be just right.\n    if (!gops[0][0].keyFrame) {\n      // Search for a gop for fusion from our gopCache\n      gopForFusion = this.getGopForFusion_(nalUnits[0], track);\n\n      if (gopForFusion) {\n        // in order to provide more accurate timing information about the segment, save\n        // the number of seconds prepended to the original segment due to GOP fusion\n        prependedContentDuration = gopForFusion.duration;\n\n        gops.unshift(gopForFusion);\n        // Adjust Gops' metadata to account for the inclusion of the\n        // new gop at the beginning\n        gops.byteLength += gopForFusion.byteLength;\n        gops.nalCount += gopForFusion.nalCount;\n        gops.pts = gopForFusion.pts;\n        gops.dts = gopForFusion.dts;\n        gops.duration += gopForFusion.duration;\n      } else {\n        // If we didn't find a candidate gop fall back to keyframe-pulling\n        gops = frameUtils.extendFirstKeyFrame(gops);\n      }\n    }\n\n    // Trim gops to align with gopsToAlignWith\n    if (gopsToAlignWith.length) {\n      var alignedGops;\n\n      if (options.alignGopsAtEnd) {\n        alignedGops = this.alignGopsAtEnd_(gops);\n      } else {\n        alignedGops = this.alignGopsAtStart_(gops);\n      }\n\n      if (!alignedGops) {\n        // save all the nals in the last GOP into the gop cache\n        this.gopCache_.unshift({\n          gop: gops.pop(),\n          pps: track.pps,\n          sps: track.sps\n        });\n\n        // Keep a maximum of 6 GOPs in the cache\n        this.gopCache_.length = Math.min(6, this.gopCache_.length);\n\n        // Clear nalUnits\n        nalUnits = [];\n\n        // return early no gops can be aligned with desired gopsToAlignWith\n        this.resetStream_();\n        this.trigger('done', 'VideoSegmentStream');\n        return;\n      }\n\n      // Some gops were trimmed. clear dts info so minSegmentDts and pts are correct\n      // when recalculated before sending off to CoalesceStream\n      trackDecodeInfo.clearDtsInfo(track);\n\n      gops = alignedGops;\n    }\n\n    trackDecodeInfo.collectDtsInfo(track, gops);\n\n    // First, we have to build the index from byte locations to\n    // samples (that is, frames) in the video data\n    track.samples = frameUtils.generateSampleTable(gops);\n\n    // Concatenate the video data and construct the mdat\n    mdat = mp4.mdat(frameUtils.concatenateNalData(gops));\n\n    track.baseMediaDecodeTime = trackDecodeInfo.calculateTrackBaseMediaDecodeTime(\n      track, options.keepOriginalTimestamps);\n\n    this.trigger('processedGopsInfo', gops.map(function(gop) {\n      return {\n        pts: gop.pts,\n        dts: gop.dts,\n        byteLength: gop.byteLength\n      };\n    }));\n\n    firstGop = gops[0];\n    lastGop = gops[gops.length - 1];\n\n    this.trigger(\n      'segmentTimingInfo',\n      generateVideoSegmentTimingInfo(\n        track.baseMediaDecodeTime,\n        firstGop.dts,\n        firstGop.pts,\n        lastGop.dts + lastGop.duration,\n        lastGop.pts + lastGop.duration,\n        prependedContentDuration));\n\n    // save all the nals in the last GOP into the gop cache\n    this.gopCache_.unshift({\n      gop: gops.pop(),\n      pps: track.pps,\n      sps: track.sps\n    });\n\n    // Keep a maximum of 6 GOPs in the cache\n    this.gopCache_.length = Math.min(6, this.gopCache_.length);\n\n    // Clear nalUnits\n    nalUnits = [];\n\n    this.trigger('baseMediaDecodeTime', track.baseMediaDecodeTime);\n    this.trigger('timelineStartInfo', track.timelineStartInfo);\n\n    moof = mp4.moof(sequenceNumber, [track]);\n\n    // it would be great to allocate this array up front instead of\n    // throwing away hundreds of media segment fragments\n    boxes = new Uint8Array(moof.byteLength + mdat.byteLength);\n\n    // Bump the sequence number for next time\n    sequenceNumber++;\n\n    boxes.set(moof);\n    boxes.set(mdat, moof.byteLength);\n\n    this.trigger('data', {track: track, boxes: boxes});\n\n    this.resetStream_();\n\n    // Continue with the flush process now\n    this.trigger('done', 'VideoSegmentStream');\n  };\n\n  this.resetStream_ = function() {\n    trackDecodeInfo.clearDtsInfo(track);\n\n    // reset config and pps because they may differ across segments\n    // for instance, when we are rendition switching\n    config = undefined;\n    pps = undefined;\n  };\n\n  // Search for a candidate Gop for gop-fusion from the gop cache and\n  // return it or return null if no good candidate was found\n  this.getGopForFusion_ = function(nalUnit) {\n    var\n      halfSecond = 45000, // Half-a-second in a 90khz clock\n      allowableOverlap = 10000, // About 3 frames @ 30fps\n      nearestDistance = Infinity,\n      dtsDistance,\n      nearestGopObj,\n      currentGop,\n      currentGopObj,\n      i;\n\n    // Search for the GOP nearest to the beginning of this nal unit\n    for (i = 0; i < this.gopCache_.length; i++) {\n      currentGopObj = this.gopCache_[i];\n      currentGop = currentGopObj.gop;\n\n      // Reject Gops with different SPS or PPS\n      if (!(track.pps && arrayEquals(track.pps[0], currentGopObj.pps[0])) ||\n          !(track.sps && arrayEquals(track.sps[0], currentGopObj.sps[0]))) {\n        continue;\n      }\n\n      // Reject Gops that would require a negative baseMediaDecodeTime\n      if (currentGop.dts < track.timelineStartInfo.dts) {\n        continue;\n      }\n\n      // The distance between the end of the gop and the start of the nalUnit\n      dtsDistance = (nalUnit.dts - currentGop.dts) - currentGop.duration;\n\n      // Only consider GOPS that start before the nal unit and end within\n      // a half-second of the nal unit\n      if (dtsDistance >= -allowableOverlap &&\n          dtsDistance <= halfSecond) {\n\n        // Always use the closest GOP we found if there is more than\n        // one candidate\n        if (!nearestGopObj ||\n            nearestDistance > dtsDistance) {\n          nearestGopObj = currentGopObj;\n          nearestDistance = dtsDistance;\n        }\n      }\n    }\n\n    if (nearestGopObj) {\n      return nearestGopObj.gop;\n    }\n    return null;\n  };\n\n  // trim gop list to the first gop found that has a matching pts with a gop in the list\n  // of gopsToAlignWith starting from the START of the list\n  this.alignGopsAtStart_ = function(gops) {\n    var alignIndex, gopIndex, align, gop, byteLength, nalCount, duration, alignedGops;\n\n    byteLength = gops.byteLength;\n    nalCount = gops.nalCount;\n    duration = gops.duration;\n    alignIndex = gopIndex = 0;\n\n    while (alignIndex < gopsToAlignWith.length && gopIndex < gops.length) {\n      align = gopsToAlignWith[alignIndex];\n      gop = gops[gopIndex];\n\n      if (align.pts === gop.pts) {\n        break;\n      }\n\n      if (gop.pts > align.pts) {\n        // this current gop starts after the current gop we want to align on, so increment\n        // align index\n        alignIndex++;\n        continue;\n      }\n\n      // current gop starts before the current gop we want to align on. so increment gop\n      // index\n      gopIndex++;\n      byteLength -= gop.byteLength;\n      nalCount -= gop.nalCount;\n      duration -= gop.duration;\n    }\n\n    if (gopIndex === 0) {\n      // no gops to trim\n      return gops;\n    }\n\n    if (gopIndex === gops.length) {\n      // all gops trimmed, skip appending all gops\n      return null;\n    }\n\n    alignedGops = gops.slice(gopIndex);\n    alignedGops.byteLength = byteLength;\n    alignedGops.duration = duration;\n    alignedGops.nalCount = nalCount;\n    alignedGops.pts = alignedGops[0].pts;\n    alignedGops.dts = alignedGops[0].dts;\n\n    return alignedGops;\n  };\n\n  // trim gop list to the first gop found that has a matching pts with a gop in the list\n  // of gopsToAlignWith starting from the END of the list\n  this.alignGopsAtEnd_ = function(gops) {\n    var alignIndex, gopIndex, align, gop, alignEndIndex, matchFound;\n\n    alignIndex = gopsToAlignWith.length - 1;\n    gopIndex = gops.length - 1;\n    alignEndIndex = null;\n    matchFound = false;\n\n    while (alignIndex >= 0 && gopIndex >= 0) {\n      align = gopsToAlignWith[alignIndex];\n      gop = gops[gopIndex];\n\n      if (align.pts === gop.pts) {\n        matchFound = true;\n        break;\n      }\n\n      if (align.pts > gop.pts) {\n        alignIndex--;\n        continue;\n      }\n\n      if (alignIndex === gopsToAlignWith.length - 1) {\n        // gop.pts is greater than the last alignment candidate. If no match is found\n        // by the end of this loop, we still want to append gops that come after this\n        // point\n        alignEndIndex = gopIndex;\n      }\n\n      gopIndex--;\n    }\n\n    if (!matchFound && alignEndIndex === null) {\n      return null;\n    }\n\n    var trimIndex;\n\n    if (matchFound) {\n      trimIndex = gopIndex;\n    } else {\n      trimIndex = alignEndIndex;\n    }\n\n    if (trimIndex === 0) {\n      return gops;\n    }\n\n    var alignedGops = gops.slice(trimIndex);\n    var metadata = alignedGops.reduce(function(total, gop) {\n      total.byteLength += gop.byteLength;\n      total.duration += gop.duration;\n      total.nalCount += gop.nalCount;\n      return total;\n    }, { byteLength: 0, duration: 0, nalCount: 0 });\n\n    alignedGops.byteLength = metadata.byteLength;\n    alignedGops.duration = metadata.duration;\n    alignedGops.nalCount = metadata.nalCount;\n    alignedGops.pts = alignedGops[0].pts;\n    alignedGops.dts = alignedGops[0].dts;\n\n    return alignedGops;\n  };\n\n  this.alignGopsWith = function(newGopsToAlignWith) {\n    gopsToAlignWith = newGopsToAlignWith;\n  };\n};\n\nVideoSegmentStream.prototype = new Stream();\n\n/**\n * A Stream that can combine multiple streams (ie. audio & video)\n * into a single output segment for MSE. Also supports audio-only\n * and video-only streams.\n * @param options {object} transmuxer options object\n * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps\n *        in the source; false to adjust the first segment to start at media timeline start.\n */\nCoalesceStream = function(options, metadataStream) {\n  // Number of Tracks per output segment\n  // If greater than 1, we combine multiple\n  // tracks into a single segment\n  this.numberOfTracks = 0;\n  this.metadataStream = metadataStream;\n\n  options = options || {};\n\n  if (typeof options.remux !== 'undefined') {\n    this.remuxTracks = !!options.remux;\n  } else {\n    this.remuxTracks = true;\n  }\n\n  if (typeof options.keepOriginalTimestamps === 'boolean') {\n    this.keepOriginalTimestamps = options.keepOriginalTimestamps;\n  }\n\n  this.pendingTracks = [];\n  this.videoTrack = null;\n  this.pendingBoxes = [];\n  this.pendingCaptions = [];\n  this.pendingMetadata = [];\n  this.pendingBytes = 0;\n  this.emittedTracks = 0;\n\n  CoalesceStream.prototype.init.call(this);\n\n  // Take output from multiple\n  this.push = function(output) {\n    // buffer incoming captions until the associated video segment\n    // finishes\n    if (output.text) {\n      return this.pendingCaptions.push(output);\n    }\n    // buffer incoming id3 tags until the final flush\n    if (output.frames) {\n      return this.pendingMetadata.push(output);\n    }\n\n    // Add this track to the list of pending tracks and store\n    // important information required for the construction of\n    // the final segment\n    this.pendingTracks.push(output.track);\n    this.pendingBoxes.push(output.boxes);\n    this.pendingBytes += output.boxes.byteLength;\n\n    if (output.track.type === 'video') {\n      this.videoTrack = output.track;\n    }\n    if (output.track.type === 'audio') {\n      this.audioTrack = output.track;\n    }\n  };\n};\n\nCoalesceStream.prototype = new Stream();\nCoalesceStream.prototype.flush = function(flushSource) {\n  var\n    offset = 0,\n    event = {\n      captions: [],\n      captionStreams: {},\n      metadata: [],\n      info: {}\n    },\n    caption,\n    id3,\n    initSegment,\n    timelineStartPts = 0,\n    i;\n\n  if (this.pendingTracks.length < this.numberOfTracks) {\n    if (flushSource !== 'VideoSegmentStream' &&\n        flushSource !== 'AudioSegmentStream') {\n      // Return because we haven't received a flush from a data-generating\n      // portion of the segment (meaning that we have only recieved meta-data\n      // or captions.)\n      return;\n    } else if (this.remuxTracks) {\n      // Return until we have enough tracks from the pipeline to remux (if we\n      // are remuxing audio and video into a single MP4)\n      return;\n    } else if (this.pendingTracks.length === 0) {\n      // In the case where we receive a flush without any data having been\n      // received we consider it an emitted track for the purposes of coalescing\n      // `done` events.\n      // We do this for the case where there is an audio and video track in the\n      // segment but no audio data. (seen in several playlists with alternate\n      // audio tracks and no audio present in the main TS segments.)\n      this.emittedTracks++;\n\n      if (this.emittedTracks >= this.numberOfTracks) {\n        this.trigger('done');\n        this.emittedTracks = 0;\n      }\n      return;\n    }\n  }\n\n  if (this.videoTrack) {\n    timelineStartPts = this.videoTrack.timelineStartInfo.pts;\n    VIDEO_PROPERTIES.forEach(function(prop) {\n      event.info[prop] = this.videoTrack[prop];\n    }, this);\n  } else if (this.audioTrack) {\n    timelineStartPts = this.audioTrack.timelineStartInfo.pts;\n    AUDIO_PROPERTIES.forEach(function(prop) {\n      event.info[prop] = this.audioTrack[prop];\n    }, this);\n  }\n\n  if (this.pendingTracks.length === 1) {\n    event.type = this.pendingTracks[0].type;\n  } else {\n    event.type = 'combined';\n  }\n\n  this.emittedTracks += this.pendingTracks.length;\n\n  initSegment = mp4.initSegment(this.pendingTracks);\n\n  // Create a new typed array to hold the init segment\n  event.initSegment = new Uint8Array(initSegment.byteLength);\n\n  // Create an init segment containing a moov\n  // and track definitions\n  event.initSegment.set(initSegment);\n\n  // Create a new typed array to hold the moof+mdats\n  event.data = new Uint8Array(this.pendingBytes);\n\n  // Append each moof+mdat (one per track) together\n  for (i = 0; i < this.pendingBoxes.length; i++) {\n    event.data.set(this.pendingBoxes[i], offset);\n    offset += this.pendingBoxes[i].byteLength;\n  }\n\n  // Translate caption PTS times into second offsets to match the\n  // video timeline for the segment, and add track info\n  for (i = 0; i < this.pendingCaptions.length; i++) {\n    caption = this.pendingCaptions[i];\n\n    caption.startTime = caption.startPts;\n    if (!this.keepOriginalTimestamps) {\n      caption.startTime -= timelineStartPts;\n    }\n    caption.startTime /= 90e3;\n\n    caption.endTime = caption.endPts;\n    if (!this.keepOriginalTimestamps) {\n      caption.endTime -= timelineStartPts;\n    }\n    caption.endTime /= 90e3;\n\n    event.captionStreams[caption.stream] = true;\n    event.captions.push(caption);\n  }\n\n  // Translate ID3 frame PTS times into second offsets to match the\n  // video timeline for the segment\n  for (i = 0; i < this.pendingMetadata.length; i++) {\n    id3 = this.pendingMetadata[i];\n\n    id3.cueTime = id3.pts;\n    if (!this.keepOriginalTimestamps) {\n      id3.cueTime -= timelineStartPts;\n    }\n    id3.cueTime /= 90e3;\n\n    event.metadata.push(id3);\n  }\n\n  // We add this to every single emitted segment even though we only need\n  // it for the first\n  event.metadata.dispatchType = this.metadataStream.dispatchType;\n\n  // Reset stream state\n  this.pendingTracks.length = 0;\n  this.videoTrack = null;\n  this.pendingBoxes.length = 0;\n  this.pendingCaptions.length = 0;\n  this.pendingBytes = 0;\n  this.pendingMetadata.length = 0;\n\n  // Emit the built segment\n  this.trigger('data', event);\n\n  // Only emit `done` if all tracks have been flushed and emitted\n  if (this.emittedTracks >= this.numberOfTracks) {\n    this.trigger('done');\n    this.emittedTracks = 0;\n  }\n};\n/**\n * A Stream that expects MP2T binary data as input and produces\n * corresponding media segments, suitable for use with Media Source\n * Extension (MSE) implementations that support the ISO BMFF byte\n * stream format, like Chrome.\n */\nTransmuxer = function(options) {\n  var\n    self = this,\n    hasFlushed = true,\n    videoTrack,\n    audioTrack;\n\n  Transmuxer.prototype.init.call(this);\n\n  options = options || {};\n  this.baseMediaDecodeTime = options.baseMediaDecodeTime || 0;\n  this.transmuxPipeline_ = {};\n\n  this.setupAacPipeline = function() {\n    var pipeline = {};\n    this.transmuxPipeline_ = pipeline;\n\n    pipeline.type = 'aac';\n    pipeline.metadataStream = new m2ts.MetadataStream();\n\n    // set up the parsing pipeline\n    pipeline.aacStream = new AacStream();\n    pipeline.audioTimestampRolloverStream = new m2ts.TimestampRolloverStream('audio');\n    pipeline.timedMetadataTimestampRolloverStream = new m2ts.TimestampRolloverStream('timed-metadata');\n    pipeline.adtsStream = new AdtsStream();\n    pipeline.coalesceStream = new CoalesceStream(options, pipeline.metadataStream);\n    pipeline.headOfPipeline = pipeline.aacStream;\n\n    pipeline.aacStream\n      .pipe(pipeline.audioTimestampRolloverStream)\n      .pipe(pipeline.adtsStream);\n    pipeline.aacStream\n      .pipe(pipeline.timedMetadataTimestampRolloverStream)\n      .pipe(pipeline.metadataStream)\n      .pipe(pipeline.coalesceStream);\n\n    pipeline.metadataStream.on('timestamp', function(frame) {\n      pipeline.aacStream.setTimestamp(frame.timeStamp);\n    });\n\n    pipeline.aacStream.on('data', function(data) {\n      if (data.type === 'timed-metadata' && !pipeline.audioSegmentStream) {\n        audioTrack = audioTrack || {\n          timelineStartInfo: {\n            baseMediaDecodeTime: self.baseMediaDecodeTime\n          },\n          codec: 'adts',\n          type: 'audio'\n        };\n        // hook up the audio segment stream to the first track with aac data\n        pipeline.coalesceStream.numberOfTracks++;\n        pipeline.audioSegmentStream = new AudioSegmentStream(audioTrack, options);\n        // Set up the final part of the audio pipeline\n        pipeline.adtsStream\n          .pipe(pipeline.audioSegmentStream)\n          .pipe(pipeline.coalesceStream);\n      }\n    });\n\n    // Re-emit any data coming from the coalesce stream to the outside world\n    pipeline.coalesceStream.on('data', this.trigger.bind(this, 'data'));\n    // Let the consumer know we have finished flushing the entire pipeline\n    pipeline.coalesceStream.on('done', this.trigger.bind(this, 'done'));\n  };\n\n  this.setupTsPipeline = function() {\n    var pipeline = {};\n    this.transmuxPipeline_ = pipeline;\n\n    pipeline.type = 'ts';\n    pipeline.metadataStream = new m2ts.MetadataStream();\n\n    // set up the parsing pipeline\n    pipeline.packetStream = new m2ts.TransportPacketStream();\n    pipeline.parseStream = new m2ts.TransportParseStream();\n    pipeline.elementaryStream = new m2ts.ElementaryStream();\n    pipeline.videoTimestampRolloverStream = new m2ts.TimestampRolloverStream('video');\n    pipeline.audioTimestampRolloverStream = new m2ts.TimestampRolloverStream('audio');\n    pipeline.timedMetadataTimestampRolloverStream = new m2ts.TimestampRolloverStream('timed-metadata');\n    pipeline.adtsStream = new AdtsStream();\n    pipeline.h264Stream = new H264Stream();\n    pipeline.captionStream = new m2ts.CaptionStream();\n    pipeline.coalesceStream = new CoalesceStream(options, pipeline.metadataStream);\n    pipeline.headOfPipeline = pipeline.packetStream;\n\n    // disassemble MPEG2-TS packets into elementary streams\n    pipeline.packetStream\n      .pipe(pipeline.parseStream)\n      .pipe(pipeline.elementaryStream);\n\n    // !!THIS ORDER IS IMPORTANT!!\n    // demux the streams\n    pipeline.elementaryStream\n      .pipe(pipeline.videoTimestampRolloverStream)\n      .pipe(pipeline.h264Stream);\n    pipeline.elementaryStream\n      .pipe(pipeline.audioTimestampRolloverStream)\n      .pipe(pipeline.adtsStream);\n\n    pipeline.elementaryStream\n      .pipe(pipeline.timedMetadataTimestampRolloverStream)\n      .pipe(pipeline.metadataStream)\n      .pipe(pipeline.coalesceStream);\n\n    // Hook up CEA-608/708 caption stream\n    pipeline.h264Stream.pipe(pipeline.captionStream)\n      .pipe(pipeline.coalesceStream);\n\n    pipeline.elementaryStream.on('data', function(data) {\n      var i;\n\n      if (data.type === 'metadata') {\n        i = data.tracks.length;\n\n        // scan the tracks listed in the metadata\n        while (i--) {\n          if (!videoTrack && data.tracks[i].type === 'video') {\n            videoTrack = data.tracks[i];\n            videoTrack.timelineStartInfo.baseMediaDecodeTime = self.baseMediaDecodeTime;\n          } else if (!audioTrack && data.tracks[i].type === 'audio') {\n            audioTrack = data.tracks[i];\n            audioTrack.timelineStartInfo.baseMediaDecodeTime = self.baseMediaDecodeTime;\n          }\n        }\n\n        // hook up the video segment stream to the first track with h264 data\n        if (videoTrack && !pipeline.videoSegmentStream) {\n          pipeline.coalesceStream.numberOfTracks++;\n          pipeline.videoSegmentStream = new VideoSegmentStream(videoTrack, options);\n\n          pipeline.videoSegmentStream.on('timelineStartInfo', function(timelineStartInfo) {\n          // When video emits timelineStartInfo data after a flush, we forward that\n          // info to the AudioSegmentStream, if it exists, because video timeline\n          // data takes precedence.\n            if (audioTrack) {\n              audioTrack.timelineStartInfo = timelineStartInfo;\n              // On the first segment we trim AAC frames that exist before the\n              // very earliest DTS we have seen in video because Chrome will\n              // interpret any video track with a baseMediaDecodeTime that is\n              // non-zero as a gap.\n              pipeline.audioSegmentStream.setEarliestDts(timelineStartInfo.dts);\n            }\n          });\n\n          pipeline.videoSegmentStream.on('processedGopsInfo',\n            self.trigger.bind(self, 'gopInfo'));\n          pipeline.videoSegmentStream.on('segmentTimingInfo',\n            self.trigger.bind(self, 'videoSegmentTimingInfo'));\n\n          pipeline.videoSegmentStream.on('baseMediaDecodeTime', function(baseMediaDecodeTime) {\n            if (audioTrack) {\n              pipeline.audioSegmentStream.setVideoBaseMediaDecodeTime(baseMediaDecodeTime);\n            }\n          });\n\n          // Set up the final part of the video pipeline\n          pipeline.h264Stream\n            .pipe(pipeline.videoSegmentStream)\n            .pipe(pipeline.coalesceStream);\n        }\n\n        if (audioTrack && !pipeline.audioSegmentStream) {\n          // hook up the audio segment stream to the first track with aac data\n          pipeline.coalesceStream.numberOfTracks++;\n          pipeline.audioSegmentStream = new AudioSegmentStream(audioTrack, options);\n\n          // Set up the final part of the audio pipeline\n          pipeline.adtsStream\n            .pipe(pipeline.audioSegmentStream)\n            .pipe(pipeline.coalesceStream);\n        }\n      }\n    });\n\n    // Re-emit any data coming from the coalesce stream to the outside world\n    pipeline.coalesceStream.on('data', this.trigger.bind(this, 'data'));\n    // Let the consumer know we have finished flushing the entire pipeline\n    pipeline.coalesceStream.on('done', this.trigger.bind(this, 'done'));\n  };\n\n  // hook up the segment streams once track metadata is delivered\n  this.setBaseMediaDecodeTime = function(baseMediaDecodeTime) {\n    var pipeline = this.transmuxPipeline_;\n\n    if (!options.keepOriginalTimestamps) {\n      this.baseMediaDecodeTime = baseMediaDecodeTime;\n    }\n\n    if (audioTrack) {\n      audioTrack.timelineStartInfo.dts = undefined;\n      audioTrack.timelineStartInfo.pts = undefined;\n      trackDecodeInfo.clearDtsInfo(audioTrack);\n      if (!options.keepOriginalTimestamps) {\n        audioTrack.timelineStartInfo.baseMediaDecodeTime = baseMediaDecodeTime;\n      }\n      if (pipeline.audioTimestampRolloverStream) {\n        pipeline.audioTimestampRolloverStream.discontinuity();\n      }\n    }\n    if (videoTrack) {\n      if (pipeline.videoSegmentStream) {\n        pipeline.videoSegmentStream.gopCache_ = [];\n        pipeline.videoTimestampRolloverStream.discontinuity();\n      }\n      videoTrack.timelineStartInfo.dts = undefined;\n      videoTrack.timelineStartInfo.pts = undefined;\n      trackDecodeInfo.clearDtsInfo(videoTrack);\n      pipeline.captionStream.reset();\n      if (!options.keepOriginalTimestamps) {\n        videoTrack.timelineStartInfo.baseMediaDecodeTime = baseMediaDecodeTime;\n      }\n    }\n\n    if (pipeline.timedMetadataTimestampRolloverStream) {\n      pipeline.timedMetadataTimestampRolloverStream.discontinuity();\n    }\n  };\n\n  this.setAudioAppendStart = function(timestamp) {\n    if (audioTrack) {\n      this.transmuxPipeline_.audioSegmentStream.setAudioAppendStart(timestamp);\n    }\n  };\n\n  this.alignGopsWith = function(gopsToAlignWith) {\n    if (videoTrack && this.transmuxPipeline_.videoSegmentStream) {\n      this.transmuxPipeline_.videoSegmentStream.alignGopsWith(gopsToAlignWith);\n    }\n  };\n\n  // feed incoming data to the front of the parsing pipeline\n  this.push = function(data) {\n    if (hasFlushed) {\n      var isAac = isLikelyAacData(data);\n\n      if (isAac && this.transmuxPipeline_.type !== 'aac') {\n        this.setupAacPipeline();\n      } else if (!isAac && this.transmuxPipeline_.type !== 'ts') {\n        this.setupTsPipeline();\n      }\n      hasFlushed = false;\n    }\n    this.transmuxPipeline_.headOfPipeline.push(data);\n  };\n\n  // flush any buffered data\n  this.flush = function() {\n      hasFlushed = true;\n    // Start at the top of the pipeline and flush all pending work\n    this.transmuxPipeline_.headOfPipeline.flush();\n  };\n\n  // Caption data has to be reset when seeking outside buffered range\n  this.resetCaptions = function() {\n    if (this.transmuxPipeline_.captionStream) {\n      this.transmuxPipeline_.captionStream.reset();\n    }\n  };\n\n};\nTransmuxer.prototype = new Stream();\n\nmodule.exports = {\n  Transmuxer: Transmuxer,\n  VideoSegmentStream: VideoSegmentStream,\n  AudioSegmentStream: AudioSegmentStream,\n  AUDIO_PROPERTIES: AUDIO_PROPERTIES,\n  VIDEO_PROPERTIES: VIDEO_PROPERTIES,\n  // exported for testing\n  generateVideoSegmentTimingInfo: generateVideoSegmentTimingInfo\n};\n","/**\n * mux.js\n *\n * Copyright (c) Brightcove\n * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n */\n'use strict';\n\nvar ExpGolomb;\n\n/**\n * Parser for exponential Golomb codes, a variable-bitwidth number encoding\n * scheme used by h264.\n */\nExpGolomb = function(workingData) {\n  var\n    // the number of bytes left to examine in workingData\n    workingBytesAvailable = workingData.byteLength,\n\n    // the current word being examined\n    workingWord = 0, // :uint\n\n    // the number of bits left to examine in the current word\n    workingBitsAvailable = 0; // :uint;\n\n  // ():uint\n  this.length = function() {\n    return (8 * workingBytesAvailable);\n  };\n\n  // ():uint\n  this.bitsAvailable = function() {\n    return (8 * workingBytesAvailable) + workingBitsAvailable;\n  };\n\n  // ():void\n  this.loadWord = function() {\n    var\n      position = workingData.byteLength - workingBytesAvailable,\n      workingBytes = new Uint8Array(4),\n      availableBytes = Math.min(4, workingBytesAvailable);\n\n    if (availableBytes === 0) {\n      throw new Error('no bytes available');\n    }\n\n    workingBytes.set(workingData.subarray(position,\n                                          position + availableBytes));\n    workingWord = new DataView(workingBytes.buffer).getUint32(0);\n\n    // track the amount of workingData that has been processed\n    workingBitsAvailable = availableBytes * 8;\n    workingBytesAvailable -= availableBytes;\n  };\n\n  // (count:int):void\n  this.skipBits = function(count) {\n    var skipBytes; // :int\n    if (workingBitsAvailable > count) {\n      workingWord          <<= count;\n      workingBitsAvailable -= count;\n    } else {\n      count -= workingBitsAvailable;\n      skipBytes = Math.floor(count / 8);\n\n      count -= (skipBytes * 8);\n      workingBytesAvailable -= skipBytes;\n\n      this.loadWord();\n\n      workingWord <<= count;\n      workingBitsAvailable -= count;\n    }\n  };\n\n  // (size:int):uint\n  this.readBits = function(size) {\n    var\n      bits = Math.min(workingBitsAvailable, size), // :uint\n      valu = workingWord >>> (32 - bits); // :uint\n    // if size > 31, handle error\n    workingBitsAvailable -= bits;\n    if (workingBitsAvailable > 0) {\n      workingWord <<= bits;\n    } else if (workingBytesAvailable > 0) {\n      this.loadWord();\n    }\n\n    bits = size - bits;\n    if (bits > 0) {\n      return valu << bits | this.readBits(bits);\n    }\n    return valu;\n  };\n\n  // ():uint\n  this.skipLeadingZeros = function() {\n    var leadingZeroCount; // :uint\n    for (leadingZeroCount = 0; leadingZeroCount < workingBitsAvailable; ++leadingZeroCount) {\n      if ((workingWord & (0x80000000 >>> leadingZeroCount)) !== 0) {\n        // the first bit of working word is 1\n        workingWord <<= leadingZeroCount;\n        workingBitsAvailable -= leadingZeroCount;\n        return leadingZeroCount;\n      }\n    }\n\n    // we exhausted workingWord and still have not found a 1\n    this.loadWord();\n    return leadingZeroCount + this.skipLeadingZeros();\n  };\n\n  // ():void\n  this.skipUnsignedExpGolomb = function() {\n    this.skipBits(1 + this.skipLeadingZeros());\n  };\n\n  // ():void\n  this.skipExpGolomb = function() {\n    this.skipBits(1 + this.skipLeadingZeros());\n  };\n\n  // ():uint\n  this.readUnsignedExpGolomb = function() {\n    var clz = this.skipLeadingZeros(); // :uint\n    return this.readBits(clz + 1) - 1;\n  };\n\n  // ():int\n  this.readExpGolomb = function() {\n    var valu = this.readUnsignedExpGolomb(); // :int\n    if (0x01 & valu) {\n      // the number is odd if the low order bit is set\n      return (1 + valu) >>> 1; // add 1 to make it even, and divide by 2\n    }\n    return -1 * (valu >>> 1); // divide by two then make it negative\n  };\n\n  // Some convenience functions\n  // :Boolean\n  this.readBoolean = function() {\n    return this.readBits(1) === 1;\n  };\n\n  // ():int\n  this.readUnsignedByte = function() {\n    return this.readBits(8);\n  };\n\n  this.loadWord();\n};\n\nmodule.exports = ExpGolomb;\n","/**\n * mux.js\n *\n * Copyright (c) Brightcove\n * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n */\nvar\n  ONE_SECOND_IN_TS = 90000, // 90kHz clock\n  secondsToVideoTs,\n  secondsToAudioTs,\n  videoTsToSeconds,\n  audioTsToSeconds,\n  audioTsToVideoTs,\n  videoTsToAudioTs;\n\nsecondsToVideoTs = function(seconds) {\n  return seconds * ONE_SECOND_IN_TS;\n};\n\nsecondsToAudioTs = function(seconds, sampleRate) {\n  return seconds * sampleRate;\n};\n\nvideoTsToSeconds = function(timestamp) {\n  return timestamp / ONE_SECOND_IN_TS;\n};\n\naudioTsToSeconds = function(timestamp, sampleRate) {\n  return timestamp / sampleRate;\n};\n\naudioTsToVideoTs = function(timestamp, sampleRate) {\n  return secondsToVideoTs(audioTsToSeconds(timestamp, sampleRate));\n};\n\nvideoTsToAudioTs = function(timestamp, sampleRate) {\n  return secondsToAudioTs(videoTsToSeconds(timestamp), sampleRate);\n};\n\nmodule.exports = {\n  secondsToVideoTs: secondsToVideoTs,\n  secondsToAudioTs: secondsToAudioTs,\n  videoTsToSeconds: videoTsToSeconds,\n  audioTsToSeconds: audioTsToSeconds,\n  audioTsToVideoTs: audioTsToVideoTs,\n  videoTsToAudioTs: videoTsToAudioTs\n};\n","/**\n * mux.js\n *\n * Copyright (c) Brightcove\n * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n *\n * Utilities to detect basic properties and metadata about TS Segments.\n */\n'use strict';\n\nvar StreamTypes = require('./stream-types.js');\n\nvar parsePid = function(packet) {\n  var pid = packet[1] & 0x1f;\n  pid <<= 8;\n  pid |= packet[2];\n  return pid;\n};\n\nvar parsePayloadUnitStartIndicator = function(packet) {\n  return !!(packet[1] & 0x40);\n};\n\nvar parseAdaptionField = function(packet) {\n  var offset = 0;\n  // if an adaption field is present, its length is specified by the\n  // fifth byte of the TS packet header. The adaptation field is\n  // used to add stuffing to PES packets that don't fill a complete\n  // TS packet, and to specify some forms of timing and control data\n  // that we do not currently use.\n  if (((packet[3] & 0x30) >>> 4) > 0x01) {\n    offset += packet[4] + 1;\n  }\n  return offset;\n};\n\nvar parseType = function(packet, pmtPid) {\n  var pid = parsePid(packet);\n  if (pid === 0) {\n    return 'pat';\n  } else if (pid === pmtPid) {\n    return 'pmt';\n  } else if (pmtPid) {\n    return 'pes';\n  }\n  return null;\n};\n\nvar parsePat = function(packet) {\n  var pusi = parsePayloadUnitStartIndicator(packet);\n  var offset = 4 + parseAdaptionField(packet);\n\n  if (pusi) {\n    offset += packet[offset] + 1;\n  }\n\n  return (packet[offset + 10] & 0x1f) << 8 | packet[offset + 11];\n};\n\nvar parsePmt = function(packet) {\n  var programMapTable = {};\n  var pusi = parsePayloadUnitStartIndicator(packet);\n  var payloadOffset = 4 + parseAdaptionField(packet);\n\n  if (pusi) {\n    payloadOffset += packet[payloadOffset] + 1;\n  }\n\n  // PMTs can be sent ahead of the time when they should actually\n  // take effect. We don't believe this should ever be the case\n  // for HLS but we'll ignore \"forward\" PMT declarations if we see\n  // them. Future PMT declarations have the current_next_indicator\n  // set to zero.\n  if (!(packet[payloadOffset + 5] & 0x01)) {\n    return;\n  }\n\n  var sectionLength, tableEnd, programInfoLength;\n  // the mapping table ends at the end of the current section\n  sectionLength = (packet[payloadOffset + 1] & 0x0f) << 8 | packet[payloadOffset + 2];\n  tableEnd = 3 + sectionLength - 4;\n\n  // to determine where the table is, we have to figure out how\n  // long the program info descriptors are\n  programInfoLength = (packet[payloadOffset + 10] & 0x0f) << 8 | packet[payloadOffset + 11];\n\n  // advance the offset to the first entry in the mapping table\n  var offset = 12 + programInfoLength;\n  while (offset < tableEnd) {\n    var i = payloadOffset + offset;\n    // add an entry that maps the elementary_pid to the stream_type\n    programMapTable[(packet[i + 1] & 0x1F) << 8 | packet[i + 2]] = packet[i];\n\n    // move to the next table entry\n    // skip past the elementary stream descriptors, if present\n    offset += ((packet[i + 3] & 0x0F) << 8 | packet[i + 4]) + 5;\n  }\n  return programMapTable;\n};\n\nvar parsePesType = function(packet, programMapTable) {\n  var pid = parsePid(packet);\n  var type = programMapTable[pid];\n  switch (type) {\n    case StreamTypes.H264_STREAM_TYPE:\n      return 'video';\n    case StreamTypes.ADTS_STREAM_TYPE:\n      return 'audio';\n    case StreamTypes.METADATA_STREAM_TYPE:\n      return 'timed-metadata';\n    default:\n      return null;\n  }\n};\n\nvar parsePesTime = function(packet) {\n  var pusi = parsePayloadUnitStartIndicator(packet);\n  if (!pusi) {\n    return null;\n  }\n\n  var offset = 4 + parseAdaptionField(packet);\n\n  if (offset >= packet.byteLength) {\n    // From the H 222.0 MPEG-TS spec\n    // \"For transport stream packets carrying PES packets, stuffing is needed when there\n    //  is insufficient PES packet data to completely fill the transport stream packet\n    //  payload bytes. Stuffing is accomplished by defining an adaptation field longer than\n    //  the sum of the lengths of the data elements in it, so that the payload bytes\n    //  remaining after the adaptation field exactly accommodates the available PES packet\n    //  data.\"\n    //\n    // If the offset is >= the length of the packet, then the packet contains no data\n    // and instead is just adaption field stuffing bytes\n    return null;\n  }\n\n  var pes = null;\n  var ptsDtsFlags;\n\n  // PES packets may be annotated with a PTS value, or a PTS value\n  // and a DTS value. Determine what combination of values is\n  // available to work with.\n  ptsDtsFlags = packet[offset + 7];\n\n  // PTS and DTS are normally stored as a 33-bit number.  Javascript\n  // performs all bitwise operations on 32-bit integers but javascript\n  // supports a much greater range (52-bits) of integer using standard\n  // mathematical operations.\n  // We construct a 31-bit value using bitwise operators over the 31\n  // most significant bits and then multiply by 4 (equal to a left-shift\n  // of 2) before we add the final 2 least significant bits of the\n  // timestamp (equal to an OR.)\n  if (ptsDtsFlags & 0xC0) {\n    pes = {};\n    // the PTS and DTS are not written out directly. For information\n    // on how they are encoded, see\n    // http://dvd.sourceforge.net/dvdinfo/pes-hdr.html\n    pes.pts = (packet[offset + 9] & 0x0E) << 27 |\n      (packet[offset + 10] & 0xFF) << 20 |\n      (packet[offset + 11] & 0xFE) << 12 |\n      (packet[offset + 12] & 0xFF) <<  5 |\n      (packet[offset + 13] & 0xFE) >>>  3;\n    pes.pts *= 4; // Left shift by 2\n    pes.pts += (packet[offset + 13] & 0x06) >>> 1; // OR by the two LSBs\n    pes.dts = pes.pts;\n    if (ptsDtsFlags & 0x40) {\n      pes.dts = (packet[offset + 14] & 0x0E) << 27 |\n        (packet[offset + 15] & 0xFF) << 20 |\n        (packet[offset + 16] & 0xFE) << 12 |\n        (packet[offset + 17] & 0xFF) << 5 |\n        (packet[offset + 18] & 0xFE) >>> 3;\n      pes.dts *= 4; // Left shift by 2\n      pes.dts += (packet[offset + 18] & 0x06) >>> 1; // OR by the two LSBs\n    }\n  }\n  return pes;\n};\n\nvar parseNalUnitType = function(type) {\n  switch (type) {\n    case 0x05:\n      return 'slice_layer_without_partitioning_rbsp_idr';\n    case 0x06:\n      return 'sei_rbsp';\n    case 0x07:\n      return 'seq_parameter_set_rbsp';\n    case 0x08:\n      return 'pic_parameter_set_rbsp';\n    case 0x09:\n      return 'access_unit_delimiter_rbsp';\n    default:\n      return null;\n  }\n};\n\nvar videoPacketContainsKeyFrame = function(packet) {\n  var offset = 4 + parseAdaptionField(packet);\n  var frameBuffer = packet.subarray(offset);\n  var frameI = 0;\n  var frameSyncPoint = 0;\n  var foundKeyFrame = false;\n  var nalType;\n\n  // advance the sync point to a NAL start, if necessary\n  for (; frameSyncPoint < frameBuffer.byteLength - 3; frameSyncPoint++) {\n    if (frameBuffer[frameSyncPoint + 2] === 1) {\n      // the sync point is properly aligned\n      frameI = frameSyncPoint + 5;\n      break;\n    }\n  }\n\n  while (frameI < frameBuffer.byteLength) {\n    // look at the current byte to determine if we've hit the end of\n    // a NAL unit boundary\n    switch (frameBuffer[frameI]) {\n    case 0:\n      // skip past non-sync sequences\n      if (frameBuffer[frameI - 1] !== 0) {\n        frameI += 2;\n        break;\n      } else if (frameBuffer[frameI - 2] !== 0) {\n        frameI++;\n        break;\n      }\n\n      if (frameSyncPoint + 3 !== frameI - 2) {\n        nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\n        if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\n          foundKeyFrame = true;\n        }\n      }\n\n      // drop trailing zeroes\n      do {\n        frameI++;\n      } while (frameBuffer[frameI] !== 1 && frameI < frameBuffer.length);\n      frameSyncPoint = frameI - 2;\n      frameI += 3;\n      break;\n    case 1:\n      // skip past non-sync sequences\n      if (frameBuffer[frameI - 1] !== 0 ||\n          frameBuffer[frameI - 2] !== 0) {\n        frameI += 3;\n        break;\n      }\n\n      nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\n      if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\n        foundKeyFrame = true;\n      }\n      frameSyncPoint = frameI - 2;\n      frameI += 3;\n      break;\n    default:\n      // the current byte isn't a one or zero, so it cannot be part\n      // of a sync sequence\n      frameI += 3;\n      break;\n    }\n  }\n  frameBuffer = frameBuffer.subarray(frameSyncPoint);\n  frameI -= frameSyncPoint;\n  frameSyncPoint = 0;\n  // parse the final nal\n  if (frameBuffer && frameBuffer.byteLength > 3) {\n    nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\n    if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\n      foundKeyFrame = true;\n    }\n  }\n\n  return foundKeyFrame;\n};\n\n\nmodule.exports = {\n  parseType: parseType,\n  parsePat: parsePat,\n  parsePmt: parsePmt,\n  parsePayloadUnitStartIndicator: parsePayloadUnitStartIndicator,\n  parsePesType: parsePesType,\n  parsePesTime: parsePesTime,\n  videoPacketContainsKeyFrame: videoPacketContainsKeyFrame\n};\n","/**\n * mux.js\n *\n * Copyright (c) Brightcove\n * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n *\n * A lightweight readable stream implemention that handles event dispatching.\n * Objects that inherit from streams should call init in their constructors.\n */\n'use strict';\n\nvar Stream = function() {\n  this.init = function() {\n    var listeners = {};\n    /**\n     * Add a listener for a specified event type.\n     * @param type {string} the event name\n     * @param listener {function} the callback to be invoked when an event of\n     * the specified type occurs\n     */\n    this.on = function(type, listener) {\n      if (!listeners[type]) {\n        listeners[type] = [];\n      }\n      listeners[type] = listeners[type].concat(listener);\n    };\n    /**\n     * Remove a listener for a specified event type.\n     * @param type {string} the event name\n     * @param listener {function} a function previously registered for this\n     * type of event through `on`\n     */\n    this.off = function(type, listener) {\n      var index;\n      if (!listeners[type]) {\n        return false;\n      }\n      index = listeners[type].indexOf(listener);\n      listeners[type] = listeners[type].slice();\n      listeners[type].splice(index, 1);\n      return index > -1;\n    };\n    /**\n     * Trigger an event of the specified type on this stream. Any additional\n     * arguments to this function are passed as parameters to event listeners.\n     * @param type {string} the event name\n     */\n    this.trigger = function(type) {\n      var callbacks, i, length, args;\n      callbacks = listeners[type];\n      if (!callbacks) {\n        return;\n      }\n      // Slicing the arguments on every invocation of this method\n      // can add a significant amount of overhead. Avoid the\n      // intermediate object creation for the common case of a\n      // single callback argument\n      if (arguments.length === 2) {\n        length = callbacks.length;\n        for (i = 0; i < length; ++i) {\n          callbacks[i].call(this, arguments[1]);\n        }\n      } else {\n        args = [];\n        i = arguments.length;\n        for (i = 1; i < arguments.length; ++i) {\n          args.push(arguments[i]);\n        }\n        length = callbacks.length;\n        for (i = 0; i < length; ++i) {\n          callbacks[i].apply(this, args);\n        }\n      }\n    };\n    /**\n     * Destroys the stream and cleans up.\n     */\n    this.dispose = function() {\n      listeners = {};\n    };\n  };\n};\n\n/**\n * Forwards all `data` events on this stream to the destination stream. The\n * destination stream should provide a method `push` to receive the data\n * events as they arrive.\n * @param destination {stream} the stream that will receive all `data` events\n * @param autoFlush {boolean} if false, we will not call `flush` on the destination\n *                            when the current stream emits a 'done' event\n * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\n */\nStream.prototype.pipe = function(destination) {\n  this.on('data', function(data) {\n    destination.push(data);\n  });\n\n  this.on('done', function(flushSource) {\n    destination.flush(flushSource);\n  });\n\n  return destination;\n};\n\n// Default stream functions that are expected to be overridden to perform\n// actual work. These are provided by the prototype as a sort of no-op\n// implementation so that we don't have to check for their existence in the\n// `pipe` function above.\nStream.prototype.push = function(data) {\n  this.trigger('data', data);\n};\n\nStream.prototype.flush = function(flushSource) {\n  this.trigger('done', flushSource);\n};\n\nmodule.exports = Stream;\n","module.exports = function isPrimitive(value) {\n\treturn value === null || (typeof value !== 'function' && typeof value !== 'object');\n};\n","/**\n * mux.js\n *\n * Copyright (c) Brightcove\n * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n *\n * Reads in-band caption information from a video elementary\n * stream. Captions must follow the CEA-708 standard for injection\n * into an MPEG-2 transport streams.\n * @see https://en.wikipedia.org/wiki/CEA-708\n * @see https://www.gpo.gov/fdsys/pkg/CFR-2007-title47-vol1/pdf/CFR-2007-title47-vol1-sec15-119.pdf\n */\n\n'use strict';\n\n// -----------------\n// Link To Transport\n// -----------------\n\nvar Stream = require('../utils/stream');\nvar cea708Parser = require('../tools/caption-packet-parser');\n\nvar CaptionStream = function() {\n\n  CaptionStream.prototype.init.call(this);\n\n  this.captionPackets_ = [];\n\n  this.ccStreams_ = [\n    new Cea608Stream(0, 0), // eslint-disable-line no-use-before-define\n    new Cea608Stream(0, 1), // eslint-disable-line no-use-before-define\n    new Cea608Stream(1, 0), // eslint-disable-line no-use-before-define\n    new Cea608Stream(1, 1) // eslint-disable-line no-use-before-define\n  ];\n\n  this.reset();\n\n  // forward data and done events from CCs to this CaptionStream\n  this.ccStreams_.forEach(function(cc) {\n    cc.on('data', this.trigger.bind(this, 'data'));\n    cc.on('done', this.trigger.bind(this, 'done'));\n  }, this);\n\n};\n\nCaptionStream.prototype = new Stream();\nCaptionStream.prototype.push = function(event) {\n  var sei, userData, newCaptionPackets;\n\n  // only examine SEI NALs\n  if (event.nalUnitType !== 'sei_rbsp') {\n    return;\n  }\n\n  // parse the sei\n  sei = cea708Parser.parseSei(event.escapedRBSP);\n\n  // ignore everything but user_data_registered_itu_t_t35\n  if (sei.payloadType !== cea708Parser.USER_DATA_REGISTERED_ITU_T_T35) {\n    return;\n  }\n\n  // parse out the user data payload\n  userData = cea708Parser.parseUserData(sei);\n\n  // ignore unrecognized userData\n  if (!userData) {\n    return;\n  }\n\n  // Sometimes, the same segment # will be downloaded twice. To stop the\n  // caption data from being processed twice, we track the latest dts we've\n  // received and ignore everything with a dts before that. However, since\n  // data for a specific dts can be split across packets on either side of\n  // a segment boundary, we need to make sure we *don't* ignore the packets\n  // from the *next* segment that have dts === this.latestDts_. By constantly\n  // tracking the number of packets received with dts === this.latestDts_, we\n  // know how many should be ignored once we start receiving duplicates.\n  if (event.dts < this.latestDts_) {\n    // We've started getting older data, so set the flag.\n    this.ignoreNextEqualDts_ = true;\n    return;\n  } else if ((event.dts === this.latestDts_) && (this.ignoreNextEqualDts_)) {\n    this.numSameDts_--;\n    if (!this.numSameDts_) {\n      // We've received the last duplicate packet, time to start processing again\n      this.ignoreNextEqualDts_ = false;\n    }\n    return;\n  }\n\n  // parse out CC data packets and save them for later\n  newCaptionPackets = cea708Parser.parseCaptionPackets(event.pts, userData);\n  this.captionPackets_ = this.captionPackets_.concat(newCaptionPackets);\n  if (this.latestDts_ !== event.dts) {\n    this.numSameDts_ = 0;\n  }\n  this.numSameDts_++;\n  this.latestDts_ = event.dts;\n};\n\nCaptionStream.prototype.flush = function() {\n  // make sure we actually parsed captions before proceeding\n  if (!this.captionPackets_.length) {\n    this.ccStreams_.forEach(function(cc) {\n      cc.flush();\n    }, this);\n    return;\n  }\n\n  // In Chrome, the Array#sort function is not stable so add a\n  // presortIndex that we can use to ensure we get a stable-sort\n  this.captionPackets_.forEach(function(elem, idx) {\n    elem.presortIndex = idx;\n  });\n\n  // sort caption byte-pairs based on their PTS values\n  this.captionPackets_.sort(function(a, b) {\n    if (a.pts === b.pts) {\n      return a.presortIndex - b.presortIndex;\n    }\n    return a.pts - b.pts;\n  });\n\n  this.captionPackets_.forEach(function(packet) {\n    if (packet.type < 2) {\n      // Dispatch packet to the right Cea608Stream\n      this.dispatchCea608Packet(packet);\n    }\n    // this is where an 'else' would go for a dispatching packets\n    // to a theoretical Cea708Stream that handles SERVICEn data\n  }, this);\n\n  this.captionPackets_.length = 0;\n  this.ccStreams_.forEach(function(cc) {\n    cc.flush();\n  }, this);\n  return;\n};\n\nCaptionStream.prototype.reset = function() {\n  this.latestDts_ = null;\n  this.ignoreNextEqualDts_ = false;\n  this.numSameDts_ = 0;\n  this.activeCea608Channel_ = [null, null];\n  this.ccStreams_.forEach(function(ccStream) {\n    ccStream.reset();\n  });\n};\n\n// From the CEA-608 spec:\n/*\n * When XDS sub-packets are interleaved with other services, the end of each sub-packet shall be followed\n * by a control pair to change to a different service. When any of the control codes from 0x10 to 0x1F is\n * used to begin a control code pair, it indicates the return to captioning or Text data. The control code pair\n * and subsequent data should then be processed according to the FCC rules. It may be necessary for the\n * line 21 data encoder to automatically insert a control code pair (i.e. RCL, RU2, RU3, RU4, RDC, or RTD)\n * to switch to captioning or Text.\n*/\n// With that in mind, we ignore any data between an XDS control code and a\n// subsequent closed-captioning control code.\nCaptionStream.prototype.dispatchCea608Packet = function(packet) {\n  // NOTE: packet.type is the CEA608 field\n  if (this.setsTextOrXDSActive(packet)) {\n    this.activeCea608Channel_[packet.type] = null;\n  } else if (this.setsChannel1Active(packet)) {\n    this.activeCea608Channel_[packet.type] = 0;\n  } else if (this.setsChannel2Active(packet)) {\n    this.activeCea608Channel_[packet.type] = 1;\n  }\n  if (this.activeCea608Channel_[packet.type] === null) {\n    // If we haven't received anything to set the active channel, or the\n    // packets are Text/XDS data, discard the data; we don't want jumbled\n    // captions\n    return;\n  }\n  this.ccStreams_[(packet.type << 1) + this.activeCea608Channel_[packet.type]].push(packet);\n};\n\nCaptionStream.prototype.setsChannel1Active = function(packet) {\n  return ((packet.ccData & 0x7800) === 0x1000);\n};\nCaptionStream.prototype.setsChannel2Active = function(packet) {\n  return ((packet.ccData & 0x7800) === 0x1800);\n};\nCaptionStream.prototype.setsTextOrXDSActive = function(packet) {\n  return ((packet.ccData & 0x7100) === 0x0100) ||\n    ((packet.ccData & 0x78fe) === 0x102a) ||\n    ((packet.ccData & 0x78fe) === 0x182a);\n};\n\n// ----------------------\n// Session to Application\n// ----------------------\n\n// This hash maps non-ASCII, special, and extended character codes to their\n// proper Unicode equivalent. The first keys that are only a single byte\n// are the non-standard ASCII characters, which simply map the CEA608 byte\n// to the standard ASCII/Unicode. The two-byte keys that follow are the CEA608\n// character codes, but have their MSB bitmasked with 0x03 so that a lookup\n// can be performed regardless of the field and data channel on which the\n// character code was received.\nvar CHARACTER_TRANSLATION = {\n  0x2a: 0xe1,     // á\n  0x5c: 0xe9,     // é\n  0x5e: 0xed,     // í\n  0x5f: 0xf3,     // ó\n  0x60: 0xfa,     // ú\n  0x7b: 0xe7,     // ç\n  0x7c: 0xf7,     // ÷\n  0x7d: 0xd1,     // Ñ\n  0x7e: 0xf1,     // ñ\n  0x7f: 0x2588,   // █\n  0x0130: 0xae,   // ®\n  0x0131: 0xb0,   // °\n  0x0132: 0xbd,   // ½\n  0x0133: 0xbf,   // ¿\n  0x0134: 0x2122, // ™\n  0x0135: 0xa2,   // ¢\n  0x0136: 0xa3,   // £\n  0x0137: 0x266a, // ♪\n  0x0138: 0xe0,   // à\n  0x0139: 0xa0,   //\n  0x013a: 0xe8,   // è\n  0x013b: 0xe2,   // â\n  0x013c: 0xea,   // ê\n  0x013d: 0xee,   // î\n  0x013e: 0xf4,   // ô\n  0x013f: 0xfb,   // û\n  0x0220: 0xc1,   // Á\n  0x0221: 0xc9,   // É\n  0x0222: 0xd3,   // Ó\n  0x0223: 0xda,   // Ú\n  0x0224: 0xdc,   // Ü\n  0x0225: 0xfc,   // ü\n  0x0226: 0x2018, // ‘\n  0x0227: 0xa1,   // ¡\n  0x0228: 0x2a,   // *\n  0x0229: 0x27,   // '\n  0x022a: 0x2014, // —\n  0x022b: 0xa9,   // ©\n  0x022c: 0x2120, // ℠\n  0x022d: 0x2022, // •\n  0x022e: 0x201c, // “\n  0x022f: 0x201d, // ”\n  0x0230: 0xc0,   // À\n  0x0231: 0xc2,   // Â\n  0x0232: 0xc7,   // Ç\n  0x0233: 0xc8,   // È\n  0x0234: 0xca,   // Ê\n  0x0235: 0xcb,   // Ë\n  0x0236: 0xeb,   // ë\n  0x0237: 0xce,   // Î\n  0x0238: 0xcf,   // Ï\n  0x0239: 0xef,   // ï\n  0x023a: 0xd4,   // Ô\n  0x023b: 0xd9,   // Ù\n  0x023c: 0xf9,   // ù\n  0x023d: 0xdb,   // Û\n  0x023e: 0xab,   // «\n  0x023f: 0xbb,   // »\n  0x0320: 0xc3,   // Ã\n  0x0321: 0xe3,   // ã\n  0x0322: 0xcd,   // Í\n  0x0323: 0xcc,   // Ì\n  0x0324: 0xec,   // ì\n  0x0325: 0xd2,   // Ò\n  0x0326: 0xf2,   // ò\n  0x0327: 0xd5,   // Õ\n  0x0328: 0xf5,   // õ\n  0x0329: 0x7b,   // {\n  0x032a: 0x7d,   // }\n  0x032b: 0x5c,   // \\\n  0x032c: 0x5e,   // ^\n  0x032d: 0x5f,   // _\n  0x032e: 0x7c,   // |\n  0x032f: 0x7e,   // ~\n  0x0330: 0xc4,   // Ä\n  0x0331: 0xe4,   // ä\n  0x0332: 0xd6,   // Ö\n  0x0333: 0xf6,   // ö\n  0x0334: 0xdf,   // ß\n  0x0335: 0xa5,   // ¥\n  0x0336: 0xa4,   // ¤\n  0x0337: 0x2502, // │\n  0x0338: 0xc5,   // Å\n  0x0339: 0xe5,   // å\n  0x033a: 0xd8,   // Ø\n  0x033b: 0xf8,   // ø\n  0x033c: 0x250c, // ┌\n  0x033d: 0x2510, // ┐\n  0x033e: 0x2514, // └\n  0x033f: 0x2518  // ┘\n};\n\nvar getCharFromCode = function(code) {\n  if (code === null) {\n    return '';\n  }\n  code = CHARACTER_TRANSLATION[code] || code;\n  return String.fromCharCode(code);\n};\n\n// the index of the last row in a CEA-608 display buffer\nvar BOTTOM_ROW = 14;\n\n// This array is used for mapping PACs -> row #, since there's no way of\n// getting it through bit logic.\nvar ROWS = [0x1100, 0x1120, 0x1200, 0x1220, 0x1500, 0x1520, 0x1600, 0x1620,\n            0x1700, 0x1720, 0x1000, 0x1300, 0x1320, 0x1400, 0x1420];\n\n// CEA-608 captions are rendered onto a 34x15 matrix of character\n// cells. The \"bottom\" row is the last element in the outer array.\nvar createDisplayBuffer = function() {\n  var result = [], i = BOTTOM_ROW + 1;\n  while (i--) {\n    result.push('');\n  }\n  return result;\n};\n\nvar Cea608Stream = function(field, dataChannel) {\n  Cea608Stream.prototype.init.call(this);\n\n  this.field_ = field || 0;\n  this.dataChannel_ = dataChannel || 0;\n\n  this.name_ = 'CC' + (((this.field_ << 1) | this.dataChannel_) + 1);\n\n  this.setConstants();\n  this.reset();\n\n  this.push = function(packet) {\n    var data, swap, char0, char1, text;\n    // remove the parity bits\n    data = packet.ccData & 0x7f7f;\n\n    // ignore duplicate control codes; the spec demands they're sent twice\n    if (data === this.lastControlCode_) {\n      this.lastControlCode_ = null;\n      return;\n    }\n\n    // Store control codes\n    if ((data & 0xf000) === 0x1000) {\n      this.lastControlCode_ = data;\n    } else if (data !== this.PADDING_) {\n      this.lastControlCode_ = null;\n    }\n\n    char0 = data >>> 8;\n    char1 = data & 0xff;\n\n    if (data === this.PADDING_) {\n      return;\n\n    } else if (data === this.RESUME_CAPTION_LOADING_) {\n      this.mode_ = 'popOn';\n\n    } else if (data === this.END_OF_CAPTION_) {\n      // If an EOC is received while in paint-on mode, the displayed caption\n      // text should be swapped to non-displayed memory as if it was a pop-on\n      // caption. Because of that, we should explicitly switch back to pop-on\n      // mode\n      this.mode_ = 'popOn';\n      this.clearFormatting(packet.pts);\n      // if a caption was being displayed, it's gone now\n      this.flushDisplayed(packet.pts);\n\n      // flip memory\n      swap = this.displayed_;\n      this.displayed_ = this.nonDisplayed_;\n      this.nonDisplayed_ = swap;\n\n      // start measuring the time to display the caption\n      this.startPts_ = packet.pts;\n\n    } else if (data === this.ROLL_UP_2_ROWS_) {\n      this.rollUpRows_ = 2;\n      this.setRollUp(packet.pts);\n    } else if (data === this.ROLL_UP_3_ROWS_) {\n      this.rollUpRows_ = 3;\n      this.setRollUp(packet.pts);\n    } else if (data === this.ROLL_UP_4_ROWS_) {\n      this.rollUpRows_ = 4;\n      this.setRollUp(packet.pts);\n    } else if (data === this.CARRIAGE_RETURN_) {\n      this.clearFormatting(packet.pts);\n      this.flushDisplayed(packet.pts);\n      this.shiftRowsUp_();\n      this.startPts_ = packet.pts;\n\n    } else if (data === this.BACKSPACE_) {\n      if (this.mode_ === 'popOn') {\n        this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1);\n      } else {\n        this.displayed_[this.row_] = this.displayed_[this.row_].slice(0, -1);\n      }\n    } else if (data === this.ERASE_DISPLAYED_MEMORY_) {\n      this.flushDisplayed(packet.pts);\n      this.displayed_ = createDisplayBuffer();\n    } else if (data === this.ERASE_NON_DISPLAYED_MEMORY_) {\n      this.nonDisplayed_ = createDisplayBuffer();\n\n    } else if (data === this.RESUME_DIRECT_CAPTIONING_) {\n      if (this.mode_ !== 'paintOn') {\n        // NOTE: This should be removed when proper caption positioning is\n        // implemented\n        this.flushDisplayed(packet.pts);\n        this.displayed_ = createDisplayBuffer();\n      }\n      this.mode_ = 'paintOn';\n      this.startPts_ = packet.pts;\n\n    // Append special characters to caption text\n    } else if (this.isSpecialCharacter(char0, char1)) {\n      // Bitmask char0 so that we can apply character transformations\n      // regardless of field and data channel.\n      // Then byte-shift to the left and OR with char1 so we can pass the\n      // entire character code to `getCharFromCode`.\n      char0 = (char0 & 0x03) << 8;\n      text = getCharFromCode(char0 | char1);\n      this[this.mode_](packet.pts, text);\n      this.column_++;\n\n    // Append extended characters to caption text\n    } else if (this.isExtCharacter(char0, char1)) {\n      // Extended characters always follow their \"non-extended\" equivalents.\n      // IE if a \"è\" is desired, you'll always receive \"eè\"; non-compliant\n      // decoders are supposed to drop the \"è\", while compliant decoders\n      // backspace the \"e\" and insert \"è\".\n\n      // Delete the previous character\n      if (this.mode_ === 'popOn') {\n        this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1);\n      } else {\n        this.displayed_[this.row_] = this.displayed_[this.row_].slice(0, -1);\n      }\n\n      // Bitmask char0 so that we can apply character transformations\n      // regardless of field and data channel.\n      // Then byte-shift to the left and OR with char1 so we can pass the\n      // entire character code to `getCharFromCode`.\n      char0 = (char0 & 0x03) << 8;\n      text = getCharFromCode(char0 | char1);\n      this[this.mode_](packet.pts, text);\n      this.column_++;\n\n    // Process mid-row codes\n    } else if (this.isMidRowCode(char0, char1)) {\n      // Attributes are not additive, so clear all formatting\n      this.clearFormatting(packet.pts);\n\n      // According to the standard, mid-row codes\n      // should be replaced with spaces, so add one now\n      this[this.mode_](packet.pts, ' ');\n      this.column_++;\n\n      if ((char1 & 0xe) === 0xe) {\n        this.addFormatting(packet.pts, ['i']);\n      }\n\n      if ((char1 & 0x1) === 0x1) {\n        this.addFormatting(packet.pts, ['u']);\n      }\n\n    // Detect offset control codes and adjust cursor\n    } else if (this.isOffsetControlCode(char0, char1)) {\n      // Cursor position is set by indent PAC (see below) in 4-column\n      // increments, with an additional offset code of 1-3 to reach any\n      // of the 32 columns specified by CEA-608. So all we need to do\n      // here is increment the column cursor by the given offset.\n      this.column_ += (char1 & 0x03);\n\n    // Detect PACs (Preamble Address Codes)\n    } else if (this.isPAC(char0, char1)) {\n\n      // There's no logic for PAC -> row mapping, so we have to just\n      // find the row code in an array and use its index :(\n      var row = ROWS.indexOf(data & 0x1f20);\n\n      // Configure the caption window if we're in roll-up mode\n      if (this.mode_ === 'rollUp') {\n        // This implies that the base row is incorrectly set.\n        // As per the recommendation in CEA-608(Base Row Implementation), defer to the number\n        // of roll-up rows set.\n        if (row - this.rollUpRows_ + 1 < 0) {\n          row = this.rollUpRows_ - 1;\n        }\n\n        this.setRollUp(packet.pts, row);\n      }\n\n      if (row !== this.row_) {\n        // formatting is only persistent for current row\n        this.clearFormatting(packet.pts);\n        this.row_ = row;\n      }\n      // All PACs can apply underline, so detect and apply\n      // (All odd-numbered second bytes set underline)\n      if ((char1 & 0x1) && (this.formatting_.indexOf('u') === -1)) {\n          this.addFormatting(packet.pts, ['u']);\n      }\n\n      if ((data & 0x10) === 0x10) {\n        // We've got an indent level code. Each successive even number\n        // increments the column cursor by 4, so we can get the desired\n        // column position by bit-shifting to the right (to get n/2)\n        // and multiplying by 4.\n        this.column_ = ((data & 0xe) >> 1) * 4;\n      }\n\n      if (this.isColorPAC(char1)) {\n        // it's a color code, though we only support white, which\n        // can be either normal or italicized. white italics can be\n        // either 0x4e or 0x6e depending on the row, so we just\n        // bitwise-and with 0xe to see if italics should be turned on\n        if ((char1 & 0xe) === 0xe) {\n          this.addFormatting(packet.pts, ['i']);\n        }\n      }\n\n    // We have a normal character in char0, and possibly one in char1\n    } else if (this.isNormalChar(char0)) {\n      if (char1 === 0x00) {\n        char1 = null;\n      }\n      text = getCharFromCode(char0);\n      text += getCharFromCode(char1);\n      this[this.mode_](packet.pts, text);\n      this.column_ += text.length;\n\n    } // finish data processing\n\n  };\n};\nCea608Stream.prototype = new Stream();\n// Trigger a cue point that captures the current state of the\n// display buffer\nCea608Stream.prototype.flushDisplayed = function(pts) {\n  var content = this.displayed_\n    // remove spaces from the start and end of the string\n    .map(function(row) {\n      try {\n        return row.trim();\n      } catch (e) {\n        // Ordinarily, this shouldn't happen. However, caption\n        // parsing errors should not throw exceptions and\n        // break playback.\n        // eslint-disable-next-line no-console\n        console.error('Skipping malformed caption.');\n        return '';\n      }\n    })\n    // combine all text rows to display in one cue\n    .join('\\n')\n    // and remove blank rows from the start and end, but not the middle\n    .replace(/^\\n+|\\n+$/g, '');\n\n  if (content.length) {\n    this.trigger('data', {\n      startPts: this.startPts_,\n      endPts: pts,\n      text: content,\n      stream: this.name_\n    });\n  }\n};\n\n/**\n * Zero out the data, used for startup and on seek\n */\nCea608Stream.prototype.reset = function() {\n  this.mode_ = 'popOn';\n  // When in roll-up mode, the index of the last row that will\n  // actually display captions. If a caption is shifted to a row\n  // with a lower index than this, it is cleared from the display\n  // buffer\n  this.topRow_ = 0;\n  this.startPts_ = 0;\n  this.displayed_ = createDisplayBuffer();\n  this.nonDisplayed_ = createDisplayBuffer();\n  this.lastControlCode_ = null;\n\n  // Track row and column for proper line-breaking and spacing\n  this.column_ = 0;\n  this.row_ = BOTTOM_ROW;\n  this.rollUpRows_ = 2;\n\n  // This variable holds currently-applied formatting\n  this.formatting_ = [];\n};\n\n/**\n * Sets up control code and related constants for this instance\n */\nCea608Stream.prototype.setConstants = function() {\n  // The following attributes have these uses:\n  // ext_ :    char0 for mid-row codes, and the base for extended\n  //           chars (ext_+0, ext_+1, and ext_+2 are char0s for\n  //           extended codes)\n  // control_: char0 for control codes, except byte-shifted to the\n  //           left so that we can do this.control_ | CONTROL_CODE\n  // offset_:  char0 for tab offset codes\n  //\n  // It's also worth noting that control codes, and _only_ control codes,\n  // differ between field 1 and field2. Field 2 control codes are always\n  // their field 1 value plus 1. That's why there's the \"| field\" on the\n  // control value.\n  if (this.dataChannel_ === 0) {\n    this.BASE_     = 0x10;\n    this.EXT_      = 0x11;\n    this.CONTROL_  = (0x14 | this.field_) << 8;\n    this.OFFSET_   = 0x17;\n  } else if (this.dataChannel_ === 1) {\n    this.BASE_     = 0x18;\n    this.EXT_      = 0x19;\n    this.CONTROL_  = (0x1c | this.field_) << 8;\n    this.OFFSET_   = 0x1f;\n  }\n\n  // Constants for the LSByte command codes recognized by Cea608Stream. This\n  // list is not exhaustive. For a more comprehensive listing and semantics see\n  // http://www.gpo.gov/fdsys/pkg/CFR-2010-title47-vol1/pdf/CFR-2010-title47-vol1-sec15-119.pdf\n  // Padding\n  this.PADDING_                    = 0x0000;\n  // Pop-on Mode\n  this.RESUME_CAPTION_LOADING_     = this.CONTROL_ | 0x20;\n  this.END_OF_CAPTION_             = this.CONTROL_ | 0x2f;\n  // Roll-up Mode\n  this.ROLL_UP_2_ROWS_             = this.CONTROL_ | 0x25;\n  this.ROLL_UP_3_ROWS_             = this.CONTROL_ | 0x26;\n  this.ROLL_UP_4_ROWS_             = this.CONTROL_ | 0x27;\n  this.CARRIAGE_RETURN_            = this.CONTROL_ | 0x2d;\n  // paint-on mode\n  this.RESUME_DIRECT_CAPTIONING_   = this.CONTROL_ | 0x29;\n  // Erasure\n  this.BACKSPACE_                  = this.CONTROL_ | 0x21;\n  this.ERASE_DISPLAYED_MEMORY_     = this.CONTROL_ | 0x2c;\n  this.ERASE_NON_DISPLAYED_MEMORY_ = this.CONTROL_ | 0x2e;\n};\n\n/**\n * Detects if the 2-byte packet data is a special character\n *\n * Special characters have a second byte in the range 0x30 to 0x3f,\n * with the first byte being 0x11 (for data channel 1) or 0x19 (for\n * data channel 2).\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are an special character\n */\nCea608Stream.prototype.isSpecialCharacter = function(char0, char1) {\n  return (char0 === this.EXT_ && char1 >= 0x30 && char1 <= 0x3f);\n};\n\n/**\n * Detects if the 2-byte packet data is an extended character\n *\n * Extended characters have a second byte in the range 0x20 to 0x3f,\n * with the first byte being 0x12 or 0x13 (for data channel 1) or\n * 0x1a or 0x1b (for data channel 2).\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are an extended character\n */\nCea608Stream.prototype.isExtCharacter = function(char0, char1) {\n  return ((char0 === (this.EXT_ + 1) || char0 === (this.EXT_ + 2)) &&\n    (char1 >= 0x20 && char1 <= 0x3f));\n};\n\n/**\n * Detects if the 2-byte packet is a mid-row code\n *\n * Mid-row codes have a second byte in the range 0x20 to 0x2f, with\n * the first byte being 0x11 (for data channel 1) or 0x19 (for data\n * channel 2).\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are a mid-row code\n */\nCea608Stream.prototype.isMidRowCode = function(char0, char1) {\n  return (char0 === this.EXT_ && (char1 >= 0x20 && char1 <= 0x2f));\n};\n\n/**\n * Detects if the 2-byte packet is an offset control code\n *\n * Offset control codes have a second byte in the range 0x21 to 0x23,\n * with the first byte being 0x17 (for data channel 1) or 0x1f (for\n * data channel 2).\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are an offset control code\n */\nCea608Stream.prototype.isOffsetControlCode = function(char0, char1) {\n  return (char0 === this.OFFSET_ && (char1 >= 0x21 && char1 <= 0x23));\n};\n\n/**\n * Detects if the 2-byte packet is a Preamble Address Code\n *\n * PACs have a first byte in the range 0x10 to 0x17 (for data channel 1)\n * or 0x18 to 0x1f (for data channel 2), with the second byte in the\n * range 0x40 to 0x7f.\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are a PAC\n */\nCea608Stream.prototype.isPAC = function(char0, char1) {\n  return (char0 >= this.BASE_ && char0 < (this.BASE_ + 8) &&\n    (char1 >= 0x40 && char1 <= 0x7f));\n};\n\n/**\n * Detects if a packet's second byte is in the range of a PAC color code\n *\n * PAC color codes have the second byte be in the range 0x40 to 0x4f, or\n * 0x60 to 0x6f.\n *\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the byte is a color PAC\n */\nCea608Stream.prototype.isColorPAC = function(char1) {\n  return ((char1 >= 0x40 && char1 <= 0x4f) || (char1 >= 0x60 && char1 <= 0x7f));\n};\n\n/**\n * Detects if a single byte is in the range of a normal character\n *\n * Normal text bytes are in the range 0x20 to 0x7f.\n *\n * @param  {Integer} char  The byte\n * @return {Boolean}       Whether the byte is a normal character\n */\nCea608Stream.prototype.isNormalChar = function(char) {\n  return (char >= 0x20 && char <= 0x7f);\n};\n\n/**\n * Configures roll-up\n *\n * @param  {Integer} pts         Current PTS\n * @param  {Integer} newBaseRow  Used by PACs to slide the current window to\n *                               a new position\n */\nCea608Stream.prototype.setRollUp = function(pts, newBaseRow) {\n  // Reset the base row to the bottom row when switching modes\n  if (this.mode_ !== 'rollUp') {\n    this.row_ = BOTTOM_ROW;\n    this.mode_ = 'rollUp';\n    // Spec says to wipe memories when switching to roll-up\n    this.flushDisplayed(pts);\n    this.nonDisplayed_ = createDisplayBuffer();\n    this.displayed_ = createDisplayBuffer();\n  }\n\n  if (newBaseRow !== undefined && newBaseRow !== this.row_) {\n    // move currently displayed captions (up or down) to the new base row\n    for (var i = 0; i < this.rollUpRows_; i++) {\n      this.displayed_[newBaseRow - i] = this.displayed_[this.row_ - i];\n      this.displayed_[this.row_ - i] = '';\n    }\n  }\n\n  if (newBaseRow === undefined) {\n    newBaseRow = this.row_;\n  }\n\n  this.topRow_ = newBaseRow - this.rollUpRows_ + 1;\n};\n\n// Adds the opening HTML tag for the passed character to the caption text,\n// and keeps track of it for later closing\nCea608Stream.prototype.addFormatting = function(pts, format) {\n  this.formatting_ = this.formatting_.concat(format);\n  var text = format.reduce(function(text, format) {\n    return text + '<' + format + '>';\n  }, '');\n  this[this.mode_](pts, text);\n};\n\n// Adds HTML closing tags for current formatting to caption text and\n// clears remembered formatting\nCea608Stream.prototype.clearFormatting = function(pts) {\n  if (!this.formatting_.length) {\n    return;\n  }\n  var text = this.formatting_.reverse().reduce(function(text, format) {\n    return text + '</' + format + '>';\n  }, '');\n  this.formatting_ = [];\n  this[this.mode_](pts, text);\n};\n\n// Mode Implementations\nCea608Stream.prototype.popOn = function(pts, text) {\n  var baseRow = this.nonDisplayed_[this.row_];\n\n  // buffer characters\n  baseRow += text;\n  this.nonDisplayed_[this.row_] = baseRow;\n};\n\nCea608Stream.prototype.rollUp = function(pts, text) {\n  var baseRow = this.displayed_[this.row_];\n\n  baseRow += text;\n  this.displayed_[this.row_] = baseRow;\n\n};\n\nCea608Stream.prototype.shiftRowsUp_ = function() {\n  var i;\n  // clear out inactive rows\n  for (i = 0; i < this.topRow_; i++) {\n    this.displayed_[i] = '';\n  }\n  for (i = this.row_ + 1; i < BOTTOM_ROW + 1; i++) {\n    this.displayed_[i] = '';\n  }\n  // shift displayed rows up\n  for (i = this.topRow_; i < this.row_; i++) {\n    this.displayed_[i] = this.displayed_[i + 1];\n  }\n  // clear out the bottom row\n  this.displayed_[this.row_] = '';\n};\n\nCea608Stream.prototype.paintOn = function(pts, text) {\n  var baseRow = this.displayed_[this.row_];\n\n  baseRow += text;\n  this.displayed_[this.row_] = baseRow;\n};\n\n// exports\nmodule.exports = {\n  CaptionStream: CaptionStream,\n  Cea608Stream: Cea608Stream\n};\n","/**\n * mux.js\n *\n * Copyright (c) Brightcove\n * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n */\n'use strict';\n\nvar Stream = require('../utils/stream.js');\n\nvar AdtsStream;\n\nvar\n  ADTS_SAMPLING_FREQUENCIES = [\n    96000,\n    88200,\n    64000,\n    48000,\n    44100,\n    32000,\n    24000,\n    22050,\n    16000,\n    12000,\n    11025,\n    8000,\n    7350\n  ];\n\n/*\n * Accepts a ElementaryStream and emits data events with parsed\n * AAC Audio Frames of the individual packets. Input audio in ADTS\n * format is unpacked and re-emitted as AAC frames.\n *\n * @see http://wiki.multimedia.cx/index.php?title=ADTS\n * @see http://wiki.multimedia.cx/?title=Understanding_AAC\n */\nAdtsStream = function() {\n  var buffer;\n\n  AdtsStream.prototype.init.call(this);\n\n  this.push = function(packet) {\n    var\n      i = 0,\n      frameNum = 0,\n      frameLength,\n      protectionSkipBytes,\n      frameEnd,\n      oldBuffer,\n      sampleCount,\n      adtsFrameDuration;\n\n    if (packet.type !== 'audio') {\n      // ignore non-audio data\n      return;\n    }\n\n    // Prepend any data in the buffer to the input data so that we can parse\n    // aac frames the cross a PES packet boundary\n    if (buffer) {\n      oldBuffer = buffer;\n      buffer = new Uint8Array(oldBuffer.byteLength + packet.data.byteLength);\n      buffer.set(oldBuffer);\n      buffer.set(packet.data, oldBuffer.byteLength);\n    } else {\n      buffer = packet.data;\n    }\n\n    // unpack any ADTS frames which have been fully received\n    // for details on the ADTS header, see http://wiki.multimedia.cx/index.php?title=ADTS\n    while (i + 5 < buffer.length) {\n\n      // Loook for the start of an ADTS header..\n      if (buffer[i] !== 0xFF || (buffer[i + 1] & 0xF6) !== 0xF0) {\n        // If a valid header was not found,  jump one forward and attempt to\n        // find a valid ADTS header starting at the next byte\n        i++;\n        continue;\n      }\n\n      // The protection skip bit tells us if we have 2 bytes of CRC data at the\n      // end of the ADTS header\n      protectionSkipBytes = (~buffer[i + 1] & 0x01) * 2;\n\n      // Frame length is a 13 bit integer starting 16 bits from the\n      // end of the sync sequence\n      frameLength = ((buffer[i + 3] & 0x03) << 11) |\n        (buffer[i + 4] << 3) |\n        ((buffer[i + 5] & 0xe0) >> 5);\n\n      sampleCount = ((buffer[i + 6] & 0x03) + 1) * 1024;\n      adtsFrameDuration = (sampleCount * 90000) /\n        ADTS_SAMPLING_FREQUENCIES[(buffer[i + 2] & 0x3c) >>> 2];\n\n      frameEnd = i + frameLength;\n\n      // If we don't have enough data to actually finish this ADTS frame, return\n      // and wait for more data\n      if (buffer.byteLength < frameEnd) {\n        return;\n      }\n\n      // Otherwise, deliver the complete AAC frame\n      this.trigger('data', {\n        pts: packet.pts + (frameNum * adtsFrameDuration),\n        dts: packet.dts + (frameNum * adtsFrameDuration),\n        sampleCount: sampleCount,\n        audioobjecttype: ((buffer[i + 2] >>> 6) & 0x03) + 1,\n        channelcount: ((buffer[i + 2] & 1) << 2) |\n          ((buffer[i + 3] & 0xc0) >>> 6),\n        samplerate: ADTS_SAMPLING_FREQUENCIES[(buffer[i + 2] & 0x3c) >>> 2],\n        samplingfrequencyindex: (buffer[i + 2] & 0x3c) >>> 2,\n        // assume ISO/IEC 14496-12 AudioSampleEntry default of 16\n        samplesize: 16,\n        data: buffer.subarray(i + 7 + protectionSkipBytes, frameEnd)\n      });\n\n      // If the buffer is empty, clear it and return\n      if (buffer.byteLength === frameEnd) {\n        buffer = undefined;\n        return;\n      }\n\n      frameNum++;\n\n      // Remove the finished frame from the buffer and start the process again\n      buffer = buffer.subarray(frameEnd);\n    }\n  };\n  this.flush = function() {\n    this.trigger('done');\n  };\n};\n\nAdtsStream.prototype = new Stream();\n\nmodule.exports = AdtsStream;\n","module.exports = extend\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction extend() {\n    var target = {}\n\n    for (var i = 0; i < arguments.length; i++) {\n        var source = arguments[i]\n\n        for (var key in source) {\n            if (hasOwnProperty.call(source, key)) {\n                target[key] = source[key]\n            }\n        }\n    }\n\n    return target\n}\n","'use strict';\n\nvar bind = require('function-bind');\nvar ES = require('es-abstract/es5');\nvar replace = bind.call(Function.call, String.prototype.replace);\n\nvar leftWhitespace = /^[\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF]+/;\nvar rightWhitespace = /[\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF]+$/;\n\nmodule.exports = function trim() {\n\tvar S = ES.ToString(ES.CheckObjectCoercible(this));\n\treturn replace(replace(S, leftWhitespace, ''), rightWhitespace, '');\n};\n","module.exports = function sign(number) {\n\treturn number >= 0 ? 1 : -1;\n};\n","/**\n * mux.js\n *\n * Copyright (c) Brightcove\n * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n *\n * Accepts program elementary stream (PES) data events and parses out\n * ID3 metadata from them, if present.\n * @see http://id3.org/id3v2.3.0\n */\n'use strict';\nvar\n  Stream = require('../utils/stream'),\n  StreamTypes = require('./stream-types'),\n  // return a percent-encoded representation of the specified byte range\n  // @see http://en.wikipedia.org/wiki/Percent-encoding\n  percentEncode = function(bytes, start, end) {\n    var i, result = '';\n    for (i = start; i < end; i++) {\n      result += '%' + ('00' + bytes[i].toString(16)).slice(-2);\n    }\n    return result;\n  },\n  // return the string representation of the specified byte range,\n  // interpreted as UTf-8.\n  parseUtf8 = function(bytes, start, end) {\n    return decodeURIComponent(percentEncode(bytes, start, end));\n  },\n  // return the string representation of the specified byte range,\n  // interpreted as ISO-8859-1.\n  parseIso88591 = function(bytes, start, end) {\n    return unescape(percentEncode(bytes, start, end)); // jshint ignore:line\n  },\n  parseSyncSafeInteger = function(data) {\n    return (data[0] << 21) |\n            (data[1] << 14) |\n            (data[2] << 7) |\n            (data[3]);\n  },\n  tagParsers = {\n    TXXX: function(tag) {\n      var i;\n      if (tag.data[0] !== 3) {\n        // ignore frames with unrecognized character encodings\n        return;\n      }\n\n      for (i = 1; i < tag.data.length; i++) {\n        if (tag.data[i] === 0) {\n          // parse the text fields\n          tag.description = parseUtf8(tag.data, 1, i);\n          // do not include the null terminator in the tag value\n          tag.value = parseUtf8(tag.data, i + 1, tag.data.length).replace(/\\0*$/, '');\n          break;\n        }\n      }\n      tag.data = tag.value;\n    },\n    WXXX: function(tag) {\n      var i;\n      if (tag.data[0] !== 3) {\n        // ignore frames with unrecognized character encodings\n        return;\n      }\n\n      for (i = 1; i < tag.data.length; i++) {\n        if (tag.data[i] === 0) {\n          // parse the description and URL fields\n          tag.description = parseUtf8(tag.data, 1, i);\n          tag.url = parseUtf8(tag.data, i + 1, tag.data.length);\n          break;\n        }\n      }\n    },\n    PRIV: function(tag) {\n      var i;\n\n      for (i = 0; i < tag.data.length; i++) {\n        if (tag.data[i] === 0) {\n          // parse the description and URL fields\n          tag.owner = parseIso88591(tag.data, 0, i);\n          break;\n        }\n      }\n      tag.privateData = tag.data.subarray(i + 1);\n      tag.data = tag.privateData;\n    }\n  },\n  MetadataStream;\n\nMetadataStream = function(options) {\n  var\n    settings = {\n      debug: !!(options && options.debug),\n\n      // the bytes of the program-level descriptor field in MP2T\n      // see ISO/IEC 13818-1:2013 (E), section 2.6 \"Program and\n      // program element descriptors\"\n      descriptor: options && options.descriptor\n    },\n    // the total size in bytes of the ID3 tag being parsed\n    tagSize = 0,\n    // tag data that is not complete enough to be parsed\n    buffer = [],\n    // the total number of bytes currently in the buffer\n    bufferSize = 0,\n    i;\n\n  MetadataStream.prototype.init.call(this);\n\n  // calculate the text track in-band metadata track dispatch type\n  // https://html.spec.whatwg.org/multipage/embedded-content.html#steps-to-expose-a-media-resource-specific-text-track\n  this.dispatchType = StreamTypes.METADATA_STREAM_TYPE.toString(16);\n  if (settings.descriptor) {\n    for (i = 0; i < settings.descriptor.length; i++) {\n      this.dispatchType += ('00' + settings.descriptor[i].toString(16)).slice(-2);\n    }\n  }\n\n  this.push = function(chunk) {\n    var tag, frameStart, frameSize, frame, i, frameHeader;\n    if (chunk.type !== 'timed-metadata') {\n      return;\n    }\n\n    // if data_alignment_indicator is set in the PES header,\n    // we must have the start of a new ID3 tag. Assume anything\n    // remaining in the buffer was malformed and throw it out\n    if (chunk.dataAlignmentIndicator) {\n      bufferSize = 0;\n      buffer.length = 0;\n    }\n\n    // ignore events that don't look like ID3 data\n    if (buffer.length === 0 &&\n        (chunk.data.length < 10 ||\n          chunk.data[0] !== 'I'.charCodeAt(0) ||\n          chunk.data[1] !== 'D'.charCodeAt(0) ||\n          chunk.data[2] !== '3'.charCodeAt(0))) {\n      if (settings.debug) {\n        // eslint-disable-next-line no-console\n        console.log('Skipping unrecognized metadata packet');\n      }\n      return;\n    }\n\n    // add this chunk to the data we've collected so far\n\n    buffer.push(chunk);\n    bufferSize += chunk.data.byteLength;\n\n    // grab the size of the entire frame from the ID3 header\n    if (buffer.length === 1) {\n      // the frame size is transmitted as a 28-bit integer in the\n      // last four bytes of the ID3 header.\n      // The most significant bit of each byte is dropped and the\n      // results concatenated to recover the actual value.\n      tagSize = parseSyncSafeInteger(chunk.data.subarray(6, 10));\n\n      // ID3 reports the tag size excluding the header but it's more\n      // convenient for our comparisons to include it\n      tagSize += 10;\n    }\n\n    // if the entire frame has not arrived, wait for more data\n    if (bufferSize < tagSize) {\n      return;\n    }\n\n    // collect the entire frame so it can be parsed\n    tag = {\n      data: new Uint8Array(tagSize),\n      frames: [],\n      pts: buffer[0].pts,\n      dts: buffer[0].dts\n    };\n    for (i = 0; i < tagSize;) {\n      tag.data.set(buffer[0].data.subarray(0, tagSize - i), i);\n      i += buffer[0].data.byteLength;\n      bufferSize -= buffer[0].data.byteLength;\n      buffer.shift();\n    }\n\n    // find the start of the first frame and the end of the tag\n    frameStart = 10;\n    if (tag.data[5] & 0x40) {\n      // advance the frame start past the extended header\n      frameStart += 4; // header size field\n      frameStart += parseSyncSafeInteger(tag.data.subarray(10, 14));\n\n      // clip any padding off the end\n      tagSize -= parseSyncSafeInteger(tag.data.subarray(16, 20));\n    }\n\n    // parse one or more ID3 frames\n    // http://id3.org/id3v2.3.0#ID3v2_frame_overview\n    do {\n      // determine the number of bytes in this frame\n      frameSize = parseSyncSafeInteger(tag.data.subarray(frameStart + 4, frameStart + 8));\n      if (frameSize < 1) {\n         // eslint-disable-next-line no-console\n        return console.log('Malformed ID3 frame encountered. Skipping metadata parsing.');\n      }\n      frameHeader = String.fromCharCode(tag.data[frameStart],\n                                        tag.data[frameStart + 1],\n                                        tag.data[frameStart + 2],\n                                        tag.data[frameStart + 3]);\n\n\n      frame = {\n        id: frameHeader,\n        data: tag.data.subarray(frameStart + 10, frameStart + frameSize + 10)\n      };\n      frame.key = frame.id;\n      if (tagParsers[frame.id]) {\n        tagParsers[frame.id](frame);\n\n        // handle the special PRIV frame used to indicate the start\n        // time for raw AAC data\n        if (frame.owner === 'com.apple.streaming.transportStreamTimestamp') {\n          var\n            d = frame.data,\n            size = ((d[3] & 0x01)  << 30) |\n                   (d[4]  << 22) |\n                   (d[5] << 14) |\n                   (d[6] << 6) |\n                   (d[7] >>> 2);\n\n          size *= 4;\n          size += d[7] & 0x03;\n          frame.timeStamp = size;\n          // in raw AAC, all subsequent data will be timestamped based\n          // on the value of this frame\n          // we couldn't have known the appropriate pts and dts before\n          // parsing this ID3 tag so set those values now\n          if (tag.pts === undefined && tag.dts === undefined) {\n            tag.pts = frame.timeStamp;\n            tag.dts = frame.timeStamp;\n          }\n          this.trigger('timestamp', frame);\n        }\n      }\n      tag.frames.push(frame);\n\n      frameStart += 10; // advance past the frame header\n      frameStart += frameSize; // advance past the frame body\n    } while (frameStart < tagSize);\n    this.trigger('data', tag);\n  };\n};\nMetadataStream.prototype = new Stream();\n\nmodule.exports = MetadataStream;\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"home\"},[_c('VideoView',{attrs:{\"name\":_vm.name,\"type\":\"type\"}})],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('v-app',{attrs:{\"dark\":\"\"}},[_c('SystemBar'),_c('v-content',[_c('div',{staticClass:\"content-wrapper\"},[_c('div',{staticClass:\"content\"},[(_vm.load)?_c('Video',{attrs:{\"options\":_vm.videoOptions}}):_vm._e()],1)])])],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"video-content\"},[_c('video',{ref:\"videoPlayer\",staticClass:\"video-js\"})])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","/*! @name m3u8-parser @version 4.3.0 @license Apache-2.0 */\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\n/**\n * @file stream.js\n */\n\n/**\n * A lightweight readable stream implementation that handles event dispatching.\n *\n * @class Stream\n */\nvar Stream =\n/*#__PURE__*/\nfunction () {\n  function Stream() {\n    this.listeners = {};\n  }\n  /**\n   * Add a listener for a specified event type.\n   *\n   * @param {string} type the event name\n   * @param {Function} listener the callback to be invoked when an event of\n   * the specified type occurs\n   */\n\n\n  var _proto = Stream.prototype;\n\n  _proto.on = function on(type, listener) {\n    if (!this.listeners[type]) {\n      this.listeners[type] = [];\n    }\n\n    this.listeners[type].push(listener);\n  };\n  /**\n   * Remove a listener for a specified event type.\n   *\n   * @param {string} type the event name\n   * @param {Function} listener  a function previously registered for this\n   * type of event through `on`\n   * @return {boolean} if we could turn it off or not\n   */\n\n\n  _proto.off = function off(type, listener) {\n    if (!this.listeners[type]) {\n      return false;\n    }\n\n    var index = this.listeners[type].indexOf(listener);\n    this.listeners[type].splice(index, 1);\n    return index > -1;\n  };\n  /**\n   * Trigger an event of the specified type on this stream. Any additional\n   * arguments to this function are passed as parameters to event listeners.\n   *\n   * @param {string} type the event name\n   */\n\n\n  _proto.trigger = function trigger(type) {\n    var callbacks = this.listeners[type];\n    var i;\n    var length;\n    var args;\n\n    if (!callbacks) {\n      return;\n    } // Slicing the arguments on every invocation of this method\n    // can add a significant amount of overhead. Avoid the\n    // intermediate object creation for the common case of a\n    // single callback argument\n\n\n    if (arguments.length === 2) {\n      length = callbacks.length;\n\n      for (i = 0; i < length; ++i) {\n        callbacks[i].call(this, arguments[1]);\n      }\n    } else {\n      args = Array.prototype.slice.call(arguments, 1);\n      length = callbacks.length;\n\n      for (i = 0; i < length; ++i) {\n        callbacks[i].apply(this, args);\n      }\n    }\n  };\n  /**\n   * Destroys the stream and cleans up.\n   */\n\n\n  _proto.dispose = function dispose() {\n    this.listeners = {};\n  };\n  /**\n   * Forwards all `data` events on this stream to the destination stream. The\n   * destination stream should provide a method `push` to receive the data\n   * events as they arrive.\n   *\n   * @param {Stream} destination the stream that will receive all `data` events\n   * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\n   */\n\n\n  _proto.pipe = function pipe(destination) {\n    this.on('data', function (data) {\n      destination.push(data);\n    });\n  };\n\n  return Stream;\n}();\n\n/**\n * A stream that buffers string input and generates a `data` event for each\n * line.\n *\n * @class LineStream\n * @extends Stream\n */\n\nvar LineStream =\n/*#__PURE__*/\nfunction (_Stream) {\n  _inheritsLoose(LineStream, _Stream);\n\n  function LineStream() {\n    var _this;\n\n    _this = _Stream.call(this) || this;\n    _this.buffer = '';\n    return _this;\n  }\n  /**\n   * Add new data to be parsed.\n   *\n   * @param {string} data the text to process\n   */\n\n\n  var _proto = LineStream.prototype;\n\n  _proto.push = function push(data) {\n    var nextNewline;\n    this.buffer += data;\n    nextNewline = this.buffer.indexOf('\\n');\n\n    for (; nextNewline > -1; nextNewline = this.buffer.indexOf('\\n')) {\n      this.trigger('data', this.buffer.substring(0, nextNewline));\n      this.buffer = this.buffer.substring(nextNewline + 1);\n    }\n  };\n\n  return LineStream;\n}(Stream);\n\n/**\n * \"forgiving\" attribute list psuedo-grammar:\n * attributes -> keyvalue (',' keyvalue)*\n * keyvalue   -> key '=' value\n * key        -> [^=]*\n * value      -> '\"' [^\"]* '\"' | [^,]*\n */\n\nvar attributeSeparator = function attributeSeparator() {\n  var key = '[^=]*';\n  var value = '\"[^\"]*\"|[^,]*';\n  var keyvalue = '(?:' + key + ')=(?:' + value + ')';\n  return new RegExp('(?:^|,)(' + keyvalue + ')');\n};\n/**\n * Parse attributes from a line given the separator\n *\n * @param {string} attributes the attribute line to parse\n */\n\n\nvar parseAttributes = function parseAttributes(attributes) {\n  // split the string using attributes as the separator\n  var attrs = attributes.split(attributeSeparator());\n  var result = {};\n  var i = attrs.length;\n  var attr;\n\n  while (i--) {\n    // filter out unmatched portions of the string\n    if (attrs[i] === '') {\n      continue;\n    } // split the key and value\n\n\n    attr = /([^=]*)=(.*)/.exec(attrs[i]).slice(1); // trim whitespace and remove optional quotes around the value\n\n    attr[0] = attr[0].replace(/^\\s+|\\s+$/g, '');\n    attr[1] = attr[1].replace(/^\\s+|\\s+$/g, '');\n    attr[1] = attr[1].replace(/^['\"](.*)['\"]$/g, '$1');\n    result[attr[0]] = attr[1];\n  }\n\n  return result;\n};\n/**\n * A line-level M3U8 parser event stream. It expects to receive input one\n * line at a time and performs a context-free parse of its contents. A stream\n * interpretation of a manifest can be useful if the manifest is expected to\n * be too large to fit comfortably into memory or the entirety of the input\n * is not immediately available. Otherwise, it's probably much easier to work\n * with a regular `Parser` object.\n *\n * Produces `data` events with an object that captures the parser's\n * interpretation of the input. That object has a property `tag` that is one\n * of `uri`, `comment`, or `tag`. URIs only have a single additional\n * property, `line`, which captures the entirety of the input without\n * interpretation. Comments similarly have a single additional property\n * `text` which is the input without the leading `#`.\n *\n * Tags always have a property `tagType` which is the lower-cased version of\n * the M3U8 directive without the `#EXT` or `#EXT-X-` prefix. For instance,\n * `#EXT-X-MEDIA-SEQUENCE` becomes `media-sequence` when parsed. Unrecognized\n * tags are given the tag type `unknown` and a single additional property\n * `data` with the remainder of the input.\n *\n * @class ParseStream\n * @extends Stream\n */\n\n\nvar ParseStream =\n/*#__PURE__*/\nfunction (_Stream) {\n  _inheritsLoose(ParseStream, _Stream);\n\n  function ParseStream() {\n    var _this;\n\n    _this = _Stream.call(this) || this;\n    _this.customParsers = [];\n    _this.tagMappers = [];\n    return _this;\n  }\n  /**\n   * Parses an additional line of input.\n   *\n   * @param {string} line a single line of an M3U8 file to parse\n   */\n\n\n  var _proto = ParseStream.prototype;\n\n  _proto.push = function push(line) {\n    var _this2 = this;\n\n    var match;\n    var event; // strip whitespace\n\n    line = line.trim();\n\n    if (line.length === 0) {\n      // ignore empty lines\n      return;\n    } // URIs\n\n\n    if (line[0] !== '#') {\n      this.trigger('data', {\n        type: 'uri',\n        uri: line\n      });\n      return;\n    } // map tags\n\n\n    var newLines = this.tagMappers.reduce(function (acc, mapper) {\n      var mappedLine = mapper(line); // skip if unchanged\n\n      if (mappedLine === line) {\n        return acc;\n      }\n\n      return acc.concat([mappedLine]);\n    }, [line]);\n    newLines.forEach(function (newLine) {\n      for (var i = 0; i < _this2.customParsers.length; i++) {\n        if (_this2.customParsers[i].call(_this2, newLine)) {\n          return;\n        }\n      } // Comments\n\n\n      if (newLine.indexOf('#EXT') !== 0) {\n        _this2.trigger('data', {\n          type: 'comment',\n          text: newLine.slice(1)\n        });\n\n        return;\n      } // strip off any carriage returns here so the regex matching\n      // doesn't have to account for them.\n\n\n      newLine = newLine.replace('\\r', ''); // Tags\n\n      match = /^#EXTM3U/.exec(newLine);\n\n      if (match) {\n        _this2.trigger('data', {\n          type: 'tag',\n          tagType: 'm3u'\n        });\n\n        return;\n      }\n\n      match = /^#EXTINF:?([0-9\\.]*)?,?(.*)?$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'inf'\n        };\n\n        if (match[1]) {\n          event.duration = parseFloat(match[1]);\n        }\n\n        if (match[2]) {\n          event.title = match[2];\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-TARGETDURATION:?([0-9.]*)?/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'targetduration'\n        };\n\n        if (match[1]) {\n          event.duration = parseInt(match[1], 10);\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#ZEN-TOTAL-DURATION:?([0-9.]*)?/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'totalduration'\n        };\n\n        if (match[1]) {\n          event.duration = parseInt(match[1], 10);\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-VERSION:?([0-9.]*)?/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'version'\n        };\n\n        if (match[1]) {\n          event.version = parseInt(match[1], 10);\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-MEDIA-SEQUENCE:?(\\-?[0-9.]*)?/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'media-sequence'\n        };\n\n        if (match[1]) {\n          event.number = parseInt(match[1], 10);\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-DISCONTINUITY-SEQUENCE:?(\\-?[0-9.]*)?/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'discontinuity-sequence'\n        };\n\n        if (match[1]) {\n          event.number = parseInt(match[1], 10);\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-PLAYLIST-TYPE:?(.*)?$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'playlist-type'\n        };\n\n        if (match[1]) {\n          event.playlistType = match[1];\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-BYTERANGE:?([0-9.]*)?@?([0-9.]*)?/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'byterange'\n        };\n\n        if (match[1]) {\n          event.length = parseInt(match[1], 10);\n        }\n\n        if (match[2]) {\n          event.offset = parseInt(match[2], 10);\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-ALLOW-CACHE:?(YES|NO)?/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'allow-cache'\n        };\n\n        if (match[1]) {\n          event.allowed = !/NO/.test(match[1]);\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-MAP:?(.*)$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'map'\n        };\n\n        if (match[1]) {\n          var attributes = parseAttributes(match[1]);\n\n          if (attributes.URI) {\n            event.uri = attributes.URI;\n          }\n\n          if (attributes.BYTERANGE) {\n            var _attributes$BYTERANGE = attributes.BYTERANGE.split('@'),\n                length = _attributes$BYTERANGE[0],\n                offset = _attributes$BYTERANGE[1];\n\n            event.byterange = {};\n\n            if (length) {\n              event.byterange.length = parseInt(length, 10);\n            }\n\n            if (offset) {\n              event.byterange.offset = parseInt(offset, 10);\n            }\n          }\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-STREAM-INF:?(.*)$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'stream-inf'\n        };\n\n        if (match[1]) {\n          event.attributes = parseAttributes(match[1]);\n\n          if (event.attributes.RESOLUTION) {\n            var split = event.attributes.RESOLUTION.split('x');\n            var resolution = {};\n\n            if (split[0]) {\n              resolution.width = parseInt(split[0], 10);\n            }\n\n            if (split[1]) {\n              resolution.height = parseInt(split[1], 10);\n            }\n\n            event.attributes.RESOLUTION = resolution;\n          }\n\n          if (event.attributes.BANDWIDTH) {\n            event.attributes.BANDWIDTH = parseInt(event.attributes.BANDWIDTH, 10);\n          }\n\n          if (event.attributes['PROGRAM-ID']) {\n            event.attributes['PROGRAM-ID'] = parseInt(event.attributes['PROGRAM-ID'], 10);\n          }\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-MEDIA:?(.*)$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'media'\n        };\n\n        if (match[1]) {\n          event.attributes = parseAttributes(match[1]);\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-ENDLIST/.exec(newLine);\n\n      if (match) {\n        _this2.trigger('data', {\n          type: 'tag',\n          tagType: 'endlist'\n        });\n\n        return;\n      }\n\n      match = /^#EXT-X-DISCONTINUITY/.exec(newLine);\n\n      if (match) {\n        _this2.trigger('data', {\n          type: 'tag',\n          tagType: 'discontinuity'\n        });\n\n        return;\n      }\n\n      match = /^#EXT-X-PROGRAM-DATE-TIME:?(.*)$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'program-date-time'\n        };\n\n        if (match[1]) {\n          event.dateTimeString = match[1];\n          event.dateTimeObject = new Date(match[1]);\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-KEY:?(.*)$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'key'\n        };\n\n        if (match[1]) {\n          event.attributes = parseAttributes(match[1]); // parse the IV string into a Uint32Array\n\n          if (event.attributes.IV) {\n            if (event.attributes.IV.substring(0, 2).toLowerCase() === '0x') {\n              event.attributes.IV = event.attributes.IV.substring(2);\n            }\n\n            event.attributes.IV = event.attributes.IV.match(/.{8}/g);\n            event.attributes.IV[0] = parseInt(event.attributes.IV[0], 16);\n            event.attributes.IV[1] = parseInt(event.attributes.IV[1], 16);\n            event.attributes.IV[2] = parseInt(event.attributes.IV[2], 16);\n            event.attributes.IV[3] = parseInt(event.attributes.IV[3], 16);\n            event.attributes.IV = new Uint32Array(event.attributes.IV);\n          }\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-START:?(.*)$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'start'\n        };\n\n        if (match[1]) {\n          event.attributes = parseAttributes(match[1]);\n          event.attributes['TIME-OFFSET'] = parseFloat(event.attributes['TIME-OFFSET']);\n          event.attributes.PRECISE = /YES/.test(event.attributes.PRECISE);\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-CUE-OUT-CONT:?(.*)?$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'cue-out-cont'\n        };\n\n        if (match[1]) {\n          event.data = match[1];\n        } else {\n          event.data = '';\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-CUE-OUT:?(.*)?$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'cue-out'\n        };\n\n        if (match[1]) {\n          event.data = match[1];\n        } else {\n          event.data = '';\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-CUE-IN:?(.*)?$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'cue-in'\n        };\n\n        if (match[1]) {\n          event.data = match[1];\n        } else {\n          event.data = '';\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      } // unknown tag type\n\n\n      _this2.trigger('data', {\n        type: 'tag',\n        data: newLine.slice(4)\n      });\n    });\n  };\n  /**\n   * Add a parser for custom headers\n   *\n   * @param {Object}   options              a map of options for the added parser\n   * @param {RegExp}   options.expression   a regular expression to match the custom header\n   * @param {string}   options.customType   the custom type to register to the output\n   * @param {Function} [options.dataParser] function to parse the line into an object\n   * @param {boolean}  [options.segment]    should tag data be attached to the segment object\n   */\n\n\n  _proto.addParser = function addParser(_ref) {\n    var _this3 = this;\n\n    var expression = _ref.expression,\n        customType = _ref.customType,\n        dataParser = _ref.dataParser,\n        segment = _ref.segment;\n\n    if (typeof dataParser !== 'function') {\n      dataParser = function dataParser(line) {\n        return line;\n      };\n    }\n\n    this.customParsers.push(function (line) {\n      var match = expression.exec(line);\n\n      if (match) {\n        _this3.trigger('data', {\n          type: 'custom',\n          data: dataParser(line),\n          customType: customType,\n          segment: segment\n        });\n\n        return true;\n      }\n    });\n  };\n  /**\n   * Add a custom header mapper\n   *\n   * @param {Object}   options\n   * @param {RegExp}   options.expression   a regular expression to match the custom header\n   * @param {Function} options.map          function to translate tag into a different tag\n   */\n\n\n  _proto.addTagMapper = function addTagMapper(_ref2) {\n    var expression = _ref2.expression,\n        map = _ref2.map;\n\n    var mapFn = function mapFn(line) {\n      if (expression.test(line)) {\n        return map(line);\n      }\n\n      return line;\n    };\n\n    this.tagMappers.push(mapFn);\n  };\n\n  return ParseStream;\n}(Stream);\n\n/**\n * A parser for M3U8 files. The current interpretation of the input is\n * exposed as a property `manifest` on parser objects. It's just two lines to\n * create and parse a manifest once you have the contents available as a string:\n *\n * ```js\n * var parser = new m3u8.Parser();\n * parser.push(xhr.responseText);\n * ```\n *\n * New input can later be applied to update the manifest object by calling\n * `push` again.\n *\n * The parser attempts to create a usable manifest object even if the\n * underlying input is somewhat nonsensical. It emits `info` and `warning`\n * events during the parse if it encounters input that seems invalid or\n * requires some property of the manifest object to be defaulted.\n *\n * @class Parser\n * @extends Stream\n */\n\nvar Parser =\n/*#__PURE__*/\nfunction (_Stream) {\n  _inheritsLoose(Parser, _Stream);\n\n  function Parser() {\n    var _this;\n\n    _this = _Stream.call(this) || this;\n    _this.lineStream = new LineStream();\n    _this.parseStream = new ParseStream();\n\n    _this.lineStream.pipe(_this.parseStream);\n    /* eslint-disable consistent-this */\n\n\n    var self = _assertThisInitialized(_assertThisInitialized(_this));\n    /* eslint-enable consistent-this */\n\n\n    var uris = [];\n    var currentUri = {}; // if specified, the active EXT-X-MAP definition\n\n    var currentMap; // if specified, the active decryption key\n\n    var _key;\n\n    var noop = function noop() {};\n\n    var defaultMediaGroups = {\n      'AUDIO': {},\n      'VIDEO': {},\n      'CLOSED-CAPTIONS': {},\n      'SUBTITLES': {}\n    }; // group segments into numbered timelines delineated by discontinuities\n\n    var currentTimeline = 0; // the manifest is empty until the parse stream begins delivering data\n\n    _this.manifest = {\n      allowCache: true,\n      discontinuityStarts: [],\n      segments: []\n    }; // update the manifest with the m3u8 entry from the parse stream\n\n    _this.parseStream.on('data', function (entry) {\n      var mediaGroup;\n      var rendition;\n      ({\n        tag: function tag() {\n          // switch based on the tag type\n          (({\n            'allow-cache': function allowCache() {\n              this.manifest.allowCache = entry.allowed;\n\n              if (!('allowed' in entry)) {\n                this.trigger('info', {\n                  message: 'defaulting allowCache to YES'\n                });\n                this.manifest.allowCache = true;\n              }\n            },\n            byterange: function byterange() {\n              var byterange = {};\n\n              if ('length' in entry) {\n                currentUri.byterange = byterange;\n                byterange.length = entry.length;\n\n                if (!('offset' in entry)) {\n                  this.trigger('info', {\n                    message: 'defaulting offset to zero'\n                  });\n                  entry.offset = 0;\n                }\n              }\n\n              if ('offset' in entry) {\n                currentUri.byterange = byterange;\n                byterange.offset = entry.offset;\n              }\n            },\n            endlist: function endlist() {\n              this.manifest.endList = true;\n            },\n            inf: function inf() {\n              if (!('mediaSequence' in this.manifest)) {\n                this.manifest.mediaSequence = 0;\n                this.trigger('info', {\n                  message: 'defaulting media sequence to zero'\n                });\n              }\n\n              if (!('discontinuitySequence' in this.manifest)) {\n                this.manifest.discontinuitySequence = 0;\n                this.trigger('info', {\n                  message: 'defaulting discontinuity sequence to zero'\n                });\n              }\n\n              if (entry.duration > 0) {\n                currentUri.duration = entry.duration;\n              }\n\n              if (entry.duration === 0) {\n                currentUri.duration = 0.01;\n                this.trigger('info', {\n                  message: 'updating zero segment duration to a small value'\n                });\n              }\n\n              this.manifest.segments = uris;\n            },\n            key: function key() {\n              if (!entry.attributes) {\n                this.trigger('warn', {\n                  message: 'ignoring key declaration without attribute list'\n                });\n                return;\n              } // clear the active encryption key\n\n\n              if (entry.attributes.METHOD === 'NONE') {\n                _key = null;\n                return;\n              }\n\n              if (!entry.attributes.URI) {\n                this.trigger('warn', {\n                  message: 'ignoring key declaration without URI'\n                });\n                return;\n              }\n\n              if (!entry.attributes.METHOD) {\n                this.trigger('warn', {\n                  message: 'defaulting key method to AES-128'\n                });\n              } // setup an encryption key for upcoming segments\n\n\n              _key = {\n                method: entry.attributes.METHOD || 'AES-128',\n                uri: entry.attributes.URI\n              };\n\n              if (typeof entry.attributes.IV !== 'undefined') {\n                _key.iv = entry.attributes.IV;\n              }\n            },\n            'media-sequence': function mediaSequence() {\n              if (!isFinite(entry.number)) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid media sequence: ' + entry.number\n                });\n                return;\n              }\n\n              this.manifest.mediaSequence = entry.number;\n            },\n            'discontinuity-sequence': function discontinuitySequence() {\n              if (!isFinite(entry.number)) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid discontinuity sequence: ' + entry.number\n                });\n                return;\n              }\n\n              this.manifest.discontinuitySequence = entry.number;\n              currentTimeline = entry.number;\n            },\n            'playlist-type': function playlistType() {\n              if (!/VOD|EVENT/.test(entry.playlistType)) {\n                this.trigger('warn', {\n                  message: 'ignoring unknown playlist type: ' + entry.playlist\n                });\n                return;\n              }\n\n              this.manifest.playlistType = entry.playlistType;\n            },\n            map: function map() {\n              currentMap = {};\n\n              if (entry.uri) {\n                currentMap.uri = entry.uri;\n              }\n\n              if (entry.byterange) {\n                currentMap.byterange = entry.byterange;\n              }\n            },\n            'stream-inf': function streamInf() {\n              this.manifest.playlists = uris;\n              this.manifest.mediaGroups = this.manifest.mediaGroups || defaultMediaGroups;\n\n              if (!entry.attributes) {\n                this.trigger('warn', {\n                  message: 'ignoring empty stream-inf attributes'\n                });\n                return;\n              }\n\n              if (!currentUri.attributes) {\n                currentUri.attributes = {};\n              }\n\n              _extends(currentUri.attributes, entry.attributes);\n            },\n            media: function media() {\n              this.manifest.mediaGroups = this.manifest.mediaGroups || defaultMediaGroups;\n\n              if (!(entry.attributes && entry.attributes.TYPE && entry.attributes['GROUP-ID'] && entry.attributes.NAME)) {\n                this.trigger('warn', {\n                  message: 'ignoring incomplete or missing media group'\n                });\n                return;\n              } // find the media group, creating defaults as necessary\n\n\n              var mediaGroupType = this.manifest.mediaGroups[entry.attributes.TYPE];\n              mediaGroupType[entry.attributes['GROUP-ID']] = mediaGroupType[entry.attributes['GROUP-ID']] || {};\n              mediaGroup = mediaGroupType[entry.attributes['GROUP-ID']]; // collect the rendition metadata\n\n              rendition = {\n                default: /yes/i.test(entry.attributes.DEFAULT)\n              };\n\n              if (rendition.default) {\n                rendition.autoselect = true;\n              } else {\n                rendition.autoselect = /yes/i.test(entry.attributes.AUTOSELECT);\n              }\n\n              if (entry.attributes.LANGUAGE) {\n                rendition.language = entry.attributes.LANGUAGE;\n              }\n\n              if (entry.attributes.URI) {\n                rendition.uri = entry.attributes.URI;\n              }\n\n              if (entry.attributes['INSTREAM-ID']) {\n                rendition.instreamId = entry.attributes['INSTREAM-ID'];\n              }\n\n              if (entry.attributes.CHARACTERISTICS) {\n                rendition.characteristics = entry.attributes.CHARACTERISTICS;\n              }\n\n              if (entry.attributes.FORCED) {\n                rendition.forced = /yes/i.test(entry.attributes.FORCED);\n              } // insert the new rendition\n\n\n              mediaGroup[entry.attributes.NAME] = rendition;\n            },\n            discontinuity: function discontinuity() {\n              currentTimeline += 1;\n              currentUri.discontinuity = true;\n              this.manifest.discontinuityStarts.push(uris.length);\n            },\n            'program-date-time': function programDateTime() {\n              if (typeof this.manifest.dateTimeString === 'undefined') {\n                // PROGRAM-DATE-TIME is a media-segment tag, but for backwards\n                // compatibility, we add the first occurence of the PROGRAM-DATE-TIME tag\n                // to the manifest object\n                // TODO: Consider removing this in future major version\n                this.manifest.dateTimeString = entry.dateTimeString;\n                this.manifest.dateTimeObject = entry.dateTimeObject;\n              }\n\n              currentUri.dateTimeString = entry.dateTimeString;\n              currentUri.dateTimeObject = entry.dateTimeObject;\n            },\n            targetduration: function targetduration() {\n              if (!isFinite(entry.duration) || entry.duration < 0) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid target duration: ' + entry.duration\n                });\n                return;\n              }\n\n              this.manifest.targetDuration = entry.duration;\n            },\n            totalduration: function totalduration() {\n              if (!isFinite(entry.duration) || entry.duration < 0) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid total duration: ' + entry.duration\n                });\n                return;\n              }\n\n              this.manifest.totalDuration = entry.duration;\n            },\n            start: function start() {\n              if (!entry.attributes || isNaN(entry.attributes['TIME-OFFSET'])) {\n                this.trigger('warn', {\n                  message: 'ignoring start declaration without appropriate attribute list'\n                });\n                return;\n              }\n\n              this.manifest.start = {\n                timeOffset: entry.attributes['TIME-OFFSET'],\n                precise: entry.attributes.PRECISE\n              };\n            },\n            'cue-out': function cueOut() {\n              currentUri.cueOut = entry.data;\n            },\n            'cue-out-cont': function cueOutCont() {\n              currentUri.cueOutCont = entry.data;\n            },\n            'cue-in': function cueIn() {\n              currentUri.cueIn = entry.data;\n            }\n          })[entry.tagType] || noop).call(self);\n        },\n        uri: function uri() {\n          currentUri.uri = entry.uri;\n          uris.push(currentUri); // if no explicit duration was declared, use the target duration\n\n          if (this.manifest.targetDuration && !('duration' in currentUri)) {\n            this.trigger('warn', {\n              message: 'defaulting segment duration to the target duration'\n            });\n            currentUri.duration = this.manifest.targetDuration;\n          } // annotate with encryption information, if necessary\n\n\n          if (_key) {\n            currentUri.key = _key;\n          }\n\n          currentUri.timeline = currentTimeline; // annotate with initialization segment information, if necessary\n\n          if (currentMap) {\n            currentUri.map = currentMap;\n          } // prepare for the next URI\n\n\n          currentUri = {};\n        },\n        comment: function comment() {// comments are not important for playback\n        },\n        custom: function custom() {\n          // if this is segment-level data attach the output to the segment\n          if (entry.segment) {\n            currentUri.custom = currentUri.custom || {};\n            currentUri.custom[entry.customType] = entry.data; // if this is manifest-level data attach to the top level manifest object\n          } else {\n            this.manifest.custom = this.manifest.custom || {};\n            this.manifest.custom[entry.customType] = entry.data;\n          }\n        }\n      })[entry.type].call(self);\n    });\n\n    return _this;\n  }\n  /**\n   * Parse the input string and update the manifest object.\n   *\n   * @param {string} chunk a potentially incomplete portion of the manifest\n   */\n\n\n  var _proto = Parser.prototype;\n\n  _proto.push = function push(chunk) {\n    this.lineStream.push(chunk);\n  };\n  /**\n   * Flush any remaining input. This can be handy if the last line of an M3U8\n   * manifest did not contain a trailing newline but the file has been\n   * completely received.\n   */\n\n\n  _proto.end = function end() {\n    // flush any buffered input\n    this.lineStream.push('\\n');\n  };\n  /**\n   * Add an additional parser for non-standard tags\n   *\n   * @param {Object}   options              a map of options for the added parser\n   * @param {RegExp}   options.expression   a regular expression to match the custom header\n   * @param {string}   options.type         the type to register to the output\n   * @param {Function} [options.dataParser] function to parse the line into an object\n   * @param {boolean}  [options.segment]    should tag data be attached to the segment object\n   */\n\n\n  _proto.addParser = function addParser(options) {\n    this.parseStream.addParser(options);\n  };\n  /**\n   * Add a custom header mapper\n   *\n   * @param {Object}   options\n   * @param {RegExp}   options.expression   a regular expression to match the custom header\n   * @param {Function} options.map          function to translate tag into a different tag\n   */\n\n\n  _proto.addTagMapper = function addTagMapper(options) {\n    this.parseStream.addTagMapper(options);\n  };\n\n  return Parser;\n}(Stream);\n\n/**\n * @file m3u8/index.js\n *\n * Utilities for parsing M3U8 files. If the entire manifest is available,\n * `Parser` will create an object representation with enough detail for managing\n * playback. `ParseStream` and `LineStream` are lower-level parsing primitives\n * that do not assume the entirety of the manifest is ready and expose a\n * ReadableStream-like interface.\n */\n\nexport { LineStream, ParseStream, Parser };\n","/*\n * pkcs7.pad\n * https://github.com/brightcove/pkcs7\n *\n * Copyright (c) 2014 Brightcove\n * Licensed under the apache2 license.\n */\n\nvar PADDING = void 0;\n\n/**\n * Returns a new Uint8Array that is padded with PKCS#7 padding.\n * @param plaintext {Uint8Array} the input bytes before encryption\n * @return {Uint8Array} the padded bytes\n * @see http://tools.ietf.org/html/rfc5652\n */\nfunction pad(plaintext) {\n  var padding = PADDING[plaintext.byteLength % 16 || 0];\n  var result = new Uint8Array(plaintext.byteLength + padding.length);\n\n  result.set(plaintext);\n  result.set(padding, plaintext.byteLength);\n\n  return result;\n}\n\n// pre-define the padding values\nPADDING = [[16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16], [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15], [14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14], [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13], [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12], [11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11], [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], [9, 9, 9, 9, 9, 9, 9, 9, 9], [8, 8, 8, 8, 8, 8, 8, 8], [7, 7, 7, 7, 7, 7, 7], [6, 6, 6, 6, 6, 6], [5, 5, 5, 5, 5], [4, 4, 4, 4], [3, 3, 3], [2, 2], [1]];\n\n/**\n * Returns the subarray of a Uint8Array without PKCS#7 padding.\n * @param padded {Uint8Array} unencrypted bytes that have been padded\n * @return {Uint8Array} the unpadded bytes\n * @see http://tools.ietf.org/html/rfc5652\n */\nfunction unpad(padded) {\n  return padded.subarray(0, padded.byteLength - padded[padded.byteLength - 1]);\n}\n\nvar version = \"1.0.2\";\n\nexport { pad, unpad, version as VERSION };\n","import { unpad } from 'pkcs7';\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n\n\n\n\n\n\n\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\n\n\n\n\n\n\n\n\n\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\n/**\n * @file aes.js\n *\n * This file contains an adaptation of the AES decryption algorithm\n * from the Standford Javascript Cryptography Library. That work is\n * covered by the following copyright and permissions notice:\n *\n * Copyright 2009-2010 Emily Stark, Mike Hamburg, Dan Boneh.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above\n *    copyright notice, this list of conditions and the following\n *    disclaimer in the documentation and/or other materials provided\n *    with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR\n * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\n * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN\n * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * The views and conclusions contained in the software and documentation\n * are those of the authors and should not be interpreted as representing\n * official policies, either expressed or implied, of the authors.\n */\n\n/**\n * Expand the S-box tables.\n *\n * @private\n */\nvar precompute = function precompute() {\n  var tables = [[[], [], [], [], []], [[], [], [], [], []]];\n  var encTable = tables[0];\n  var decTable = tables[1];\n  var sbox = encTable[4];\n  var sboxInv = decTable[4];\n  var i = void 0;\n  var x = void 0;\n  var xInv = void 0;\n  var d = [];\n  var th = [];\n  var x2 = void 0;\n  var x4 = void 0;\n  var x8 = void 0;\n  var s = void 0;\n  var tEnc = void 0;\n  var tDec = void 0;\n\n  // Compute double and third tables\n  for (i = 0; i < 256; i++) {\n    th[(d[i] = i << 1 ^ (i >> 7) * 283) ^ i] = i;\n  }\n\n  for (x = xInv = 0; !sbox[x]; x ^= x2 || 1, xInv = th[xInv] || 1) {\n    // Compute sbox\n    s = xInv ^ xInv << 1 ^ xInv << 2 ^ xInv << 3 ^ xInv << 4;\n    s = s >> 8 ^ s & 255 ^ 99;\n    sbox[x] = s;\n    sboxInv[s] = x;\n\n    // Compute MixColumns\n    x8 = d[x4 = d[x2 = d[x]]];\n    tDec = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;\n    tEnc = d[s] * 0x101 ^ s * 0x1010100;\n\n    for (i = 0; i < 4; i++) {\n      encTable[i][x] = tEnc = tEnc << 24 ^ tEnc >>> 8;\n      decTable[i][s] = tDec = tDec << 24 ^ tDec >>> 8;\n    }\n  }\n\n  // Compactify. Considerable speedup on Firefox.\n  for (i = 0; i < 5; i++) {\n    encTable[i] = encTable[i].slice(0);\n    decTable[i] = decTable[i].slice(0);\n  }\n  return tables;\n};\nvar aesTables = null;\n\n/**\n * Schedule out an AES key for both encryption and decryption. This\n * is a low-level class. Use a cipher mode to do bulk encryption.\n *\n * @class AES\n * @param key {Array} The key as an array of 4, 6 or 8 words.\n */\n\nvar AES = function () {\n  function AES(key) {\n    classCallCheck(this, AES);\n\n    /**\n     * The expanded S-box and inverse S-box tables. These will be computed\n     * on the client so that we don't have to send them down the wire.\n     *\n     * There are two tables, _tables[0] is for encryption and\n     * _tables[1] is for decryption.\n     *\n     * The first 4 sub-tables are the expanded S-box with MixColumns. The\n     * last (_tables[01][4]) is the S-box itself.\n     *\n     * @private\n     */\n    // if we have yet to precompute the S-box tables\n    // do so now\n    if (!aesTables) {\n      aesTables = precompute();\n    }\n    // then make a copy of that object for use\n    this._tables = [[aesTables[0][0].slice(), aesTables[0][1].slice(), aesTables[0][2].slice(), aesTables[0][3].slice(), aesTables[0][4].slice()], [aesTables[1][0].slice(), aesTables[1][1].slice(), aesTables[1][2].slice(), aesTables[1][3].slice(), aesTables[1][4].slice()]];\n    var i = void 0;\n    var j = void 0;\n    var tmp = void 0;\n    var encKey = void 0;\n    var decKey = void 0;\n    var sbox = this._tables[0][4];\n    var decTable = this._tables[1];\n    var keyLen = key.length;\n    var rcon = 1;\n\n    if (keyLen !== 4 && keyLen !== 6 && keyLen !== 8) {\n      throw new Error('Invalid aes key size');\n    }\n\n    encKey = key.slice(0);\n    decKey = [];\n    this._key = [encKey, decKey];\n\n    // schedule encryption keys\n    for (i = keyLen; i < 4 * keyLen + 28; i++) {\n      tmp = encKey[i - 1];\n\n      // apply sbox\n      if (i % keyLen === 0 || keyLen === 8 && i % keyLen === 4) {\n        tmp = sbox[tmp >>> 24] << 24 ^ sbox[tmp >> 16 & 255] << 16 ^ sbox[tmp >> 8 & 255] << 8 ^ sbox[tmp & 255];\n\n        // shift rows and add rcon\n        if (i % keyLen === 0) {\n          tmp = tmp << 8 ^ tmp >>> 24 ^ rcon << 24;\n          rcon = rcon << 1 ^ (rcon >> 7) * 283;\n        }\n      }\n\n      encKey[i] = encKey[i - keyLen] ^ tmp;\n    }\n\n    // schedule decryption keys\n    for (j = 0; i; j++, i--) {\n      tmp = encKey[j & 3 ? i : i - 4];\n      if (i <= 4 || j < 4) {\n        decKey[j] = tmp;\n      } else {\n        decKey[j] = decTable[0][sbox[tmp >>> 24]] ^ decTable[1][sbox[tmp >> 16 & 255]] ^ decTable[2][sbox[tmp >> 8 & 255]] ^ decTable[3][sbox[tmp & 255]];\n      }\n    }\n  }\n\n  /**\n   * Decrypt 16 bytes, specified as four 32-bit words.\n   *\n   * @param {Number} encrypted0 the first word to decrypt\n   * @param {Number} encrypted1 the second word to decrypt\n   * @param {Number} encrypted2 the third word to decrypt\n   * @param {Number} encrypted3 the fourth word to decrypt\n   * @param {Int32Array} out the array to write the decrypted words\n   * into\n   * @param {Number} offset the offset into the output array to start\n   * writing results\n   * @return {Array} The plaintext.\n   */\n\n\n  AES.prototype.decrypt = function decrypt(encrypted0, encrypted1, encrypted2, encrypted3, out, offset) {\n    var key = this._key[1];\n    // state variables a,b,c,d are loaded with pre-whitened data\n    var a = encrypted0 ^ key[0];\n    var b = encrypted3 ^ key[1];\n    var c = encrypted2 ^ key[2];\n    var d = encrypted1 ^ key[3];\n    var a2 = void 0;\n    var b2 = void 0;\n    var c2 = void 0;\n\n    // key.length === 2 ?\n    var nInnerRounds = key.length / 4 - 2;\n    var i = void 0;\n    var kIndex = 4;\n    var table = this._tables[1];\n\n    // load up the tables\n    var table0 = table[0];\n    var table1 = table[1];\n    var table2 = table[2];\n    var table3 = table[3];\n    var sbox = table[4];\n\n    // Inner rounds. Cribbed from OpenSSL.\n    for (i = 0; i < nInnerRounds; i++) {\n      a2 = table0[a >>> 24] ^ table1[b >> 16 & 255] ^ table2[c >> 8 & 255] ^ table3[d & 255] ^ key[kIndex];\n      b2 = table0[b >>> 24] ^ table1[c >> 16 & 255] ^ table2[d >> 8 & 255] ^ table3[a & 255] ^ key[kIndex + 1];\n      c2 = table0[c >>> 24] ^ table1[d >> 16 & 255] ^ table2[a >> 8 & 255] ^ table3[b & 255] ^ key[kIndex + 2];\n      d = table0[d >>> 24] ^ table1[a >> 16 & 255] ^ table2[b >> 8 & 255] ^ table3[c & 255] ^ key[kIndex + 3];\n      kIndex += 4;\n      a = a2;b = b2;c = c2;\n    }\n\n    // Last round.\n    for (i = 0; i < 4; i++) {\n      out[(3 & -i) + offset] = sbox[a >>> 24] << 24 ^ sbox[b >> 16 & 255] << 16 ^ sbox[c >> 8 & 255] << 8 ^ sbox[d & 255] ^ key[kIndex++];\n      a2 = a;a = b;b = c;c = d;d = a2;\n    }\n  };\n\n  return AES;\n}();\n\n/**\n * @file stream.js\n */\n/**\n * A lightweight readable stream implemention that handles event dispatching.\n *\n * @class Stream\n */\nvar Stream = function () {\n  function Stream() {\n    classCallCheck(this, Stream);\n\n    this.listeners = {};\n  }\n\n  /**\n   * Add a listener for a specified event type.\n   *\n   * @param {String} type the event name\n   * @param {Function} listener the callback to be invoked when an event of\n   * the specified type occurs\n   */\n\n\n  Stream.prototype.on = function on(type, listener) {\n    if (!this.listeners[type]) {\n      this.listeners[type] = [];\n    }\n    this.listeners[type].push(listener);\n  };\n\n  /**\n   * Remove a listener for a specified event type.\n   *\n   * @param {String} type the event name\n   * @param {Function} listener  a function previously registered for this\n   * type of event through `on`\n   * @return {Boolean} if we could turn it off or not\n   */\n\n\n  Stream.prototype.off = function off(type, listener) {\n    if (!this.listeners[type]) {\n      return false;\n    }\n\n    var index = this.listeners[type].indexOf(listener);\n\n    this.listeners[type].splice(index, 1);\n    return index > -1;\n  };\n\n  /**\n   * Trigger an event of the specified type on this stream. Any additional\n   * arguments to this function are passed as parameters to event listeners.\n   *\n   * @param {String} type the event name\n   */\n\n\n  Stream.prototype.trigger = function trigger(type) {\n    var callbacks = this.listeners[type];\n\n    if (!callbacks) {\n      return;\n    }\n\n    // Slicing the arguments on every invocation of this method\n    // can add a significant amount of overhead. Avoid the\n    // intermediate object creation for the common case of a\n    // single callback argument\n    if (arguments.length === 2) {\n      var length = callbacks.length;\n\n      for (var i = 0; i < length; ++i) {\n        callbacks[i].call(this, arguments[1]);\n      }\n    } else {\n      var args = Array.prototype.slice.call(arguments, 1);\n      var _length = callbacks.length;\n\n      for (var _i = 0; _i < _length; ++_i) {\n        callbacks[_i].apply(this, args);\n      }\n    }\n  };\n\n  /**\n   * Destroys the stream and cleans up.\n   */\n\n\n  Stream.prototype.dispose = function dispose() {\n    this.listeners = {};\n  };\n  /**\n   * Forwards all `data` events on this stream to the destination stream. The\n   * destination stream should provide a method `push` to receive the data\n   * events as they arrive.\n   *\n   * @param {Stream} destination the stream that will receive all `data` events\n   * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\n   */\n\n\n  Stream.prototype.pipe = function pipe(destination) {\n    this.on('data', function (data) {\n      destination.push(data);\n    });\n  };\n\n  return Stream;\n}();\n\n/**\n * @file async-stream.js\n */\n/**\n * A wrapper around the Stream class to use setTiemout\n * and run stream \"jobs\" Asynchronously\n *\n * @class AsyncStream\n * @extends Stream\n */\n\nvar AsyncStream = function (_Stream) {\n  inherits(AsyncStream, _Stream);\n\n  function AsyncStream() {\n    classCallCheck(this, AsyncStream);\n\n    var _this = possibleConstructorReturn(this, _Stream.call(this, Stream));\n\n    _this.jobs = [];\n    _this.delay = 1;\n    _this.timeout_ = null;\n    return _this;\n  }\n\n  /**\n   * process an async job\n   *\n   * @private\n   */\n\n\n  AsyncStream.prototype.processJob_ = function processJob_() {\n    this.jobs.shift()();\n    if (this.jobs.length) {\n      this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);\n    } else {\n      this.timeout_ = null;\n    }\n  };\n\n  /**\n   * push a job into the stream\n   *\n   * @param {Function} job the job to push into the stream\n   */\n\n\n  AsyncStream.prototype.push = function push(job) {\n    this.jobs.push(job);\n    if (!this.timeout_) {\n      this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);\n    }\n  };\n\n  return AsyncStream;\n}(Stream);\n\n/**\n * @file decrypter.js\n *\n * An asynchronous implementation of AES-128 CBC decryption with\n * PKCS#7 padding.\n */\n\n/**\n * Convert network-order (big-endian) bytes into their little-endian\n * representation.\n */\nvar ntoh = function ntoh(word) {\n  return word << 24 | (word & 0xff00) << 8 | (word & 0xff0000) >> 8 | word >>> 24;\n};\n\n/**\n * Decrypt bytes using AES-128 with CBC and PKCS#7 padding.\n *\n * @param {Uint8Array} encrypted the encrypted bytes\n * @param {Uint32Array} key the bytes of the decryption key\n * @param {Uint32Array} initVector the initialization vector (IV) to\n * use for the first round of CBC.\n * @return {Uint8Array} the decrypted bytes\n *\n * @see http://en.wikipedia.org/wiki/Advanced_Encryption_Standard\n * @see http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Block_Chaining_.28CBC.29\n * @see https://tools.ietf.org/html/rfc2315\n */\nvar decrypt = function decrypt(encrypted, key, initVector) {\n  // word-level access to the encrypted bytes\n  var encrypted32 = new Int32Array(encrypted.buffer, encrypted.byteOffset, encrypted.byteLength >> 2);\n\n  var decipher = new AES(Array.prototype.slice.call(key));\n\n  // byte and word-level access for the decrypted output\n  var decrypted = new Uint8Array(encrypted.byteLength);\n  var decrypted32 = new Int32Array(decrypted.buffer);\n\n  // temporary variables for working with the IV, encrypted, and\n  // decrypted data\n  var init0 = void 0;\n  var init1 = void 0;\n  var init2 = void 0;\n  var init3 = void 0;\n  var encrypted0 = void 0;\n  var encrypted1 = void 0;\n  var encrypted2 = void 0;\n  var encrypted3 = void 0;\n\n  // iteration variable\n  var wordIx = void 0;\n\n  // pull out the words of the IV to ensure we don't modify the\n  // passed-in reference and easier access\n  init0 = initVector[0];\n  init1 = initVector[1];\n  init2 = initVector[2];\n  init3 = initVector[3];\n\n  // decrypt four word sequences, applying cipher-block chaining (CBC)\n  // to each decrypted block\n  for (wordIx = 0; wordIx < encrypted32.length; wordIx += 4) {\n    // convert big-endian (network order) words into little-endian\n    // (javascript order)\n    encrypted0 = ntoh(encrypted32[wordIx]);\n    encrypted1 = ntoh(encrypted32[wordIx + 1]);\n    encrypted2 = ntoh(encrypted32[wordIx + 2]);\n    encrypted3 = ntoh(encrypted32[wordIx + 3]);\n\n    // decrypt the block\n    decipher.decrypt(encrypted0, encrypted1, encrypted2, encrypted3, decrypted32, wordIx);\n\n    // XOR with the IV, and restore network byte-order to obtain the\n    // plaintext\n    decrypted32[wordIx] = ntoh(decrypted32[wordIx] ^ init0);\n    decrypted32[wordIx + 1] = ntoh(decrypted32[wordIx + 1] ^ init1);\n    decrypted32[wordIx + 2] = ntoh(decrypted32[wordIx + 2] ^ init2);\n    decrypted32[wordIx + 3] = ntoh(decrypted32[wordIx + 3] ^ init3);\n\n    // setup the IV for the next round\n    init0 = encrypted0;\n    init1 = encrypted1;\n    init2 = encrypted2;\n    init3 = encrypted3;\n  }\n\n  return decrypted;\n};\n\n/**\n * The `Decrypter` class that manages decryption of AES\n * data through `AsyncStream` objects and the `decrypt`\n * function\n *\n * @param {Uint8Array} encrypted the encrypted bytes\n * @param {Uint32Array} key the bytes of the decryption key\n * @param {Uint32Array} initVector the initialization vector (IV) to\n * @param {Function} done the function to run when done\n * @class Decrypter\n */\n\nvar Decrypter = function () {\n  function Decrypter(encrypted, key, initVector, done) {\n    classCallCheck(this, Decrypter);\n\n    var step = Decrypter.STEP;\n    var encrypted32 = new Int32Array(encrypted.buffer);\n    var decrypted = new Uint8Array(encrypted.byteLength);\n    var i = 0;\n\n    this.asyncStream_ = new AsyncStream();\n\n    // split up the encryption job and do the individual chunks asynchronously\n    this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));\n    for (i = step; i < encrypted32.length; i += step) {\n      initVector = new Uint32Array([ntoh(encrypted32[i - 4]), ntoh(encrypted32[i - 3]), ntoh(encrypted32[i - 2]), ntoh(encrypted32[i - 1])]);\n      this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));\n    }\n    // invoke the done() callback when everything is finished\n    this.asyncStream_.push(function () {\n      // remove pkcs#7 padding from the decrypted bytes\n      done(null, unpad(decrypted));\n    });\n  }\n\n  /**\n   * a getter for step the maximum number of bytes to process at one time\n   *\n   * @return {Number} the value of step 32000\n   */\n\n\n  /**\n   * @private\n   */\n  Decrypter.prototype.decryptChunk_ = function decryptChunk_(encrypted, key, initVector, decrypted) {\n    return function () {\n      var bytes = decrypt(encrypted, key, initVector);\n\n      decrypted.set(bytes, encrypted.byteOffset);\n    };\n  };\n\n  createClass(Decrypter, null, [{\n    key: 'STEP',\n    get: function get$$1() {\n      // 4 * 8000;\n      return 32000;\n    }\n  }]);\n  return Decrypter;\n}();\n\n/**\n * @file index.js\n *\n * Index module to easily import the primary components of AES-128\n * decryption. Like this:\n *\n * ```js\n * import {Decrypter, decrypt, AsyncStream} from 'aes-decrypter';\n * ```\n */\n\nexport { decrypt, Decrypter, AsyncStream };\n","/**\n * @license\n * Video.js 7.6.0 <http://videojs.com/>\n * Copyright Brightcove, Inc. <https://www.brightcove.com/>\n * Available under Apache License Version 2.0\n * <https://github.com/videojs/video.js/blob/master/LICENSE>\n *\n * Includes vtt.js <https://github.com/mozilla/vtt.js>\n * Available under Apache License Version 2.0\n * <https://github.com/mozilla/vtt.js/blob/master/LICENSE>\n */\n\nimport window$1 from 'global/window';\nimport document from 'global/document';\nimport tsml from 'tsml';\nimport safeParseTuple from 'safe-json-parse/tuple';\nimport keycode from 'keycode';\nimport XHR from 'xhr';\nimport vtt from 'videojs-vtt.js';\nimport URLToolkit from 'url-toolkit';\nimport { Parser } from 'm3u8-parser';\nimport { parse, parseUTCTiming } from 'mpd-parser';\nimport mp4Inspector from 'mux.js/lib/tools/mp4-inspector';\nimport mp4probe from 'mux.js/lib/mp4/probe';\nimport { CaptionParser } from 'mux.js/lib/mp4';\nimport tsInspector from 'mux.js/lib/tools/ts-inspector.js';\nimport { Decrypter, AsyncStream, decrypt } from 'aes-decrypter';\n\nvar version = \"7.6.0\";\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _taggedTemplateLiteralLoose(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  strings.raw = raw;\n  return strings;\n}\n\n/**\n * @file create-logger.js\n * @module create-logger\n */\n\nvar history = [];\n/**\n * Log messages to the console and history based on the type of message\n *\n * @private\n * @param  {string} type\n *         The name of the console method to use.\n *\n * @param  {Array} args\n *         The arguments to be passed to the matching console method.\n */\n\nvar LogByTypeFactory = function LogByTypeFactory(name, log) {\n  return function (type, level, args) {\n    var lvl = log.levels[level];\n    var lvlRegExp = new RegExp(\"^(\" + lvl + \")$\");\n\n    if (type !== 'log') {\n      // Add the type to the front of the message when it's not \"log\".\n      args.unshift(type.toUpperCase() + ':');\n    } // Add console prefix after adding to history.\n\n\n    args.unshift(name + ':'); // Add a clone of the args at this point to history.\n\n    if (history) {\n      history.push([].concat(args));\n    } // If there's no console then don't try to output messages, but they will\n    // still be stored in history.\n\n\n    if (!window$1.console) {\n      return;\n    } // Was setting these once outside of this function, but containing them\n    // in the function makes it easier to test cases where console doesn't exist\n    // when the module is executed.\n\n\n    var fn = window$1.console[type];\n\n    if (!fn && type === 'debug') {\n      // Certain browsers don't have support for console.debug. For those, we\n      // should default to the closest comparable log.\n      fn = window$1.console.info || window$1.console.log;\n    } // Bail out if there's no console or if this type is not allowed by the\n    // current logging level.\n\n\n    if (!fn || !lvl || !lvlRegExp.test(type)) {\n      return;\n    }\n\n    fn[Array.isArray(args) ? 'apply' : 'call'](window$1.console, args);\n  };\n};\n\nfunction createLogger(name) {\n  // This is the private tracking variable for logging level.\n  var level = 'info'; // the curried logByType bound to the specific log and history\n\n  var logByType;\n  /**\n   * Logs plain debug messages. Similar to `console.log`.\n   *\n   * Due to [limitations](https://github.com/jsdoc3/jsdoc/issues/955#issuecomment-313829149)\n   * of our JSDoc template, we cannot properly document this as both a function\n   * and a namespace, so its function signature is documented here.\n   *\n   * #### Arguments\n   * ##### *args\n   * Mixed[]\n   *\n   * Any combination of values that could be passed to `console.log()`.\n   *\n   * #### Return Value\n   *\n   * `undefined`\n   *\n   * @namespace\n   * @param    {Mixed[]} args\n   *           One or more messages or objects that should be logged.\n   */\n\n  var log = function log() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    logByType('log', level, args);\n  }; // This is the logByType helper that the logging methods below use\n\n\n  logByType = LogByTypeFactory(name, log);\n  /**\n   * Create a new sublogger which chains the old name to the new name.\n   *\n   * For example, doing `videojs.log.createLogger('player')` and then using that logger will log the following:\n   * ```js\n   *  mylogger('foo');\n   *  // > VIDEOJS: player: foo\n   * ```\n   *\n   * @param {string} name\n   *        The name to add call the new logger\n   * @return {Object}\n   */\n\n  log.createLogger = function (subname) {\n    return createLogger(name + ': ' + subname);\n  };\n  /**\n   * Enumeration of available logging levels, where the keys are the level names\n   * and the values are `|`-separated strings containing logging methods allowed\n   * in that logging level. These strings are used to create a regular expression\n   * matching the function name being called.\n   *\n   * Levels provided by Video.js are:\n   *\n   * - `off`: Matches no calls. Any value that can be cast to `false` will have\n   *   this effect. The most restrictive.\n   * - `all`: Matches only Video.js-provided functions (`debug`, `log`,\n   *   `log.warn`, and `log.error`).\n   * - `debug`: Matches `log.debug`, `log`, `log.warn`, and `log.error` calls.\n   * - `info` (default): Matches `log`, `log.warn`, and `log.error` calls.\n   * - `warn`: Matches `log.warn` and `log.error` calls.\n   * - `error`: Matches only `log.error` calls.\n   *\n   * @type {Object}\n   */\n\n\n  log.levels = {\n    all: 'debug|log|warn|error',\n    off: '',\n    debug: 'debug|log|warn|error',\n    info: 'log|warn|error',\n    warn: 'warn|error',\n    error: 'error',\n    DEFAULT: level\n  };\n  /**\n   * Get or set the current logging level.\n   *\n   * If a string matching a key from {@link module:log.levels} is provided, acts\n   * as a setter.\n   *\n   * @param  {string} [lvl]\n   *         Pass a valid level to set a new logging level.\n   *\n   * @return {string}\n   *         The current logging level.\n   */\n\n  log.level = function (lvl) {\n    if (typeof lvl === 'string') {\n      if (!log.levels.hasOwnProperty(lvl)) {\n        throw new Error(\"\\\"\" + lvl + \"\\\" in not a valid log level\");\n      }\n\n      level = lvl;\n    }\n\n    return level;\n  };\n  /**\n   * Returns an array containing everything that has been logged to the history.\n   *\n   * This array is a shallow clone of the internal history record. However, its\n   * contents are _not_ cloned; so, mutating objects inside this array will\n   * mutate them in history.\n   *\n   * @return {Array}\n   */\n\n\n  log.history = function () {\n    return history ? [].concat(history) : [];\n  };\n  /**\n   * Allows you to filter the history by the given logger name\n   *\n   * @param {string} fname\n   *        The name to filter by\n   *\n   * @return {Array}\n   *         The filtered list to return\n   */\n\n\n  log.history.filter = function (fname) {\n    return (history || []).filter(function (historyItem) {\n      // if the first item in each historyItem includes `fname`, then it's a match\n      return new RegExp(\".*\" + fname + \".*\").test(historyItem[0]);\n    });\n  };\n  /**\n   * Clears the internal history tracking, but does not prevent further history\n   * tracking.\n   */\n\n\n  log.history.clear = function () {\n    if (history) {\n      history.length = 0;\n    }\n  };\n  /**\n   * Disable history tracking if it is currently enabled.\n   */\n\n\n  log.history.disable = function () {\n    if (history !== null) {\n      history.length = 0;\n      history = null;\n    }\n  };\n  /**\n   * Enable history tracking if it is currently disabled.\n   */\n\n\n  log.history.enable = function () {\n    if (history === null) {\n      history = [];\n    }\n  };\n  /**\n   * Logs error messages. Similar to `console.error`.\n   *\n   * @param {Mixed[]} args\n   *        One or more messages or objects that should be logged as an error\n   */\n\n\n  log.error = function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return logByType('error', level, args);\n  };\n  /**\n   * Logs warning messages. Similar to `console.warn`.\n   *\n   * @param {Mixed[]} args\n   *        One or more messages or objects that should be logged as a warning.\n   */\n\n\n  log.warn = function () {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    return logByType('warn', level, args);\n  };\n  /**\n   * Logs debug messages. Similar to `console.debug`, but may also act as a comparable\n   * log if `console.debug` is not available\n   *\n   * @param {Mixed[]} args\n   *        One or more messages or objects that should be logged as debug.\n   */\n\n\n  log.debug = function () {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n\n    return logByType('debug', level, args);\n  };\n\n  return log;\n}\n\n/**\n * @file log.js\n * @module log\n */\nvar log = createLogger('VIDEOJS');\nvar createLogger$1 = log.createLogger;\n\n/**\n * @file obj.js\n * @module obj\n */\n\n/**\n * @callback obj:EachCallback\n *\n * @param {Mixed} value\n *        The current key for the object that is being iterated over.\n *\n * @param {string} key\n *        The current key-value for object that is being iterated over\n */\n\n/**\n * @callback obj:ReduceCallback\n *\n * @param {Mixed} accum\n *        The value that is accumulating over the reduce loop.\n *\n * @param {Mixed} value\n *        The current key for the object that is being iterated over.\n *\n * @param {string} key\n *        The current key-value for object that is being iterated over\n *\n * @return {Mixed}\n *         The new accumulated value.\n */\nvar toString = Object.prototype.toString;\n/**\n * Get the keys of an Object\n *\n * @param {Object}\n *        The Object to get the keys from\n *\n * @return {string[]}\n *         An array of the keys from the object. Returns an empty array if the\n *         object passed in was invalid or had no keys.\n *\n * @private\n */\n\nvar keys = function keys(object) {\n  return isObject(object) ? Object.keys(object) : [];\n};\n/**\n * Array-like iteration for objects.\n *\n * @param {Object} object\n *        The object to iterate over\n *\n * @param {obj:EachCallback} fn\n *        The callback function which is called for each key in the object.\n */\n\n\nfunction each(object, fn) {\n  keys(object).forEach(function (key) {\n    return fn(object[key], key);\n  });\n}\n/**\n * Array-like reduce for objects.\n *\n * @param {Object} object\n *        The Object that you want to reduce.\n *\n * @param {Function} fn\n *         A callback function which is called for each key in the object. It\n *         receives the accumulated value and the per-iteration value and key\n *         as arguments.\n *\n * @param {Mixed} [initial = 0]\n *        Starting value\n *\n * @return {Mixed}\n *         The final accumulated value.\n */\n\nfunction reduce(object, fn, initial) {\n  if (initial === void 0) {\n    initial = 0;\n  }\n\n  return keys(object).reduce(function (accum, key) {\n    return fn(accum, object[key], key);\n  }, initial);\n}\n/**\n * Object.assign-style object shallow merge/extend.\n *\n * @param  {Object} target\n * @param  {Object} ...sources\n * @return {Object}\n */\n\nfunction assign(target) {\n  for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    sources[_key - 1] = arguments[_key];\n  }\n\n  if (Object.assign) {\n    return Object.assign.apply(Object, [target].concat(sources));\n  }\n\n  sources.forEach(function (source) {\n    if (!source) {\n      return;\n    }\n\n    each(source, function (value, key) {\n      target[key] = value;\n    });\n  });\n  return target;\n}\n/**\n * Returns whether a value is an object of any kind - including DOM nodes,\n * arrays, regular expressions, etc. Not functions, though.\n *\n * This avoids the gotcha where using `typeof` on a `null` value\n * results in `'object'`.\n *\n * @param  {Object} value\n * @return {boolean}\n */\n\nfunction isObject(value) {\n  return !!value && typeof value === 'object';\n}\n/**\n * Returns whether an object appears to be a \"plain\" object - that is, a\n * direct instance of `Object`.\n *\n * @param  {Object} value\n * @return {boolean}\n */\n\nfunction isPlain(value) {\n  return isObject(value) && toString.call(value) === '[object Object]' && value.constructor === Object;\n}\n\n/**\n * @file computed-style.js\n * @module computed-style\n */\n/**\n * A safe getComputedStyle.\n *\n * This is needed because in Firefox, if the player is loaded in an iframe with\n * `display:none`, then `getComputedStyle` returns `null`, so, we do a\n * null-check to make sure that the player doesn't break in these cases.\n *\n * @function\n * @param    {Element} el\n *           The element you want the computed style of\n *\n * @param    {string} prop\n *           The property name you want\n *\n * @see      https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n */\n\nfunction computedStyle(el, prop) {\n  if (!el || !prop) {\n    return '';\n  }\n\n  if (typeof window$1.getComputedStyle === 'function') {\n    var cs = window$1.getComputedStyle(el);\n    return cs ? cs[prop] : '';\n  }\n\n  return '';\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteralLoose([\"Setting attributes in the second argument of createEl()\\n                has been deprecated. Use the third argument instead.\\n                createEl(type, properties, attributes). Attempting to set \", \" to \", \".\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n/**\n * Detect if a value is a string with any non-whitespace characters.\n *\n * @private\n * @param  {string} str\n *         The string to check\n *\n * @return {boolean}\n *         Will be `true` if the string is non-blank, `false` otherwise.\n *\n */\n\nfunction isNonBlankString(str) {\n  return typeof str === 'string' && /\\S/.test(str);\n}\n/**\n * Throws an error if the passed string has whitespace. This is used by\n * class methods to be relatively consistent with the classList API.\n *\n * @private\n * @param  {string} str\n *         The string to check for whitespace.\n *\n * @throws {Error}\n *         Throws an error if there is whitespace in the string.\n */\n\n\nfunction throwIfWhitespace(str) {\n  if (/\\s/.test(str)) {\n    throw new Error('class has illegal whitespace characters');\n  }\n}\n/**\n * Produce a regular expression for matching a className within an elements className.\n *\n * @private\n * @param  {string} className\n *         The className to generate the RegExp for.\n *\n * @return {RegExp}\n *         The RegExp that will check for a specific `className` in an elements\n *         className.\n */\n\n\nfunction classRegExp(className) {\n  return new RegExp('(^|\\\\s)' + className + '($|\\\\s)');\n}\n/**\n * Whether the current DOM interface appears to be real (i.e. not simulated).\n *\n * @return {boolean}\n *         Will be `true` if the DOM appears to be real, `false` otherwise.\n */\n\n\nfunction isReal() {\n  // Both document and window will never be undefined thanks to `global`.\n  return document === window$1.document;\n}\n/**\n * Determines, via duck typing, whether or not a value is a DOM element.\n *\n * @param  {Mixed} value\n *         The value to check.\n *\n * @return {boolean}\n *         Will be `true` if the value is a DOM element, `false` otherwise.\n */\n\nfunction isEl(value) {\n  return isObject(value) && value.nodeType === 1;\n}\n/**\n * Determines if the current DOM is embedded in an iframe.\n *\n * @return {boolean}\n *         Will be `true` if the DOM is embedded in an iframe, `false`\n *         otherwise.\n */\n\nfunction isInFrame() {\n  // We need a try/catch here because Safari will throw errors when attempting\n  // to get either `parent` or `self`\n  try {\n    return window$1.parent !== window$1.self;\n  } catch (x) {\n    return true;\n  }\n}\n/**\n * Creates functions to query the DOM using a given method.\n *\n * @private\n * @param   {string} method\n *          The method to create the query with.\n *\n * @return  {Function}\n *          The query method\n */\n\nfunction createQuerier(method) {\n  return function (selector, context) {\n    if (!isNonBlankString(selector)) {\n      return document[method](null);\n    }\n\n    if (isNonBlankString(context)) {\n      context = document.querySelector(context);\n    }\n\n    var ctx = isEl(context) ? context : document;\n    return ctx[method] && ctx[method](selector);\n  };\n}\n/**\n * Creates an element and applies properties, attributes, and inserts content.\n *\n * @param  {string} [tagName='div']\n *         Name of tag to be created.\n *\n * @param  {Object} [properties={}]\n *         Element properties to be applied.\n *\n * @param  {Object} [attributes={}]\n *         Element attributes to be applied.\n *\n * @param {module:dom~ContentDescriptor} content\n *        A content descriptor object.\n *\n * @return {Element}\n *         The element that was created.\n */\n\n\nfunction createEl(tagName, properties, attributes, content) {\n  if (tagName === void 0) {\n    tagName = 'div';\n  }\n\n  if (properties === void 0) {\n    properties = {};\n  }\n\n  if (attributes === void 0) {\n    attributes = {};\n  }\n\n  var el = document.createElement(tagName);\n  Object.getOwnPropertyNames(properties).forEach(function (propName) {\n    var val = properties[propName]; // See #2176\n    // We originally were accepting both properties and attributes in the\n    // same object, but that doesn't work so well.\n\n    if (propName.indexOf('aria-') !== -1 || propName === 'role' || propName === 'type') {\n      log.warn(tsml(_templateObject(), propName, val));\n      el.setAttribute(propName, val); // Handle textContent since it's not supported everywhere and we have a\n      // method for it.\n    } else if (propName === 'textContent') {\n      textContent(el, val);\n    } else {\n      el[propName] = val;\n    }\n  });\n  Object.getOwnPropertyNames(attributes).forEach(function (attrName) {\n    el.setAttribute(attrName, attributes[attrName]);\n  });\n\n  if (content) {\n    appendContent(el, content);\n  }\n\n  return el;\n}\n/**\n * Injects text into an element, replacing any existing contents entirely.\n *\n * @param  {Element} el\n *         The element to add text content into\n *\n * @param  {string} text\n *         The text content to add.\n *\n * @return {Element}\n *         The element with added text content.\n */\n\nfunction textContent(el, text) {\n  if (typeof el.textContent === 'undefined') {\n    el.innerText = text;\n  } else {\n    el.textContent = text;\n  }\n\n  return el;\n}\n/**\n * Insert an element as the first child node of another\n *\n * @param {Element} child\n *        Element to insert\n *\n * @param {Element} parent\n *        Element to insert child into\n */\n\nfunction prependTo(child, parent) {\n  if (parent.firstChild) {\n    parent.insertBefore(child, parent.firstChild);\n  } else {\n    parent.appendChild(child);\n  }\n}\n/**\n * Check if an element has a class name.\n *\n * @param  {Element} element\n *         Element to check\n *\n * @param  {string} classToCheck\n *         Class name to check for\n *\n * @return {boolean}\n *         Will be `true` if the element has a class, `false` otherwise.\n *\n * @throws {Error}\n *         Throws an error if `classToCheck` has white space.\n */\n\nfunction hasClass(element, classToCheck) {\n  throwIfWhitespace(classToCheck);\n\n  if (element.classList) {\n    return element.classList.contains(classToCheck);\n  }\n\n  return classRegExp(classToCheck).test(element.className);\n}\n/**\n * Add a class name to an element.\n *\n * @param  {Element} element\n *         Element to add class name to.\n *\n * @param  {string} classToAdd\n *         Class name to add.\n *\n * @return {Element}\n *         The DOM element with the added class name.\n */\n\nfunction addClass(element, classToAdd) {\n  if (element.classList) {\n    element.classList.add(classToAdd); // Don't need to `throwIfWhitespace` here because `hasElClass` will do it\n    // in the case of classList not being supported.\n  } else if (!hasClass(element, classToAdd)) {\n    element.className = (element.className + ' ' + classToAdd).trim();\n  }\n\n  return element;\n}\n/**\n * Remove a class name from an element.\n *\n * @param  {Element} element\n *         Element to remove a class name from.\n *\n * @param  {string} classToRemove\n *         Class name to remove\n *\n * @return {Element}\n *         The DOM element with class name removed.\n */\n\nfunction removeClass(element, classToRemove) {\n  if (element.classList) {\n    element.classList.remove(classToRemove);\n  } else {\n    throwIfWhitespace(classToRemove);\n    element.className = element.className.split(/\\s+/).filter(function (c) {\n      return c !== classToRemove;\n    }).join(' ');\n  }\n\n  return element;\n}\n/**\n * The callback definition for toggleClass.\n *\n * @callback module:dom~PredicateCallback\n * @param    {Element} element\n *           The DOM element of the Component.\n *\n * @param    {string} classToToggle\n *           The `className` that wants to be toggled\n *\n * @return   {boolean|undefined}\n *           If `true` is returned, the `classToToggle` will be added to the\n *           `element`. If `false`, the `classToToggle` will be removed from\n *           the `element`. If `undefined`, the callback will be ignored.\n */\n\n/**\n * Adds or removes a class name to/from an element depending on an optional\n * condition or the presence/absence of the class name.\n *\n * @param  {Element} element\n *         The element to toggle a class name on.\n *\n * @param  {string} classToToggle\n *         The class that should be toggled.\n *\n * @param  {boolean|module:dom~PredicateCallback} [predicate]\n *         See the return value for {@link module:dom~PredicateCallback}\n *\n * @return {Element}\n *         The element with a class that has been toggled.\n */\n\nfunction toggleClass(element, classToToggle, predicate) {\n  // This CANNOT use `classList` internally because IE11 does not support the\n  // second parameter to the `classList.toggle()` method! Which is fine because\n  // `classList` will be used by the add/remove functions.\n  var has = hasClass(element, classToToggle);\n\n  if (typeof predicate === 'function') {\n    predicate = predicate(element, classToToggle);\n  }\n\n  if (typeof predicate !== 'boolean') {\n    predicate = !has;\n  } // If the necessary class operation matches the current state of the\n  // element, no action is required.\n\n\n  if (predicate === has) {\n    return;\n  }\n\n  if (predicate) {\n    addClass(element, classToToggle);\n  } else {\n    removeClass(element, classToToggle);\n  }\n\n  return element;\n}\n/**\n * Apply attributes to an HTML element.\n *\n * @param {Element} el\n *        Element to add attributes to.\n *\n * @param {Object} [attributes]\n *        Attributes to be applied.\n */\n\nfunction setAttributes(el, attributes) {\n  Object.getOwnPropertyNames(attributes).forEach(function (attrName) {\n    var attrValue = attributes[attrName];\n\n    if (attrValue === null || typeof attrValue === 'undefined' || attrValue === false) {\n      el.removeAttribute(attrName);\n    } else {\n      el.setAttribute(attrName, attrValue === true ? '' : attrValue);\n    }\n  });\n}\n/**\n * Get an element's attribute values, as defined on the HTML tag.\n *\n * Attributes are not the same as properties. They're defined on the tag\n * or with setAttribute.\n *\n * @param  {Element} tag\n *         Element from which to get tag attributes.\n *\n * @return {Object}\n *         All attributes of the element. Boolean attributes will be `true` or\n *         `false`, others will be strings.\n */\n\nfunction getAttributes(tag) {\n  var obj = {}; // known boolean attributes\n  // we can check for matching boolean properties, but not all browsers\n  // and not all tags know about these attributes, so, we still want to check them manually\n\n  var knownBooleans = ',' + 'autoplay,controls,playsinline,loop,muted,default,defaultMuted' + ',';\n\n  if (tag && tag.attributes && tag.attributes.length > 0) {\n    var attrs = tag.attributes;\n\n    for (var i = attrs.length - 1; i >= 0; i--) {\n      var attrName = attrs[i].name;\n      var attrVal = attrs[i].value; // check for known booleans\n      // the matching element property will return a value for typeof\n\n      if (typeof tag[attrName] === 'boolean' || knownBooleans.indexOf(',' + attrName + ',') !== -1) {\n        // the value of an included boolean attribute is typically an empty\n        // string ('') which would equal false if we just check for a false value.\n        // we also don't want support bad code like autoplay='false'\n        attrVal = attrVal !== null ? true : false;\n      }\n\n      obj[attrName] = attrVal;\n    }\n  }\n\n  return obj;\n}\n/**\n * Get the value of an element's attribute.\n *\n * @param {Element} el\n *        A DOM element.\n *\n * @param {string} attribute\n *        Attribute to get the value of.\n *\n * @return {string}\n *         The value of the attribute.\n */\n\nfunction getAttribute(el, attribute) {\n  return el.getAttribute(attribute);\n}\n/**\n * Set the value of an element's attribute.\n *\n * @param {Element} el\n *        A DOM element.\n *\n * @param {string} attribute\n *        Attribute to set.\n *\n * @param {string} value\n *        Value to set the attribute to.\n */\n\nfunction setAttribute(el, attribute, value) {\n  el.setAttribute(attribute, value);\n}\n/**\n * Remove an element's attribute.\n *\n * @param {Element} el\n *        A DOM element.\n *\n * @param {string} attribute\n *        Attribute to remove.\n */\n\nfunction removeAttribute(el, attribute) {\n  el.removeAttribute(attribute);\n}\n/**\n * Attempt to block the ability to select text.\n */\n\nfunction blockTextSelection() {\n  document.body.focus();\n\n  document.onselectstart = function () {\n    return false;\n  };\n}\n/**\n * Turn off text selection blocking.\n */\n\nfunction unblockTextSelection() {\n  document.onselectstart = function () {\n    return true;\n  };\n}\n/**\n * Identical to the native `getBoundingClientRect` function, but ensures that\n * the method is supported at all (it is in all browsers we claim to support)\n * and that the element is in the DOM before continuing.\n *\n * This wrapper function also shims properties which are not provided by some\n * older browsers (namely, IE8).\n *\n * Additionally, some browsers do not support adding properties to a\n * `ClientRect`/`DOMRect` object; so, we shallow-copy it with the standard\n * properties (except `x` and `y` which are not widely supported). This helps\n * avoid implementations where keys are non-enumerable.\n *\n * @param  {Element} el\n *         Element whose `ClientRect` we want to calculate.\n *\n * @return {Object|undefined}\n *         Always returns a plain object - or `undefined` if it cannot.\n */\n\nfunction getBoundingClientRect(el) {\n  if (el && el.getBoundingClientRect && el.parentNode) {\n    var rect = el.getBoundingClientRect();\n    var result = {};\n    ['bottom', 'height', 'left', 'right', 'top', 'width'].forEach(function (k) {\n      if (rect[k] !== undefined) {\n        result[k] = rect[k];\n      }\n    });\n\n    if (!result.height) {\n      result.height = parseFloat(computedStyle(el, 'height'));\n    }\n\n    if (!result.width) {\n      result.width = parseFloat(computedStyle(el, 'width'));\n    }\n\n    return result;\n  }\n}\n/**\n * Represents the position of a DOM element on the page.\n *\n * @typedef  {Object} module:dom~Position\n *\n * @property {number} left\n *           Pixels to the left.\n *\n * @property {number} top\n *           Pixels from the top.\n */\n\n/**\n * Get the position of an element in the DOM.\n *\n * Uses `getBoundingClientRect` technique from John Resig.\n *\n * @see http://ejohn.org/blog/getboundingclientrect-is-awesome/\n *\n * @param  {Element} el\n *         Element from which to get offset.\n *\n * @return {module:dom~Position}\n *         The position of the element that was passed in.\n */\n\nfunction findPosition(el) {\n  var box;\n\n  if (el.getBoundingClientRect && el.parentNode) {\n    box = el.getBoundingClientRect();\n  }\n\n  if (!box) {\n    return {\n      left: 0,\n      top: 0\n    };\n  }\n\n  var docEl = document.documentElement;\n  var body = document.body;\n  var clientLeft = docEl.clientLeft || body.clientLeft || 0;\n  var scrollLeft = window$1.pageXOffset || body.scrollLeft;\n  var left = box.left + scrollLeft - clientLeft;\n  var clientTop = docEl.clientTop || body.clientTop || 0;\n  var scrollTop = window$1.pageYOffset || body.scrollTop;\n  var top = box.top + scrollTop - clientTop; // Android sometimes returns slightly off decimal values, so need to round\n\n  return {\n    left: Math.round(left),\n    top: Math.round(top)\n  };\n}\n/**\n * Represents x and y coordinates for a DOM element or mouse pointer.\n *\n * @typedef  {Object} module:dom~Coordinates\n *\n * @property {number} x\n *           x coordinate in pixels\n *\n * @property {number} y\n *           y coordinate in pixels\n */\n\n/**\n * Get the pointer position within an element.\n *\n * The base on the coordinates are the bottom left of the element.\n *\n * @param  {Element} el\n *         Element on which to get the pointer position on.\n *\n * @param  {EventTarget~Event} event\n *         Event object.\n *\n * @return {module:dom~Coordinates}\n *         A coordinates object corresponding to the mouse position.\n *\n */\n\nfunction getPointerPosition(el, event) {\n  var position = {};\n  var box = findPosition(el);\n  var boxW = el.offsetWidth;\n  var boxH = el.offsetHeight;\n  var boxY = box.top;\n  var boxX = box.left;\n  var pageY = event.pageY;\n  var pageX = event.pageX;\n\n  if (event.changedTouches) {\n    pageX = event.changedTouches[0].pageX;\n    pageY = event.changedTouches[0].pageY;\n  }\n\n  position.y = Math.max(0, Math.min(1, (boxY - pageY + boxH) / boxH));\n  position.x = Math.max(0, Math.min(1, (pageX - boxX) / boxW));\n  return position;\n}\n/**\n * Determines, via duck typing, whether or not a value is a text node.\n *\n * @param  {Mixed} value\n *         Check if this value is a text node.\n *\n * @return {boolean}\n *         Will be `true` if the value is a text node, `false` otherwise.\n */\n\nfunction isTextNode(value) {\n  return isObject(value) && value.nodeType === 3;\n}\n/**\n * Empties the contents of an element.\n *\n * @param  {Element} el\n *         The element to empty children from\n *\n * @return {Element}\n *         The element with no children\n */\n\nfunction emptyEl(el) {\n  while (el.firstChild) {\n    el.removeChild(el.firstChild);\n  }\n\n  return el;\n}\n/**\n * This is a mixed value that describes content to be injected into the DOM\n * via some method. It can be of the following types:\n *\n * Type       | Description\n * -----------|-------------\n * `string`   | The value will be normalized into a text node.\n * `Element`  | The value will be accepted as-is.\n * `TextNode` | The value will be accepted as-is.\n * `Array`    | A one-dimensional array of strings, elements, text nodes, or functions. These functions should return a string, element, or text node (any other return value, like an array, will be ignored).\n * `Function` | A function, which is expected to return a string, element, text node, or array - any of the other possible values described above. This means that a content descriptor could be a function that returns an array of functions, but those second-level functions must return strings, elements, or text nodes.\n *\n * @typedef {string|Element|TextNode|Array|Function} module:dom~ContentDescriptor\n */\n\n/**\n * Normalizes content for eventual insertion into the DOM.\n *\n * This allows a wide range of content definition methods, but helps protect\n * from falling into the trap of simply writing to `innerHTML`, which could\n * be an XSS concern.\n *\n * The content for an element can be passed in multiple types and\n * combinations, whose behavior is as follows:\n *\n * @param {module:dom~ContentDescriptor} content\n *        A content descriptor value.\n *\n * @return {Array}\n *         All of the content that was passed in, normalized to an array of\n *         elements or text nodes.\n */\n\nfunction normalizeContent(content) {\n  // First, invoke content if it is a function. If it produces an array,\n  // that needs to happen before normalization.\n  if (typeof content === 'function') {\n    content = content();\n  } // Next up, normalize to an array, so one or many items can be normalized,\n  // filtered, and returned.\n\n\n  return (Array.isArray(content) ? content : [content]).map(function (value) {\n    // First, invoke value if it is a function to produce a new value,\n    // which will be subsequently normalized to a Node of some kind.\n    if (typeof value === 'function') {\n      value = value();\n    }\n\n    if (isEl(value) || isTextNode(value)) {\n      return value;\n    }\n\n    if (typeof value === 'string' && /\\S/.test(value)) {\n      return document.createTextNode(value);\n    }\n  }).filter(function (value) {\n    return value;\n  });\n}\n/**\n * Normalizes and appends content to an element.\n *\n * @param  {Element} el\n *         Element to append normalized content to.\n *\n * @param {module:dom~ContentDescriptor} content\n *        A content descriptor value.\n *\n * @return {Element}\n *         The element with appended normalized content.\n */\n\nfunction appendContent(el, content) {\n  normalizeContent(content).forEach(function (node) {\n    return el.appendChild(node);\n  });\n  return el;\n}\n/**\n * Normalizes and inserts content into an element; this is identical to\n * `appendContent()`, except it empties the element first.\n *\n * @param {Element} el\n *        Element to insert normalized content into.\n *\n * @param {module:dom~ContentDescriptor} content\n *        A content descriptor value.\n *\n * @return {Element}\n *         The element with inserted normalized content.\n */\n\nfunction insertContent(el, content) {\n  return appendContent(emptyEl(el), content);\n}\n/**\n * Check if an event was a single left click.\n *\n * @param  {EventTarget~Event} event\n *         Event object.\n *\n * @return {boolean}\n *         Will be `true` if a single left click, `false` otherwise.\n */\n\nfunction isSingleLeftClick(event) {\n  // Note: if you create something draggable, be sure to\n  // call it on both `mousedown` and `mousemove` event,\n  // otherwise `mousedown` should be enough for a button\n  if (event.button === undefined && event.buttons === undefined) {\n    // Why do we need `buttons` ?\n    // Because, middle mouse sometimes have this:\n    // e.button === 0 and e.buttons === 4\n    // Furthermore, we want to prevent combination click, something like\n    // HOLD middlemouse then left click, that would be\n    // e.button === 0, e.buttons === 5\n    // just `button` is not gonna work\n    // Alright, then what this block does ?\n    // this is for chrome `simulate mobile devices`\n    // I want to support this as well\n    return true;\n  }\n\n  if (event.button === 0 && event.buttons === undefined) {\n    // Touch screen, sometimes on some specific device, `buttons`\n    // doesn't have anything (safari on ios, blackberry...)\n    return true;\n  } // `mouseup` event on a single left click has\n  // `button` and `buttons` equal to 0\n\n\n  if (event.button === 0 && event.buttons === 0) {\n    return true;\n  }\n\n  if (event.button !== 0 || event.buttons !== 1) {\n    // This is the reason we have those if else block above\n    // if any special case we can catch and let it slide\n    // we do it above, when get to here, this definitely\n    // is-not-left-click\n    return false;\n  }\n\n  return true;\n}\n/**\n * Finds a single DOM element matching `selector` within the optional\n * `context` of another DOM element (defaulting to `document`).\n *\n * @param  {string} selector\n *         A valid CSS selector, which will be passed to `querySelector`.\n *\n * @param  {Element|String} [context=document]\n *         A DOM element within which to query. Can also be a selector\n *         string in which case the first matching element will be used\n *         as context. If missing (or no element matches selector), falls\n *         back to `document`.\n *\n * @return {Element|null}\n *         The element that was found or null.\n */\n\nvar $ = createQuerier('querySelector');\n/**\n * Finds a all DOM elements matching `selector` within the optional\n * `context` of another DOM element (defaulting to `document`).\n *\n * @param  {string} selector\n *         A valid CSS selector, which will be passed to `querySelectorAll`.\n *\n * @param  {Element|String} [context=document]\n *         A DOM element within which to query. Can also be a selector\n *         string in which case the first matching element will be used\n *         as context. If missing (or no element matches selector), falls\n *         back to `document`.\n *\n * @return {NodeList}\n *         A element list of elements that were found. Will be empty if none\n *         were found.\n *\n */\n\nvar $$ = createQuerier('querySelectorAll');\n\nvar Dom = /*#__PURE__*/Object.freeze({\n  isReal: isReal,\n  isEl: isEl,\n  isInFrame: isInFrame,\n  createEl: createEl,\n  textContent: textContent,\n  prependTo: prependTo,\n  hasClass: hasClass,\n  addClass: addClass,\n  removeClass: removeClass,\n  toggleClass: toggleClass,\n  setAttributes: setAttributes,\n  getAttributes: getAttributes,\n  getAttribute: getAttribute,\n  setAttribute: setAttribute,\n  removeAttribute: removeAttribute,\n  blockTextSelection: blockTextSelection,\n  unblockTextSelection: unblockTextSelection,\n  getBoundingClientRect: getBoundingClientRect,\n  findPosition: findPosition,\n  getPointerPosition: getPointerPosition,\n  isTextNode: isTextNode,\n  emptyEl: emptyEl,\n  normalizeContent: normalizeContent,\n  appendContent: appendContent,\n  insertContent: insertContent,\n  isSingleLeftClick: isSingleLeftClick,\n  $: $,\n  $$: $$\n});\n\n/**\n * @file guid.js\n * @module guid\n */\n\n/**\n * Unique ID for an element or function\n * @type {Number}\n */\nvar _guid = 1;\n/**\n * Get a unique auto-incrementing ID by number that has not been returned before.\n *\n * @return {number}\n *         A new unique ID.\n */\n\nfunction newGUID() {\n  return _guid++;\n}\n\n/**\n * @file dom-data.js\n * @module dom-data\n */\n/**\n * Element Data Store.\n *\n * Allows for binding data to an element without putting it directly on the\n * element. Ex. Event listeners are stored here.\n * (also from jsninja.com, slightly modified and updated for closure compiler)\n *\n * @type {Object}\n * @private\n */\n\nvar elData = {};\n/*\n * Unique attribute name to store an element's guid in\n *\n * @type {String}\n * @constant\n * @private\n */\n\nvar elIdAttr = 'vdata' + Math.floor(window$1.performance && window$1.performance.now() || Date.now());\n/**\n * Returns the cache object where data for an element is stored\n *\n * @param {Element} el\n *        Element to store data for.\n *\n * @return {Object}\n *         The cache object for that el that was passed in.\n */\n\nfunction getData(el) {\n  var id = el[elIdAttr];\n\n  if (!id) {\n    id = el[elIdAttr] = newGUID();\n  }\n\n  if (!elData[id]) {\n    elData[id] = {};\n  }\n\n  return elData[id];\n}\n/**\n * Returns whether or not an element has cached data\n *\n * @param {Element} el\n *        Check if this element has cached data.\n *\n * @return {boolean}\n *         - True if the DOM element has cached data.\n *         - False otherwise.\n */\n\nfunction hasData(el) {\n  var id = el[elIdAttr];\n\n  if (!id) {\n    return false;\n  }\n\n  return !!Object.getOwnPropertyNames(elData[id]).length;\n}\n/**\n * Delete data for the element from the cache and the guid attr from getElementById\n *\n * @param {Element} el\n *        Remove cached data for this element.\n */\n\nfunction removeData(el) {\n  var id = el[elIdAttr];\n\n  if (!id) {\n    return;\n  } // Remove all stored data\n\n\n  delete elData[id]; // Remove the elIdAttr property from the DOM node\n\n  try {\n    delete el[elIdAttr];\n  } catch (e) {\n    if (el.removeAttribute) {\n      el.removeAttribute(elIdAttr);\n    } else {\n      // IE doesn't appear to support removeAttribute on the document element\n      el[elIdAttr] = null;\n    }\n  }\n}\n\n/**\n * @file events.js. An Event System (John Resig - Secrets of a JS Ninja http://jsninja.com/)\n * (Original book version wasn't completely usable, so fixed some things and made Closure Compiler compatible)\n * This should work very similarly to jQuery's events, however it's based off the book version which isn't as\n * robust as jquery's, so there's probably some differences.\n *\n * @file events.js\n * @module events\n */\n/**\n * Clean up the listener cache and dispatchers\n *\n * @param {Element|Object} elem\n *        Element to clean up\n *\n * @param {string} type\n *        Type of event to clean up\n */\n\nfunction _cleanUpEvents(elem, type) {\n  var data = getData(elem); // Remove the events of a particular type if there are none left\n\n  if (data.handlers[type].length === 0) {\n    delete data.handlers[type]; // data.handlers[type] = null;\n    // Setting to null was causing an error with data.handlers\n    // Remove the meta-handler from the element\n\n    if (elem.removeEventListener) {\n      elem.removeEventListener(type, data.dispatcher, false);\n    } else if (elem.detachEvent) {\n      elem.detachEvent('on' + type, data.dispatcher);\n    }\n  } // Remove the events object if there are no types left\n\n\n  if (Object.getOwnPropertyNames(data.handlers).length <= 0) {\n    delete data.handlers;\n    delete data.dispatcher;\n    delete data.disabled;\n  } // Finally remove the element data if there is no data left\n\n\n  if (Object.getOwnPropertyNames(data).length === 0) {\n    removeData(elem);\n  }\n}\n/**\n * Loops through an array of event types and calls the requested method for each type.\n *\n * @param {Function} fn\n *        The event method we want to use.\n *\n * @param {Element|Object} elem\n *        Element or object to bind listeners to\n *\n * @param {string} type\n *        Type of event to bind to.\n *\n * @param {EventTarget~EventListener} callback\n *        Event listener.\n */\n\n\nfunction _handleMultipleEvents(fn, elem, types, callback) {\n  types.forEach(function (type) {\n    // Call the event method for each one of the types\n    fn(elem, type, callback);\n  });\n}\n/**\n * Fix a native event to have standard property values\n *\n * @param {Object} event\n *        Event object to fix.\n *\n * @return {Object}\n *         Fixed event object.\n */\n\n\nfunction fixEvent(event) {\n  function returnTrue() {\n    return true;\n  }\n\n  function returnFalse() {\n    return false;\n  } // Test if fixing up is needed\n  // Used to check if !event.stopPropagation instead of isPropagationStopped\n  // But native events return true for stopPropagation, but don't have\n  // other expected methods like isPropagationStopped. Seems to be a problem\n  // with the Javascript Ninja code. So we're just overriding all events now.\n\n\n  if (!event || !event.isPropagationStopped) {\n    var old = event || window$1.event;\n    event = {}; // Clone the old object so that we can modify the values event = {};\n    // IE8 Doesn't like when you mess with native event properties\n    // Firefox returns false for event.hasOwnProperty('type') and other props\n    //  which makes copying more difficult.\n    // TODO: Probably best to create a whitelist of event props\n\n    for (var key in old) {\n      // Safari 6.0.3 warns you if you try to copy deprecated layerX/Y\n      // Chrome warns you if you try to copy deprecated keyboardEvent.keyLocation\n      // and webkitMovementX/Y\n      if (key !== 'layerX' && key !== 'layerY' && key !== 'keyLocation' && key !== 'webkitMovementX' && key !== 'webkitMovementY') {\n        // Chrome 32+ warns if you try to copy deprecated returnValue, but\n        // we still want to if preventDefault isn't supported (IE8).\n        if (!(key === 'returnValue' && old.preventDefault)) {\n          event[key] = old[key];\n        }\n      }\n    } // The event occurred on this element\n\n\n    if (!event.target) {\n      event.target = event.srcElement || document;\n    } // Handle which other element the event is related to\n\n\n    if (!event.relatedTarget) {\n      event.relatedTarget = event.fromElement === event.target ? event.toElement : event.fromElement;\n    } // Stop the default browser action\n\n\n    event.preventDefault = function () {\n      if (old.preventDefault) {\n        old.preventDefault();\n      }\n\n      event.returnValue = false;\n      old.returnValue = false;\n      event.defaultPrevented = true;\n    };\n\n    event.defaultPrevented = false; // Stop the event from bubbling\n\n    event.stopPropagation = function () {\n      if (old.stopPropagation) {\n        old.stopPropagation();\n      }\n\n      event.cancelBubble = true;\n      old.cancelBubble = true;\n      event.isPropagationStopped = returnTrue;\n    };\n\n    event.isPropagationStopped = returnFalse; // Stop the event from bubbling and executing other handlers\n\n    event.stopImmediatePropagation = function () {\n      if (old.stopImmediatePropagation) {\n        old.stopImmediatePropagation();\n      }\n\n      event.isImmediatePropagationStopped = returnTrue;\n      event.stopPropagation();\n    };\n\n    event.isImmediatePropagationStopped = returnFalse; // Handle mouse position\n\n    if (event.clientX !== null && event.clientX !== undefined) {\n      var doc = document.documentElement;\n      var body = document.body;\n      event.pageX = event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);\n      event.pageY = event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);\n    } // Handle key presses\n\n\n    event.which = event.charCode || event.keyCode; // Fix button for mouse clicks:\n    // 0 == left; 1 == middle; 2 == right\n\n    if (event.button !== null && event.button !== undefined) {\n      // The following is disabled because it does not pass videojs-standard\n      // and... yikes.\n\n      /* eslint-disable */\n      event.button = event.button & 1 ? 0 : event.button & 4 ? 1 : event.button & 2 ? 2 : 0;\n      /* eslint-enable */\n    }\n  } // Returns fixed-up instance\n\n\n  return event;\n}\n/**\n * Whether passive event listeners are supported\n */\n\nvar _supportsPassive = false;\n\n(function () {\n  try {\n    var opts = Object.defineProperty({}, 'passive', {\n      get: function get() {\n        _supportsPassive = true;\n      }\n    });\n    window$1.addEventListener('test', null, opts);\n    window$1.removeEventListener('test', null, opts);\n  } catch (e) {// disregard\n  }\n})();\n/**\n * Touch events Chrome expects to be passive\n */\n\n\nvar passiveEvents = ['touchstart', 'touchmove'];\n/**\n * Add an event listener to element\n * It stores the handler function in a separate cache object\n * and adds a generic handler to the element's event,\n * along with a unique id (guid) to the element.\n *\n * @param {Element|Object} elem\n *        Element or object to bind listeners to\n *\n * @param {string|string[]} type\n *        Type of event to bind to.\n *\n * @param {EventTarget~EventListener} fn\n *        Event listener.\n */\n\nfunction on(elem, type, fn) {\n  if (Array.isArray(type)) {\n    return _handleMultipleEvents(on, elem, type, fn);\n  }\n\n  var data = getData(elem); // We need a place to store all our handler data\n\n  if (!data.handlers) {\n    data.handlers = {};\n  }\n\n  if (!data.handlers[type]) {\n    data.handlers[type] = [];\n  }\n\n  if (!fn.guid) {\n    fn.guid = newGUID();\n  }\n\n  data.handlers[type].push(fn);\n\n  if (!data.dispatcher) {\n    data.disabled = false;\n\n    data.dispatcher = function (event, hash) {\n      if (data.disabled) {\n        return;\n      }\n\n      event = fixEvent(event);\n      var handlers = data.handlers[event.type];\n\n      if (handlers) {\n        // Copy handlers so if handlers are added/removed during the process it doesn't throw everything off.\n        var handlersCopy = handlers.slice(0);\n\n        for (var m = 0, n = handlersCopy.length; m < n; m++) {\n          if (event.isImmediatePropagationStopped()) {\n            break;\n          } else {\n            try {\n              handlersCopy[m].call(elem, event, hash);\n            } catch (e) {\n              log.error(e);\n            }\n          }\n        }\n      }\n    };\n  }\n\n  if (data.handlers[type].length === 1) {\n    if (elem.addEventListener) {\n      var options = false;\n\n      if (_supportsPassive && passiveEvents.indexOf(type) > -1) {\n        options = {\n          passive: true\n        };\n      }\n\n      elem.addEventListener(type, data.dispatcher, options);\n    } else if (elem.attachEvent) {\n      elem.attachEvent('on' + type, data.dispatcher);\n    }\n  }\n}\n/**\n * Removes event listeners from an element\n *\n * @param {Element|Object} elem\n *        Object to remove listeners from.\n *\n * @param {string|string[]} [type]\n *        Type of listener to remove. Don't include to remove all events from element.\n *\n * @param {EventTarget~EventListener} [fn]\n *        Specific listener to remove. Don't include to remove listeners for an event\n *        type.\n */\n\nfunction off(elem, type, fn) {\n  // Don't want to add a cache object through getElData if not needed\n  if (!hasData(elem)) {\n    return;\n  }\n\n  var data = getData(elem); // If no events exist, nothing to unbind\n\n  if (!data.handlers) {\n    return;\n  }\n\n  if (Array.isArray(type)) {\n    return _handleMultipleEvents(off, elem, type, fn);\n  } // Utility function\n\n\n  var removeType = function removeType(el, t) {\n    data.handlers[t] = [];\n\n    _cleanUpEvents(el, t);\n  }; // Are we removing all bound events?\n\n\n  if (type === undefined) {\n    for (var t in data.handlers) {\n      if (Object.prototype.hasOwnProperty.call(data.handlers || {}, t)) {\n        removeType(elem, t);\n      }\n    }\n\n    return;\n  }\n\n  var handlers = data.handlers[type]; // If no handlers exist, nothing to unbind\n\n  if (!handlers) {\n    return;\n  } // If no listener was provided, remove all listeners for type\n\n\n  if (!fn) {\n    removeType(elem, type);\n    return;\n  } // We're only removing a single handler\n\n\n  if (fn.guid) {\n    for (var n = 0; n < handlers.length; n++) {\n      if (handlers[n].guid === fn.guid) {\n        handlers.splice(n--, 1);\n      }\n    }\n  }\n\n  _cleanUpEvents(elem, type);\n}\n/**\n * Trigger an event for an element\n *\n * @param {Element|Object} elem\n *        Element to trigger an event on\n *\n * @param {EventTarget~Event|string} event\n *        A string (the type) or an event object with a type attribute\n *\n * @param {Object} [hash]\n *        data hash to pass along with the event\n *\n * @return {boolean|undefined}\n *         Returns the opposite of `defaultPrevented` if default was\n *         prevented. Otherwise, returns `undefined`\n */\n\nfunction trigger(elem, event, hash) {\n  // Fetches element data and a reference to the parent (for bubbling).\n  // Don't want to add a data object to cache for every parent,\n  // so checking hasElData first.\n  var elemData = hasData(elem) ? getData(elem) : {};\n  var parent = elem.parentNode || elem.ownerDocument; // type = event.type || event,\n  // handler;\n  // If an event name was passed as a string, creates an event out of it\n\n  if (typeof event === 'string') {\n    event = {\n      type: event,\n      target: elem\n    };\n  } else if (!event.target) {\n    event.target = elem;\n  } // Normalizes the event properties.\n\n\n  event = fixEvent(event); // If the passed element has a dispatcher, executes the established handlers.\n\n  if (elemData.dispatcher) {\n    elemData.dispatcher.call(elem, event, hash);\n  } // Unless explicitly stopped or the event does not bubble (e.g. media events)\n  // recursively calls this function to bubble the event up the DOM.\n\n\n  if (parent && !event.isPropagationStopped() && event.bubbles === true) {\n    trigger.call(null, parent, event, hash); // If at the top of the DOM, triggers the default action unless disabled.\n  } else if (!parent && !event.defaultPrevented && event.target && event.target[event.type]) {\n    var targetData = getData(event.target); // Checks if the target has a default action for this event.\n\n    if (event.target[event.type]) {\n      // Temporarily disables event dispatching on the target as we have already executed the handler.\n      targetData.disabled = true; // Executes the default action.\n\n      if (typeof event.target[event.type] === 'function') {\n        event.target[event.type]();\n      } // Re-enables event dispatching.\n\n\n      targetData.disabled = false;\n    }\n  } // Inform the triggerer if the default was prevented by returning false\n\n\n  return !event.defaultPrevented;\n}\n/**\n * Trigger a listener only once for an event.\n *\n * @param {Element|Object} elem\n *        Element or object to bind to.\n *\n * @param {string|string[]} type\n *        Name/type of event\n *\n * @param {Event~EventListener} fn\n *        Event listener function\n */\n\nfunction one(elem, type, fn) {\n  if (Array.isArray(type)) {\n    return _handleMultipleEvents(one, elem, type, fn);\n  }\n\n  var func = function func() {\n    off(elem, type, func);\n    fn.apply(this, arguments);\n  }; // copy the guid to the new function so it can removed using the original function's ID\n\n\n  func.guid = fn.guid = fn.guid || newGUID();\n  on(elem, type, func);\n}\n/**\n * Trigger a listener only once and then turn if off for all\n * configured events\n *\n * @param {Element|Object} elem\n *        Element or object to bind to.\n *\n * @param {string|string[]} type\n *        Name/type of event\n *\n * @param {Event~EventListener} fn\n *        Event listener function\n */\n\nfunction any(elem, type, fn) {\n  var func = function func() {\n    off(elem, type, func);\n    fn.apply(this, arguments);\n  }; // copy the guid to the new function so it can removed using the original function's ID\n\n\n  func.guid = fn.guid = fn.guid || newGUID(); // multiple ons, but one off for everything\n\n  on(elem, type, func);\n}\n\nvar Events = /*#__PURE__*/Object.freeze({\n  fixEvent: fixEvent,\n  on: on,\n  off: off,\n  trigger: trigger,\n  one: one,\n  any: any\n});\n\n/**\n * @file setup.js - Functions for setting up a player without\n * user interaction based on the data-setup `attribute` of the video tag.\n *\n * @module setup\n */\nvar _windowLoaded = false;\nvar videojs;\n/**\n * Set up any tags that have a data-setup `attribute` when the player is started.\n */\n\nvar autoSetup = function autoSetup() {\n  // Protect against breakage in non-browser environments and check global autoSetup option.\n  if (!isReal() || videojs.options.autoSetup === false) {\n    return;\n  }\n\n  var vids = Array.prototype.slice.call(document.getElementsByTagName('video'));\n  var audios = Array.prototype.slice.call(document.getElementsByTagName('audio'));\n  var divs = Array.prototype.slice.call(document.getElementsByTagName('video-js'));\n  var mediaEls = vids.concat(audios, divs); // Check if any media elements exist\n\n  if (mediaEls && mediaEls.length > 0) {\n    for (var i = 0, e = mediaEls.length; i < e; i++) {\n      var mediaEl = mediaEls[i]; // Check if element exists, has getAttribute func.\n\n      if (mediaEl && mediaEl.getAttribute) {\n        // Make sure this player hasn't already been set up.\n        if (mediaEl.player === undefined) {\n          var options = mediaEl.getAttribute('data-setup'); // Check if data-setup attr exists.\n          // We only auto-setup if they've added the data-setup attr.\n\n          if (options !== null) {\n            // Create new video.js instance.\n            videojs(mediaEl);\n          }\n        } // If getAttribute isn't defined, we need to wait for the DOM.\n\n      } else {\n        autoSetupTimeout(1);\n        break;\n      }\n    } // No videos were found, so keep looping unless page is finished loading.\n\n  } else if (!_windowLoaded) {\n    autoSetupTimeout(1);\n  }\n};\n/**\n * Wait until the page is loaded before running autoSetup. This will be called in\n * autoSetup if `hasLoaded` returns false.\n *\n * @param {number} wait\n *        How long to wait in ms\n *\n * @param {module:videojs} [vjs]\n *        The videojs library function\n */\n\n\nfunction autoSetupTimeout(wait, vjs) {\n  if (vjs) {\n    videojs = vjs;\n  }\n\n  window$1.setTimeout(autoSetup, wait);\n}\n\nif (isReal() && document.readyState === 'complete') {\n  _windowLoaded = true;\n} else {\n  /**\n   * Listen for the load event on window, and set _windowLoaded to true.\n   *\n   * @listens load\n   */\n  one(window$1, 'load', function () {\n    _windowLoaded = true;\n  });\n}\n\n/**\n * @file stylesheet.js\n * @module stylesheet\n */\n/**\n * Create a DOM syle element given a className for it.\n *\n * @param {string} className\n *        The className to add to the created style element.\n *\n * @return {Element}\n *         The element that was created.\n */\n\nvar createStyleElement = function createStyleElement(className) {\n  var style = document.createElement('style');\n  style.className = className;\n  return style;\n};\n/**\n * Add text to a DOM element.\n *\n * @param {Element} el\n *        The Element to add text content to.\n *\n * @param {string} content\n *        The text to add to the element.\n */\n\nvar setTextContent = function setTextContent(el, content) {\n  if (el.styleSheet) {\n    el.styleSheet.cssText = content;\n  } else {\n    el.textContent = content;\n  }\n};\n\n/**\n * @file fn.js\n * @module fn\n */\n/**\n * Bind (a.k.a proxy or context). A simple method for changing the context of\n * a function.\n *\n * It also stores a unique id on the function so it can be easily removed from\n * events.\n *\n * @function\n * @param    {Mixed} context\n *           The object to bind as scope.\n *\n * @param    {Function} fn\n *           The function to be bound to a scope.\n *\n * @param    {number} [uid]\n *           An optional unique ID for the function to be set\n *\n * @return   {Function}\n *           The new function that will be bound into the context given\n */\n\nvar bind = function bind(context, fn, uid) {\n  // Make sure the function has a unique ID\n  if (!fn.guid) {\n    fn.guid = newGUID();\n  } // Create the new function that changes the context\n\n\n  var bound = function bound() {\n    return fn.apply(context, arguments);\n  }; // Allow for the ability to individualize this function\n  // Needed in the case where multiple objects might share the same prototype\n  // IF both items add an event listener with the same function, then you try to remove just one\n  // it will remove both because they both have the same guid.\n  // when using this, you need to use the bind method when you remove the listener as well.\n  // currently used in text tracks\n\n\n  bound.guid = uid ? uid + '_' + fn.guid : fn.guid;\n  return bound;\n};\n/**\n * Wraps the given function, `fn`, with a new function that only invokes `fn`\n * at most once per every `wait` milliseconds.\n *\n * @function\n * @param    {Function} fn\n *           The function to be throttled.\n *\n * @param    {number}   wait\n *           The number of milliseconds by which to throttle.\n *\n * @return   {Function}\n */\n\nvar throttle = function throttle(fn, wait) {\n  var last = window$1.performance.now();\n\n  var throttled = function throttled() {\n    var now = window$1.performance.now();\n\n    if (now - last >= wait) {\n      fn.apply(void 0, arguments);\n      last = now;\n    }\n  };\n\n  return throttled;\n};\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked.\n *\n * Inspired by lodash and underscore implementations.\n *\n * @function\n * @param    {Function} func\n *           The function to wrap with debounce behavior.\n *\n * @param    {number} wait\n *           The number of milliseconds to wait after the last invocation.\n *\n * @param    {boolean} [immediate]\n *           Whether or not to invoke the function immediately upon creation.\n *\n * @param    {Object} [context=window]\n *           The \"context\" in which the debounced function should debounce. For\n *           example, if this function should be tied to a Video.js player,\n *           the player can be passed here. Alternatively, defaults to the\n *           global `window` object.\n *\n * @return   {Function}\n *           A debounced function.\n */\n\nvar debounce = function debounce(func, wait, immediate, context) {\n  if (context === void 0) {\n    context = window$1;\n  }\n\n  var timeout;\n\n  var cancel = function cancel() {\n    context.clearTimeout(timeout);\n    timeout = null;\n  };\n  /* eslint-disable consistent-this */\n\n\n  var debounced = function debounced() {\n    var self = this;\n    var args = arguments;\n\n    var _later = function later() {\n      timeout = null;\n      _later = null;\n\n      if (!immediate) {\n        func.apply(self, args);\n      }\n    };\n\n    if (!timeout && immediate) {\n      func.apply(self, args);\n    }\n\n    context.clearTimeout(timeout);\n    timeout = context.setTimeout(_later, wait);\n  };\n  /* eslint-enable consistent-this */\n\n\n  debounced.cancel = cancel;\n  return debounced;\n};\n\n/**\n * @file src/js/event-target.js\n */\n/**\n * `EventTarget` is a class that can have the same API as the DOM `EventTarget`. It\n * adds shorthand functions that wrap around lengthy functions. For example:\n * the `on` function is a wrapper around `addEventListener`.\n *\n * @see [EventTarget Spec]{@link https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget}\n * @class EventTarget\n */\n\nvar EventTarget = function EventTarget() {};\n/**\n * A Custom DOM event.\n *\n * @typedef {Object} EventTarget~Event\n * @see [Properties]{@link https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent}\n */\n\n/**\n * All event listeners should follow the following format.\n *\n * @callback EventTarget~EventListener\n * @this {EventTarget}\n *\n * @param {EventTarget~Event} event\n *        the event that triggered this function\n *\n * @param {Object} [hash]\n *        hash of data sent during the event\n */\n\n/**\n * An object containing event names as keys and booleans as values.\n *\n * > NOTE: If an event name is set to a true value here {@link EventTarget#trigger}\n *         will have extra functionality. See that function for more information.\n *\n * @property EventTarget.prototype.allowedEvents_\n * @private\n */\n\n\nEventTarget.prototype.allowedEvents_ = {};\n/**\n * Adds an `event listener` to an instance of an `EventTarget`. An `event listener` is a\n * function that will get called when an event with a certain name gets triggered.\n *\n * @param {string|string[]} type\n *        An event name or an array of event names.\n *\n * @param {EventTarget~EventListener} fn\n *        The function to call with `EventTarget`s\n */\n\nEventTarget.prototype.on = function (type, fn) {\n  // Remove the addEventListener alias before calling Events.on\n  // so we don't get into an infinite type loop\n  var ael = this.addEventListener;\n\n  this.addEventListener = function () {};\n\n  on(this, type, fn);\n  this.addEventListener = ael;\n};\n/**\n * An alias of {@link EventTarget#on}. Allows `EventTarget` to mimic\n * the standard DOM API.\n *\n * @function\n * @see {@link EventTarget#on}\n */\n\n\nEventTarget.prototype.addEventListener = EventTarget.prototype.on;\n/**\n * Removes an `event listener` for a specific event from an instance of `EventTarget`.\n * This makes it so that the `event listener` will no longer get called when the\n * named event happens.\n *\n * @param {string|string[]} type\n *        An event name or an array of event names.\n *\n * @param {EventTarget~EventListener} fn\n *        The function to remove.\n */\n\nEventTarget.prototype.off = function (type, fn) {\n  off(this, type, fn);\n};\n/**\n * An alias of {@link EventTarget#off}. Allows `EventTarget` to mimic\n * the standard DOM API.\n *\n * @function\n * @see {@link EventTarget#off}\n */\n\n\nEventTarget.prototype.removeEventListener = EventTarget.prototype.off;\n/**\n * This function will add an `event listener` that gets triggered only once. After the\n * first trigger it will get removed. This is like adding an `event listener`\n * with {@link EventTarget#on} that calls {@link EventTarget#off} on itself.\n *\n * @param {string|string[]} type\n *        An event name or an array of event names.\n *\n * @param {EventTarget~EventListener} fn\n *        The function to be called once for each event name.\n */\n\nEventTarget.prototype.one = function (type, fn) {\n  // Remove the addEventListener aliasing Events.on\n  // so we don't get into an infinite type loop\n  var ael = this.addEventListener;\n\n  this.addEventListener = function () {};\n\n  one(this, type, fn);\n  this.addEventListener = ael;\n};\n\nEventTarget.prototype.any = function (type, fn) {\n  // Remove the addEventListener aliasing Events.on\n  // so we don't get into an infinite type loop\n  var ael = this.addEventListener;\n\n  this.addEventListener = function () {};\n\n  any(this, type, fn);\n  this.addEventListener = ael;\n};\n/**\n * This function causes an event to happen. This will then cause any `event listeners`\n * that are waiting for that event, to get called. If there are no `event listeners`\n * for an event then nothing will happen.\n *\n * If the name of the `Event` that is being triggered is in `EventTarget.allowedEvents_`.\n * Trigger will also call the `on` + `uppercaseEventName` function.\n *\n * Example:\n * 'click' is in `EventTarget.allowedEvents_`, so, trigger will attempt to call\n * `onClick` if it exists.\n *\n * @param {string|EventTarget~Event|Object} event\n *        The name of the event, an `Event`, or an object with a key of type set to\n *        an event name.\n */\n\n\nEventTarget.prototype.trigger = function (event) {\n  var type = event.type || event; // deprecation\n  // In a future version we should default target to `this`\n  // similar to how we default the target to `elem` in\n  // `Events.trigger`. Right now the default `target` will be\n  // `document` due to the `Event.fixEvent` call.\n\n  if (typeof event === 'string') {\n    event = {\n      type: type\n    };\n  }\n\n  event = fixEvent(event);\n\n  if (this.allowedEvents_[type] && this['on' + type]) {\n    this['on' + type](event);\n  }\n\n  trigger(this, event);\n};\n/**\n * An alias of {@link EventTarget#trigger}. Allows `EventTarget` to mimic\n * the standard DOM API.\n *\n * @function\n * @see {@link EventTarget#trigger}\n */\n\n\nEventTarget.prototype.dispatchEvent = EventTarget.prototype.trigger;\nvar EVENT_MAP;\n\nEventTarget.prototype.queueTrigger = function (event) {\n  var _this = this;\n\n  // only set up EVENT_MAP if it'll be used\n  if (!EVENT_MAP) {\n    EVENT_MAP = new Map();\n  }\n\n  var type = event.type || event;\n  var map = EVENT_MAP.get(this);\n\n  if (!map) {\n    map = new Map();\n    EVENT_MAP.set(this, map);\n  }\n\n  var oldTimeout = map.get(type);\n  map[\"delete\"](type);\n  window$1.clearTimeout(oldTimeout);\n  var timeout = window$1.setTimeout(function () {\n    // if we cleared out all timeouts for the current target, delete its map\n    if (map.size === 0) {\n      map = null;\n      EVENT_MAP[\"delete\"](_this);\n    }\n\n    _this.trigger(event);\n  }, 0);\n  map.set(type, timeout);\n};\n\n/**\n * @file mixins/evented.js\n * @module evented\n */\n/**\n * Returns whether or not an object has had the evented mixin applied.\n *\n * @param  {Object} object\n *         An object to test.\n *\n * @return {boolean}\n *         Whether or not the object appears to be evented.\n */\n\nvar isEvented = function isEvented(object) {\n  return object instanceof EventTarget || !!object.eventBusEl_ && ['on', 'one', 'off', 'trigger'].every(function (k) {\n    return typeof object[k] === 'function';\n  });\n};\n/**\n * Adds a callback to run after the evented mixin applied.\n *\n * @param  {Object} object\n *         An object to Add\n * @param  {Function} callback\n *         The callback to run.\n */\n\n\nvar addEventedCallback = function addEventedCallback(target, callback) {\n  if (isEvented(target)) {\n    callback();\n  } else {\n    if (!target.eventedCallbacks) {\n      target.eventedCallbacks = [];\n    }\n\n    target.eventedCallbacks.push(callback);\n  }\n};\n/**\n * Whether a value is a valid event type - non-empty string or array.\n *\n * @private\n * @param  {string|Array} type\n *         The type value to test.\n *\n * @return {boolean}\n *         Whether or not the type is a valid event type.\n */\n\n\nvar isValidEventType = function isValidEventType(type) {\n  return (// The regex here verifies that the `type` contains at least one non-\n    // whitespace character.\n    typeof type === 'string' && /\\S/.test(type) || Array.isArray(type) && !!type.length\n  );\n};\n/**\n * Validates a value to determine if it is a valid event target. Throws if not.\n *\n * @private\n * @throws {Error}\n *         If the target does not appear to be a valid event target.\n *\n * @param  {Object} target\n *         The object to test.\n */\n\n\nvar validateTarget = function validateTarget(target) {\n  if (!target.nodeName && !isEvented(target)) {\n    throw new Error('Invalid target; must be a DOM node or evented object.');\n  }\n};\n/**\n * Validates a value to determine if it is a valid event target. Throws if not.\n *\n * @private\n * @throws {Error}\n *         If the type does not appear to be a valid event type.\n *\n * @param  {string|Array} type\n *         The type to test.\n */\n\n\nvar validateEventType = function validateEventType(type) {\n  if (!isValidEventType(type)) {\n    throw new Error('Invalid event type; must be a non-empty string or array.');\n  }\n};\n/**\n * Validates a value to determine if it is a valid listener. Throws if not.\n *\n * @private\n * @throws {Error}\n *         If the listener is not a function.\n *\n * @param  {Function} listener\n *         The listener to test.\n */\n\n\nvar validateListener = function validateListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new Error('Invalid listener; must be a function.');\n  }\n};\n/**\n * Takes an array of arguments given to `on()` or `one()`, validates them, and\n * normalizes them into an object.\n *\n * @private\n * @param  {Object} self\n *         The evented object on which `on()` or `one()` was called. This\n *         object will be bound as the `this` value for the listener.\n *\n * @param  {Array} args\n *         An array of arguments passed to `on()` or `one()`.\n *\n * @return {Object}\n *         An object containing useful values for `on()` or `one()` calls.\n */\n\n\nvar normalizeListenArgs = function normalizeListenArgs(self, args) {\n  // If the number of arguments is less than 3, the target is always the\n  // evented object itself.\n  var isTargetingSelf = args.length < 3 || args[0] === self || args[0] === self.eventBusEl_;\n  var target;\n  var type;\n  var listener;\n\n  if (isTargetingSelf) {\n    target = self.eventBusEl_; // Deal with cases where we got 3 arguments, but we are still listening to\n    // the evented object itself.\n\n    if (args.length >= 3) {\n      args.shift();\n    }\n\n    type = args[0];\n    listener = args[1];\n  } else {\n    target = args[0];\n    type = args[1];\n    listener = args[2];\n  }\n\n  validateTarget(target);\n  validateEventType(type);\n  validateListener(listener);\n  listener = bind(self, listener);\n  return {\n    isTargetingSelf: isTargetingSelf,\n    target: target,\n    type: type,\n    listener: listener\n  };\n};\n/**\n * Adds the listener to the event type(s) on the target, normalizing for\n * the type of target.\n *\n * @private\n * @param  {Element|Object} target\n *         A DOM node or evented object.\n *\n * @param  {string} method\n *         The event binding method to use (\"on\" or \"one\").\n *\n * @param  {string|Array} type\n *         One or more event type(s).\n *\n * @param  {Function} listener\n *         A listener function.\n */\n\n\nvar listen = function listen(target, method, type, listener) {\n  validateTarget(target);\n\n  if (target.nodeName) {\n    Events[method](target, type, listener);\n  } else {\n    target[method](type, listener);\n  }\n};\n/**\n * Contains methods that provide event capabilities to an object which is passed\n * to {@link module:evented|evented}.\n *\n * @mixin EventedMixin\n */\n\n\nvar EventedMixin = {\n  /**\n   * Add a listener to an event (or events) on this object or another evented\n   * object.\n   *\n   * @param  {string|Array|Element|Object} targetOrType\n   *         If this is a string or array, it represents the event type(s)\n   *         that will trigger the listener.\n   *\n   *         Another evented object can be passed here instead, which will\n   *         cause the listener to listen for events on _that_ object.\n   *\n   *         In either case, the listener's `this` value will be bound to\n   *         this object.\n   *\n   * @param  {string|Array|Function} typeOrListener\n   *         If the first argument was a string or array, this should be the\n   *         listener function. Otherwise, this is a string or array of event\n   *         type(s).\n   *\n   * @param  {Function} [listener]\n   *         If the first argument was another evented object, this will be\n   *         the listener function.\n   */\n  on: function on() {\n    var _this = this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var _normalizeListenArgs = normalizeListenArgs(this, args),\n        isTargetingSelf = _normalizeListenArgs.isTargetingSelf,\n        target = _normalizeListenArgs.target,\n        type = _normalizeListenArgs.type,\n        listener = _normalizeListenArgs.listener;\n\n    listen(target, 'on', type, listener); // If this object is listening to another evented object.\n\n    if (!isTargetingSelf) {\n      // If this object is disposed, remove the listener.\n      var removeListenerOnDispose = function removeListenerOnDispose() {\n        return _this.off(target, type, listener);\n      }; // Use the same function ID as the listener so we can remove it later it\n      // using the ID of the original listener.\n\n\n      removeListenerOnDispose.guid = listener.guid; // Add a listener to the target's dispose event as well. This ensures\n      // that if the target is disposed BEFORE this object, we remove the\n      // removal listener that was just added. Otherwise, we create a memory leak.\n\n      var removeRemoverOnTargetDispose = function removeRemoverOnTargetDispose() {\n        return _this.off('dispose', removeListenerOnDispose);\n      }; // Use the same function ID as the listener so we can remove it later\n      // it using the ID of the original listener.\n\n\n      removeRemoverOnTargetDispose.guid = listener.guid;\n      listen(this, 'on', 'dispose', removeListenerOnDispose);\n      listen(target, 'on', 'dispose', removeRemoverOnTargetDispose);\n    }\n  },\n\n  /**\n   * Add a listener to an event (or events) on this object or another evented\n   * object. The listener will be called once per event and then removed.\n   *\n   * @param  {string|Array|Element|Object} targetOrType\n   *         If this is a string or array, it represents the event type(s)\n   *         that will trigger the listener.\n   *\n   *         Another evented object can be passed here instead, which will\n   *         cause the listener to listen for events on _that_ object.\n   *\n   *         In either case, the listener's `this` value will be bound to\n   *         this object.\n   *\n   * @param  {string|Array|Function} typeOrListener\n   *         If the first argument was a string or array, this should be the\n   *         listener function. Otherwise, this is a string or array of event\n   *         type(s).\n   *\n   * @param  {Function} [listener]\n   *         If the first argument was another evented object, this will be\n   *         the listener function.\n   */\n  one: function one() {\n    var _this2 = this;\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    var _normalizeListenArgs2 = normalizeListenArgs(this, args),\n        isTargetingSelf = _normalizeListenArgs2.isTargetingSelf,\n        target = _normalizeListenArgs2.target,\n        type = _normalizeListenArgs2.type,\n        listener = _normalizeListenArgs2.listener; // Targeting this evented object.\n\n\n    if (isTargetingSelf) {\n      listen(target, 'one', type, listener); // Targeting another evented object.\n    } else {\n      // TODO: This wrapper is incorrect! It should only\n      //       remove the wrapper for the event type that called it.\n      //       Instead all listners are removed on the first trigger!\n      //       see https://github.com/videojs/video.js/issues/5962\n      var wrapper = function wrapper() {\n        _this2.off(target, type, wrapper);\n\n        for (var _len3 = arguments.length, largs = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          largs[_key3] = arguments[_key3];\n        }\n\n        listener.apply(null, largs);\n      }; // Use the same function ID as the listener so we can remove it later\n      // it using the ID of the original listener.\n\n\n      wrapper.guid = listener.guid;\n      listen(target, 'one', type, wrapper);\n    }\n  },\n\n  /**\n   * Add a listener to an event (or events) on this object or another evented\n   * object. The listener will only be called once for the first event that is triggered\n   * then removed.\n   *\n   * @param  {string|Array|Element|Object} targetOrType\n   *         If this is a string or array, it represents the event type(s)\n   *         that will trigger the listener.\n   *\n   *         Another evented object can be passed here instead, which will\n   *         cause the listener to listen for events on _that_ object.\n   *\n   *         In either case, the listener's `this` value will be bound to\n   *         this object.\n   *\n   * @param  {string|Array|Function} typeOrListener\n   *         If the first argument was a string or array, this should be the\n   *         listener function. Otherwise, this is a string or array of event\n   *         type(s).\n   *\n   * @param  {Function} [listener]\n   *         If the first argument was another evented object, this will be\n   *         the listener function.\n   */\n  any: function any() {\n    var _this3 = this;\n\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n\n    var _normalizeListenArgs3 = normalizeListenArgs(this, args),\n        isTargetingSelf = _normalizeListenArgs3.isTargetingSelf,\n        target = _normalizeListenArgs3.target,\n        type = _normalizeListenArgs3.type,\n        listener = _normalizeListenArgs3.listener; // Targeting this evented object.\n\n\n    if (isTargetingSelf) {\n      listen(target, 'any', type, listener); // Targeting another evented object.\n    } else {\n      var wrapper = function wrapper() {\n        _this3.off(target, type, wrapper);\n\n        for (var _len5 = arguments.length, largs = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n          largs[_key5] = arguments[_key5];\n        }\n\n        listener.apply(null, largs);\n      }; // Use the same function ID as the listener so we can remove it later\n      // it using the ID of the original listener.\n\n\n      wrapper.guid = listener.guid;\n      listen(target, 'any', type, wrapper);\n    }\n  },\n\n  /**\n   * Removes listener(s) from event(s) on an evented object.\n   *\n   * @param  {string|Array|Element|Object} [targetOrType]\n   *         If this is a string or array, it represents the event type(s).\n   *\n   *         Another evented object can be passed here instead, in which case\n   *         ALL 3 arguments are _required_.\n   *\n   * @param  {string|Array|Function} [typeOrListener]\n   *         If the first argument was a string or array, this may be the\n   *         listener function. Otherwise, this is a string or array of event\n   *         type(s).\n   *\n   * @param  {Function} [listener]\n   *         If the first argument was another evented object, this will be\n   *         the listener function; otherwise, _all_ listeners bound to the\n   *         event type(s) will be removed.\n   */\n  off: function off$1(targetOrType, typeOrListener, listener) {\n    // Targeting this evented object.\n    if (!targetOrType || isValidEventType(targetOrType)) {\n      off(this.eventBusEl_, targetOrType, typeOrListener); // Targeting another evented object.\n    } else {\n      var target = targetOrType;\n      var type = typeOrListener; // Fail fast and in a meaningful way!\n\n      validateTarget(target);\n      validateEventType(type);\n      validateListener(listener); // Ensure there's at least a guid, even if the function hasn't been used\n\n      listener = bind(this, listener); // Remove the dispose listener on this evented object, which was given\n      // the same guid as the event listener in on().\n\n      this.off('dispose', listener);\n\n      if (target.nodeName) {\n        off(target, type, listener);\n        off(target, 'dispose', listener);\n      } else if (isEvented(target)) {\n        target.off(type, listener);\n        target.off('dispose', listener);\n      }\n    }\n  },\n\n  /**\n   * Fire an event on this evented object, causing its listeners to be called.\n   *\n   * @param   {string|Object} event\n   *          An event type or an object with a type property.\n   *\n   * @param   {Object} [hash]\n   *          An additional object to pass along to listeners.\n   *\n   * @return {boolean}\n   *          Whether or not the default behavior was prevented.\n   */\n  trigger: function trigger$1(event, hash) {\n    return trigger(this.eventBusEl_, event, hash);\n  }\n};\n/**\n * Applies {@link module:evented~EventedMixin|EventedMixin} to a target object.\n *\n * @param  {Object} target\n *         The object to which to add event methods.\n *\n * @param  {Object} [options={}]\n *         Options for customizing the mixin behavior.\n *\n * @param  {string} [options.eventBusKey]\n *         By default, adds a `eventBusEl_` DOM element to the target object,\n *         which is used as an event bus. If the target object already has a\n *         DOM element that should be used, pass its key here.\n *\n * @return {Object}\n *         The target object.\n */\n\nfunction evented(target, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      eventBusKey = _options.eventBusKey; // Set or create the eventBusEl_.\n\n  if (eventBusKey) {\n    if (!target[eventBusKey].nodeName) {\n      throw new Error(\"The eventBusKey \\\"\" + eventBusKey + \"\\\" does not refer to an element.\");\n    }\n\n    target.eventBusEl_ = target[eventBusKey];\n  } else {\n    target.eventBusEl_ = createEl('span', {\n      className: 'vjs-event-bus'\n    });\n  }\n\n  assign(target, EventedMixin);\n\n  if (target.eventedCallbacks) {\n    target.eventedCallbacks.forEach(function (callback) {\n      callback();\n    });\n  } // When any evented object is disposed, it removes all its listeners.\n\n\n  target.on('dispose', function () {\n    target.off();\n    window$1.setTimeout(function () {\n      target.eventBusEl_ = null;\n    }, 0);\n  });\n  return target;\n}\n\n/**\n * @file mixins/stateful.js\n * @module stateful\n */\n/**\n * Contains methods that provide statefulness to an object which is passed\n * to {@link module:stateful}.\n *\n * @mixin StatefulMixin\n */\n\nvar StatefulMixin = {\n  /**\n   * A hash containing arbitrary keys and values representing the state of\n   * the object.\n   *\n   * @type {Object}\n   */\n  state: {},\n\n  /**\n   * Set the state of an object by mutating its\n   * {@link module:stateful~StatefulMixin.state|state} object in place.\n   *\n   * @fires   module:stateful~StatefulMixin#statechanged\n   * @param   {Object|Function} stateUpdates\n   *          A new set of properties to shallow-merge into the plugin state.\n   *          Can be a plain object or a function returning a plain object.\n   *\n   * @return {Object|undefined}\n   *          An object containing changes that occurred. If no changes\n   *          occurred, returns `undefined`.\n   */\n  setState: function setState(stateUpdates) {\n    var _this = this;\n\n    // Support providing the `stateUpdates` state as a function.\n    if (typeof stateUpdates === 'function') {\n      stateUpdates = stateUpdates();\n    }\n\n    var changes;\n    each(stateUpdates, function (value, key) {\n      // Record the change if the value is different from what's in the\n      // current state.\n      if (_this.state[key] !== value) {\n        changes = changes || {};\n        changes[key] = {\n          from: _this.state[key],\n          to: value\n        };\n      }\n\n      _this.state[key] = value;\n    }); // Only trigger \"statechange\" if there were changes AND we have a trigger\n    // function. This allows us to not require that the target object be an\n    // evented object.\n\n    if (changes && isEvented(this)) {\n      /**\n       * An event triggered on an object that is both\n       * {@link module:stateful|stateful} and {@link module:evented|evented}\n       * indicating that its state has changed.\n       *\n       * @event    module:stateful~StatefulMixin#statechanged\n       * @type     {Object}\n       * @property {Object} changes\n       *           A hash containing the properties that were changed and\n       *           the values they were changed `from` and `to`.\n       */\n      this.trigger({\n        changes: changes,\n        type: 'statechanged'\n      });\n    }\n\n    return changes;\n  }\n};\n/**\n * Applies {@link module:stateful~StatefulMixin|StatefulMixin} to a target\n * object.\n *\n * If the target object is {@link module:evented|evented} and has a\n * `handleStateChanged` method, that method will be automatically bound to the\n * `statechanged` event on itself.\n *\n * @param   {Object} target\n *          The object to be made stateful.\n *\n * @param   {Object} [defaultState]\n *          A default set of properties to populate the newly-stateful object's\n *          `state` property.\n *\n * @return {Object}\n *          Returns the `target`.\n */\n\nfunction stateful(target, defaultState) {\n  assign(target, StatefulMixin); // This happens after the mixing-in because we need to replace the `state`\n  // added in that step.\n\n  target.state = assign({}, target.state, defaultState); // Auto-bind the `handleStateChanged` method of the target object if it exists.\n\n  if (typeof target.handleStateChanged === 'function' && isEvented(target)) {\n    target.on('statechanged', target.handleStateChanged);\n  }\n\n  return target;\n}\n\n/**\n * @file to-title-case.js\n * @module to-title-case\n */\n\n/**\n * Uppercase the first letter of a string.\n *\n * @param {string} string\n *        String to be uppercased\n *\n * @return {string}\n *         The string with an uppercased first letter\n */\nfunction toTitleCase(string) {\n  if (typeof string !== 'string') {\n    return string;\n  }\n\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n/**\n * Compares the TitleCase versions of the two strings for equality.\n *\n * @param {string} str1\n *        The first string to compare\n *\n * @param {string} str2\n *        The second string to compare\n *\n * @return {boolean}\n *         Whether the TitleCase versions of the strings are equal\n */\n\nfunction titleCaseEquals(str1, str2) {\n  return toTitleCase(str1) === toTitleCase(str2);\n}\n\n/**\n * @file merge-options.js\n * @module merge-options\n */\n/**\n * Merge two objects recursively.\n *\n * Performs a deep merge like\n * {@link https://lodash.com/docs/4.17.10#merge|lodash.merge}, but only merges\n * plain objects (not arrays, elements, or anything else).\n *\n * Non-plain object values will be copied directly from the right-most\n * argument.\n *\n * @static\n * @param   {Object[]} sources\n *          One or more objects to merge into a new object.\n *\n * @return {Object}\n *          A new object that is the merged result of all sources.\n */\n\nfunction mergeOptions() {\n  var result = {};\n\n  for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {\n    sources[_key] = arguments[_key];\n  }\n\n  sources.forEach(function (source) {\n    if (!source) {\n      return;\n    }\n\n    each(source, function (value, key) {\n      if (!isPlain(value)) {\n        result[key] = value;\n        return;\n      }\n\n      if (!isPlain(result[key])) {\n        result[key] = {};\n      }\n\n      result[key] = mergeOptions(result[key], value);\n    });\n  });\n  return result;\n}\n\n/**\n * Player Component - Base class for all UI objects\n *\n * @file component.js\n */\n/**\n * Base class for all UI Components.\n * Components are UI objects which represent both a javascript object and an element\n * in the DOM. They can be children of other components, and can have\n * children themselves.\n *\n * Components can also use methods from {@link EventTarget}\n */\n\nvar Component =\n/*#__PURE__*/\nfunction () {\n  /**\n   * A callback that is called when a component is ready. Does not have any\n   * paramters and any callback value will be ignored.\n   *\n   * @callback Component~ReadyCallback\n   * @this Component\n   */\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Object[]} [options.children]\n   *        An array of children objects to intialize this component with. Children objects have\n   *        a name property that will be used if more than one component of the same type needs to be\n   *        added.\n   *\n   * @param {Component~ReadyCallback} [ready]\n   *        Function that gets called when the `Component` is ready.\n   */\n  function Component(player, options, ready) {\n    // The component might be the player itself and we can't pass `this` to super\n    if (!player && this.play) {\n      this.player_ = player = this; // eslint-disable-line\n    } else {\n      this.player_ = player;\n    } // Hold the reference to the parent component via `addChild` method\n\n\n    this.parentComponent_ = null; // Make a copy of prototype.options_ to protect against overriding defaults\n\n    this.options_ = mergeOptions({}, this.options_); // Updated options with supplied options\n\n    options = this.options_ = mergeOptions(this.options_, options); // Get ID from options or options element if one is supplied\n\n    this.id_ = options.id || options.el && options.el.id; // If there was no ID from the options, generate one\n\n    if (!this.id_) {\n      // Don't require the player ID function in the case of mock players\n      var id = player && player.id && player.id() || 'no_player';\n      this.id_ = id + \"_component_\" + newGUID();\n    }\n\n    this.name_ = options.name || null; // Create element if one wasn't provided in options\n\n    if (options.el) {\n      this.el_ = options.el;\n    } else if (options.createEl !== false) {\n      this.el_ = this.createEl();\n    } // if evented is anything except false, we want to mixin in evented\n\n\n    if (options.evented !== false) {\n      // Make this an evented object and use `el_`, if available, as its event bus\n      evented(this, {\n        eventBusKey: this.el_ ? 'el_' : null\n      });\n    }\n\n    stateful(this, this.constructor.defaultState);\n    this.children_ = [];\n    this.childIndex_ = {};\n    this.childNameIndex_ = {}; // Add any child components in options\n\n    if (options.initChildren !== false) {\n      this.initChildren();\n    }\n\n    this.ready(ready); // Don't want to trigger ready here or it will before init is actually\n    // finished for all children that run this constructor\n\n    if (options.reportTouchActivity !== false) {\n      this.enableTouchActivity();\n    }\n  }\n  /**\n   * Dispose of the `Component` and all child components.\n   *\n   * @fires Component#dispose\n   */\n\n\n  var _proto = Component.prototype;\n\n  _proto.dispose = function dispose() {\n    /**\n     * Triggered when a `Component` is disposed.\n     *\n     * @event Component#dispose\n     * @type {EventTarget~Event}\n     *\n     * @property {boolean} [bubbles=false]\n     *           set to false so that the close event does not\n     *           bubble up\n     */\n    this.trigger({\n      type: 'dispose',\n      bubbles: false\n    }); // Dispose all children.\n\n    if (this.children_) {\n      for (var i = this.children_.length - 1; i >= 0; i--) {\n        if (this.children_[i].dispose) {\n          this.children_[i].dispose();\n        }\n      }\n    } // Delete child references\n\n\n    this.children_ = null;\n    this.childIndex_ = null;\n    this.childNameIndex_ = null;\n    this.parentComponent_ = null;\n\n    if (this.el_) {\n      // Remove element from DOM\n      if (this.el_.parentNode) {\n        this.el_.parentNode.removeChild(this.el_);\n      }\n\n      removeData(this.el_);\n      this.el_ = null;\n    } // remove reference to the player after disposing of the element\n\n\n    this.player_ = null;\n  }\n  /**\n   * Return the {@link Player} that the `Component` has attached to.\n   *\n   * @return {Player}\n   *         The player that this `Component` has attached to.\n   */\n  ;\n\n  _proto.player = function player() {\n    return this.player_;\n  }\n  /**\n   * Deep merge of options objects with new options.\n   * > Note: When both `obj` and `options` contain properties whose values are objects.\n   *         The two properties get merged using {@link module:mergeOptions}\n   *\n   * @param {Object} obj\n   *        The object that contains new options.\n   *\n   * @return {Object}\n   *         A new object of `this.options_` and `obj` merged together.\n   */\n  ;\n\n  _proto.options = function options(obj) {\n    if (!obj) {\n      return this.options_;\n    }\n\n    this.options_ = mergeOptions(this.options_, obj);\n    return this.options_;\n  }\n  /**\n   * Get the `Component`s DOM element\n   *\n   * @return {Element}\n   *         The DOM element for this `Component`.\n   */\n  ;\n\n  _proto.el = function el() {\n    return this.el_;\n  }\n  /**\n   * Create the `Component`s DOM element.\n   *\n   * @param {string} [tagName]\n   *        Element's DOM node type. e.g. 'div'\n   *\n   * @param {Object} [properties]\n   *        An object of properties that should be set.\n   *\n   * @param {Object} [attributes]\n   *        An object of attributes that should be set.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n  ;\n\n  _proto.createEl = function createEl$1(tagName, properties, attributes) {\n    return createEl(tagName, properties, attributes);\n  }\n  /**\n   * Localize a string given the string in english.\n   *\n   * If tokens are provided, it'll try and run a simple token replacement on the provided string.\n   * The tokens it looks for look like `{1}` with the index being 1-indexed into the tokens array.\n   *\n   * If a `defaultValue` is provided, it'll use that over `string`,\n   * if a value isn't found in provided language files.\n   * This is useful if you want to have a descriptive key for token replacement\n   * but have a succinct localized string and not require `en.json` to be included.\n   *\n   * Currently, it is used for the progress bar timing.\n   * ```js\n   * {\n   *   \"progress bar timing: currentTime={1} duration={2}\": \"{1} of {2}\"\n   * }\n   * ```\n   * It is then used like so:\n   * ```js\n   * this.localize('progress bar timing: currentTime={1} duration{2}',\n   *               [this.player_.currentTime(), this.player_.duration()],\n   *               '{1} of {2}');\n   * ```\n   *\n   * Which outputs something like: `01:23 of 24:56`.\n   *\n   *\n   * @param {string} string\n   *        The string to localize and the key to lookup in the language files.\n   * @param {string[]} [tokens]\n   *        If the current item has token replacements, provide the tokens here.\n   * @param {string} [defaultValue]\n   *        Defaults to `string`. Can be a default value to use for token replacement\n   *        if the lookup key is needed to be separate.\n   *\n   * @return {string}\n   *         The localized string or if no localization exists the english string.\n   */\n  ;\n\n  _proto.localize = function localize(string, tokens, defaultValue) {\n    if (defaultValue === void 0) {\n      defaultValue = string;\n    }\n\n    var code = this.player_.language && this.player_.language();\n    var languages = this.player_.languages && this.player_.languages();\n    var language = languages && languages[code];\n    var primaryCode = code && code.split('-')[0];\n    var primaryLang = languages && languages[primaryCode];\n    var localizedString = defaultValue;\n\n    if (language && language[string]) {\n      localizedString = language[string];\n    } else if (primaryLang && primaryLang[string]) {\n      localizedString = primaryLang[string];\n    }\n\n    if (tokens) {\n      localizedString = localizedString.replace(/\\{(\\d+)\\}/g, function (match, index) {\n        var value = tokens[index - 1];\n        var ret = value;\n\n        if (typeof value === 'undefined') {\n          ret = match;\n        }\n\n        return ret;\n      });\n    }\n\n    return localizedString;\n  }\n  /**\n   * Return the `Component`s DOM element. This is where children get inserted.\n   * This will usually be the the same as the element returned in {@link Component#el}.\n   *\n   * @return {Element}\n   *         The content element for this `Component`.\n   */\n  ;\n\n  _proto.contentEl = function contentEl() {\n    return this.contentEl_ || this.el_;\n  }\n  /**\n   * Get this `Component`s ID\n   *\n   * @return {string}\n   *         The id of this `Component`\n   */\n  ;\n\n  _proto.id = function id() {\n    return this.id_;\n  }\n  /**\n   * Get the `Component`s name. The name gets used to reference the `Component`\n   * and is set during registration.\n   *\n   * @return {string}\n   *         The name of this `Component`.\n   */\n  ;\n\n  _proto.name = function name() {\n    return this.name_;\n  }\n  /**\n   * Get an array of all child components\n   *\n   * @return {Array}\n   *         The children\n   */\n  ;\n\n  _proto.children = function children() {\n    return this.children_;\n  }\n  /**\n   * Returns the child `Component` with the given `id`.\n   *\n   * @param {string} id\n   *        The id of the child `Component` to get.\n   *\n   * @return {Component|undefined}\n   *         The child `Component` with the given `id` or undefined.\n   */\n  ;\n\n  _proto.getChildById = function getChildById(id) {\n    return this.childIndex_[id];\n  }\n  /**\n   * Returns the child `Component` with the given `name`.\n   *\n   * @param {string} name\n   *        The name of the child `Component` to get.\n   *\n   * @return {Component|undefined}\n   *         The child `Component` with the given `name` or undefined.\n   */\n  ;\n\n  _proto.getChild = function getChild(name) {\n    if (!name) {\n      return;\n    }\n\n    name = toTitleCase(name);\n    return this.childNameIndex_[name];\n  }\n  /**\n   * Add a child `Component` inside the current `Component`.\n   *\n   *\n   * @param {string|Component} child\n   *        The name or instance of a child to add.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of options that will get passed to children of\n   *        the child.\n   *\n   * @param {number} [index=this.children_.length]\n   *        The index to attempt to add a child into.\n   *\n   * @return {Component}\n   *         The `Component` that gets added as a child. When using a string the\n   *         `Component` will get created by this process.\n   */\n  ;\n\n  _proto.addChild = function addChild(child, options, index) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    if (index === void 0) {\n      index = this.children_.length;\n    }\n\n    var component;\n    var componentName; // If child is a string, create component with options\n\n    if (typeof child === 'string') {\n      componentName = toTitleCase(child);\n      var componentClassName = options.componentClass || componentName; // Set name through options\n\n      options.name = componentName; // Create a new object & element for this controls set\n      // If there's no .player_, this is a player\n\n      var ComponentClass = Component.getComponent(componentClassName);\n\n      if (!ComponentClass) {\n        throw new Error(\"Component \" + componentClassName + \" does not exist\");\n      } // data stored directly on the videojs object may be\n      // misidentified as a component to retain\n      // backwards-compatibility with 4.x. check to make sure the\n      // component class can be instantiated.\n\n\n      if (typeof ComponentClass !== 'function') {\n        return null;\n      }\n\n      component = new ComponentClass(this.player_ || this, options); // child is a component instance\n    } else {\n      component = child;\n    }\n\n    if (component.parentComponent_) {\n      component.parentComponent_.removeChild(component);\n    }\n\n    this.children_.splice(index, 0, component);\n    component.parentComponent_ = this;\n\n    if (typeof component.id === 'function') {\n      this.childIndex_[component.id()] = component;\n    } // If a name wasn't used to create the component, check if we can use the\n    // name function of the component\n\n\n    componentName = componentName || component.name && toTitleCase(component.name());\n\n    if (componentName) {\n      this.childNameIndex_[componentName] = component;\n    } // Add the UI object's element to the container div (box)\n    // Having an element is not required\n\n\n    if (typeof component.el === 'function' && component.el()) {\n      var childNodes = this.contentEl().children;\n      var refNode = childNodes[index] || null;\n      this.contentEl().insertBefore(component.el(), refNode);\n    } // Return so it can stored on parent object if desired.\n\n\n    return component;\n  }\n  /**\n   * Remove a child `Component` from this `Component`s list of children. Also removes\n   * the child `Component`s element from this `Component`s element.\n   *\n   * @param {Component} component\n   *        The child `Component` to remove.\n   */\n  ;\n\n  _proto.removeChild = function removeChild(component) {\n    if (typeof component === 'string') {\n      component = this.getChild(component);\n    }\n\n    if (!component || !this.children_) {\n      return;\n    }\n\n    var childFound = false;\n\n    for (var i = this.children_.length - 1; i >= 0; i--) {\n      if (this.children_[i] === component) {\n        childFound = true;\n        this.children_.splice(i, 1);\n        break;\n      }\n    }\n\n    if (!childFound) {\n      return;\n    }\n\n    component.parentComponent_ = null;\n    this.childIndex_[component.id()] = null;\n    this.childNameIndex_[component.name()] = null;\n    var compEl = component.el();\n\n    if (compEl && compEl.parentNode === this.contentEl()) {\n      this.contentEl().removeChild(component.el());\n    }\n  }\n  /**\n   * Add and initialize default child `Component`s based upon options.\n   */\n  ;\n\n  _proto.initChildren = function initChildren() {\n    var _this = this;\n\n    var children = this.options_.children;\n\n    if (children) {\n      // `this` is `parent`\n      var parentOptions = this.options_;\n\n      var handleAdd = function handleAdd(child) {\n        var name = child.name;\n        var opts = child.opts; // Allow options for children to be set at the parent options\n        // e.g. videojs(id, { controlBar: false });\n        // instead of videojs(id, { children: { controlBar: false });\n\n        if (parentOptions[name] !== undefined) {\n          opts = parentOptions[name];\n        } // Allow for disabling default components\n        // e.g. options['children']['posterImage'] = false\n\n\n        if (opts === false) {\n          return;\n        } // Allow options to be passed as a simple boolean if no configuration\n        // is necessary.\n\n\n        if (opts === true) {\n          opts = {};\n        } // We also want to pass the original player options\n        // to each component as well so they don't need to\n        // reach back into the player for options later.\n\n\n        opts.playerOptions = _this.options_.playerOptions; // Create and add the child component.\n        // Add a direct reference to the child by name on the parent instance.\n        // If two of the same component are used, different names should be supplied\n        // for each\n\n        var newChild = _this.addChild(name, opts);\n\n        if (newChild) {\n          _this[name] = newChild;\n        }\n      }; // Allow for an array of children details to passed in the options\n\n\n      var workingChildren;\n      var Tech = Component.getComponent('Tech');\n\n      if (Array.isArray(children)) {\n        workingChildren = children;\n      } else {\n        workingChildren = Object.keys(children);\n      }\n\n      workingChildren // children that are in this.options_ but also in workingChildren  would\n      // give us extra children we do not want. So, we want to filter them out.\n      .concat(Object.keys(this.options_).filter(function (child) {\n        return !workingChildren.some(function (wchild) {\n          if (typeof wchild === 'string') {\n            return child === wchild;\n          }\n\n          return child === wchild.name;\n        });\n      })).map(function (child) {\n        var name;\n        var opts;\n\n        if (typeof child === 'string') {\n          name = child;\n          opts = children[name] || _this.options_[name] || {};\n        } else {\n          name = child.name;\n          opts = child;\n        }\n\n        return {\n          name: name,\n          opts: opts\n        };\n      }).filter(function (child) {\n        // we have to make sure that child.name isn't in the techOrder since\n        // techs are registerd as Components but can't aren't compatible\n        // See https://github.com/videojs/video.js/issues/2772\n        var c = Component.getComponent(child.opts.componentClass || toTitleCase(child.name));\n        return c && !Tech.isTech(c);\n      }).forEach(handleAdd);\n    }\n  }\n  /**\n   * Builds the default DOM class name. Should be overriden by sub-components.\n   *\n   * @return {string}\n   *         The DOM class name for this object.\n   *\n   * @abstract\n   */\n  ;\n\n  _proto.buildCSSClass = function buildCSSClass() {\n    // Child classes can include a function that does:\n    // return 'CLASS NAME' + this._super();\n    return '';\n  }\n  /**\n   * Bind a listener to the component's ready state.\n   * Different from event listeners in that if the ready event has already happened\n   * it will trigger the function immediately.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   */\n  ;\n\n  _proto.ready = function ready(fn, sync) {\n    if (sync === void 0) {\n      sync = false;\n    }\n\n    if (!fn) {\n      return;\n    }\n\n    if (!this.isReady_) {\n      this.readyQueue_ = this.readyQueue_ || [];\n      this.readyQueue_.push(fn);\n      return;\n    }\n\n    if (sync) {\n      fn.call(this);\n    } else {\n      // Call the function asynchronously by default for consistency\n      this.setTimeout(fn, 1);\n    }\n  }\n  /**\n   * Trigger all the ready listeners for this `Component`.\n   *\n   * @fires Component#ready\n   */\n  ;\n\n  _proto.triggerReady = function triggerReady() {\n    this.isReady_ = true; // Ensure ready is triggered asynchronously\n\n    this.setTimeout(function () {\n      var readyQueue = this.readyQueue_; // Reset Ready Queue\n\n      this.readyQueue_ = [];\n\n      if (readyQueue && readyQueue.length > 0) {\n        readyQueue.forEach(function (fn) {\n          fn.call(this);\n        }, this);\n      } // Allow for using event listeners also\n\n      /**\n       * Triggered when a `Component` is ready.\n       *\n       * @event Component#ready\n       * @type {EventTarget~Event}\n       */\n\n\n      this.trigger('ready');\n    }, 1);\n  }\n  /**\n   * Find a single DOM element matching a `selector`. This can be within the `Component`s\n   * `contentEl()` or another custom context.\n   *\n   * @param {string} selector\n   *        A valid CSS selector, which will be passed to `querySelector`.\n   *\n   * @param {Element|string} [context=this.contentEl()]\n   *        A DOM element within which to query. Can also be a selector string in\n   *        which case the first matching element will get used as context. If\n   *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns\n   *        nothing it falls back to `document`.\n   *\n   * @return {Element|null}\n   *         the dom element that was found, or null\n   *\n   * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)\n   */\n  ;\n\n  _proto.$ = function $$1(selector, context) {\n    return $(selector, context || this.contentEl());\n  }\n  /**\n   * Finds all DOM element matching a `selector`. This can be within the `Component`s\n   * `contentEl()` or another custom context.\n   *\n   * @param {string} selector\n   *        A valid CSS selector, which will be passed to `querySelectorAll`.\n   *\n   * @param {Element|string} [context=this.contentEl()]\n   *        A DOM element within which to query. Can also be a selector string in\n   *        which case the first matching element will get used as context. If\n   *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns\n   *        nothing it falls back to `document`.\n   *\n   * @return {NodeList}\n   *         a list of dom elements that were found\n   *\n   * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)\n   */\n  ;\n\n  _proto.$$ = function $$$1(selector, context) {\n    return $$(selector, context || this.contentEl());\n  }\n  /**\n   * Check if a component's element has a CSS class name.\n   *\n   * @param {string} classToCheck\n   *        CSS class name to check.\n   *\n   * @return {boolean}\n   *         - True if the `Component` has the class.\n   *         - False if the `Component` does not have the class`\n   */\n  ;\n\n  _proto.hasClass = function hasClass$1(classToCheck) {\n    return hasClass(this.el_, classToCheck);\n  }\n  /**\n   * Add a CSS class name to the `Component`s element.\n   *\n   * @param {string} classToAdd\n   *        CSS class name to add\n   */\n  ;\n\n  _proto.addClass = function addClass$1(classToAdd) {\n    addClass(this.el_, classToAdd);\n  }\n  /**\n   * Remove a CSS class name from the `Component`s element.\n   *\n   * @param {string} classToRemove\n   *        CSS class name to remove\n   */\n  ;\n\n  _proto.removeClass = function removeClass$1(classToRemove) {\n    removeClass(this.el_, classToRemove);\n  }\n  /**\n   * Add or remove a CSS class name from the component's element.\n   * - `classToToggle` gets added when {@link Component#hasClass} would return false.\n   * - `classToToggle` gets removed when {@link Component#hasClass} would return true.\n   *\n   * @param  {string} classToToggle\n   *         The class to add or remove based on (@link Component#hasClass}\n   *\n   * @param  {boolean|Dom~predicate} [predicate]\n   *         An {@link Dom~predicate} function or a boolean\n   */\n  ;\n\n  _proto.toggleClass = function toggleClass$1(classToToggle, predicate) {\n    toggleClass(this.el_, classToToggle, predicate);\n  }\n  /**\n   * Show the `Component`s element if it is hidden by removing the\n   * 'vjs-hidden' class name from it.\n   */\n  ;\n\n  _proto.show = function show() {\n    this.removeClass('vjs-hidden');\n  }\n  /**\n   * Hide the `Component`s element if it is currently showing by adding the\n   * 'vjs-hidden` class name to it.\n   */\n  ;\n\n  _proto.hide = function hide() {\n    this.addClass('vjs-hidden');\n  }\n  /**\n   * Lock a `Component`s element in its visible state by adding the 'vjs-lock-showing'\n   * class name to it. Used during fadeIn/fadeOut.\n   *\n   * @private\n   */\n  ;\n\n  _proto.lockShowing = function lockShowing() {\n    this.addClass('vjs-lock-showing');\n  }\n  /**\n   * Unlock a `Component`s element from its visible state by removing the 'vjs-lock-showing'\n   * class name from it. Used during fadeIn/fadeOut.\n   *\n   * @private\n   */\n  ;\n\n  _proto.unlockShowing = function unlockShowing() {\n    this.removeClass('vjs-lock-showing');\n  }\n  /**\n   * Get the value of an attribute on the `Component`s element.\n   *\n   * @param {string} attribute\n   *        Name of the attribute to get the value from.\n   *\n   * @return {string|null}\n   *         - The value of the attribute that was asked for.\n   *         - Can be an empty string on some browsers if the attribute does not exist\n   *           or has no value\n   *         - Most browsers will return null if the attibute does not exist or has\n   *           no value.\n   *\n   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute}\n   */\n  ;\n\n  _proto.getAttribute = function getAttribute$1(attribute) {\n    return getAttribute(this.el_, attribute);\n  }\n  /**\n   * Set the value of an attribute on the `Component`'s element\n   *\n   * @param {string} attribute\n   *        Name of the attribute to set.\n   *\n   * @param {string} value\n   *        Value to set the attribute to.\n   *\n   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute}\n   */\n  ;\n\n  _proto.setAttribute = function setAttribute$1(attribute, value) {\n    setAttribute(this.el_, attribute, value);\n  }\n  /**\n   * Remove an attribute from the `Component`s element.\n   *\n   * @param {string} attribute\n   *        Name of the attribute to remove.\n   *\n   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute}\n   */\n  ;\n\n  _proto.removeAttribute = function removeAttribute$1(attribute) {\n    removeAttribute(this.el_, attribute);\n  }\n  /**\n   * Get or set the width of the component based upon the CSS styles.\n   * See {@link Component#dimension} for more detailed information.\n   *\n   * @param {number|string} [num]\n   *        The width that you want to set postfixed with '%', 'px' or nothing.\n   *\n   * @param {boolean} [skipListeners]\n   *        Skip the componentresize event trigger\n   *\n   * @return {number|string}\n   *         The width when getting, zero if there is no width. Can be a string\n   *           postpixed with '%' or 'px'.\n   */\n  ;\n\n  _proto.width = function width(num, skipListeners) {\n    return this.dimension('width', num, skipListeners);\n  }\n  /**\n   * Get or set the height of the component based upon the CSS styles.\n   * See {@link Component#dimension} for more detailed information.\n   *\n   * @param {number|string} [num]\n   *        The height that you want to set postfixed with '%', 'px' or nothing.\n   *\n   * @param {boolean} [skipListeners]\n   *        Skip the componentresize event trigger\n   *\n   * @return {number|string}\n   *         The width when getting, zero if there is no width. Can be a string\n   *         postpixed with '%' or 'px'.\n   */\n  ;\n\n  _proto.height = function height(num, skipListeners) {\n    return this.dimension('height', num, skipListeners);\n  }\n  /**\n   * Set both the width and height of the `Component` element at the same time.\n   *\n   * @param  {number|string} width\n   *         Width to set the `Component`s element to.\n   *\n   * @param  {number|string} height\n   *         Height to set the `Component`s element to.\n   */\n  ;\n\n  _proto.dimensions = function dimensions(width, height) {\n    // Skip componentresize listeners on width for optimization\n    this.width(width, true);\n    this.height(height);\n  }\n  /**\n   * Get or set width or height of the `Component` element. This is the shared code\n   * for the {@link Component#width} and {@link Component#height}.\n   *\n   * Things to know:\n   * - If the width or height in an number this will return the number postfixed with 'px'.\n   * - If the width/height is a percent this will return the percent postfixed with '%'\n   * - Hidden elements have a width of 0 with `window.getComputedStyle`. This function\n   *   defaults to the `Component`s `style.width` and falls back to `window.getComputedStyle`.\n   *   See [this]{@link http://www.foliotek.com/devblog/getting-the-width-of-a-hidden-element-with-jquery-using-width/}\n   *   for more information\n   * - If you want the computed style of the component, use {@link Component#currentWidth}\n   *   and {@link {Component#currentHeight}\n   *\n   * @fires Component#componentresize\n   *\n   * @param {string} widthOrHeight\n   8        'width' or 'height'\n   *\n   * @param  {number|string} [num]\n   8         New dimension\n   *\n   * @param  {boolean} [skipListeners]\n   *         Skip componentresize event trigger\n   *\n   * @return {number}\n   *         The dimension when getting or 0 if unset\n   */\n  ;\n\n  _proto.dimension = function dimension(widthOrHeight, num, skipListeners) {\n    if (num !== undefined) {\n      // Set to zero if null or literally NaN (NaN !== NaN)\n      if (num === null || num !== num) {\n        num = 0;\n      } // Check if using css width/height (% or px) and adjust\n\n\n      if (('' + num).indexOf('%') !== -1 || ('' + num).indexOf('px') !== -1) {\n        this.el_.style[widthOrHeight] = num;\n      } else if (num === 'auto') {\n        this.el_.style[widthOrHeight] = '';\n      } else {\n        this.el_.style[widthOrHeight] = num + 'px';\n      } // skipListeners allows us to avoid triggering the resize event when setting both width and height\n\n\n      if (!skipListeners) {\n        /**\n         * Triggered when a component is resized.\n         *\n         * @event Component#componentresize\n         * @type {EventTarget~Event}\n         */\n        this.trigger('componentresize');\n      }\n\n      return;\n    } // Not setting a value, so getting it\n    // Make sure element exists\n\n\n    if (!this.el_) {\n      return 0;\n    } // Get dimension value from style\n\n\n    var val = this.el_.style[widthOrHeight];\n    var pxIndex = val.indexOf('px');\n\n    if (pxIndex !== -1) {\n      // Return the pixel value with no 'px'\n      return parseInt(val.slice(0, pxIndex), 10);\n    } // No px so using % or no style was set, so falling back to offsetWidth/height\n    // If component has display:none, offset will return 0\n    // TODO: handle display:none and no dimension style using px\n\n\n    return parseInt(this.el_['offset' + toTitleCase(widthOrHeight)], 10);\n  }\n  /**\n   * Get the computed width or the height of the component's element.\n   *\n   * Uses `window.getComputedStyle`.\n   *\n   * @param {string} widthOrHeight\n   *        A string containing 'width' or 'height'. Whichever one you want to get.\n   *\n   * @return {number}\n   *         The dimension that gets asked for or 0 if nothing was set\n   *         for that dimension.\n   */\n  ;\n\n  _proto.currentDimension = function currentDimension(widthOrHeight) {\n    var computedWidthOrHeight = 0;\n\n    if (widthOrHeight !== 'width' && widthOrHeight !== 'height') {\n      throw new Error('currentDimension only accepts width or height value');\n    }\n\n    if (typeof window$1.getComputedStyle === 'function') {\n      var computedStyle = window$1.getComputedStyle(this.el_);\n      computedWidthOrHeight = computedStyle.getPropertyValue(widthOrHeight) || computedStyle[widthOrHeight];\n    } // remove 'px' from variable and parse as integer\n\n\n    computedWidthOrHeight = parseFloat(computedWidthOrHeight); // if the computed value is still 0, it's possible that the browser is lying\n    // and we want to check the offset values.\n    // This code also runs wherever getComputedStyle doesn't exist.\n\n    if (computedWidthOrHeight === 0) {\n      var rule = \"offset\" + toTitleCase(widthOrHeight);\n      computedWidthOrHeight = this.el_[rule];\n    }\n\n    return computedWidthOrHeight;\n  }\n  /**\n   * An object that contains width and height values of the `Component`s\n   * computed style. Uses `window.getComputedStyle`.\n   *\n   * @typedef {Object} Component~DimensionObject\n   *\n   * @property {number} width\n   *           The width of the `Component`s computed style.\n   *\n   * @property {number} height\n   *           The height of the `Component`s computed style.\n   */\n\n  /**\n   * Get an object that contains computed width and height values of the\n   * component's element.\n   *\n   * Uses `window.getComputedStyle`.\n   *\n   * @return {Component~DimensionObject}\n   *         The computed dimensions of the component's element.\n   */\n  ;\n\n  _proto.currentDimensions = function currentDimensions() {\n    return {\n      width: this.currentDimension('width'),\n      height: this.currentDimension('height')\n    };\n  }\n  /**\n   * Get the computed width of the component's element.\n   *\n   * Uses `window.getComputedStyle`.\n   *\n   * @return {number}\n   *         The computed width of the component's element.\n   */\n  ;\n\n  _proto.currentWidth = function currentWidth() {\n    return this.currentDimension('width');\n  }\n  /**\n   * Get the computed height of the component's element.\n   *\n   * Uses `window.getComputedStyle`.\n   *\n   * @return {number}\n   *         The computed height of the component's element.\n   */\n  ;\n\n  _proto.currentHeight = function currentHeight() {\n    return this.currentDimension('height');\n  }\n  /**\n   * Set the focus to this component\n   */\n  ;\n\n  _proto.focus = function focus() {\n    this.el_.focus();\n  }\n  /**\n   * Remove the focus from this component\n   */\n  ;\n\n  _proto.blur = function blur() {\n    this.el_.blur();\n  }\n  /**\n   * When this Component receives a `keydown` event which it does not process,\n   *  it passes the event to the Player for handling.\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown` event that caused this function to be called.\n   */\n  ;\n\n  _proto.handleKeyDown = function handleKeyDown(event) {\n    if (this.player_) {\n      // We only stop propagation here because we want unhandled events to fall\n      // back to the browser.\n      event.stopPropagation();\n      this.player_.handleKeyDown(event);\n    }\n  }\n  /**\n   * Many components used to have a `handleKeyPress` method, which was poorly\n   * named because it listened to a `keydown` event. This method name now\n   * delegates to `handleKeyDown`. This means anyone calling `handleKeyPress`\n   * will not see their method calls stop working.\n   *\n   * @param {EventTarget~Event} event\n   *        The event that caused this function to be called.\n   */\n  ;\n\n  _proto.handleKeyPress = function handleKeyPress(event) {\n    this.handleKeyDown(event);\n  }\n  /**\n   * Emit a 'tap' events when touch event support gets detected. This gets used to\n   * support toggling the controls through a tap on the video. They get enabled\n   * because every sub-component would have extra overhead otherwise.\n   *\n   * @private\n   * @fires Component#tap\n   * @listens Component#touchstart\n   * @listens Component#touchmove\n   * @listens Component#touchleave\n   * @listens Component#touchcancel\n   * @listens Component#touchend\n    */\n  ;\n\n  _proto.emitTapEvents = function emitTapEvents() {\n    // Track the start time so we can determine how long the touch lasted\n    var touchStart = 0;\n    var firstTouch = null; // Maximum movement allowed during a touch event to still be considered a tap\n    // Other popular libs use anywhere from 2 (hammer.js) to 15,\n    // so 10 seems like a nice, round number.\n\n    var tapMovementThreshold = 10; // The maximum length a touch can be while still being considered a tap\n\n    var touchTimeThreshold = 200;\n    var couldBeTap;\n    this.on('touchstart', function (event) {\n      // If more than one finger, don't consider treating this as a click\n      if (event.touches.length === 1) {\n        // Copy pageX/pageY from the object\n        firstTouch = {\n          pageX: event.touches[0].pageX,\n          pageY: event.touches[0].pageY\n        }; // Record start time so we can detect a tap vs. \"touch and hold\"\n\n        touchStart = window$1.performance.now(); // Reset couldBeTap tracking\n\n        couldBeTap = true;\n      }\n    });\n    this.on('touchmove', function (event) {\n      // If more than one finger, don't consider treating this as a click\n      if (event.touches.length > 1) {\n        couldBeTap = false;\n      } else if (firstTouch) {\n        // Some devices will throw touchmoves for all but the slightest of taps.\n        // So, if we moved only a small distance, this could still be a tap\n        var xdiff = event.touches[0].pageX - firstTouch.pageX;\n        var ydiff = event.touches[0].pageY - firstTouch.pageY;\n        var touchDistance = Math.sqrt(xdiff * xdiff + ydiff * ydiff);\n\n        if (touchDistance > tapMovementThreshold) {\n          couldBeTap = false;\n        }\n      }\n    });\n\n    var noTap = function noTap() {\n      couldBeTap = false;\n    }; // TODO: Listen to the original target. http://youtu.be/DujfpXOKUp8?t=13m8s\n\n\n    this.on('touchleave', noTap);\n    this.on('touchcancel', noTap); // When the touch ends, measure how long it took and trigger the appropriate\n    // event\n\n    this.on('touchend', function (event) {\n      firstTouch = null; // Proceed only if the touchmove/leave/cancel event didn't happen\n\n      if (couldBeTap === true) {\n        // Measure how long the touch lasted\n        var touchTime = window$1.performance.now() - touchStart; // Make sure the touch was less than the threshold to be considered a tap\n\n        if (touchTime < touchTimeThreshold) {\n          // Don't let browser turn this into a click\n          event.preventDefault();\n          /**\n           * Triggered when a `Component` is tapped.\n           *\n           * @event Component#tap\n           * @type {EventTarget~Event}\n           */\n\n          this.trigger('tap'); // It may be good to copy the touchend event object and change the\n          // type to tap, if the other event properties aren't exact after\n          // Events.fixEvent runs (e.g. event.target)\n        }\n      }\n    });\n  }\n  /**\n   * This function reports user activity whenever touch events happen. This can get\n   * turned off by any sub-components that wants touch events to act another way.\n   *\n   * Report user touch activity when touch events occur. User activity gets used to\n   * determine when controls should show/hide. It is simple when it comes to mouse\n   * events, because any mouse event should show the controls. So we capture mouse\n   * events that bubble up to the player and report activity when that happens.\n   * With touch events it isn't as easy as `touchstart` and `touchend` toggle player\n   * controls. So touch events can't help us at the player level either.\n   *\n   * User activity gets checked asynchronously. So what could happen is a tap event\n   * on the video turns the controls off. Then the `touchend` event bubbles up to\n   * the player. Which, if it reported user activity, would turn the controls right\n   * back on. We also don't want to completely block touch events from bubbling up.\n   * Furthermore a `touchmove` event and anything other than a tap, should not turn\n   * controls back on.\n   *\n   * @listens Component#touchstart\n   * @listens Component#touchmove\n   * @listens Component#touchend\n   * @listens Component#touchcancel\n   */\n  ;\n\n  _proto.enableTouchActivity = function enableTouchActivity() {\n    // Don't continue if the root player doesn't support reporting user activity\n    if (!this.player() || !this.player().reportUserActivity) {\n      return;\n    } // listener for reporting that the user is active\n\n\n    var report = bind(this.player(), this.player().reportUserActivity);\n    var touchHolding;\n    this.on('touchstart', function () {\n      report(); // For as long as the they are touching the device or have their mouse down,\n      // we consider them active even if they're not moving their finger or mouse.\n      // So we want to continue to update that they are active\n\n      this.clearInterval(touchHolding); // report at the same interval as activityCheck\n\n      touchHolding = this.setInterval(report, 250);\n    });\n\n    var touchEnd = function touchEnd(event) {\n      report(); // stop the interval that maintains activity if the touch is holding\n\n      this.clearInterval(touchHolding);\n    };\n\n    this.on('touchmove', report);\n    this.on('touchend', touchEnd);\n    this.on('touchcancel', touchEnd);\n  }\n  /**\n   * A callback that has no parameters and is bound into `Component`s context.\n   *\n   * @callback Component~GenericCallback\n   * @this Component\n   */\n\n  /**\n   * Creates a function that runs after an `x` millisecond timeout. This function is a\n   * wrapper around `window.setTimeout`. There are a few reasons to use this one\n   * instead though:\n   * 1. It gets cleared via  {@link Component#clearTimeout} when\n   *    {@link Component#dispose} gets called.\n   * 2. The function callback will gets turned into a {@link Component~GenericCallback}\n   *\n   * > Note: You can't use `window.clearTimeout` on the id returned by this function. This\n   *         will cause its dispose listener not to get cleaned up! Please use\n   *         {@link Component#clearTimeout} or {@link Component#dispose} instead.\n   *\n   * @param {Component~GenericCallback} fn\n   *        The function that will be run after `timeout`.\n   *\n   * @param {number} timeout\n   *        Timeout in milliseconds to delay before executing the specified function.\n   *\n   * @return {number}\n   *         Returns a timeout ID that gets used to identify the timeout. It can also\n   *         get used in {@link Component#clearTimeout} to clear the timeout that\n   *         was set.\n   *\n   * @listens Component#dispose\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout}\n   */\n  ;\n\n  _proto.setTimeout = function setTimeout(fn, timeout) {\n    var _this2 = this;\n\n    // declare as variables so they are properly available in timeout function\n    // eslint-disable-next-line\n    var timeoutId, disposeFn;\n    fn = bind(this, fn);\n    timeoutId = window$1.setTimeout(function () {\n      _this2.off('dispose', disposeFn);\n\n      fn();\n    }, timeout);\n\n    disposeFn = function disposeFn() {\n      return _this2.clearTimeout(timeoutId);\n    };\n\n    disposeFn.guid = \"vjs-timeout-\" + timeoutId;\n    this.on('dispose', disposeFn);\n    return timeoutId;\n  }\n  /**\n   * Clears a timeout that gets created via `window.setTimeout` or\n   * {@link Component#setTimeout}. If you set a timeout via {@link Component#setTimeout}\n   * use this function instead of `window.clearTimout`. If you don't your dispose\n   * listener will not get cleaned up until {@link Component#dispose}!\n   *\n   * @param {number} timeoutId\n   *        The id of the timeout to clear. The return value of\n   *        {@link Component#setTimeout} or `window.setTimeout`.\n   *\n   * @return {number}\n   *         Returns the timeout id that was cleared.\n   *\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearTimeout}\n   */\n  ;\n\n  _proto.clearTimeout = function clearTimeout(timeoutId) {\n    window$1.clearTimeout(timeoutId);\n\n    var disposeFn = function disposeFn() {};\n\n    disposeFn.guid = \"vjs-timeout-\" + timeoutId;\n    this.off('dispose', disposeFn);\n    return timeoutId;\n  }\n  /**\n   * Creates a function that gets run every `x` milliseconds. This function is a wrapper\n   * around `window.setInterval`. There are a few reasons to use this one instead though.\n   * 1. It gets cleared via  {@link Component#clearInterval} when\n   *    {@link Component#dispose} gets called.\n   * 2. The function callback will be a {@link Component~GenericCallback}\n   *\n   * @param {Component~GenericCallback} fn\n   *        The function to run every `x` seconds.\n   *\n   * @param {number} interval\n   *        Execute the specified function every `x` milliseconds.\n   *\n   * @return {number}\n   *         Returns an id that can be used to identify the interval. It can also be be used in\n   *         {@link Component#clearInterval} to clear the interval.\n   *\n   * @listens Component#dispose\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval}\n   */\n  ;\n\n  _proto.setInterval = function setInterval(fn, interval) {\n    var _this3 = this;\n\n    fn = bind(this, fn);\n    var intervalId = window$1.setInterval(fn, interval);\n\n    var disposeFn = function disposeFn() {\n      return _this3.clearInterval(intervalId);\n    };\n\n    disposeFn.guid = \"vjs-interval-\" + intervalId;\n    this.on('dispose', disposeFn);\n    return intervalId;\n  }\n  /**\n   * Clears an interval that gets created via `window.setInterval` or\n   * {@link Component#setInterval}. If you set an inteval via {@link Component#setInterval}\n   * use this function instead of `window.clearInterval`. If you don't your dispose\n   * listener will not get cleaned up until {@link Component#dispose}!\n   *\n   * @param {number} intervalId\n   *        The id of the interval to clear. The return value of\n   *        {@link Component#setInterval} or `window.setInterval`.\n   *\n   * @return {number}\n   *         Returns the interval id that was cleared.\n   *\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearInterval}\n   */\n  ;\n\n  _proto.clearInterval = function clearInterval(intervalId) {\n    window$1.clearInterval(intervalId);\n\n    var disposeFn = function disposeFn() {};\n\n    disposeFn.guid = \"vjs-interval-\" + intervalId;\n    this.off('dispose', disposeFn);\n    return intervalId;\n  }\n  /**\n   * Queues up a callback to be passed to requestAnimationFrame (rAF), but\n   * with a few extra bonuses:\n   *\n   * - Supports browsers that do not support rAF by falling back to\n   *   {@link Component#setTimeout}.\n   *\n   * - The callback is turned into a {@link Component~GenericCallback} (i.e.\n   *   bound to the component).\n   *\n   * - Automatic cancellation of the rAF callback is handled if the component\n   *   is disposed before it is called.\n   *\n   * @param  {Component~GenericCallback} fn\n   *         A function that will be bound to this component and executed just\n   *         before the browser's next repaint.\n   *\n   * @return {number}\n   *         Returns an rAF ID that gets used to identify the timeout. It can\n   *         also be used in {@link Component#cancelAnimationFrame} to cancel\n   *         the animation frame callback.\n   *\n   * @listens Component#dispose\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame}\n   */\n  ;\n\n  _proto.requestAnimationFrame = function requestAnimationFrame(fn) {\n    var _this4 = this;\n\n    // declare as variables so they are properly available in rAF function\n    // eslint-disable-next-line\n    var id, disposeFn;\n\n    if (this.supportsRaf_) {\n      fn = bind(this, fn);\n      id = window$1.requestAnimationFrame(function () {\n        _this4.off('dispose', disposeFn);\n\n        fn();\n      });\n\n      disposeFn = function disposeFn() {\n        return _this4.cancelAnimationFrame(id);\n      };\n\n      disposeFn.guid = \"vjs-raf-\" + id;\n      this.on('dispose', disposeFn);\n      return id;\n    } // Fall back to using a timer.\n\n\n    return this.setTimeout(fn, 1000 / 60);\n  }\n  /**\n   * Cancels a queued callback passed to {@link Component#requestAnimationFrame}\n   * (rAF).\n   *\n   * If you queue an rAF callback via {@link Component#requestAnimationFrame},\n   * use this function instead of `window.cancelAnimationFrame`. If you don't,\n   * your dispose listener will not get cleaned up until {@link Component#dispose}!\n   *\n   * @param {number} id\n   *        The rAF ID to clear. The return value of {@link Component#requestAnimationFrame}.\n   *\n   * @return {number}\n   *         Returns the rAF ID that was cleared.\n   *\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/window/cancelAnimationFrame}\n   */\n  ;\n\n  _proto.cancelAnimationFrame = function cancelAnimationFrame(id) {\n    if (this.supportsRaf_) {\n      window$1.cancelAnimationFrame(id);\n\n      var disposeFn = function disposeFn() {};\n\n      disposeFn.guid = \"vjs-raf-\" + id;\n      this.off('dispose', disposeFn);\n      return id;\n    } // Fall back to using a timer.\n\n\n    return this.clearTimeout(id);\n  }\n  /**\n   * Register a `Component` with `videojs` given the name and the component.\n   *\n   * > NOTE: {@link Tech}s should not be registered as a `Component`. {@link Tech}s\n   *         should be registered using {@link Tech.registerTech} or\n   *         {@link videojs:videojs.registerTech}.\n   *\n   * > NOTE: This function can also be seen on videojs as\n   *         {@link videojs:videojs.registerComponent}.\n   *\n   * @param {string} name\n   *        The name of the `Component` to register.\n   *\n   * @param {Component} ComponentToRegister\n   *        The `Component` class to register.\n   *\n   * @return {Component}\n   *         The `Component` that was registered.\n   */\n  ;\n\n  Component.registerComponent = function registerComponent(name, ComponentToRegister) {\n    if (typeof name !== 'string' || !name) {\n      throw new Error(\"Illegal component name, \\\"\" + name + \"\\\"; must be a non-empty string.\");\n    }\n\n    var Tech = Component.getComponent('Tech'); // We need to make sure this check is only done if Tech has been registered.\n\n    var isTech = Tech && Tech.isTech(ComponentToRegister);\n    var isComp = Component === ComponentToRegister || Component.prototype.isPrototypeOf(ComponentToRegister.prototype);\n\n    if (isTech || !isComp) {\n      var reason;\n\n      if (isTech) {\n        reason = 'techs must be registered using Tech.registerTech()';\n      } else {\n        reason = 'must be a Component subclass';\n      }\n\n      throw new Error(\"Illegal component, \\\"\" + name + \"\\\"; \" + reason + \".\");\n    }\n\n    name = toTitleCase(name);\n\n    if (!Component.components_) {\n      Component.components_ = {};\n    }\n\n    var Player = Component.getComponent('Player');\n\n    if (name === 'Player' && Player && Player.players) {\n      var players = Player.players;\n      var playerNames = Object.keys(players); // If we have players that were disposed, then their name will still be\n      // in Players.players. So, we must loop through and verify that the value\n      // for each item is not null. This allows registration of the Player component\n      // after all players have been disposed or before any were created.\n\n      if (players && playerNames.length > 0 && playerNames.map(function (pname) {\n        return players[pname];\n      }).every(Boolean)) {\n        throw new Error('Can not register Player component after player has been created.');\n      }\n    }\n\n    Component.components_[name] = ComponentToRegister;\n    return ComponentToRegister;\n  }\n  /**\n   * Get a `Component` based on the name it was registered with.\n   *\n   * @param {string} name\n   *        The Name of the component to get.\n   *\n   * @return {Component}\n   *         The `Component` that got registered under the given name.\n   *\n   * @deprecated In `videojs` 6 this will not return `Component`s that were not\n   *             registered using {@link Component.registerComponent}. Currently we\n   *             check the global `videojs` object for a `Component` name and\n   *             return that if it exists.\n   */\n  ;\n\n  Component.getComponent = function getComponent(name) {\n    if (!name) {\n      return;\n    }\n\n    name = toTitleCase(name);\n\n    if (Component.components_ && Component.components_[name]) {\n      return Component.components_[name];\n    }\n  };\n\n  return Component;\n}();\n/**\n * Whether or not this component supports `requestAnimationFrame`.\n *\n * This is exposed primarily for testing purposes.\n *\n * @private\n * @type {Boolean}\n */\n\n\nComponent.prototype.supportsRaf_ = typeof window$1.requestAnimationFrame === 'function' && typeof window$1.cancelAnimationFrame === 'function';\nComponent.registerComponent('Component', Component);\n\n/**\n * @file browser.js\n * @module browser\n */\nvar USER_AGENT = window$1.navigator && window$1.navigator.userAgent || '';\nvar webkitVersionMap = /AppleWebKit\\/([\\d.]+)/i.exec(USER_AGENT);\nvar appleWebkitVersion = webkitVersionMap ? parseFloat(webkitVersionMap.pop()) : null;\n/**\n * Whether or not this device is an iPad.\n *\n * @static\n * @const\n * @type {Boolean}\n */\n\nvar IS_IPAD = /iPad/i.test(USER_AGENT);\n/**\n * Whether or not this device is an iPhone.\n *\n * @static\n * @const\n * @type {Boolean}\n */\n// The Facebook app's UIWebView identifies as both an iPhone and iPad, so\n// to identify iPhones, we need to exclude iPads.\n// http://artsy.github.io/blog/2012/10/18/the-perils-of-ios-user-agent-sniffing/\n\nvar IS_IPHONE = /iPhone/i.test(USER_AGENT) && !IS_IPAD;\n/**\n * Whether or not this device is an iPod.\n *\n * @static\n * @const\n * @type {Boolean}\n */\n\nvar IS_IPOD = /iPod/i.test(USER_AGENT);\n/**\n * Whether or not this is an iOS device.\n *\n * @static\n * @const\n * @type {Boolean}\n */\n\nvar IS_IOS = IS_IPHONE || IS_IPAD || IS_IPOD;\n/**\n * The detected iOS version - or `null`.\n *\n * @static\n * @const\n * @type {string|null}\n */\n\nvar IOS_VERSION = function () {\n  var match = USER_AGENT.match(/OS (\\d+)_/i);\n\n  if (match && match[1]) {\n    return match[1];\n  }\n\n  return null;\n}();\n/**\n * Whether or not this is an Android device.\n *\n * @static\n * @const\n * @type {Boolean}\n */\n\nvar IS_ANDROID = /Android/i.test(USER_AGENT);\n/**\n * The detected Android version - or `null`.\n *\n * @static\n * @const\n * @type {number|string|null}\n */\n\nvar ANDROID_VERSION = function () {\n  // This matches Android Major.Minor.Patch versions\n  // ANDROID_VERSION is Major.Minor as a Number, if Minor isn't available, then only Major is returned\n  var match = USER_AGENT.match(/Android (\\d+)(?:\\.(\\d+))?(?:\\.(\\d+))*/i);\n\n  if (!match) {\n    return null;\n  }\n\n  var major = match[1] && parseFloat(match[1]);\n  var minor = match[2] && parseFloat(match[2]);\n\n  if (major && minor) {\n    return parseFloat(match[1] + '.' + match[2]);\n  } else if (major) {\n    return major;\n  }\n\n  return null;\n}();\n/**\n * Whether or not this is a native Android browser.\n *\n * @static\n * @const\n * @type {Boolean}\n */\n\nvar IS_NATIVE_ANDROID = IS_ANDROID && ANDROID_VERSION < 5 && appleWebkitVersion < 537;\n/**\n * Whether or not this is Mozilla Firefox.\n *\n * @static\n * @const\n * @type {Boolean}\n */\n\nvar IS_FIREFOX = /Firefox/i.test(USER_AGENT);\n/**\n * Whether or not this is Microsoft Edge.\n *\n * @static\n * @const\n * @type {Boolean}\n */\n\nvar IS_EDGE = /Edge/i.test(USER_AGENT);\n/**\n * Whether or not this is Google Chrome.\n *\n * This will also be `true` for Chrome on iOS, which will have different support\n * as it is actually Safari under the hood.\n *\n * @static\n * @const\n * @type {Boolean}\n */\n\nvar IS_CHROME = !IS_EDGE && (/Chrome/i.test(USER_AGENT) || /CriOS/i.test(USER_AGENT));\n/**\n * The detected Google Chrome version - or `null`.\n *\n * @static\n * @const\n * @type {number|null}\n */\n\nvar CHROME_VERSION = function () {\n  var match = USER_AGENT.match(/(Chrome|CriOS)\\/(\\d+)/);\n\n  if (match && match[2]) {\n    return parseFloat(match[2]);\n  }\n\n  return null;\n}();\n/**\n * The detected Internet Explorer version - or `null`.\n *\n * @static\n * @const\n * @type {number|null}\n */\n\nvar IE_VERSION = function () {\n  var result = /MSIE\\s(\\d+)\\.\\d/.exec(USER_AGENT);\n  var version = result && parseFloat(result[1]);\n\n  if (!version && /Trident\\/7.0/i.test(USER_AGENT) && /rv:11.0/.test(USER_AGENT)) {\n    // IE 11 has a different user agent string than other IE versions\n    version = 11.0;\n  }\n\n  return version;\n}();\n/**\n * Whether or not this is desktop Safari.\n *\n * @static\n * @const\n * @type {Boolean}\n */\n\nvar IS_SAFARI = /Safari/i.test(USER_AGENT) && !IS_CHROME && !IS_ANDROID && !IS_EDGE;\n/**\n * Whether or not this is any flavor of Safari - including iOS.\n *\n * @static\n * @const\n * @type {Boolean}\n */\n\nvar IS_ANY_SAFARI = (IS_SAFARI || IS_IOS) && !IS_CHROME;\n/**\n * Whether or not this is a Windows machine.\n *\n * @static\n * @const\n * @type {Boolean}\n */\n\nvar IS_WINDOWS = /Windows/i.test(USER_AGENT);\n/**\n * Whether or not this device is touch-enabled.\n *\n * @static\n * @const\n * @type {Boolean}\n */\n\nvar TOUCH_ENABLED = isReal() && ('ontouchstart' in window$1 || window$1.navigator.maxTouchPoints || window$1.DocumentTouch && window$1.document instanceof window$1.DocumentTouch);\n\nvar browser = /*#__PURE__*/Object.freeze({\n  IS_IPAD: IS_IPAD,\n  IS_IPHONE: IS_IPHONE,\n  IS_IPOD: IS_IPOD,\n  IS_IOS: IS_IOS,\n  IOS_VERSION: IOS_VERSION,\n  IS_ANDROID: IS_ANDROID,\n  ANDROID_VERSION: ANDROID_VERSION,\n  IS_NATIVE_ANDROID: IS_NATIVE_ANDROID,\n  IS_FIREFOX: IS_FIREFOX,\n  IS_EDGE: IS_EDGE,\n  IS_CHROME: IS_CHROME,\n  CHROME_VERSION: CHROME_VERSION,\n  IE_VERSION: IE_VERSION,\n  IS_SAFARI: IS_SAFARI,\n  IS_ANY_SAFARI: IS_ANY_SAFARI,\n  IS_WINDOWS: IS_WINDOWS,\n  TOUCH_ENABLED: TOUCH_ENABLED\n});\n\n/**\n * @file time-ranges.js\n * @module time-ranges\n */\n\n/**\n * Returns the time for the specified index at the start or end\n * of a TimeRange object.\n *\n * @typedef    {Function} TimeRangeIndex\n *\n * @param      {number} [index=0]\n *             The range number to return the time for.\n *\n * @return     {number}\n *             The time offset at the specified index.\n *\n * @deprecated The index argument must be provided.\n *             In the future, leaving it out will throw an error.\n */\n\n/**\n * An object that contains ranges of time.\n *\n * @typedef  {Object} TimeRange\n *\n * @property {number} length\n *           The number of time ranges represented by this object.\n *\n * @property {module:time-ranges~TimeRangeIndex} start\n *           Returns the time offset at which a specified time range begins.\n *\n * @property {module:time-ranges~TimeRangeIndex} end\n *           Returns the time offset at which a specified time range ends.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges\n */\n\n/**\n * Check if any of the time ranges are over the maximum index.\n *\n * @private\n * @param   {string} fnName\n *          The function name to use for logging\n *\n * @param   {number} index\n *          The index to check\n *\n * @param   {number} maxIndex\n *          The maximum possible index\n *\n * @throws  {Error} if the timeRanges provided are over the maxIndex\n */\nfunction rangeCheck(fnName, index, maxIndex) {\n  if (typeof index !== 'number' || index < 0 || index > maxIndex) {\n    throw new Error(\"Failed to execute '\" + fnName + \"' on 'TimeRanges': The index provided (\" + index + \") is non-numeric or out of bounds (0-\" + maxIndex + \").\");\n  }\n}\n/**\n * Get the time for the specified index at the start or end\n * of a TimeRange object.\n *\n * @private\n * @param      {string} fnName\n *             The function name to use for logging\n *\n * @param      {string} valueIndex\n *             The property that should be used to get the time. should be\n *             'start' or 'end'\n *\n * @param      {Array} ranges\n *             An array of time ranges\n *\n * @param      {Array} [rangeIndex=0]\n *             The index to start the search at\n *\n * @return     {number}\n *             The time that offset at the specified index.\n *\n * @deprecated rangeIndex must be set to a value, in the future this will throw an error.\n * @throws     {Error} if rangeIndex is more than the length of ranges\n */\n\n\nfunction getRange(fnName, valueIndex, ranges, rangeIndex) {\n  rangeCheck(fnName, rangeIndex, ranges.length - 1);\n  return ranges[rangeIndex][valueIndex];\n}\n/**\n * Create a time range object given ranges of time.\n *\n * @private\n * @param   {Array} [ranges]\n *          An array of time ranges.\n */\n\n\nfunction createTimeRangesObj(ranges) {\n  if (ranges === undefined || ranges.length === 0) {\n    return {\n      length: 0,\n      start: function start() {\n        throw new Error('This TimeRanges object is empty');\n      },\n      end: function end() {\n        throw new Error('This TimeRanges object is empty');\n      }\n    };\n  }\n\n  return {\n    length: ranges.length,\n    start: getRange.bind(null, 'start', 0, ranges),\n    end: getRange.bind(null, 'end', 1, ranges)\n  };\n}\n/**\n * Create a `TimeRange` object which mimics an\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges|HTML5 TimeRanges instance}.\n *\n * @param {number|Array[]} start\n *        The start of a single range (a number) or an array of ranges (an\n *        array of arrays of two numbers each).\n *\n * @param {number} end\n *        The end of a single range. Cannot be used with the array form of\n *        the `start` argument.\n */\n\n\nfunction createTimeRanges(start, end) {\n  if (Array.isArray(start)) {\n    return createTimeRangesObj(start);\n  } else if (start === undefined || end === undefined) {\n    return createTimeRangesObj();\n  }\n\n  return createTimeRangesObj([[start, end]]);\n}\n\n/**\n * @file buffer.js\n * @module buffer\n */\n/**\n * Compute the percentage of the media that has been buffered.\n *\n * @param {TimeRange} buffered\n *        The current `TimeRange` object representing buffered time ranges\n *\n * @param {number} duration\n *        Total duration of the media\n *\n * @return {number}\n *         Percent buffered of the total duration in decimal form.\n */\n\nfunction bufferedPercent(buffered, duration) {\n  var bufferedDuration = 0;\n  var start;\n  var end;\n\n  if (!duration) {\n    return 0;\n  }\n\n  if (!buffered || !buffered.length) {\n    buffered = createTimeRanges(0, 0);\n  }\n\n  for (var i = 0; i < buffered.length; i++) {\n    start = buffered.start(i);\n    end = buffered.end(i); // buffered end can be bigger than duration by a very small fraction\n\n    if (end > duration) {\n      end = duration;\n    }\n\n    bufferedDuration += end - start;\n  }\n\n  return bufferedDuration / duration;\n}\n\n/**\n * @file fullscreen-api.js\n * @module fullscreen-api\n * @private\n */\n/**\n * Store the browser-specific methods for the fullscreen API.\n *\n * @type {Object}\n * @see [Specification]{@link https://fullscreen.spec.whatwg.org}\n * @see [Map Approach From Screenfull.js]{@link https://github.com/sindresorhus/screenfull.js}\n */\n\nvar FullscreenApi = {\n  prefixed: true\n}; // browser API methods\n\nvar apiMap = [['requestFullscreen', 'exitFullscreen', 'fullscreenElement', 'fullscreenEnabled', 'fullscreenchange', 'fullscreenerror', 'fullscreen'], // WebKit\n['webkitRequestFullscreen', 'webkitExitFullscreen', 'webkitFullscreenElement', 'webkitFullscreenEnabled', 'webkitfullscreenchange', 'webkitfullscreenerror', '-webkit-full-screen'], // Mozilla\n['mozRequestFullScreen', 'mozCancelFullScreen', 'mozFullScreenElement', 'mozFullScreenEnabled', 'mozfullscreenchange', 'mozfullscreenerror', '-moz-full-screen'], // Microsoft\n['msRequestFullscreen', 'msExitFullscreen', 'msFullscreenElement', 'msFullscreenEnabled', 'MSFullscreenChange', 'MSFullscreenError', '-ms-fullscreen']];\nvar specApi = apiMap[0];\nvar browserApi; // determine the supported set of functions\n\nfor (var i = 0; i < apiMap.length; i++) {\n  // check for exitFullscreen function\n  if (apiMap[i][1] in document) {\n    browserApi = apiMap[i];\n    break;\n  }\n} // map the browser API names to the spec API names\n\n\nif (browserApi) {\n  for (var _i = 0; _i < browserApi.length; _i++) {\n    FullscreenApi[specApi[_i]] = browserApi[_i];\n  }\n\n  FullscreenApi.prefixed = browserApi[0] !== specApi[0];\n}\n\n/**\n * @file media-error.js\n */\n/**\n * A Custom `MediaError` class which mimics the standard HTML5 `MediaError` class.\n *\n * @param {number|string|Object|MediaError} value\n *        This can be of multiple types:\n *        - number: should be a standard error code\n *        - string: an error message (the code will be 0)\n *        - Object: arbitrary properties\n *        - `MediaError` (native): used to populate a video.js `MediaError` object\n *        - `MediaError` (video.js): will return itself if it's already a\n *          video.js `MediaError` object.\n *\n * @see [MediaError Spec]{@link https://dev.w3.org/html5/spec-author-view/video.html#mediaerror}\n * @see [Encrypted MediaError Spec]{@link https://www.w3.org/TR/2013/WD-encrypted-media-20130510/#error-codes}\n *\n * @class MediaError\n */\n\nfunction MediaError(value) {\n  // Allow redundant calls to this constructor to avoid having `instanceof`\n  // checks peppered around the code.\n  if (value instanceof MediaError) {\n    return value;\n  }\n\n  if (typeof value === 'number') {\n    this.code = value;\n  } else if (typeof value === 'string') {\n    // default code is zero, so this is a custom error\n    this.message = value;\n  } else if (isObject(value)) {\n    // We assign the `code` property manually because native `MediaError` objects\n    // do not expose it as an own/enumerable property of the object.\n    if (typeof value.code === 'number') {\n      this.code = value.code;\n    }\n\n    assign(this, value);\n  }\n\n  if (!this.message) {\n    this.message = MediaError.defaultMessages[this.code] || '';\n  }\n}\n/**\n * The error code that refers two one of the defined `MediaError` types\n *\n * @type {Number}\n */\n\n\nMediaError.prototype.code = 0;\n/**\n * An optional message that to show with the error. Message is not part of the HTML5\n * video spec but allows for more informative custom errors.\n *\n * @type {String}\n */\n\nMediaError.prototype.message = '';\n/**\n * An optional status code that can be set by plugins to allow even more detail about\n * the error. For example a plugin might provide a specific HTTP status code and an\n * error message for that code. Then when the plugin gets that error this class will\n * know how to display an error message for it. This allows a custom message to show\n * up on the `Player` error overlay.\n *\n * @type {Array}\n */\n\nMediaError.prototype.status = null;\n/**\n * Errors indexed by the W3C standard. The order **CANNOT CHANGE**! See the\n * specification listed under {@link MediaError} for more information.\n *\n * @enum {array}\n * @readonly\n * @property {string} 0 - MEDIA_ERR_CUSTOM\n * @property {string} 1 - MEDIA_ERR_ABORTED\n * @property {string} 2 - MEDIA_ERR_NETWORK\n * @property {string} 3 - MEDIA_ERR_DECODE\n * @property {string} 4 - MEDIA_ERR_SRC_NOT_SUPPORTED\n * @property {string} 5 - MEDIA_ERR_ENCRYPTED\n */\n\nMediaError.errorTypes = ['MEDIA_ERR_CUSTOM', 'MEDIA_ERR_ABORTED', 'MEDIA_ERR_NETWORK', 'MEDIA_ERR_DECODE', 'MEDIA_ERR_SRC_NOT_SUPPORTED', 'MEDIA_ERR_ENCRYPTED'];\n/**\n * The default `MediaError` messages based on the {@link MediaError.errorTypes}.\n *\n * @type {Array}\n * @constant\n */\n\nMediaError.defaultMessages = {\n  1: 'You aborted the media playback',\n  2: 'A network error caused the media download to fail part-way.',\n  3: 'The media playback was aborted due to a corruption problem or because the media used features your browser did not support.',\n  4: 'The media could not be loaded, either because the server or network failed or because the format is not supported.',\n  5: 'The media is encrypted and we do not have the keys to decrypt it.'\n}; // Add types as properties on MediaError\n// e.g. MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED = 4;\n\nfor (var errNum = 0; errNum < MediaError.errorTypes.length; errNum++) {\n  MediaError[MediaError.errorTypes[errNum]] = errNum; // values should be accessible on both the class and instance\n\n  MediaError.prototype[MediaError.errorTypes[errNum]] = errNum;\n} // jsdocs for instance/static members added above\n\n/**\n * Returns whether an object is `Promise`-like (i.e. has a `then` method).\n *\n * @param  {Object}  value\n *         An object that may or may not be `Promise`-like.\n *\n * @return {boolean}\n *         Whether or not the object is `Promise`-like.\n */\nfunction isPromise(value) {\n  return value !== undefined && value !== null && typeof value.then === 'function';\n}\n/**\n * Silence a Promise-like object.\n *\n * This is useful for avoiding non-harmful, but potentially confusing \"uncaught\n * play promise\" rejection error messages.\n *\n * @param  {Object} value\n *         An object that may or may not be `Promise`-like.\n */\n\nfunction silencePromise(value) {\n  if (isPromise(value)) {\n    value.then(null, function (e) {});\n  }\n}\n\n/**\n * @file text-track-list-converter.js Utilities for capturing text track state and\n * re-creating tracks based on a capture.\n *\n * @module text-track-list-converter\n */\n\n/**\n * Examine a single {@link TextTrack} and return a JSON-compatible javascript object that\n * represents the {@link TextTrack}'s state.\n *\n * @param {TextTrack} track\n *        The text track to query.\n *\n * @return {Object}\n *         A serializable javascript representation of the TextTrack.\n * @private\n */\nvar trackToJson_ = function trackToJson_(track) {\n  var ret = ['kind', 'label', 'language', 'id', 'inBandMetadataTrackDispatchType', 'mode', 'src'].reduce(function (acc, prop, i) {\n    if (track[prop]) {\n      acc[prop] = track[prop];\n    }\n\n    return acc;\n  }, {\n    cues: track.cues && Array.prototype.map.call(track.cues, function (cue) {\n      return {\n        startTime: cue.startTime,\n        endTime: cue.endTime,\n        text: cue.text,\n        id: cue.id\n      };\n    })\n  });\n  return ret;\n};\n/**\n * Examine a {@link Tech} and return a JSON-compatible javascript array that represents the\n * state of all {@link TextTrack}s currently configured. The return array is compatible with\n * {@link text-track-list-converter:jsonToTextTracks}.\n *\n * @param {Tech} tech\n *        The tech object to query\n *\n * @return {Array}\n *         A serializable javascript representation of the {@link Tech}s\n *         {@link TextTrackList}.\n */\n\n\nvar textTracksToJson = function textTracksToJson(tech) {\n  var trackEls = tech.$$('track');\n  var trackObjs = Array.prototype.map.call(trackEls, function (t) {\n    return t.track;\n  });\n  var tracks = Array.prototype.map.call(trackEls, function (trackEl) {\n    var json = trackToJson_(trackEl.track);\n\n    if (trackEl.src) {\n      json.src = trackEl.src;\n    }\n\n    return json;\n  });\n  return tracks.concat(Array.prototype.filter.call(tech.textTracks(), function (track) {\n    return trackObjs.indexOf(track) === -1;\n  }).map(trackToJson_));\n};\n/**\n * Create a set of remote {@link TextTrack}s on a {@link Tech} based on an array of javascript\n * object {@link TextTrack} representations.\n *\n * @param {Array} json\n *        An array of `TextTrack` representation objects, like those that would be\n *        produced by `textTracksToJson`.\n *\n * @param {Tech} tech\n *        The `Tech` to create the `TextTrack`s on.\n */\n\n\nvar jsonToTextTracks = function jsonToTextTracks(json, tech) {\n  json.forEach(function (track) {\n    var addedTrack = tech.addRemoteTextTrack(track).track;\n\n    if (!track.src && track.cues) {\n      track.cues.forEach(function (cue) {\n        return addedTrack.addCue(cue);\n      });\n    }\n  });\n  return tech.textTracks();\n};\n\nvar textTrackConverter = {\n  textTracksToJson: textTracksToJson,\n  jsonToTextTracks: jsonToTextTracks,\n  trackToJson_: trackToJson_\n};\n\nvar MODAL_CLASS_NAME = 'vjs-modal-dialog';\n/**\n * The `ModalDialog` displays over the video and its controls, which blocks\n * interaction with the player until it is closed.\n *\n * Modal dialogs include a \"Close\" button and will close when that button\n * is activated - or when ESC is pressed anywhere.\n *\n * @extends Component\n */\n\nvar ModalDialog =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(ModalDialog, _Component);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Mixed} [options.content=undefined]\n   *        Provide customized content for this modal.\n   *\n   * @param {string} [options.description]\n   *        A text description for the modal, primarily for accessibility.\n   *\n   * @param {boolean} [options.fillAlways=false]\n   *        Normally, modals are automatically filled only the first time\n   *        they open. This tells the modal to refresh its content\n   *        every time it opens.\n   *\n   * @param {string} [options.label]\n   *        A text label for the modal, primarily for accessibility.\n   *\n   * @param {boolean} [options.pauseOnOpen=true]\n   *        If `true`, playback will will be paused if playing when\n   *        the modal opens, and resumed when it closes.\n   *\n   * @param {boolean} [options.temporary=true]\n   *        If `true`, the modal can only be opened once; it will be\n   *        disposed as soon as it's closed.\n   *\n   * @param {boolean} [options.uncloseable=false]\n   *        If `true`, the user will not be able to close the modal\n   *        through the UI in the normal ways. Programmatic closing is\n   *        still possible.\n   */\n  function ModalDialog(player, options) {\n    var _this;\n\n    _this = _Component.call(this, player, options) || this;\n    _this.opened_ = _this.hasBeenOpened_ = _this.hasBeenFilled_ = false;\n\n    _this.closeable(!_this.options_.uncloseable);\n\n    _this.content(_this.options_.content); // Make sure the contentEl is defined AFTER any children are initialized\n    // because we only want the contents of the modal in the contentEl\n    // (not the UI elements like the close button).\n\n\n    _this.contentEl_ = createEl('div', {\n      className: MODAL_CLASS_NAME + \"-content\"\n    }, {\n      role: 'document'\n    });\n    _this.descEl_ = createEl('p', {\n      className: MODAL_CLASS_NAME + \"-description vjs-control-text\",\n      id: _this.el().getAttribute('aria-describedby')\n    });\n    textContent(_this.descEl_, _this.description());\n\n    _this.el_.appendChild(_this.descEl_);\n\n    _this.el_.appendChild(_this.contentEl_);\n\n    return _this;\n  }\n  /**\n   * Create the `ModalDialog`'s DOM element\n   *\n   * @return {Element}\n   *         The DOM element that gets created.\n   */\n\n\n  var _proto = ModalDialog.prototype;\n\n  _proto.createEl = function createEl() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: this.buildCSSClass(),\n      tabIndex: -1\n    }, {\n      'aria-describedby': this.id() + \"_description\",\n      'aria-hidden': 'true',\n      'aria-label': this.label(),\n      'role': 'dialog'\n    });\n  };\n\n  _proto.dispose = function dispose() {\n    this.contentEl_ = null;\n    this.descEl_ = null;\n    this.previouslyActiveEl_ = null;\n\n    _Component.prototype.dispose.call(this);\n  }\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  ;\n\n  _proto.buildCSSClass = function buildCSSClass() {\n    return MODAL_CLASS_NAME + \" vjs-hidden \" + _Component.prototype.buildCSSClass.call(this);\n  }\n  /**\n   * Returns the label string for this modal. Primarily used for accessibility.\n   *\n   * @return {string}\n   *         the localized or raw label of this modal.\n   */\n  ;\n\n  _proto.label = function label() {\n    return this.localize(this.options_.label || 'Modal Window');\n  }\n  /**\n   * Returns the description string for this modal. Primarily used for\n   * accessibility.\n   *\n   * @return {string}\n   *         The localized or raw description of this modal.\n   */\n  ;\n\n  _proto.description = function description() {\n    var desc = this.options_.description || this.localize('This is a modal window.'); // Append a universal closeability message if the modal is closeable.\n\n    if (this.closeable()) {\n      desc += ' ' + this.localize('This modal can be closed by pressing the Escape key or activating the close button.');\n    }\n\n    return desc;\n  }\n  /**\n   * Opens the modal.\n   *\n   * @fires ModalDialog#beforemodalopen\n   * @fires ModalDialog#modalopen\n   */\n  ;\n\n  _proto.open = function open() {\n    if (!this.opened_) {\n      var player = this.player();\n      /**\n        * Fired just before a `ModalDialog` is opened.\n        *\n        * @event ModalDialog#beforemodalopen\n        * @type {EventTarget~Event}\n        */\n\n      this.trigger('beforemodalopen');\n      this.opened_ = true; // Fill content if the modal has never opened before and\n      // never been filled.\n\n      if (this.options_.fillAlways || !this.hasBeenOpened_ && !this.hasBeenFilled_) {\n        this.fill();\n      } // If the player was playing, pause it and take note of its previously\n      // playing state.\n\n\n      this.wasPlaying_ = !player.paused();\n\n      if (this.options_.pauseOnOpen && this.wasPlaying_) {\n        player.pause();\n      }\n\n      this.on('keydown', this.handleKeyDown); // Hide controls and note if they were enabled.\n\n      this.hadControls_ = player.controls();\n      player.controls(false);\n      this.show();\n      this.conditionalFocus_();\n      this.el().setAttribute('aria-hidden', 'false');\n      /**\n        * Fired just after a `ModalDialog` is opened.\n        *\n        * @event ModalDialog#modalopen\n        * @type {EventTarget~Event}\n        */\n\n      this.trigger('modalopen');\n      this.hasBeenOpened_ = true;\n    }\n  }\n  /**\n   * If the `ModalDialog` is currently open or closed.\n   *\n   * @param  {boolean} [value]\n   *         If given, it will open (`true`) or close (`false`) the modal.\n   *\n   * @return {boolean}\n   *         the current open state of the modaldialog\n   */\n  ;\n\n  _proto.opened = function opened(value) {\n    if (typeof value === 'boolean') {\n      this[value ? 'open' : 'close']();\n    }\n\n    return this.opened_;\n  }\n  /**\n   * Closes the modal, does nothing if the `ModalDialog` is\n   * not open.\n   *\n   * @fires ModalDialog#beforemodalclose\n   * @fires ModalDialog#modalclose\n   */\n  ;\n\n  _proto.close = function close() {\n    if (!this.opened_) {\n      return;\n    }\n\n    var player = this.player();\n    /**\n      * Fired just before a `ModalDialog` is closed.\n      *\n      * @event ModalDialog#beforemodalclose\n      * @type {EventTarget~Event}\n      */\n\n    this.trigger('beforemodalclose');\n    this.opened_ = false;\n\n    if (this.wasPlaying_ && this.options_.pauseOnOpen) {\n      player.play();\n    }\n\n    this.off('keydown', this.handleKeyDown);\n\n    if (this.hadControls_) {\n      player.controls(true);\n    }\n\n    this.hide();\n    this.el().setAttribute('aria-hidden', 'true');\n    /**\n      * Fired just after a `ModalDialog` is closed.\n      *\n      * @event ModalDialog#modalclose\n      * @type {EventTarget~Event}\n      */\n\n    this.trigger('modalclose');\n    this.conditionalBlur_();\n\n    if (this.options_.temporary) {\n      this.dispose();\n    }\n  }\n  /**\n   * Check to see if the `ModalDialog` is closeable via the UI.\n   *\n   * @param  {boolean} [value]\n   *         If given as a boolean, it will set the `closeable` option.\n   *\n   * @return {boolean}\n   *         Returns the final value of the closable option.\n   */\n  ;\n\n  _proto.closeable = function closeable(value) {\n    if (typeof value === 'boolean') {\n      var closeable = this.closeable_ = !!value;\n      var close = this.getChild('closeButton'); // If this is being made closeable and has no close button, add one.\n\n      if (closeable && !close) {\n        // The close button should be a child of the modal - not its\n        // content element, so temporarily change the content element.\n        var temp = this.contentEl_;\n        this.contentEl_ = this.el_;\n        close = this.addChild('closeButton', {\n          controlText: 'Close Modal Dialog'\n        });\n        this.contentEl_ = temp;\n        this.on(close, 'close', this.close);\n      } // If this is being made uncloseable and has a close button, remove it.\n\n\n      if (!closeable && close) {\n        this.off(close, 'close', this.close);\n        this.removeChild(close);\n        close.dispose();\n      }\n    }\n\n    return this.closeable_;\n  }\n  /**\n   * Fill the modal's content element with the modal's \"content\" option.\n   * The content element will be emptied before this change takes place.\n   */\n  ;\n\n  _proto.fill = function fill() {\n    this.fillWith(this.content());\n  }\n  /**\n   * Fill the modal's content element with arbitrary content.\n   * The content element will be emptied before this change takes place.\n   *\n   * @fires ModalDialog#beforemodalfill\n   * @fires ModalDialog#modalfill\n   *\n   * @param {Mixed} [content]\n   *        The same rules apply to this as apply to the `content` option.\n   */\n  ;\n\n  _proto.fillWith = function fillWith(content) {\n    var contentEl = this.contentEl();\n    var parentEl = contentEl.parentNode;\n    var nextSiblingEl = contentEl.nextSibling;\n    /**\n      * Fired just before a `ModalDialog` is filled with content.\n      *\n      * @event ModalDialog#beforemodalfill\n      * @type {EventTarget~Event}\n      */\n\n    this.trigger('beforemodalfill');\n    this.hasBeenFilled_ = true; // Detach the content element from the DOM before performing\n    // manipulation to avoid modifying the live DOM multiple times.\n\n    parentEl.removeChild(contentEl);\n    this.empty();\n    insertContent(contentEl, content);\n    /**\n     * Fired just after a `ModalDialog` is filled with content.\n     *\n     * @event ModalDialog#modalfill\n     * @type {EventTarget~Event}\n     */\n\n    this.trigger('modalfill'); // Re-inject the re-filled content element.\n\n    if (nextSiblingEl) {\n      parentEl.insertBefore(contentEl, nextSiblingEl);\n    } else {\n      parentEl.appendChild(contentEl);\n    } // make sure that the close button is last in the dialog DOM\n\n\n    var closeButton = this.getChild('closeButton');\n\n    if (closeButton) {\n      parentEl.appendChild(closeButton.el_);\n    }\n  }\n  /**\n   * Empties the content element. This happens anytime the modal is filled.\n   *\n   * @fires ModalDialog#beforemodalempty\n   * @fires ModalDialog#modalempty\n   */\n  ;\n\n  _proto.empty = function empty() {\n    /**\n    * Fired just before a `ModalDialog` is emptied.\n    *\n    * @event ModalDialog#beforemodalempty\n    * @type {EventTarget~Event}\n    */\n    this.trigger('beforemodalempty');\n    emptyEl(this.contentEl());\n    /**\n    * Fired just after a `ModalDialog` is emptied.\n    *\n    * @event ModalDialog#modalempty\n    * @type {EventTarget~Event}\n    */\n\n    this.trigger('modalempty');\n  }\n  /**\n   * Gets or sets the modal content, which gets normalized before being\n   * rendered into the DOM.\n   *\n   * This does not update the DOM or fill the modal, but it is called during\n   * that process.\n   *\n   * @param  {Mixed} [value]\n   *         If defined, sets the internal content value to be used on the\n   *         next call(s) to `fill`. This value is normalized before being\n   *         inserted. To \"clear\" the internal content value, pass `null`.\n   *\n   * @return {Mixed}\n   *         The current content of the modal dialog\n   */\n  ;\n\n  _proto.content = function content(value) {\n    if (typeof value !== 'undefined') {\n      this.content_ = value;\n    }\n\n    return this.content_;\n  }\n  /**\n   * conditionally focus the modal dialog if focus was previously on the player.\n   *\n   * @private\n   */\n  ;\n\n  _proto.conditionalFocus_ = function conditionalFocus_() {\n    var activeEl = document.activeElement;\n    var playerEl = this.player_.el_;\n    this.previouslyActiveEl_ = null;\n\n    if (playerEl.contains(activeEl) || playerEl === activeEl) {\n      this.previouslyActiveEl_ = activeEl;\n      this.focus();\n    }\n  }\n  /**\n   * conditionally blur the element and refocus the last focused element\n   *\n   * @private\n   */\n  ;\n\n  _proto.conditionalBlur_ = function conditionalBlur_() {\n    if (this.previouslyActiveEl_) {\n      this.previouslyActiveEl_.focus();\n      this.previouslyActiveEl_ = null;\n    }\n  }\n  /**\n   * Keydown handler. Attached when modal is focused.\n   *\n   * @listens keydown\n   */\n  ;\n\n  _proto.handleKeyDown = function handleKeyDown(event) {\n    // Do not allow keydowns to reach out of the modal dialog.\n    event.stopPropagation();\n\n    if (keycode.isEventKey(event, 'Escape') && this.closeable()) {\n      event.preventDefault();\n      this.close();\n      return;\n    } // exit early if it isn't a tab key\n\n\n    if (!keycode.isEventKey(event, 'Tab')) {\n      return;\n    }\n\n    var focusableEls = this.focusableEls_();\n    var activeEl = this.el_.querySelector(':focus');\n    var focusIndex;\n\n    for (var i = 0; i < focusableEls.length; i++) {\n      if (activeEl === focusableEls[i]) {\n        focusIndex = i;\n        break;\n      }\n    }\n\n    if (document.activeElement === this.el_) {\n      focusIndex = 0;\n    }\n\n    if (event.shiftKey && focusIndex === 0) {\n      focusableEls[focusableEls.length - 1].focus();\n      event.preventDefault();\n    } else if (!event.shiftKey && focusIndex === focusableEls.length - 1) {\n      focusableEls[0].focus();\n      event.preventDefault();\n    }\n  }\n  /**\n   * get all focusable elements\n   *\n   * @private\n   */\n  ;\n\n  _proto.focusableEls_ = function focusableEls_() {\n    var allChildren = this.el_.querySelectorAll('*');\n    return Array.prototype.filter.call(allChildren, function (child) {\n      return (child instanceof window$1.HTMLAnchorElement || child instanceof window$1.HTMLAreaElement) && child.hasAttribute('href') || (child instanceof window$1.HTMLInputElement || child instanceof window$1.HTMLSelectElement || child instanceof window$1.HTMLTextAreaElement || child instanceof window$1.HTMLButtonElement) && !child.hasAttribute('disabled') || child instanceof window$1.HTMLIFrameElement || child instanceof window$1.HTMLObjectElement || child instanceof window$1.HTMLEmbedElement || child.hasAttribute('tabindex') && child.getAttribute('tabindex') !== -1 || child.hasAttribute('contenteditable');\n    });\n  };\n\n  return ModalDialog;\n}(Component);\n/**\n * Default options for `ModalDialog` default options.\n *\n * @type {Object}\n * @private\n */\n\n\nModalDialog.prototype.options_ = {\n  pauseOnOpen: true,\n  temporary: true\n};\nComponent.registerComponent('ModalDialog', ModalDialog);\n\n/**\n * Common functionaliy between {@link TextTrackList}, {@link AudioTrackList}, and\n * {@link VideoTrackList}\n *\n * @extends EventTarget\n */\n\nvar TrackList =\n/*#__PURE__*/\nfunction (_EventTarget) {\n  _inheritsLoose(TrackList, _EventTarget);\n\n  /**\n   * Create an instance of this class\n   *\n   * @param {Track[]} tracks\n   *        A list of tracks to initialize the list with.\n   *\n   * @abstract\n   */\n  function TrackList(tracks) {\n    var _this;\n\n    if (tracks === void 0) {\n      tracks = [];\n    }\n\n    _this = _EventTarget.call(this) || this;\n    _this.tracks_ = [];\n    /**\n     * @memberof TrackList\n     * @member {number} length\n     *         The current number of `Track`s in the this Trackist.\n     * @instance\n     */\n\n    Object.defineProperty(_assertThisInitialized(_this), 'length', {\n      get: function get() {\n        return this.tracks_.length;\n      }\n    });\n\n    for (var i = 0; i < tracks.length; i++) {\n      _this.addTrack(tracks[i]);\n    }\n\n    return _this;\n  }\n  /**\n   * Add a {@link Track} to the `TrackList`\n   *\n   * @param {Track} track\n   *        The audio, video, or text track to add to the list.\n   *\n   * @fires TrackList#addtrack\n   */\n\n\n  var _proto = TrackList.prototype;\n\n  _proto.addTrack = function addTrack(track) {\n    var index = this.tracks_.length;\n\n    if (!('' + index in this)) {\n      Object.defineProperty(this, index, {\n        get: function get() {\n          return this.tracks_[index];\n        }\n      });\n    } // Do not add duplicate tracks\n\n\n    if (this.tracks_.indexOf(track) === -1) {\n      this.tracks_.push(track);\n      /**\n       * Triggered when a track is added to a track list.\n       *\n       * @event TrackList#addtrack\n       * @type {EventTarget~Event}\n       * @property {Track} track\n       *           A reference to track that was added.\n       */\n\n      this.trigger({\n        track: track,\n        type: 'addtrack',\n        target: this\n      });\n    }\n  }\n  /**\n   * Remove a {@link Track} from the `TrackList`\n   *\n   * @param {Track} rtrack\n   *        The audio, video, or text track to remove from the list.\n   *\n   * @fires TrackList#removetrack\n   */\n  ;\n\n  _proto.removeTrack = function removeTrack(rtrack) {\n    var track;\n\n    for (var i = 0, l = this.length; i < l; i++) {\n      if (this[i] === rtrack) {\n        track = this[i];\n\n        if (track.off) {\n          track.off();\n        }\n\n        this.tracks_.splice(i, 1);\n        break;\n      }\n    }\n\n    if (!track) {\n      return;\n    }\n    /**\n     * Triggered when a track is removed from track list.\n     *\n     * @event TrackList#removetrack\n     * @type {EventTarget~Event}\n     * @property {Track} track\n     *           A reference to track that was removed.\n     */\n\n\n    this.trigger({\n      track: track,\n      type: 'removetrack',\n      target: this\n    });\n  }\n  /**\n   * Get a Track from the TrackList by a tracks id\n   *\n   * @param {string} id - the id of the track to get\n   * @method getTrackById\n   * @return {Track}\n   * @private\n   */\n  ;\n\n  _proto.getTrackById = function getTrackById(id) {\n    var result = null;\n\n    for (var i = 0, l = this.length; i < l; i++) {\n      var track = this[i];\n\n      if (track.id === id) {\n        result = track;\n        break;\n      }\n    }\n\n    return result;\n  };\n\n  return TrackList;\n}(EventTarget);\n/**\n * Triggered when a different track is selected/enabled.\n *\n * @event TrackList#change\n * @type {EventTarget~Event}\n */\n\n/**\n * Events that can be called with on + eventName. See {@link EventHandler}.\n *\n * @property {Object} TrackList#allowedEvents_\n * @private\n */\n\n\nTrackList.prototype.allowedEvents_ = {\n  change: 'change',\n  addtrack: 'addtrack',\n  removetrack: 'removetrack'\n}; // emulate attribute EventHandler support to allow for feature detection\n\nfor (var event in TrackList.prototype.allowedEvents_) {\n  TrackList.prototype['on' + event] = null;\n}\n\n/**\n * Anywhere we call this function we diverge from the spec\n * as we only support one enabled audiotrack at a time\n *\n * @param {AudioTrackList} list\n *        list to work on\n *\n * @param {AudioTrack} track\n *        The track to skip\n *\n * @private\n */\n\nvar disableOthers = function disableOthers(list, track) {\n  for (var i = 0; i < list.length; i++) {\n    if (!Object.keys(list[i]).length || track.id === list[i].id) {\n      continue;\n    } // another audio track is enabled, disable it\n\n\n    list[i].enabled = false;\n  }\n};\n/**\n * The current list of {@link AudioTrack} for a media file.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist}\n * @extends TrackList\n */\n\n\nvar AudioTrackList =\n/*#__PURE__*/\nfunction (_TrackList) {\n  _inheritsLoose(AudioTrackList, _TrackList);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {AudioTrack[]} [tracks=[]]\n   *        A list of `AudioTrack` to instantiate the list with.\n   */\n  function AudioTrackList(tracks) {\n    var _this;\n\n    if (tracks === void 0) {\n      tracks = [];\n    }\n\n    // make sure only 1 track is enabled\n    // sorted from last index to first index\n    for (var i = tracks.length - 1; i >= 0; i--) {\n      if (tracks[i].enabled) {\n        disableOthers(tracks, tracks[i]);\n        break;\n      }\n    }\n\n    _this = _TrackList.call(this, tracks) || this;\n    _this.changing_ = false;\n    return _this;\n  }\n  /**\n   * Add an {@link AudioTrack} to the `AudioTrackList`.\n   *\n   * @param {AudioTrack} track\n   *        The AudioTrack to add to the list\n   *\n   * @fires TrackList#addtrack\n   */\n\n\n  var _proto = AudioTrackList.prototype;\n\n  _proto.addTrack = function addTrack(track) {\n    var _this2 = this;\n\n    if (track.enabled) {\n      disableOthers(this, track);\n    }\n\n    _TrackList.prototype.addTrack.call(this, track); // native tracks don't have this\n\n\n    if (!track.addEventListener) {\n      return;\n    }\n\n    track.enabledChange_ = function () {\n      // when we are disabling other tracks (since we don't support\n      // more than one track at a time) we will set changing_\n      // to true so that we don't trigger additional change events\n      if (_this2.changing_) {\n        return;\n      }\n\n      _this2.changing_ = true;\n      disableOthers(_this2, track);\n      _this2.changing_ = false;\n\n      _this2.trigger('change');\n    };\n    /**\n     * @listens AudioTrack#enabledchange\n     * @fires TrackList#change\n     */\n\n\n    track.addEventListener('enabledchange', track.enabledChange_);\n  };\n\n  _proto.removeTrack = function removeTrack(rtrack) {\n    _TrackList.prototype.removeTrack.call(this, rtrack);\n\n    if (rtrack.removeEventListener && rtrack.enabledChange_) {\n      rtrack.removeEventListener('enabledchange', rtrack.enabledChange_);\n      rtrack.enabledChange_ = null;\n    }\n  };\n\n  return AudioTrackList;\n}(TrackList);\n\n/**\n * Un-select all other {@link VideoTrack}s that are selected.\n *\n * @param {VideoTrackList} list\n *        list to work on\n *\n * @param {VideoTrack} track\n *        The track to skip\n *\n * @private\n */\n\nvar disableOthers$1 = function disableOthers(list, track) {\n  for (var i = 0; i < list.length; i++) {\n    if (!Object.keys(list[i]).length || track.id === list[i].id) {\n      continue;\n    } // another video track is enabled, disable it\n\n\n    list[i].selected = false;\n  }\n};\n/**\n * The current list of {@link VideoTrack} for a video.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#videotracklist}\n * @extends TrackList\n */\n\n\nvar VideoTrackList =\n/*#__PURE__*/\nfunction (_TrackList) {\n  _inheritsLoose(VideoTrackList, _TrackList);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {VideoTrack[]} [tracks=[]]\n   *        A list of `VideoTrack` to instantiate the list with.\n   */\n  function VideoTrackList(tracks) {\n    var _this;\n\n    if (tracks === void 0) {\n      tracks = [];\n    }\n\n    // make sure only 1 track is enabled\n    // sorted from last index to first index\n    for (var i = tracks.length - 1; i >= 0; i--) {\n      if (tracks[i].selected) {\n        disableOthers$1(tracks, tracks[i]);\n        break;\n      }\n    }\n\n    _this = _TrackList.call(this, tracks) || this;\n    _this.changing_ = false;\n    /**\n     * @member {number} VideoTrackList#selectedIndex\n     *         The current index of the selected {@link VideoTrack`}.\n     */\n\n    Object.defineProperty(_assertThisInitialized(_this), 'selectedIndex', {\n      get: function get() {\n        for (var _i = 0; _i < this.length; _i++) {\n          if (this[_i].selected) {\n            return _i;\n          }\n        }\n\n        return -1;\n      },\n      set: function set() {}\n    });\n    return _this;\n  }\n  /**\n   * Add a {@link VideoTrack} to the `VideoTrackList`.\n   *\n   * @param {VideoTrack} track\n   *        The VideoTrack to add to the list\n   *\n   * @fires TrackList#addtrack\n   */\n\n\n  var _proto = VideoTrackList.prototype;\n\n  _proto.addTrack = function addTrack(track) {\n    var _this2 = this;\n\n    if (track.selected) {\n      disableOthers$1(this, track);\n    }\n\n    _TrackList.prototype.addTrack.call(this, track); // native tracks don't have this\n\n\n    if (!track.addEventListener) {\n      return;\n    }\n\n    track.selectedChange_ = function () {\n      if (_this2.changing_) {\n        return;\n      }\n\n      _this2.changing_ = true;\n      disableOthers$1(_this2, track);\n      _this2.changing_ = false;\n\n      _this2.trigger('change');\n    };\n    /**\n     * @listens VideoTrack#selectedchange\n     * @fires TrackList#change\n     */\n\n\n    track.addEventListener('selectedchange', track.selectedChange_);\n  };\n\n  _proto.removeTrack = function removeTrack(rtrack) {\n    _TrackList.prototype.removeTrack.call(this, rtrack);\n\n    if (rtrack.removeEventListener && rtrack.selectedChange_) {\n      rtrack.removeEventListener('selectedchange', rtrack.selectedChange_);\n      rtrack.selectedChange_ = null;\n    }\n  };\n\n  return VideoTrackList;\n}(TrackList);\n\n/**\n * The current list of {@link TextTrack} for a media file.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttracklist}\n * @extends TrackList\n */\n\nvar TextTrackList =\n/*#__PURE__*/\nfunction (_TrackList) {\n  _inheritsLoose(TextTrackList, _TrackList);\n\n  function TextTrackList() {\n    return _TrackList.apply(this, arguments) || this;\n  }\n\n  var _proto = TextTrackList.prototype;\n\n  /**\n   * Add a {@link TextTrack} to the `TextTrackList`\n   *\n   * @param {TextTrack} track\n   *        The text track to add to the list.\n   *\n   * @fires TrackList#addtrack\n   */\n  _proto.addTrack = function addTrack(track) {\n    var _this = this;\n\n    _TrackList.prototype.addTrack.call(this, track);\n\n    if (!this.queueChange_) {\n      this.queueChange_ = function () {\n        return _this.queueTrigger('change');\n      };\n    }\n\n    if (!this.triggerSelectedlanguagechange) {\n      this.triggerSelectedlanguagechange_ = function () {\n        return _this.trigger('selectedlanguagechange');\n      };\n    }\n    /**\n     * @listens TextTrack#modechange\n     * @fires TrackList#change\n     */\n\n\n    track.addEventListener('modechange', this.queueChange_);\n    var nonLanguageTextTrackKind = ['metadata', 'chapters'];\n\n    if (nonLanguageTextTrackKind.indexOf(track.kind) === -1) {\n      track.addEventListener('modechange', this.triggerSelectedlanguagechange_);\n    }\n  };\n\n  _proto.removeTrack = function removeTrack(rtrack) {\n    _TrackList.prototype.removeTrack.call(this, rtrack); // manually remove the event handlers we added\n\n\n    if (rtrack.removeEventListener) {\n      if (this.queueChange_) {\n        rtrack.removeEventListener('modechange', this.queueChange_);\n      }\n\n      if (this.selectedlanguagechange_) {\n        rtrack.removeEventListener('modechange', this.triggerSelectedlanguagechange_);\n      }\n    }\n  };\n\n  return TextTrackList;\n}(TrackList);\n\n/**\n * @file html-track-element-list.js\n */\n\n/**\n * The current list of {@link HtmlTrackElement}s.\n */\nvar HtmlTrackElementList =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Create an instance of this class.\n   *\n   * @param {HtmlTrackElement[]} [tracks=[]]\n   *        A list of `HtmlTrackElement` to instantiate the list with.\n   */\n  function HtmlTrackElementList(trackElements) {\n    if (trackElements === void 0) {\n      trackElements = [];\n    }\n\n    this.trackElements_ = [];\n    /**\n     * @memberof HtmlTrackElementList\n     * @member {number} length\n     *         The current number of `Track`s in the this Trackist.\n     * @instance\n     */\n\n    Object.defineProperty(this, 'length', {\n      get: function get() {\n        return this.trackElements_.length;\n      }\n    });\n\n    for (var i = 0, length = trackElements.length; i < length; i++) {\n      this.addTrackElement_(trackElements[i]);\n    }\n  }\n  /**\n   * Add an {@link HtmlTrackElement} to the `HtmlTrackElementList`\n   *\n   * @param {HtmlTrackElement} trackElement\n   *        The track element to add to the list.\n   *\n   * @private\n   */\n\n\n  var _proto = HtmlTrackElementList.prototype;\n\n  _proto.addTrackElement_ = function addTrackElement_(trackElement) {\n    var index = this.trackElements_.length;\n\n    if (!('' + index in this)) {\n      Object.defineProperty(this, index, {\n        get: function get() {\n          return this.trackElements_[index];\n        }\n      });\n    } // Do not add duplicate elements\n\n\n    if (this.trackElements_.indexOf(trackElement) === -1) {\n      this.trackElements_.push(trackElement);\n    }\n  }\n  /**\n   * Get an {@link HtmlTrackElement} from the `HtmlTrackElementList` given an\n   * {@link TextTrack}.\n   *\n   * @param {TextTrack} track\n   *        The track associated with a track element.\n   *\n   * @return {HtmlTrackElement|undefined}\n   *         The track element that was found or undefined.\n   *\n   * @private\n   */\n  ;\n\n  _proto.getTrackElementByTrack_ = function getTrackElementByTrack_(track) {\n    var trackElement_;\n\n    for (var i = 0, length = this.trackElements_.length; i < length; i++) {\n      if (track === this.trackElements_[i].track) {\n        trackElement_ = this.trackElements_[i];\n        break;\n      }\n    }\n\n    return trackElement_;\n  }\n  /**\n   * Remove a {@link HtmlTrackElement} from the `HtmlTrackElementList`\n   *\n   * @param {HtmlTrackElement} trackElement\n   *        The track element to remove from the list.\n   *\n   * @private\n   */\n  ;\n\n  _proto.removeTrackElement_ = function removeTrackElement_(trackElement) {\n    for (var i = 0, length = this.trackElements_.length; i < length; i++) {\n      if (trackElement === this.trackElements_[i]) {\n        if (this.trackElements_[i].track && typeof this.trackElements_[i].track.off === 'function') {\n          this.trackElements_[i].track.off();\n        }\n\n        if (typeof this.trackElements_[i].off === 'function') {\n          this.trackElements_[i].off();\n        }\n\n        this.trackElements_.splice(i, 1);\n        break;\n      }\n    }\n  };\n\n  return HtmlTrackElementList;\n}();\n\n/**\n * @file text-track-cue-list.js\n */\n\n/**\n * @typedef {Object} TextTrackCueList~TextTrackCue\n *\n * @property {string} id\n *           The unique id for this text track cue\n *\n * @property {number} startTime\n *           The start time for this text track cue\n *\n * @property {number} endTime\n *           The end time for this text track cue\n *\n * @property {boolean} pauseOnExit\n *           Pause when the end time is reached if true.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackcue}\n */\n\n/**\n * A List of TextTrackCues.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackcuelist}\n */\nvar TextTrackCueList =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Create an instance of this class..\n   *\n   * @param {Array} cues\n   *        A list of cues to be initialized with\n   */\n  function TextTrackCueList(cues) {\n    TextTrackCueList.prototype.setCues_.call(this, cues);\n    /**\n     * @memberof TextTrackCueList\n     * @member {number} length\n     *         The current number of `TextTrackCue`s in the TextTrackCueList.\n     * @instance\n     */\n\n    Object.defineProperty(this, 'length', {\n      get: function get() {\n        return this.length_;\n      }\n    });\n  }\n  /**\n   * A setter for cues in this list. Creates getters\n   * an an index for the cues.\n   *\n   * @param {Array} cues\n   *        An array of cues to set\n   *\n   * @private\n   */\n\n\n  var _proto = TextTrackCueList.prototype;\n\n  _proto.setCues_ = function setCues_(cues) {\n    var oldLength = this.length || 0;\n    var i = 0;\n    var l = cues.length;\n    this.cues_ = cues;\n    this.length_ = cues.length;\n\n    var defineProp = function defineProp(index) {\n      if (!('' + index in this)) {\n        Object.defineProperty(this, '' + index, {\n          get: function get() {\n            return this.cues_[index];\n          }\n        });\n      }\n    };\n\n    if (oldLength < l) {\n      i = oldLength;\n\n      for (; i < l; i++) {\n        defineProp.call(this, i);\n      }\n    }\n  }\n  /**\n   * Get a `TextTrackCue` that is currently in the `TextTrackCueList` by id.\n   *\n   * @param {string} id\n   *        The id of the cue that should be searched for.\n   *\n   * @return {TextTrackCueList~TextTrackCue|null}\n   *         A single cue or null if none was found.\n   */\n  ;\n\n  _proto.getCueById = function getCueById(id) {\n    var result = null;\n\n    for (var i = 0, l = this.length; i < l; i++) {\n      var cue = this[i];\n\n      if (cue.id === id) {\n        result = cue;\n        break;\n      }\n    }\n\n    return result;\n  };\n\n  return TextTrackCueList;\n}();\n\n/**\n * @file track-kinds.js\n */\n\n/**\n * All possible `VideoTrackKind`s\n *\n * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-videotrack-kind\n * @typedef VideoTrack~Kind\n * @enum\n */\nvar VideoTrackKind = {\n  alternative: 'alternative',\n  captions: 'captions',\n  main: 'main',\n  sign: 'sign',\n  subtitles: 'subtitles',\n  commentary: 'commentary'\n};\n/**\n * All possible `AudioTrackKind`s\n *\n * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-audiotrack-kind\n * @typedef AudioTrack~Kind\n * @enum\n */\n\nvar AudioTrackKind = {\n  'alternative': 'alternative',\n  'descriptions': 'descriptions',\n  'main': 'main',\n  'main-desc': 'main-desc',\n  'translation': 'translation',\n  'commentary': 'commentary'\n};\n/**\n * All possible `TextTrackKind`s\n *\n * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-texttrack-kind\n * @typedef TextTrack~Kind\n * @enum\n */\n\nvar TextTrackKind = {\n  subtitles: 'subtitles',\n  captions: 'captions',\n  descriptions: 'descriptions',\n  chapters: 'chapters',\n  metadata: 'metadata'\n};\n/**\n * All possible `TextTrackMode`s\n *\n * @see https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackmode\n * @typedef TextTrack~Mode\n * @enum\n */\n\nvar TextTrackMode = {\n  disabled: 'disabled',\n  hidden: 'hidden',\n  showing: 'showing'\n};\n\n/**\n * A Track class that contains all of the common functionality for {@link AudioTrack},\n * {@link VideoTrack}, and {@link TextTrack}.\n *\n * > Note: This class should not be used directly\n *\n * @see {@link https://html.spec.whatwg.org/multipage/embedded-content.html}\n * @extends EventTarget\n * @abstract\n */\n\nvar Track =\n/*#__PURE__*/\nfunction (_EventTarget) {\n  _inheritsLoose(Track, _EventTarget);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Object} [options={}]\n   *        Object of option names and values\n   *\n   * @param {string} [options.kind='']\n   *        A valid kind for the track type you are creating.\n   *\n   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]\n   *        A unique id for this AudioTrack.\n   *\n   * @param {string} [options.label='']\n   *        The menu label for this track.\n   *\n   * @param {string} [options.language='']\n   *        A valid two character language code.\n   *\n   * @abstract\n   */\n  function Track(options) {\n    var _this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    _this = _EventTarget.call(this) || this;\n    var trackProps = {\n      id: options.id || 'vjs_track_' + newGUID(),\n      kind: options.kind || '',\n      label: options.label || '',\n      language: options.language || ''\n    };\n    /**\n     * @memberof Track\n     * @member {string} id\n     *         The id of this track. Cannot be changed after creation.\n     * @instance\n     *\n     * @readonly\n     */\n\n    /**\n     * @memberof Track\n     * @member {string} kind\n     *         The kind of track that this is. Cannot be changed after creation.\n     * @instance\n     *\n     * @readonly\n     */\n\n    /**\n     * @memberof Track\n     * @member {string} label\n     *         The label of this track. Cannot be changed after creation.\n     * @instance\n     *\n     * @readonly\n     */\n\n    /**\n     * @memberof Track\n     * @member {string} language\n     *         The two letter language code for this track. Cannot be changed after\n     *         creation.\n     * @instance\n     *\n     * @readonly\n     */\n\n    var _loop = function _loop(key) {\n      Object.defineProperty(_assertThisInitialized(_this), key, {\n        get: function get() {\n          return trackProps[key];\n        },\n        set: function set() {}\n      });\n    };\n\n    for (var key in trackProps) {\n      _loop(key);\n    }\n\n    return _this;\n  }\n\n  return Track;\n}(EventTarget);\n\n/**\n * @file url.js\n * @module url\n */\n/**\n * @typedef {Object} url:URLObject\n *\n * @property {string} protocol\n *           The protocol of the url that was parsed.\n *\n * @property {string} hostname\n *           The hostname of the url that was parsed.\n *\n * @property {string} port\n *           The port of the url that was parsed.\n *\n * @property {string} pathname\n *           The pathname of the url that was parsed.\n *\n * @property {string} search\n *           The search query of the url that was parsed.\n *\n * @property {string} hash\n *           The hash of the url that was parsed.\n *\n * @property {string} host\n *           The host of the url that was parsed.\n */\n\n/**\n * Resolve and parse the elements of a URL.\n *\n * @function\n * @param    {String} url\n *           The url to parse\n *\n * @return   {url:URLObject}\n *           An object of url details\n */\n\nvar parseUrl = function parseUrl(url) {\n  var props = ['protocol', 'hostname', 'port', 'pathname', 'search', 'hash', 'host']; // add the url to an anchor and let the browser parse the URL\n\n  var a = document.createElement('a');\n  a.href = url; // IE8 (and 9?) Fix\n  // ie8 doesn't parse the URL correctly until the anchor is actually\n  // added to the body, and an innerHTML is needed to trigger the parsing\n\n  var addToBody = a.host === '' && a.protocol !== 'file:';\n  var div;\n\n  if (addToBody) {\n    div = document.createElement('div');\n    div.innerHTML = \"<a href=\\\"\" + url + \"\\\"></a>\";\n    a = div.firstChild; // prevent the div from affecting layout\n\n    div.setAttribute('style', 'display:none; position:absolute;');\n    document.body.appendChild(div);\n  } // Copy the specific URL properties to a new object\n  // This is also needed for IE8 because the anchor loses its\n  // properties when it's removed from the dom\n\n\n  var details = {};\n\n  for (var i = 0; i < props.length; i++) {\n    details[props[i]] = a[props[i]];\n  } // IE9 adds the port to the host property unlike everyone else. If\n  // a port identifier is added for standard ports, strip it.\n\n\n  if (details.protocol === 'http:') {\n    details.host = details.host.replace(/:80$/, '');\n  }\n\n  if (details.protocol === 'https:') {\n    details.host = details.host.replace(/:443$/, '');\n  }\n\n  if (!details.protocol) {\n    details.protocol = window$1.location.protocol;\n  }\n\n  if (addToBody) {\n    document.body.removeChild(div);\n  }\n\n  return details;\n};\n/**\n * Get absolute version of relative URL. Used to tell Flash the correct URL.\n *\n * @function\n * @param    {string} url\n *           URL to make absolute\n *\n * @return   {string}\n *           Absolute URL\n *\n * @see      http://stackoverflow.com/questions/470832/getting-an-absolute-url-from-a-relative-one-ie6-issue\n */\n\nvar getAbsoluteURL = function getAbsoluteURL(url) {\n  // Check if absolute URL\n  if (!url.match(/^https?:\\/\\//)) {\n    // Convert to absolute URL. Flash hosted off-site needs an absolute URL.\n    var div = document.createElement('div');\n    div.innerHTML = \"<a href=\\\"\" + url + \"\\\">x</a>\";\n    url = div.firstChild.href;\n  }\n\n  return url;\n};\n/**\n * Returns the extension of the passed file name. It will return an empty string\n * if passed an invalid path.\n *\n * @function\n * @param    {string} path\n *           The fileName path like '/path/to/file.mp4'\n *\n * @return  {string}\n *           The extension in lower case or an empty string if no\n *           extension could be found.\n */\n\nvar getFileExtension = function getFileExtension(path) {\n  if (typeof path === 'string') {\n    var splitPathRe = /^(\\/?)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?)(\\.([^\\.\\/\\?]+)))(?:[\\/]*|[\\?].*)$/i;\n    var pathParts = splitPathRe.exec(path);\n\n    if (pathParts) {\n      return pathParts.pop().toLowerCase();\n    }\n  }\n\n  return '';\n};\n/**\n * Returns whether the url passed is a cross domain request or not.\n *\n * @function\n * @param    {string} url\n *           The url to check.\n *\n * @return   {boolean}\n *           Whether it is a cross domain request or not.\n */\n\nvar isCrossOrigin = function isCrossOrigin(url) {\n  var winLoc = window$1.location;\n  var urlInfo = parseUrl(url); // IE8 protocol relative urls will return ':' for protocol\n\n  var srcProtocol = urlInfo.protocol === ':' ? winLoc.protocol : urlInfo.protocol; // Check if url is for another domain/origin\n  // IE8 doesn't know location.origin, so we won't rely on it here\n\n  var crossOrigin = srcProtocol + urlInfo.host !== winLoc.protocol + winLoc.host;\n  return crossOrigin;\n};\n\nvar Url = /*#__PURE__*/Object.freeze({\n  parseUrl: parseUrl,\n  getAbsoluteURL: getAbsoluteURL,\n  getFileExtension: getFileExtension,\n  isCrossOrigin: isCrossOrigin\n});\n\n/**\n * Takes a webvtt file contents and parses it into cues\n *\n * @param {string} srcContent\n *        webVTT file contents\n *\n * @param {TextTrack} track\n *        TextTrack to add cues to. Cues come from the srcContent.\n *\n * @private\n */\n\nvar parseCues = function parseCues(srcContent, track) {\n  var parser = new window$1.WebVTT.Parser(window$1, window$1.vttjs, window$1.WebVTT.StringDecoder());\n  var errors = [];\n\n  parser.oncue = function (cue) {\n    track.addCue(cue);\n  };\n\n  parser.onparsingerror = function (error) {\n    errors.push(error);\n  };\n\n  parser.onflush = function () {\n    track.trigger({\n      type: 'loadeddata',\n      target: track\n    });\n  };\n\n  parser.parse(srcContent);\n\n  if (errors.length > 0) {\n    if (window$1.console && window$1.console.groupCollapsed) {\n      window$1.console.groupCollapsed(\"Text Track parsing errors for \" + track.src);\n    }\n\n    errors.forEach(function (error) {\n      return log.error(error);\n    });\n\n    if (window$1.console && window$1.console.groupEnd) {\n      window$1.console.groupEnd();\n    }\n  }\n\n  parser.flush();\n};\n/**\n * Load a `TextTrack` from a specified url.\n *\n * @param {string} src\n *        Url to load track from.\n *\n * @param {TextTrack} track\n *        Track to add cues to. Comes from the content at the end of `url`.\n *\n * @private\n */\n\n\nvar loadTrack = function loadTrack(src, track) {\n  var opts = {\n    uri: src\n  };\n  var crossOrigin = isCrossOrigin(src);\n\n  if (crossOrigin) {\n    opts.cors = crossOrigin;\n  }\n\n  XHR(opts, bind(this, function (err, response, responseBody) {\n    if (err) {\n      return log.error(err, response);\n    }\n\n    track.loaded_ = true; // Make sure that vttjs has loaded, otherwise, wait till it finished loading\n    // NOTE: this is only used for the alt/video.novtt.js build\n\n    if (typeof window$1.WebVTT !== 'function') {\n      if (track.tech_) {\n        // to prevent use before define eslint error, we define loadHandler\n        // as a let here\n        var loadHandler;\n\n        var errorHandler = function errorHandler() {\n          log.error(\"vttjs failed to load, stopping trying to process \" + track.src);\n          track.tech_.off('vttjsloaded', loadHandler);\n        };\n\n        loadHandler = function loadHandler() {\n          track.tech_.off('vttjserror', errorHandler);\n          return parseCues(responseBody, track);\n        };\n\n        track.tech_.one('vttjsloaded', loadHandler);\n        track.tech_.one('vttjserror', errorHandler);\n      }\n    } else {\n      parseCues(responseBody, track);\n    }\n  }));\n};\n/**\n * A representation of a single `TextTrack`.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrack}\n * @extends Track\n */\n\n\nvar TextTrack =\n/*#__PURE__*/\nfunction (_Track) {\n  _inheritsLoose(TextTrack, _Track);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Object} options={}\n   *        Object of option names and values\n   *\n   * @param {Tech} options.tech\n   *        A reference to the tech that owns this TextTrack.\n   *\n   * @param {TextTrack~Kind} [options.kind='subtitles']\n   *        A valid text track kind.\n   *\n   * @param {TextTrack~Mode} [options.mode='disabled']\n   *        A valid text track mode.\n   *\n   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]\n   *        A unique id for this TextTrack.\n   *\n   * @param {string} [options.label='']\n   *        The menu label for this track.\n   *\n   * @param {string} [options.language='']\n   *        A valid two character language code.\n   *\n   * @param {string} [options.srclang='']\n   *        A valid two character language code. An alternative, but deprioritized\n   *        version of `options.language`\n   *\n   * @param {string} [options.src]\n   *        A url to TextTrack cues.\n   *\n   * @param {boolean} [options.default]\n   *        If this track should default to on or off.\n   */\n  function TextTrack(options) {\n    var _this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    if (!options.tech) {\n      throw new Error('A tech was not provided.');\n    }\n\n    var settings = mergeOptions(options, {\n      kind: TextTrackKind[options.kind] || 'subtitles',\n      language: options.language || options.srclang || ''\n    });\n    var mode = TextTrackMode[settings.mode] || 'disabled';\n    var default_ = settings[\"default\"];\n\n    if (settings.kind === 'metadata' || settings.kind === 'chapters') {\n      mode = 'hidden';\n    }\n\n    _this = _Track.call(this, settings) || this;\n    _this.tech_ = settings.tech;\n    _this.cues_ = [];\n    _this.activeCues_ = [];\n    var cues = new TextTrackCueList(_this.cues_);\n    var activeCues = new TextTrackCueList(_this.activeCues_);\n    var changed = false;\n    var timeupdateHandler = bind(_assertThisInitialized(_this), function () {\n      // Accessing this.activeCues for the side-effects of updating itself\n      // due to its nature as a getter function. Do not remove or cues will\n      // stop updating!\n      // Use the setter to prevent deletion from uglify (pure_getters rule)\n      this.activeCues = this.activeCues;\n\n      if (changed) {\n        this.trigger('cuechange');\n        changed = false;\n      }\n    });\n\n    if (mode !== 'disabled') {\n      _this.tech_.ready(function () {\n        _this.tech_.on('timeupdate', timeupdateHandler);\n      }, true);\n    }\n\n    Object.defineProperties(_assertThisInitialized(_this), {\n      /**\n       * @memberof TextTrack\n       * @member {boolean} default\n       *         If this track was set to be on or off by default. Cannot be changed after\n       *         creation.\n       * @instance\n       *\n       * @readonly\n       */\n      \"default\": {\n        get: function get() {\n          return default_;\n        },\n        set: function set() {}\n      },\n\n      /**\n       * @memberof TextTrack\n       * @member {string} mode\n       *         Set the mode of this TextTrack to a valid {@link TextTrack~Mode}. Will\n       *         not be set if setting to an invalid mode.\n       * @instance\n       *\n       * @fires TextTrack#modechange\n       */\n      mode: {\n        get: function get() {\n          return mode;\n        },\n        set: function set(newMode) {\n          var _this2 = this;\n\n          if (!TextTrackMode[newMode]) {\n            return;\n          }\n\n          mode = newMode;\n\n          if (mode !== 'disabled') {\n            this.tech_.ready(function () {\n              _this2.tech_.on('timeupdate', timeupdateHandler);\n            }, true);\n          } else {\n            this.tech_.off('timeupdate', timeupdateHandler);\n          }\n          /**\n           * An event that fires when mode changes on this track. This allows\n           * the TextTrackList that holds this track to act accordingly.\n           *\n           * > Note: This is not part of the spec!\n           *\n           * @event TextTrack#modechange\n           * @type {EventTarget~Event}\n           */\n\n\n          this.trigger('modechange');\n        }\n      },\n\n      /**\n       * @memberof TextTrack\n       * @member {TextTrackCueList} cues\n       *         The text track cue list for this TextTrack.\n       * @instance\n       */\n      cues: {\n        get: function get() {\n          if (!this.loaded_) {\n            return null;\n          }\n\n          return cues;\n        },\n        set: function set() {}\n      },\n\n      /**\n       * @memberof TextTrack\n       * @member {TextTrackCueList} activeCues\n       *         The list text track cues that are currently active for this TextTrack.\n       * @instance\n       */\n      activeCues: {\n        get: function get() {\n          if (!this.loaded_) {\n            return null;\n          } // nothing to do\n\n\n          if (this.cues.length === 0) {\n            return activeCues;\n          }\n\n          var ct = this.tech_.currentTime();\n          var active = [];\n\n          for (var i = 0, l = this.cues.length; i < l; i++) {\n            var cue = this.cues[i];\n\n            if (cue.startTime <= ct && cue.endTime >= ct) {\n              active.push(cue);\n            } else if (cue.startTime === cue.endTime && cue.startTime <= ct && cue.startTime + 0.5 >= ct) {\n              active.push(cue);\n            }\n          }\n\n          changed = false;\n\n          if (active.length !== this.activeCues_.length) {\n            changed = true;\n          } else {\n            for (var _i = 0; _i < active.length; _i++) {\n              if (this.activeCues_.indexOf(active[_i]) === -1) {\n                changed = true;\n              }\n            }\n          }\n\n          this.activeCues_ = active;\n          activeCues.setCues_(this.activeCues_);\n          return activeCues;\n        },\n        // /!\\ Keep this setter empty (see the timeupdate handler above)\n        set: function set() {}\n      }\n    });\n\n    if (settings.src) {\n      _this.src = settings.src;\n      loadTrack(settings.src, _assertThisInitialized(_this));\n    } else {\n      _this.loaded_ = true;\n    }\n\n    return _this;\n  }\n  /**\n   * Add a cue to the internal list of cues.\n   *\n   * @param {TextTrack~Cue} cue\n   *        The cue to add to our internal list\n   */\n\n\n  var _proto = TextTrack.prototype;\n\n  _proto.addCue = function addCue(originalCue) {\n    var cue = originalCue;\n\n    if (window$1.vttjs && !(originalCue instanceof window$1.vttjs.VTTCue)) {\n      cue = new window$1.vttjs.VTTCue(originalCue.startTime, originalCue.endTime, originalCue.text);\n\n      for (var prop in originalCue) {\n        if (!(prop in cue)) {\n          cue[prop] = originalCue[prop];\n        }\n      } // make sure that `id` is copied over\n\n\n      cue.id = originalCue.id;\n      cue.originalCue_ = originalCue;\n    }\n\n    var tracks = this.tech_.textTracks();\n\n    for (var i = 0; i < tracks.length; i++) {\n      if (tracks[i] !== this) {\n        tracks[i].removeCue(cue);\n      }\n    }\n\n    this.cues_.push(cue);\n    this.cues.setCues_(this.cues_);\n  }\n  /**\n   * Remove a cue from our internal list\n   *\n   * @param {TextTrack~Cue} removeCue\n   *        The cue to remove from our internal list\n   */\n  ;\n\n  _proto.removeCue = function removeCue(_removeCue) {\n    var i = this.cues_.length;\n\n    while (i--) {\n      var cue = this.cues_[i];\n\n      if (cue === _removeCue || cue.originalCue_ && cue.originalCue_ === _removeCue) {\n        this.cues_.splice(i, 1);\n        this.cues.setCues_(this.cues_);\n        break;\n      }\n    }\n  };\n\n  return TextTrack;\n}(Track);\n/**\n * cuechange - One or more cues in the track have become active or stopped being active.\n */\n\n\nTextTrack.prototype.allowedEvents_ = {\n  cuechange: 'cuechange'\n};\n\n/**\n * A representation of a single `AudioTrack`. If it is part of an {@link AudioTrackList}\n * only one `AudioTrack` in the list will be enabled at a time.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotrack}\n * @extends Track\n */\n\nvar AudioTrack =\n/*#__PURE__*/\nfunction (_Track) {\n  _inheritsLoose(AudioTrack, _Track);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Object} [options={}]\n   *        Object of option names and values\n   *\n   * @param {AudioTrack~Kind} [options.kind='']\n   *        A valid audio track kind\n   *\n   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]\n   *        A unique id for this AudioTrack.\n   *\n   * @param {string} [options.label='']\n   *        The menu label for this track.\n   *\n   * @param {string} [options.language='']\n   *        A valid two character language code.\n   *\n   * @param {boolean} [options.enabled]\n   *        If this track is the one that is currently playing. If this track is part of\n   *        an {@link AudioTrackList}, only one {@link AudioTrack} will be enabled.\n   */\n  function AudioTrack(options) {\n    var _this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    var settings = mergeOptions(options, {\n      kind: AudioTrackKind[options.kind] || ''\n    });\n    _this = _Track.call(this, settings) || this;\n    var enabled = false;\n    /**\n     * @memberof AudioTrack\n     * @member {boolean} enabled\n     *         If this `AudioTrack` is enabled or not. When setting this will\n     *         fire {@link AudioTrack#enabledchange} if the state of enabled is changed.\n     * @instance\n     *\n     * @fires VideoTrack#selectedchange\n     */\n\n    Object.defineProperty(_assertThisInitialized(_this), 'enabled', {\n      get: function get() {\n        return enabled;\n      },\n      set: function set(newEnabled) {\n        // an invalid or unchanged value\n        if (typeof newEnabled !== 'boolean' || newEnabled === enabled) {\n          return;\n        }\n\n        enabled = newEnabled;\n        /**\n         * An event that fires when enabled changes on this track. This allows\n         * the AudioTrackList that holds this track to act accordingly.\n         *\n         * > Note: This is not part of the spec! Native tracks will do\n         *         this internally without an event.\n         *\n         * @event AudioTrack#enabledchange\n         * @type {EventTarget~Event}\n         */\n\n        this.trigger('enabledchange');\n      }\n    }); // if the user sets this track to selected then\n    // set selected to that true value otherwise\n    // we keep it false\n\n    if (settings.enabled) {\n      _this.enabled = settings.enabled;\n    }\n\n    _this.loaded_ = true;\n    return _this;\n  }\n\n  return AudioTrack;\n}(Track);\n\n/**\n * A representation of a single `VideoTrack`.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#videotrack}\n * @extends Track\n */\n\nvar VideoTrack =\n/*#__PURE__*/\nfunction (_Track) {\n  _inheritsLoose(VideoTrack, _Track);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Object} [options={}]\n   *        Object of option names and values\n   *\n   * @param {string} [options.kind='']\n   *        A valid {@link VideoTrack~Kind}\n   *\n   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]\n   *        A unique id for this AudioTrack.\n   *\n   * @param {string} [options.label='']\n   *        The menu label for this track.\n   *\n   * @param {string} [options.language='']\n   *        A valid two character language code.\n   *\n   * @param {boolean} [options.selected]\n   *        If this track is the one that is currently playing.\n   */\n  function VideoTrack(options) {\n    var _this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    var settings = mergeOptions(options, {\n      kind: VideoTrackKind[options.kind] || ''\n    });\n    _this = _Track.call(this, settings) || this;\n    var selected = false;\n    /**\n     * @memberof VideoTrack\n     * @member {boolean} selected\n     *         If this `VideoTrack` is selected or not. When setting this will\n     *         fire {@link VideoTrack#selectedchange} if the state of selected changed.\n     * @instance\n     *\n     * @fires VideoTrack#selectedchange\n     */\n\n    Object.defineProperty(_assertThisInitialized(_this), 'selected', {\n      get: function get() {\n        return selected;\n      },\n      set: function set(newSelected) {\n        // an invalid or unchanged value\n        if (typeof newSelected !== 'boolean' || newSelected === selected) {\n          return;\n        }\n\n        selected = newSelected;\n        /**\n         * An event that fires when selected changes on this track. This allows\n         * the VideoTrackList that holds this track to act accordingly.\n         *\n         * > Note: This is not part of the spec! Native tracks will do\n         *         this internally without an event.\n         *\n         * @event VideoTrack#selectedchange\n         * @type {EventTarget~Event}\n         */\n\n        this.trigger('selectedchange');\n      }\n    }); // if the user sets this track to selected then\n    // set selected to that true value otherwise\n    // we keep it false\n\n    if (settings.selected) {\n      _this.selected = settings.selected;\n    }\n\n    return _this;\n  }\n\n  return VideoTrack;\n}(Track);\n\n/**\n * @memberof HTMLTrackElement\n * @typedef {HTMLTrackElement~ReadyState}\n * @enum {number}\n */\n\nvar NONE = 0;\nvar LOADING = 1;\nvar LOADED = 2;\nvar ERROR = 3;\n/**\n * A single track represented in the DOM.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#htmltrackelement}\n * @extends EventTarget\n */\n\nvar HTMLTrackElement =\n/*#__PURE__*/\nfunction (_EventTarget) {\n  _inheritsLoose(HTMLTrackElement, _EventTarget);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Object} options={}\n   *        Object of option names and values\n   *\n   * @param {Tech} options.tech\n   *        A reference to the tech that owns this HTMLTrackElement.\n   *\n   * @param {TextTrack~Kind} [options.kind='subtitles']\n   *        A valid text track kind.\n   *\n   * @param {TextTrack~Mode} [options.mode='disabled']\n   *        A valid text track mode.\n   *\n   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]\n   *        A unique id for this TextTrack.\n   *\n   * @param {string} [options.label='']\n   *        The menu label for this track.\n   *\n   * @param {string} [options.language='']\n   *        A valid two character language code.\n   *\n   * @param {string} [options.srclang='']\n   *        A valid two character language code. An alternative, but deprioritized\n   *        vesion of `options.language`\n   *\n   * @param {string} [options.src]\n   *        A url to TextTrack cues.\n   *\n   * @param {boolean} [options.default]\n   *        If this track should default to on or off.\n   */\n  function HTMLTrackElement(options) {\n    var _this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    _this = _EventTarget.call(this) || this;\n    var readyState;\n    var track = new TextTrack(options);\n    _this.kind = track.kind;\n    _this.src = track.src;\n    _this.srclang = track.language;\n    _this.label = track.label;\n    _this[\"default\"] = track[\"default\"];\n    Object.defineProperties(_assertThisInitialized(_this), {\n      /**\n       * @memberof HTMLTrackElement\n       * @member {HTMLTrackElement~ReadyState} readyState\n       *         The current ready state of the track element.\n       * @instance\n       */\n      readyState: {\n        get: function get() {\n          return readyState;\n        }\n      },\n\n      /**\n       * @memberof HTMLTrackElement\n       * @member {TextTrack} track\n       *         The underlying TextTrack object.\n       * @instance\n       *\n       */\n      track: {\n        get: function get() {\n          return track;\n        }\n      }\n    });\n    readyState = NONE;\n    /**\n     * @listens TextTrack#loadeddata\n     * @fires HTMLTrackElement#load\n     */\n\n    track.addEventListener('loadeddata', function () {\n      readyState = LOADED;\n\n      _this.trigger({\n        type: 'load',\n        target: _assertThisInitialized(_this)\n      });\n    });\n    return _this;\n  }\n\n  return HTMLTrackElement;\n}(EventTarget);\n\nHTMLTrackElement.prototype.allowedEvents_ = {\n  load: 'load'\n};\nHTMLTrackElement.NONE = NONE;\nHTMLTrackElement.LOADING = LOADING;\nHTMLTrackElement.LOADED = LOADED;\nHTMLTrackElement.ERROR = ERROR;\n\n/*\n * This file contains all track properties that are used in\n * player.js, tech.js, html5.js and possibly other techs in the future.\n */\n\nvar NORMAL = {\n  audio: {\n    ListClass: AudioTrackList,\n    TrackClass: AudioTrack,\n    capitalName: 'Audio'\n  },\n  video: {\n    ListClass: VideoTrackList,\n    TrackClass: VideoTrack,\n    capitalName: 'Video'\n  },\n  text: {\n    ListClass: TextTrackList,\n    TrackClass: TextTrack,\n    capitalName: 'Text'\n  }\n};\nObject.keys(NORMAL).forEach(function (type) {\n  NORMAL[type].getterName = type + \"Tracks\";\n  NORMAL[type].privateName = type + \"Tracks_\";\n});\nvar REMOTE = {\n  remoteText: {\n    ListClass: TextTrackList,\n    TrackClass: TextTrack,\n    capitalName: 'RemoteText',\n    getterName: 'remoteTextTracks',\n    privateName: 'remoteTextTracks_'\n  },\n  remoteTextEl: {\n    ListClass: HtmlTrackElementList,\n    TrackClass: HTMLTrackElement,\n    capitalName: 'RemoteTextTrackEls',\n    getterName: 'remoteTextTrackEls',\n    privateName: 'remoteTextTrackEls_'\n  }\n};\nvar ALL = mergeOptions(NORMAL, REMOTE);\nREMOTE.names = Object.keys(REMOTE);\nNORMAL.names = Object.keys(NORMAL);\nALL.names = [].concat(REMOTE.names).concat(NORMAL.names);\n\n/**\n * An Object containing a structure like: `{src: 'url', type: 'mimetype'}` or string\n * that just contains the src url alone.\n * * `var SourceObject = {src: 'http://ex.com/video.mp4', type: 'video/mp4'};`\n   * `var SourceString = 'http://example.com/some-video.mp4';`\n *\n * @typedef {Object|string} Tech~SourceObject\n *\n * @property {string} src\n *           The url to the source\n *\n * @property {string} type\n *           The mime type of the source\n */\n\n/**\n * A function used by {@link Tech} to create a new {@link TextTrack}.\n *\n * @private\n *\n * @param {Tech} self\n *        An instance of the Tech class.\n *\n * @param {string} kind\n *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)\n *\n * @param {string} [label]\n *        Label to identify the text track\n *\n * @param {string} [language]\n *        Two letter language abbreviation\n *\n * @param {Object} [options={}]\n *        An object with additional text track options\n *\n * @return {TextTrack}\n *          The text track that was created.\n */\n\nfunction createTrackHelper(self, kind, label, language, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var tracks = self.textTracks();\n  options.kind = kind;\n\n  if (label) {\n    options.label = label;\n  }\n\n  if (language) {\n    options.language = language;\n  }\n\n  options.tech = self;\n  var track = new ALL.text.TrackClass(options);\n  tracks.addTrack(track);\n  return track;\n}\n/**\n * This is the base class for media playback technology controllers, such as\n * {@link Flash} and {@link HTML5}\n *\n * @extends Component\n */\n\n\nvar Tech =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(Tech, _Component);\n\n  /**\n  * Create an instance of this Tech.\n  *\n  * @param {Object} [options]\n  *        The key/value store of player options.\n  *\n  * @param {Component~ReadyCallback} ready\n  *        Callback function to call when the `HTML5` Tech is ready.\n  */\n  function Tech(options, ready) {\n    var _this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    if (ready === void 0) {\n      ready = function ready() {};\n    }\n\n    // we don't want the tech to report user activity automatically.\n    // This is done manually in addControlsListeners\n    options.reportTouchActivity = false;\n    _this = _Component.call(this, null, options, ready) || this; // keep track of whether the current source has played at all to\n    // implement a very limited played()\n\n    _this.hasStarted_ = false;\n\n    _this.on('playing', function () {\n      this.hasStarted_ = true;\n    });\n\n    _this.on('loadstart', function () {\n      this.hasStarted_ = false;\n    });\n\n    ALL.names.forEach(function (name) {\n      var props = ALL[name];\n\n      if (options && options[props.getterName]) {\n        _this[props.privateName] = options[props.getterName];\n      }\n    }); // Manually track progress in cases where the browser/flash player doesn't report it.\n\n    if (!_this.featuresProgressEvents) {\n      _this.manualProgressOn();\n    } // Manually track timeupdates in cases where the browser/flash player doesn't report it.\n\n\n    if (!_this.featuresTimeupdateEvents) {\n      _this.manualTimeUpdatesOn();\n    }\n\n    ['Text', 'Audio', 'Video'].forEach(function (track) {\n      if (options[\"native\" + track + \"Tracks\"] === false) {\n        _this[\"featuresNative\" + track + \"Tracks\"] = false;\n      }\n    });\n\n    if (options.nativeCaptions === false || options.nativeTextTracks === false) {\n      _this.featuresNativeTextTracks = false;\n    } else if (options.nativeCaptions === true || options.nativeTextTracks === true) {\n      _this.featuresNativeTextTracks = true;\n    }\n\n    if (!_this.featuresNativeTextTracks) {\n      _this.emulateTextTracks();\n    }\n\n    _this.autoRemoteTextTracks_ = new ALL.text.ListClass();\n\n    _this.initTrackListeners(); // Turn on component tap events only if not using native controls\n\n\n    if (!options.nativeControlsForTouch) {\n      _this.emitTapEvents();\n    }\n\n    if (_this.constructor) {\n      _this.name_ = _this.constructor.name || 'Unknown Tech';\n    }\n\n    return _this;\n  }\n  /**\n   * A special function to trigger source set in a way that will allow player\n   * to re-trigger if the player or tech are not ready yet.\n   *\n   * @fires Tech#sourceset\n   * @param {string} src The source string at the time of the source changing.\n   */\n\n\n  var _proto = Tech.prototype;\n\n  _proto.triggerSourceset = function triggerSourceset(src) {\n    var _this2 = this;\n\n    if (!this.isReady_) {\n      // on initial ready we have to trigger source set\n      // 1ms after ready so that player can watch for it.\n      this.one('ready', function () {\n        return _this2.setTimeout(function () {\n          return _this2.triggerSourceset(src);\n        }, 1);\n      });\n    }\n    /**\n     * Fired when the source is set on the tech causing the media element\n     * to reload.\n     *\n     * @see {@link Player#event:sourceset}\n     * @event Tech#sourceset\n     * @type {EventTarget~Event}\n     */\n\n\n    this.trigger({\n      src: src,\n      type: 'sourceset'\n    });\n  }\n  /* Fallbacks for unsupported event types\n  ================================================================================ */\n\n  /**\n   * Polyfill the `progress` event for browsers that don't support it natively.\n   *\n   * @see {@link Tech#trackProgress}\n   */\n  ;\n\n  _proto.manualProgressOn = function manualProgressOn() {\n    this.on('durationchange', this.onDurationChange);\n    this.manualProgress = true; // Trigger progress watching when a source begins loading\n\n    this.one('ready', this.trackProgress);\n  }\n  /**\n   * Turn off the polyfill for `progress` events that was created in\n   * {@link Tech#manualProgressOn}\n   */\n  ;\n\n  _proto.manualProgressOff = function manualProgressOff() {\n    this.manualProgress = false;\n    this.stopTrackingProgress();\n    this.off('durationchange', this.onDurationChange);\n  }\n  /**\n   * This is used to trigger a `progress` event when the buffered percent changes. It\n   * sets an interval function that will be called every 500 milliseconds to check if the\n   * buffer end percent has changed.\n   *\n   * > This function is called by {@link Tech#manualProgressOn}\n   *\n   * @param {EventTarget~Event} event\n   *        The `ready` event that caused this to run.\n   *\n   * @listens Tech#ready\n   * @fires Tech#progress\n   */\n  ;\n\n  _proto.trackProgress = function trackProgress(event) {\n    this.stopTrackingProgress();\n    this.progressInterval = this.setInterval(bind(this, function () {\n      // Don't trigger unless buffered amount is greater than last time\n      var numBufferedPercent = this.bufferedPercent();\n\n      if (this.bufferedPercent_ !== numBufferedPercent) {\n        /**\n         * See {@link Player#progress}\n         *\n         * @event Tech#progress\n         * @type {EventTarget~Event}\n         */\n        this.trigger('progress');\n      }\n\n      this.bufferedPercent_ = numBufferedPercent;\n\n      if (numBufferedPercent === 1) {\n        this.stopTrackingProgress();\n      }\n    }), 500);\n  }\n  /**\n   * Update our internal duration on a `durationchange` event by calling\n   * {@link Tech#duration}.\n   *\n   * @param {EventTarget~Event} event\n   *        The `durationchange` event that caused this to run.\n   *\n   * @listens Tech#durationchange\n   */\n  ;\n\n  _proto.onDurationChange = function onDurationChange(event) {\n    this.duration_ = this.duration();\n  }\n  /**\n   * Get and create a `TimeRange` object for buffering.\n   *\n   * @return {TimeRange}\n   *         The time range object that was created.\n   */\n  ;\n\n  _proto.buffered = function buffered() {\n    return createTimeRanges(0, 0);\n  }\n  /**\n   * Get the percentage of the current video that is currently buffered.\n   *\n   * @return {number}\n   *         A number from 0 to 1 that represents the decimal percentage of the\n   *         video that is buffered.\n   *\n   */\n  ;\n\n  _proto.bufferedPercent = function bufferedPercent$1() {\n    return bufferedPercent(this.buffered(), this.duration_);\n  }\n  /**\n   * Turn off the polyfill for `progress` events that was created in\n   * {@link Tech#manualProgressOn}\n   * Stop manually tracking progress events by clearing the interval that was set in\n   * {@link Tech#trackProgress}.\n   */\n  ;\n\n  _proto.stopTrackingProgress = function stopTrackingProgress() {\n    this.clearInterval(this.progressInterval);\n  }\n  /**\n   * Polyfill the `timeupdate` event for browsers that don't support it.\n   *\n   * @see {@link Tech#trackCurrentTime}\n   */\n  ;\n\n  _proto.manualTimeUpdatesOn = function manualTimeUpdatesOn() {\n    this.manualTimeUpdates = true;\n    this.on('play', this.trackCurrentTime);\n    this.on('pause', this.stopTrackingCurrentTime);\n  }\n  /**\n   * Turn off the polyfill for `timeupdate` events that was created in\n   * {@link Tech#manualTimeUpdatesOn}\n   */\n  ;\n\n  _proto.manualTimeUpdatesOff = function manualTimeUpdatesOff() {\n    this.manualTimeUpdates = false;\n    this.stopTrackingCurrentTime();\n    this.off('play', this.trackCurrentTime);\n    this.off('pause', this.stopTrackingCurrentTime);\n  }\n  /**\n   * Sets up an interval function to track current time and trigger `timeupdate` every\n   * 250 milliseconds.\n   *\n   * @listens Tech#play\n   * @triggers Tech#timeupdate\n   */\n  ;\n\n  _proto.trackCurrentTime = function trackCurrentTime() {\n    if (this.currentTimeInterval) {\n      this.stopTrackingCurrentTime();\n    }\n\n    this.currentTimeInterval = this.setInterval(function () {\n      /**\n       * Triggered at an interval of 250ms to indicated that time is passing in the video.\n       *\n       * @event Tech#timeupdate\n       * @type {EventTarget~Event}\n       */\n      this.trigger({\n        type: 'timeupdate',\n        target: this,\n        manuallyTriggered: true\n      }); // 42 = 24 fps // 250 is what Webkit uses // FF uses 15\n    }, 250);\n  }\n  /**\n   * Stop the interval function created in {@link Tech#trackCurrentTime} so that the\n   * `timeupdate` event is no longer triggered.\n   *\n   * @listens {Tech#pause}\n   */\n  ;\n\n  _proto.stopTrackingCurrentTime = function stopTrackingCurrentTime() {\n    this.clearInterval(this.currentTimeInterval); // #1002 - if the video ends right before the next timeupdate would happen,\n    // the progress bar won't make it all the way to the end\n\n    this.trigger({\n      type: 'timeupdate',\n      target: this,\n      manuallyTriggered: true\n    });\n  }\n  /**\n   * Turn off all event polyfills, clear the `Tech`s {@link AudioTrackList},\n   * {@link VideoTrackList}, and {@link TextTrackList}, and dispose of this Tech.\n   *\n   * @fires Component#dispose\n   */\n  ;\n\n  _proto.dispose = function dispose() {\n    // clear out all tracks because we can't reuse them between techs\n    this.clearTracks(NORMAL.names); // Turn off any manual progress or timeupdate tracking\n\n    if (this.manualProgress) {\n      this.manualProgressOff();\n    }\n\n    if (this.manualTimeUpdates) {\n      this.manualTimeUpdatesOff();\n    }\n\n    _Component.prototype.dispose.call(this);\n  }\n  /**\n   * Clear out a single `TrackList` or an array of `TrackLists` given their names.\n   *\n   * > Note: Techs without source handlers should call this between sources for `video`\n   *         & `audio` tracks. You don't want to use them between tracks!\n   *\n   * @param {string[]|string} types\n   *        TrackList names to clear, valid names are `video`, `audio`, and\n   *        `text`.\n   */\n  ;\n\n  _proto.clearTracks = function clearTracks(types) {\n    var _this3 = this;\n\n    types = [].concat(types); // clear out all tracks because we can't reuse them between techs\n\n    types.forEach(function (type) {\n      var list = _this3[type + \"Tracks\"]() || [];\n      var i = list.length;\n\n      while (i--) {\n        var track = list[i];\n\n        if (type === 'text') {\n          _this3.removeRemoteTextTrack(track);\n        }\n\n        list.removeTrack(track);\n      }\n    });\n  }\n  /**\n   * Remove any TextTracks added via addRemoteTextTrack that are\n   * flagged for automatic garbage collection\n   */\n  ;\n\n  _proto.cleanupAutoTextTracks = function cleanupAutoTextTracks() {\n    var list = this.autoRemoteTextTracks_ || [];\n    var i = list.length;\n\n    while (i--) {\n      var track = list[i];\n      this.removeRemoteTextTrack(track);\n    }\n  }\n  /**\n   * Reset the tech, which will removes all sources and reset the internal readyState.\n   *\n   * @abstract\n   */\n  ;\n\n  _proto.reset = function reset() {}\n  /**\n   * Get or set an error on the Tech.\n   *\n   * @param {MediaError} [err]\n   *        Error to set on the Tech\n   *\n   * @return {MediaError|null}\n   *         The current error object on the tech, or null if there isn't one.\n   */\n  ;\n\n  _proto.error = function error(err) {\n    if (err !== undefined) {\n      this.error_ = new MediaError(err);\n      this.trigger('error');\n    }\n\n    return this.error_;\n  }\n  /**\n   * Returns the `TimeRange`s that have been played through for the current source.\n   *\n   * > NOTE: This implementation is incomplete. It does not track the played `TimeRange`.\n   *         It only checks whether the source has played at all or not.\n   *\n   * @return {TimeRange}\n   *         - A single time range if this video has played\n   *         - An empty set of ranges if not.\n   */\n  ;\n\n  _proto.played = function played() {\n    if (this.hasStarted_) {\n      return createTimeRanges(0, 0);\n    }\n\n    return createTimeRanges();\n  }\n  /**\n   * Causes a manual time update to occur if {@link Tech#manualTimeUpdatesOn} was\n   * previously called.\n   *\n   * @fires Tech#timeupdate\n   */\n  ;\n\n  _proto.setCurrentTime = function setCurrentTime() {\n    // improve the accuracy of manual timeupdates\n    if (this.manualTimeUpdates) {\n      /**\n       * A manual `timeupdate` event.\n       *\n       * @event Tech#timeupdate\n       * @type {EventTarget~Event}\n       */\n      this.trigger({\n        type: 'timeupdate',\n        target: this,\n        manuallyTriggered: true\n      });\n    }\n  }\n  /**\n   * Turn on listeners for {@link VideoTrackList}, {@link {AudioTrackList}, and\n   * {@link TextTrackList} events.\n   *\n   * This adds {@link EventTarget~EventListeners} for `addtrack`, and  `removetrack`.\n   *\n   * @fires Tech#audiotrackchange\n   * @fires Tech#videotrackchange\n   * @fires Tech#texttrackchange\n   */\n  ;\n\n  _proto.initTrackListeners = function initTrackListeners() {\n    var _this4 = this;\n\n    /**\n      * Triggered when tracks are added or removed on the Tech {@link AudioTrackList}\n      *\n      * @event Tech#audiotrackchange\n      * @type {EventTarget~Event}\n      */\n\n    /**\n      * Triggered when tracks are added or removed on the Tech {@link VideoTrackList}\n      *\n      * @event Tech#videotrackchange\n      * @type {EventTarget~Event}\n      */\n\n    /**\n      * Triggered when tracks are added or removed on the Tech {@link TextTrackList}\n      *\n      * @event Tech#texttrackchange\n      * @type {EventTarget~Event}\n      */\n    NORMAL.names.forEach(function (name) {\n      var props = NORMAL[name];\n\n      var trackListChanges = function trackListChanges() {\n        _this4.trigger(name + \"trackchange\");\n      };\n\n      var tracks = _this4[props.getterName]();\n\n      tracks.addEventListener('removetrack', trackListChanges);\n      tracks.addEventListener('addtrack', trackListChanges);\n\n      _this4.on('dispose', function () {\n        tracks.removeEventListener('removetrack', trackListChanges);\n        tracks.removeEventListener('addtrack', trackListChanges);\n      });\n    });\n  }\n  /**\n   * Emulate TextTracks using vtt.js if necessary\n   *\n   * @fires Tech#vttjsloaded\n   * @fires Tech#vttjserror\n   */\n  ;\n\n  _proto.addWebVttScript_ = function addWebVttScript_() {\n    var _this5 = this;\n\n    if (window$1.WebVTT) {\n      return;\n    } // Initially, Tech.el_ is a child of a dummy-div wait until the Component system\n    // signals that the Tech is ready at which point Tech.el_ is part of the DOM\n    // before inserting the WebVTT script\n\n\n    if (document.body.contains(this.el())) {\n      // load via require if available and vtt.js script location was not passed in\n      // as an option. novtt builds will turn the above require call into an empty object\n      // which will cause this if check to always fail.\n      if (!this.options_['vtt.js'] && isPlain(vtt) && Object.keys(vtt).length > 0) {\n        this.trigger('vttjsloaded');\n        return;\n      } // load vtt.js via the script location option or the cdn of no location was\n      // passed in\n\n\n      var script = document.createElement('script');\n      script.src = this.options_['vtt.js'] || 'https://vjs.zencdn.net/vttjs/0.14.1/vtt.min.js';\n\n      script.onload = function () {\n        /**\n         * Fired when vtt.js is loaded.\n         *\n         * @event Tech#vttjsloaded\n         * @type {EventTarget~Event}\n         */\n        _this5.trigger('vttjsloaded');\n      };\n\n      script.onerror = function () {\n        /**\n         * Fired when vtt.js was not loaded due to an error\n         *\n         * @event Tech#vttjsloaded\n         * @type {EventTarget~Event}\n         */\n        _this5.trigger('vttjserror');\n      };\n\n      this.on('dispose', function () {\n        script.onload = null;\n        script.onerror = null;\n      }); // but have not loaded yet and we set it to true before the inject so that\n      // we don't overwrite the injected window.WebVTT if it loads right away\n\n      window$1.WebVTT = true;\n      this.el().parentNode.appendChild(script);\n    } else {\n      this.ready(this.addWebVttScript_);\n    }\n  }\n  /**\n   * Emulate texttracks\n   *\n   */\n  ;\n\n  _proto.emulateTextTracks = function emulateTextTracks() {\n    var _this6 = this;\n\n    var tracks = this.textTracks();\n    var remoteTracks = this.remoteTextTracks();\n\n    var handleAddTrack = function handleAddTrack(e) {\n      return tracks.addTrack(e.track);\n    };\n\n    var handleRemoveTrack = function handleRemoveTrack(e) {\n      return tracks.removeTrack(e.track);\n    };\n\n    remoteTracks.on('addtrack', handleAddTrack);\n    remoteTracks.on('removetrack', handleRemoveTrack);\n    this.addWebVttScript_();\n\n    var updateDisplay = function updateDisplay() {\n      return _this6.trigger('texttrackchange');\n    };\n\n    var textTracksChanges = function textTracksChanges() {\n      updateDisplay();\n\n      for (var i = 0; i < tracks.length; i++) {\n        var track = tracks[i];\n        track.removeEventListener('cuechange', updateDisplay);\n\n        if (track.mode === 'showing') {\n          track.addEventListener('cuechange', updateDisplay);\n        }\n      }\n    };\n\n    textTracksChanges();\n    tracks.addEventListener('change', textTracksChanges);\n    tracks.addEventListener('addtrack', textTracksChanges);\n    tracks.addEventListener('removetrack', textTracksChanges);\n    this.on('dispose', function () {\n      remoteTracks.off('addtrack', handleAddTrack);\n      remoteTracks.off('removetrack', handleRemoveTrack);\n      tracks.removeEventListener('change', textTracksChanges);\n      tracks.removeEventListener('addtrack', textTracksChanges);\n      tracks.removeEventListener('removetrack', textTracksChanges);\n\n      for (var i = 0; i < tracks.length; i++) {\n        var track = tracks[i];\n        track.removeEventListener('cuechange', updateDisplay);\n      }\n    });\n  }\n  /**\n   * Create and returns a remote {@link TextTrack} object.\n   *\n   * @param {string} kind\n   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)\n   *\n   * @param {string} [label]\n   *        Label to identify the text track\n   *\n   * @param {string} [language]\n   *        Two letter language abbreviation\n   *\n   * @return {TextTrack}\n   *         The TextTrack that gets created.\n   */\n  ;\n\n  _proto.addTextTrack = function addTextTrack(kind, label, language) {\n    if (!kind) {\n      throw new Error('TextTrack kind is required but was not provided');\n    }\n\n    return createTrackHelper(this, kind, label, language);\n  }\n  /**\n   * Create an emulated TextTrack for use by addRemoteTextTrack\n   *\n   * This is intended to be overridden by classes that inherit from\n   * Tech in order to create native or custom TextTracks.\n   *\n   * @param {Object} options\n   *        The object should contain the options to initialize the TextTrack with.\n   *\n   * @param {string} [options.kind]\n   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata).\n   *\n   * @param {string} [options.label].\n   *        Label to identify the text track\n   *\n   * @param {string} [options.language]\n   *        Two letter language abbreviation.\n   *\n   * @return {HTMLTrackElement}\n   *         The track element that gets created.\n   */\n  ;\n\n  _proto.createRemoteTextTrack = function createRemoteTextTrack(options) {\n    var track = mergeOptions(options, {\n      tech: this\n    });\n    return new REMOTE.remoteTextEl.TrackClass(track);\n  }\n  /**\n   * Creates a remote text track object and returns an html track element.\n   *\n   * > Note: This can be an emulated {@link HTMLTrackElement} or a native one.\n   *\n   * @param {Object} options\n   *        See {@link Tech#createRemoteTextTrack} for more detailed properties.\n   *\n   * @param {boolean} [manualCleanup=true]\n   *        - When false: the TextTrack will be automatically removed from the video\n   *          element whenever the source changes\n   *        - When True: The TextTrack will have to be cleaned up manually\n   *\n   * @return {HTMLTrackElement}\n   *         An Html Track Element.\n   *\n   * @deprecated The default functionality for this function will be equivalent\n   *             to \"manualCleanup=false\" in the future. The manualCleanup parameter will\n   *             also be removed.\n   */\n  ;\n\n  _proto.addRemoteTextTrack = function addRemoteTextTrack(options, manualCleanup) {\n    var _this7 = this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    var htmlTrackElement = this.createRemoteTextTrack(options);\n\n    if (manualCleanup !== true && manualCleanup !== false) {\n      // deprecation warning\n      log.warn('Calling addRemoteTextTrack without explicitly setting the \"manualCleanup\" parameter to `true` is deprecated and default to `false` in future version of video.js');\n      manualCleanup = true;\n    } // store HTMLTrackElement and TextTrack to remote list\n\n\n    this.remoteTextTrackEls().addTrackElement_(htmlTrackElement);\n    this.remoteTextTracks().addTrack(htmlTrackElement.track);\n\n    if (manualCleanup !== true) {\n      // create the TextTrackList if it doesn't exist\n      this.ready(function () {\n        return _this7.autoRemoteTextTracks_.addTrack(htmlTrackElement.track);\n      });\n    }\n\n    return htmlTrackElement;\n  }\n  /**\n   * Remove a remote text track from the remote `TextTrackList`.\n   *\n   * @param {TextTrack} track\n   *        `TextTrack` to remove from the `TextTrackList`\n   */\n  ;\n\n  _proto.removeRemoteTextTrack = function removeRemoteTextTrack(track) {\n    var trackElement = this.remoteTextTrackEls().getTrackElementByTrack_(track); // remove HTMLTrackElement and TextTrack from remote list\n\n    this.remoteTextTrackEls().removeTrackElement_(trackElement);\n    this.remoteTextTracks().removeTrack(track);\n    this.autoRemoteTextTracks_.removeTrack(track);\n  }\n  /**\n   * Gets available media playback quality metrics as specified by the W3C's Media\n   * Playback Quality API.\n   *\n   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}\n   *\n   * @return {Object}\n   *         An object with supported media playback quality metrics\n   *\n   * @abstract\n   */\n  ;\n\n  _proto.getVideoPlaybackQuality = function getVideoPlaybackQuality() {\n    return {};\n  }\n  /**\n   * Attempt to create a floating video window always on top of other windows\n   * so that users may continue consuming media while they interact with other\n   * content sites, or applications on their device.\n   *\n   * @see [Spec]{@link https://wicg.github.io/picture-in-picture}\n   *\n   * @return {Promise|undefined}\n   *         A promise with a Picture-in-Picture window if the browser supports\n   *         Promises (or one was passed in as an option). It returns undefined\n   *         otherwise.\n   *\n   * @abstract\n   */\n  ;\n\n  _proto.requestPictureInPicture = function requestPictureInPicture() {\n    var PromiseClass = this.options_.Promise || window$1.Promise;\n\n    if (PromiseClass) {\n      return PromiseClass.reject();\n    }\n  }\n  /**\n   * A method to set a poster from a `Tech`.\n   *\n   * @abstract\n   */\n  ;\n\n  _proto.setPoster = function setPoster() {}\n  /**\n   * A method to check for the presence of the 'playsinline' <video> attribute.\n   *\n   * @abstract\n   */\n  ;\n\n  _proto.playsinline = function playsinline() {}\n  /**\n   * A method to set or unset the 'playsinline' <video> attribute.\n   *\n   * @abstract\n   */\n  ;\n\n  _proto.setPlaysinline = function setPlaysinline() {}\n  /**\n   * Attempt to force override of native audio tracks.\n   *\n   * @param {boolean} override - If set to true native audio will be overridden,\n   * otherwise native audio will potentially be used.\n   *\n   * @abstract\n   */\n  ;\n\n  _proto.overrideNativeAudioTracks = function overrideNativeAudioTracks() {}\n  /**\n   * Attempt to force override of native video tracks.\n   *\n   * @param {boolean} override - If set to true native video will be overridden,\n   * otherwise native video will potentially be used.\n   *\n   * @abstract\n   */\n  ;\n\n  _proto.overrideNativeVideoTracks = function overrideNativeVideoTracks() {}\n  /*\n   * Check if the tech can support the given mime-type.\n   *\n   * The base tech does not support any type, but source handlers might\n   * overwrite this.\n   *\n   * @param  {string} type\n   *         The mimetype to check for support\n   *\n   * @return {string}\n   *         'probably', 'maybe', or empty string\n   *\n   * @see [Spec]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canPlayType}\n   *\n   * @abstract\n   */\n  ;\n\n  _proto.canPlayType = function canPlayType() {\n    return '';\n  }\n  /**\n   * Check if the type is supported by this tech.\n   *\n   * The base tech does not support any type, but source handlers might\n   * overwrite this.\n   *\n   * @param {string} type\n   *        The media type to check\n   * @return {string} Returns the native video element's response\n   */\n  ;\n\n  Tech.canPlayType = function canPlayType() {\n    return '';\n  }\n  /**\n   * Check if the tech can support the given source\n   *\n   * @param {Object} srcObj\n   *        The source object\n   * @param {Object} options\n   *        The options passed to the tech\n   * @return {string} 'probably', 'maybe', or '' (empty string)\n   */\n  ;\n\n  Tech.canPlaySource = function canPlaySource(srcObj, options) {\n    return Tech.canPlayType(srcObj.type);\n  }\n  /*\n   * Return whether the argument is a Tech or not.\n   * Can be passed either a Class like `Html5` or a instance like `player.tech_`\n   *\n   * @param {Object} component\n   *        The item to check\n   *\n   * @return {boolean}\n   *         Whether it is a tech or not\n   *         - True if it is a tech\n   *         - False if it is not\n   */\n  ;\n\n  Tech.isTech = function isTech(component) {\n    return component.prototype instanceof Tech || component instanceof Tech || component === Tech;\n  }\n  /**\n   * Registers a `Tech` into a shared list for videojs.\n   *\n   * @param {string} name\n   *        Name of the `Tech` to register.\n   *\n   * @param {Object} tech\n   *        The `Tech` class to register.\n   */\n  ;\n\n  Tech.registerTech = function registerTech(name, tech) {\n    if (!Tech.techs_) {\n      Tech.techs_ = {};\n    }\n\n    if (!Tech.isTech(tech)) {\n      throw new Error(\"Tech \" + name + \" must be a Tech\");\n    }\n\n    if (!Tech.canPlayType) {\n      throw new Error('Techs must have a static canPlayType method on them');\n    }\n\n    if (!Tech.canPlaySource) {\n      throw new Error('Techs must have a static canPlaySource method on them');\n    }\n\n    name = toTitleCase(name);\n    Tech.techs_[name] = tech;\n\n    if (name !== 'Tech') {\n      // camel case the techName for use in techOrder\n      Tech.defaultTechOrder_.push(name);\n    }\n\n    return tech;\n  }\n  /**\n   * Get a `Tech` from the shared list by name.\n   *\n   * @param {string} name\n   *        `camelCase` or `TitleCase` name of the Tech to get\n   *\n   * @return {Tech|undefined}\n   *         The `Tech` or undefined if there was no tech with the name requested.\n   */\n  ;\n\n  Tech.getTech = function getTech(name) {\n    if (!name) {\n      return;\n    }\n\n    name = toTitleCase(name);\n\n    if (Tech.techs_ && Tech.techs_[name]) {\n      return Tech.techs_[name];\n    }\n\n    if (window$1 && window$1.videojs && window$1.videojs[name]) {\n      log.warn(\"The \" + name + \" tech was added to the videojs object when it should be registered using videojs.registerTech(name, tech)\");\n      return window$1.videojs[name];\n    }\n  };\n\n  return Tech;\n}(Component);\n/**\n * Get the {@link VideoTrackList}\n *\n * @returns {VideoTrackList}\n * @method Tech.prototype.videoTracks\n */\n\n/**\n * Get the {@link AudioTrackList}\n *\n * @returns {AudioTrackList}\n * @method Tech.prototype.audioTracks\n */\n\n/**\n * Get the {@link TextTrackList}\n *\n * @returns {TextTrackList}\n * @method Tech.prototype.textTracks\n */\n\n/**\n * Get the remote element {@link TextTrackList}\n *\n * @returns {TextTrackList}\n * @method Tech.prototype.remoteTextTracks\n */\n\n/**\n * Get the remote element {@link HtmlTrackElementList}\n *\n * @returns {HtmlTrackElementList}\n * @method Tech.prototype.remoteTextTrackEls\n */\n\n\nALL.names.forEach(function (name) {\n  var props = ALL[name];\n\n  Tech.prototype[props.getterName] = function () {\n    this[props.privateName] = this[props.privateName] || new props.ListClass();\n    return this[props.privateName];\n  };\n});\n/**\n * List of associated text tracks\n *\n * @type {TextTrackList}\n * @private\n * @property Tech#textTracks_\n */\n\n/**\n * List of associated audio tracks.\n *\n * @type {AudioTrackList}\n * @private\n * @property Tech#audioTracks_\n */\n\n/**\n * List of associated video tracks.\n *\n * @type {VideoTrackList}\n * @private\n * @property Tech#videoTracks_\n */\n\n/**\n * Boolean indicating whether the `Tech` supports volume control.\n *\n * @type {boolean}\n * @default\n */\n\nTech.prototype.featuresVolumeControl = true;\n/**\n * Boolean indicating whether the `Tech` supports muting volume.\n *\n * @type {bolean}\n * @default\n */\n\nTech.prototype.featuresMuteControl = true;\n/**\n * Boolean indicating whether the `Tech` supports fullscreen resize control.\n * Resizing plugins using request fullscreen reloads the plugin\n *\n * @type {boolean}\n * @default\n */\n\nTech.prototype.featuresFullscreenResize = false;\n/**\n * Boolean indicating whether the `Tech` supports changing the speed at which the video\n * plays. Examples:\n *   - Set player to play 2x (twice) as fast\n *   - Set player to play 0.5x (half) as fast\n *\n * @type {boolean}\n * @default\n */\n\nTech.prototype.featuresPlaybackRate = false;\n/**\n * Boolean indicating whether the `Tech` supports the `progress` event. This is currently\n * not triggered by video-js-swf. This will be used to determine if\n * {@link Tech#manualProgressOn} should be called.\n *\n * @type {boolean}\n * @default\n */\n\nTech.prototype.featuresProgressEvents = false;\n/**\n * Boolean indicating whether the `Tech` supports the `sourceset` event.\n *\n * A tech should set this to `true` and then use {@link Tech#triggerSourceset}\n * to trigger a {@link Tech#event:sourceset} at the earliest time after getting\n * a new source.\n *\n * @type {boolean}\n * @default\n */\n\nTech.prototype.featuresSourceset = false;\n/**\n * Boolean indicating whether the `Tech` supports the `timeupdate` event. This is currently\n * not triggered by video-js-swf. This will be used to determine if\n * {@link Tech#manualTimeUpdates} should be called.\n *\n * @type {boolean}\n * @default\n */\n\nTech.prototype.featuresTimeupdateEvents = false;\n/**\n * Boolean indicating whether the `Tech` supports the native `TextTrack`s.\n * This will help us integrate with native `TextTrack`s if the browser supports them.\n *\n * @type {boolean}\n * @default\n */\n\nTech.prototype.featuresNativeTextTracks = false;\n/**\n * A functional mixin for techs that want to use the Source Handler pattern.\n * Source handlers are scripts for handling specific formats.\n * The source handler pattern is used for adaptive formats (HLS, DASH) that\n * manually load video data and feed it into a Source Buffer (Media Source Extensions)\n * Example: `Tech.withSourceHandlers.call(MyTech);`\n *\n * @param {Tech} _Tech\n *        The tech to add source handler functions to.\n *\n * @mixes Tech~SourceHandlerAdditions\n */\n\nTech.withSourceHandlers = function (_Tech) {\n  /**\n   * Register a source handler\n   *\n   * @param {Function} handler\n   *        The source handler class\n   *\n   * @param {number} [index]\n   *        Register it at the following index\n   */\n  _Tech.registerSourceHandler = function (handler, index) {\n    var handlers = _Tech.sourceHandlers;\n\n    if (!handlers) {\n      handlers = _Tech.sourceHandlers = [];\n    }\n\n    if (index === undefined) {\n      // add to the end of the list\n      index = handlers.length;\n    }\n\n    handlers.splice(index, 0, handler);\n  };\n  /**\n   * Check if the tech can support the given type. Also checks the\n   * Techs sourceHandlers.\n   *\n   * @param {string} type\n   *         The mimetype to check.\n   *\n   * @return {string}\n   *         'probably', 'maybe', or '' (empty string)\n   */\n\n\n  _Tech.canPlayType = function (type) {\n    var handlers = _Tech.sourceHandlers || [];\n    var can;\n\n    for (var i = 0; i < handlers.length; i++) {\n      can = handlers[i].canPlayType(type);\n\n      if (can) {\n        return can;\n      }\n    }\n\n    return '';\n  };\n  /**\n   * Returns the first source handler that supports the source.\n   *\n   * TODO: Answer question: should 'probably' be prioritized over 'maybe'\n   *\n   * @param {Tech~SourceObject} source\n   *        The source object\n   *\n   * @param {Object} options\n   *        The options passed to the tech\n   *\n   * @return {SourceHandler|null}\n   *          The first source handler that supports the source or null if\n   *          no SourceHandler supports the source\n   */\n\n\n  _Tech.selectSourceHandler = function (source, options) {\n    var handlers = _Tech.sourceHandlers || [];\n    var can;\n\n    for (var i = 0; i < handlers.length; i++) {\n      can = handlers[i].canHandleSource(source, options);\n\n      if (can) {\n        return handlers[i];\n      }\n    }\n\n    return null;\n  };\n  /**\n   * Check if the tech can support the given source.\n   *\n   * @param {Tech~SourceObject} srcObj\n   *        The source object\n   *\n   * @param {Object} options\n   *        The options passed to the tech\n   *\n   * @return {string}\n   *         'probably', 'maybe', or '' (empty string)\n   */\n\n\n  _Tech.canPlaySource = function (srcObj, options) {\n    var sh = _Tech.selectSourceHandler(srcObj, options);\n\n    if (sh) {\n      return sh.canHandleSource(srcObj, options);\n    }\n\n    return '';\n  };\n  /**\n   * When using a source handler, prefer its implementation of\n   * any function normally provided by the tech.\n   */\n\n\n  var deferrable = ['seekable', 'seeking', 'duration'];\n  /**\n   * A wrapper around {@link Tech#seekable} that will call a `SourceHandler`s seekable\n   * function if it exists, with a fallback to the Techs seekable function.\n   *\n   * @method _Tech.seekable\n   */\n\n  /**\n   * A wrapper around {@link Tech#duration} that will call a `SourceHandler`s duration\n   * function if it exists, otherwise it will fallback to the techs duration function.\n   *\n   * @method _Tech.duration\n   */\n\n  deferrable.forEach(function (fnName) {\n    var originalFn = this[fnName];\n\n    if (typeof originalFn !== 'function') {\n      return;\n    }\n\n    this[fnName] = function () {\n      if (this.sourceHandler_ && this.sourceHandler_[fnName]) {\n        return this.sourceHandler_[fnName].apply(this.sourceHandler_, arguments);\n      }\n\n      return originalFn.apply(this, arguments);\n    };\n  }, _Tech.prototype);\n  /**\n   * Create a function for setting the source using a source object\n   * and source handlers.\n   * Should never be called unless a source handler was found.\n   *\n   * @param {Tech~SourceObject} source\n   *        A source object with src and type keys\n   */\n\n  _Tech.prototype.setSource = function (source) {\n    var sh = _Tech.selectSourceHandler(source, this.options_);\n\n    if (!sh) {\n      // Fall back to a native source hander when unsupported sources are\n      // deliberately set\n      if (_Tech.nativeSourceHandler) {\n        sh = _Tech.nativeSourceHandler;\n      } else {\n        log.error('No source handler found for the current source.');\n      }\n    } // Dispose any existing source handler\n\n\n    this.disposeSourceHandler();\n    this.off('dispose', this.disposeSourceHandler);\n\n    if (sh !== _Tech.nativeSourceHandler) {\n      this.currentSource_ = source;\n    }\n\n    this.sourceHandler_ = sh.handleSource(source, this, this.options_);\n    this.one('dispose', this.disposeSourceHandler);\n  };\n  /**\n   * Clean up any existing SourceHandlers and listeners when the Tech is disposed.\n   *\n   * @listens Tech#dispose\n   */\n\n\n  _Tech.prototype.disposeSourceHandler = function () {\n    // if we have a source and get another one\n    // then we are loading something new\n    // than clear all of our current tracks\n    if (this.currentSource_) {\n      this.clearTracks(['audio', 'video']);\n      this.currentSource_ = null;\n    } // always clean up auto-text tracks\n\n\n    this.cleanupAutoTextTracks();\n\n    if (this.sourceHandler_) {\n      if (this.sourceHandler_.dispose) {\n        this.sourceHandler_.dispose();\n      }\n\n      this.sourceHandler_ = null;\n    }\n  };\n}; // The base Tech class needs to be registered as a Component. It is the only\n// Tech that can be registered as a Component.\n\n\nComponent.registerComponent('Tech', Tech);\nTech.registerTech('Tech', Tech);\n/**\n * A list of techs that should be added to techOrder on Players\n *\n * @private\n */\n\nTech.defaultTechOrder_ = [];\n\n/**\n * @file middleware.js\n * @module middleware\n */\nvar middlewares = {};\nvar middlewareInstances = {};\nvar TERMINATOR = {};\n/**\n * A middleware object is a plain JavaScript object that has methods that\n * match the {@link Tech} methods found in the lists of allowed\n * {@link module:middleware.allowedGetters|getters},\n * {@link module:middleware.allowedSetters|setters}, and\n * {@link module:middleware.allowedMediators|mediators}.\n *\n * @typedef {Object} MiddlewareObject\n */\n\n/**\n * A middleware factory function that should return a\n * {@link module:middleware~MiddlewareObject|MiddlewareObject}.\n *\n * This factory will be called for each player when needed, with the player\n * passed in as an argument.\n *\n * @callback MiddlewareFactory\n * @param {Player} player\n *        A Video.js player.\n */\n\n/**\n * Define a middleware that the player should use by way of a factory function\n * that returns a middleware object.\n *\n * @param  {string} type\n *         The MIME type to match or `\"*\"` for all MIME types.\n *\n * @param  {MiddlewareFactory} middleware\n *         A middleware factory function that will be executed for\n *         matching types.\n */\n\nfunction use(type, middleware) {\n  middlewares[type] = middlewares[type] || [];\n  middlewares[type].push(middleware);\n}\n/**\n * Asynchronously sets a source using middleware by recursing through any\n * matching middlewares and calling `setSource` on each, passing along the\n * previous returned value each time.\n *\n * @param  {Player} player\n *         A {@link Player} instance.\n *\n * @param  {Tech~SourceObject} src\n *         A source object.\n *\n * @param  {Function}\n *         The next middleware to run.\n */\n\nfunction setSource(player, src, next) {\n  player.setTimeout(function () {\n    return setSourceHelper(src, middlewares[src.type], next, player);\n  }, 1);\n}\n/**\n * When the tech is set, passes the tech to each middleware's `setTech` method.\n *\n * @param {Object[]} middleware\n *        An array of middleware instances.\n *\n * @param {Tech} tech\n *        A Video.js tech.\n */\n\nfunction setTech(middleware, tech) {\n  middleware.forEach(function (mw) {\n    return mw.setTech && mw.setTech(tech);\n  });\n}\n/**\n * Calls a getter on the tech first, through each middleware\n * from right to left to the player.\n *\n * @param  {Object[]} middleware\n *         An array of middleware instances.\n *\n * @param  {Tech} tech\n *         The current tech.\n *\n * @param  {string} method\n *         A method name.\n *\n * @return {Mixed}\n *         The final value from the tech after middleware has intercepted it.\n */\n\nfunction get(middleware, tech, method) {\n  return middleware.reduceRight(middlewareIterator(method), tech[method]());\n}\n/**\n * Takes the argument given to the player and calls the setter method on each\n * middleware from left to right to the tech.\n *\n * @param  {Object[]} middleware\n *         An array of middleware instances.\n *\n * @param  {Tech} tech\n *         The current tech.\n *\n * @param  {string} method\n *         A method name.\n *\n * @param  {Mixed} arg\n *         The value to set on the tech.\n *\n * @return {Mixed}\n *         The return value of the `method` of the `tech`.\n */\n\nfunction set(middleware, tech, method, arg) {\n  return tech[method](middleware.reduce(middlewareIterator(method), arg));\n}\n/**\n * Takes the argument given to the player and calls the `call` version of the\n * method on each middleware from left to right.\n *\n * Then, call the passed in method on the tech and return the result unchanged\n * back to the player, through middleware, this time from right to left.\n *\n * @param  {Object[]} middleware\n *         An array of middleware instances.\n *\n * @param  {Tech} tech\n *         The current tech.\n *\n * @param  {string} method\n *         A method name.\n *\n * @param  {Mixed} arg\n *         The value to set on the tech.\n *\n * @return {Mixed}\n *         The return value of the `method` of the `tech`, regardless of the\n *         return values of middlewares.\n */\n\nfunction mediate(middleware, tech, method, arg) {\n  if (arg === void 0) {\n    arg = null;\n  }\n\n  var callMethod = 'call' + toTitleCase(method);\n  var middlewareValue = middleware.reduce(middlewareIterator(callMethod), arg);\n  var terminated = middlewareValue === TERMINATOR; // deprecated. The `null` return value should instead return TERMINATOR to\n  // prevent confusion if a techs method actually returns null.\n\n  var returnValue = terminated ? null : tech[method](middlewareValue);\n  executeRight(middleware, method, returnValue, terminated);\n  return returnValue;\n}\n/**\n * Enumeration of allowed getters where the keys are method names.\n *\n * @type {Object}\n */\n\nvar allowedGetters = {\n  buffered: 1,\n  currentTime: 1,\n  duration: 1,\n  seekable: 1,\n  played: 1,\n  paused: 1,\n  volume: 1\n};\n/**\n * Enumeration of allowed setters where the keys are method names.\n *\n * @type {Object}\n */\n\nvar allowedSetters = {\n  setCurrentTime: 1,\n  setVolume: 1\n};\n/**\n * Enumeration of allowed mediators where the keys are method names.\n *\n * @type {Object}\n */\n\nvar allowedMediators = {\n  play: 1,\n  pause: 1\n};\n\nfunction middlewareIterator(method) {\n  return function (value, mw) {\n    // if the previous middleware terminated, pass along the termination\n    if (value === TERMINATOR) {\n      return TERMINATOR;\n    }\n\n    if (mw[method]) {\n      return mw[method](value);\n    }\n\n    return value;\n  };\n}\n\nfunction executeRight(mws, method, value, terminated) {\n  for (var i = mws.length - 1; i >= 0; i--) {\n    var mw = mws[i];\n\n    if (mw[method]) {\n      mw[method](terminated, value);\n    }\n  }\n}\n/**\n * Clear the middleware cache for a player.\n *\n * @param  {Player} player\n *         A {@link Player} instance.\n */\n\n\nfunction clearCacheForPlayer(player) {\n  middlewareInstances[player.id()] = null;\n}\n/**\n * {\n *  [playerId]: [[mwFactory, mwInstance], ...]\n * }\n *\n * @private\n */\n\nfunction getOrCreateFactory(player, mwFactory) {\n  var mws = middlewareInstances[player.id()];\n  var mw = null;\n\n  if (mws === undefined || mws === null) {\n    mw = mwFactory(player);\n    middlewareInstances[player.id()] = [[mwFactory, mw]];\n    return mw;\n  }\n\n  for (var i = 0; i < mws.length; i++) {\n    var _mws$i = mws[i],\n        mwf = _mws$i[0],\n        mwi = _mws$i[1];\n\n    if (mwf !== mwFactory) {\n      continue;\n    }\n\n    mw = mwi;\n  }\n\n  if (mw === null) {\n    mw = mwFactory(player);\n    mws.push([mwFactory, mw]);\n  }\n\n  return mw;\n}\n\nfunction setSourceHelper(src, middleware, next, player, acc, lastRun) {\n  if (src === void 0) {\n    src = {};\n  }\n\n  if (middleware === void 0) {\n    middleware = [];\n  }\n\n  if (acc === void 0) {\n    acc = [];\n  }\n\n  if (lastRun === void 0) {\n    lastRun = false;\n  }\n\n  var _middleware = middleware,\n      mwFactory = _middleware[0],\n      mwrest = _middleware.slice(1); // if mwFactory is a string, then we're at a fork in the road\n\n\n  if (typeof mwFactory === 'string') {\n    setSourceHelper(src, middlewares[mwFactory], next, player, acc, lastRun); // if we have an mwFactory, call it with the player to get the mw,\n    // then call the mw's setSource method\n  } else if (mwFactory) {\n    var mw = getOrCreateFactory(player, mwFactory); // if setSource isn't present, implicitly select this middleware\n\n    if (!mw.setSource) {\n      acc.push(mw);\n      return setSourceHelper(src, mwrest, next, player, acc, lastRun);\n    }\n\n    mw.setSource(assign({}, src), function (err, _src) {\n      // something happened, try the next middleware on the current level\n      // make sure to use the old src\n      if (err) {\n        return setSourceHelper(src, mwrest, next, player, acc, lastRun);\n      } // we've succeeded, now we need to go deeper\n\n\n      acc.push(mw); // if it's the same type, continue down the current chain\n      // otherwise, we want to go down the new chain\n\n      setSourceHelper(_src, src.type === _src.type ? mwrest : middlewares[_src.type], next, player, acc, lastRun);\n    });\n  } else if (mwrest.length) {\n    setSourceHelper(src, mwrest, next, player, acc, lastRun);\n  } else if (lastRun) {\n    next(src, acc);\n  } else {\n    setSourceHelper(src, middlewares['*'], next, player, acc, true);\n  }\n}\n\n/**\n * Mimetypes\n *\n * @see http://hul.harvard.edu/ois/////systems/wax/wax-public-help/mimetypes.htm\n * @typedef Mimetypes~Kind\n * @enum\n */\n\nvar MimetypesKind = {\n  opus: 'video/ogg',\n  ogv: 'video/ogg',\n  mp4: 'video/mp4',\n  mov: 'video/mp4',\n  m4v: 'video/mp4',\n  mkv: 'video/x-matroska',\n  m4a: 'audio/mp4',\n  mp3: 'audio/mpeg',\n  aac: 'audio/aac',\n  oga: 'audio/ogg',\n  m3u8: 'application/x-mpegURL',\n  jpg: 'image/jpeg',\n  jpeg: 'image/jpeg',\n  gif: 'image/gif',\n  png: 'image/png',\n  svg: 'image/svg+xml',\n  webp: 'image/webp'\n};\n/**\n * Get the mimetype of a given src url if possible\n *\n * @param {string} src\n *        The url to the src\n *\n * @return {string}\n *         return the mimetype if it was known or empty string otherwise\n */\n\nvar getMimetype = function getMimetype(src) {\n  if (src === void 0) {\n    src = '';\n  }\n\n  var ext = getFileExtension(src);\n  var mimetype = MimetypesKind[ext.toLowerCase()];\n  return mimetype || '';\n};\n/**\n * Find the mime type of a given source string if possible. Uses the player\n * source cache.\n *\n * @param {Player} player\n *        The player object\n *\n * @param {string} src\n *        The source string\n *\n * @return {string}\n *         The type that was found\n */\n\nvar findMimetype = function findMimetype(player, src) {\n  if (!src) {\n    return '';\n  } // 1. check for the type in the `source` cache\n\n\n  if (player.cache_.source.src === src && player.cache_.source.type) {\n    return player.cache_.source.type;\n  } // 2. see if we have this source in our `currentSources` cache\n\n\n  var matchingSources = player.cache_.sources.filter(function (s) {\n    return s.src === src;\n  });\n\n  if (matchingSources.length) {\n    return matchingSources[0].type;\n  } // 3. look for the src url in source elements and use the type there\n\n\n  var sources = player.$$('source');\n\n  for (var i = 0; i < sources.length; i++) {\n    var s = sources[i];\n\n    if (s.type && s.src && s.src === src) {\n      return s.type;\n    }\n  } // 4. finally fallback to our list of mime types based on src url extension\n\n\n  return getMimetype(src);\n};\n\n/**\n * @module filter-source\n */\n/**\n * Filter out single bad source objects or multiple source objects in an\n * array. Also flattens nested source object arrays into a 1 dimensional\n * array of source objects.\n *\n * @param {Tech~SourceObject|Tech~SourceObject[]} src\n *        The src object to filter\n *\n * @return {Tech~SourceObject[]}\n *         An array of sourceobjects containing only valid sources\n *\n * @private\n */\n\nvar filterSource = function filterSource(src) {\n  // traverse array\n  if (Array.isArray(src)) {\n    var newsrc = [];\n    src.forEach(function (srcobj) {\n      srcobj = filterSource(srcobj);\n\n      if (Array.isArray(srcobj)) {\n        newsrc = newsrc.concat(srcobj);\n      } else if (isObject(srcobj)) {\n        newsrc.push(srcobj);\n      }\n    });\n    src = newsrc;\n  } else if (typeof src === 'string' && src.trim()) {\n    // convert string into object\n    src = [fixSource({\n      src: src\n    })];\n  } else if (isObject(src) && typeof src.src === 'string' && src.src && src.src.trim()) {\n    // src is already valid\n    src = [fixSource(src)];\n  } else {\n    // invalid source, turn it into an empty array\n    src = [];\n  }\n\n  return src;\n};\n/**\n * Checks src mimetype, adding it when possible\n *\n * @param {Tech~SourceObject} src\n *        The src object to check\n * @return {Tech~SourceObject}\n *        src Object with known type\n */\n\n\nfunction fixSource(src) {\n  var mimetype = getMimetype(src.src);\n\n  if (!src.type && mimetype) {\n    src.type = mimetype;\n  }\n\n  return src;\n}\n\n/**\n * The `MediaLoader` is the `Component` that decides which playback technology to load\n * when a player is initialized.\n *\n * @extends Component\n */\n\nvar MediaLoader =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(MediaLoader, _Component);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should attach to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Component~ReadyCallback} [ready]\n   *        The function that is run when this component is ready.\n   */\n  function MediaLoader(player, options, ready) {\n    var _this;\n\n    // MediaLoader has no element\n    var options_ = mergeOptions({\n      createEl: false\n    }, options);\n    _this = _Component.call(this, player, options_, ready) || this; // If there are no sources when the player is initialized,\n    // load the first supported playback technology.\n\n    if (!options.playerOptions.sources || options.playerOptions.sources.length === 0) {\n      for (var i = 0, j = options.playerOptions.techOrder; i < j.length; i++) {\n        var techName = toTitleCase(j[i]);\n        var tech = Tech.getTech(techName); // Support old behavior of techs being registered as components.\n        // Remove once that deprecated behavior is removed.\n\n        if (!techName) {\n          tech = Component.getComponent(techName);\n        } // Check if the browser supports this technology\n\n\n        if (tech && tech.isSupported()) {\n          player.loadTech_(techName);\n          break;\n        }\n      }\n    } else {\n      // Loop through playback technologies (HTML5, Flash) and check for support.\n      // Then load the best source.\n      // A few assumptions here:\n      //   All playback technologies respect preload false.\n      player.src(options.playerOptions.sources);\n    }\n\n    return _this;\n  }\n\n  return MediaLoader;\n}(Component);\n\nComponent.registerComponent('MediaLoader', MediaLoader);\n\n/**\n * Component which is clickable or keyboard actionable, but is not a\n * native HTML button.\n *\n * @extends Component\n */\n\nvar ClickableComponent =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(ClickableComponent, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param  {Player} player\n   *         The `Player` that this class should be attached to.\n   *\n   * @param  {Object} [options]\n   *         The key/value store of player options.\n   */\n  function ClickableComponent(player, options) {\n    var _this;\n\n    _this = _Component.call(this, player, options) || this;\n\n    _this.emitTapEvents();\n\n    _this.enable();\n\n    return _this;\n  }\n  /**\n   * Create the `ClickableComponent`s DOM element.\n   *\n   * @param {string} [tag=div]\n   *        The element's node type.\n   *\n   * @param {Object} [props={}]\n   *        An object of properties that should be set on the element.\n   *\n   * @param {Object} [attributes={}]\n   *        An object of attributes that should be set on the element.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n\n\n  var _proto = ClickableComponent.prototype;\n\n  _proto.createEl = function createEl(tag, props, attributes) {\n    if (tag === void 0) {\n      tag = 'div';\n    }\n\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (attributes === void 0) {\n      attributes = {};\n    }\n\n    props = assign({\n      innerHTML: '<span aria-hidden=\"true\" class=\"vjs-icon-placeholder\"></span>',\n      className: this.buildCSSClass(),\n      tabIndex: 0\n    }, props);\n\n    if (tag === 'button') {\n      log.error(\"Creating a ClickableComponent with an HTML element of \" + tag + \" is not supported; use a Button instead.\");\n    } // Add ARIA attributes for clickable element which is not a native HTML button\n\n\n    attributes = assign({\n      role: 'button'\n    }, attributes);\n    this.tabIndex_ = props.tabIndex;\n\n    var el = _Component.prototype.createEl.call(this, tag, props, attributes);\n\n    this.createControlTextEl(el);\n    return el;\n  };\n\n  _proto.dispose = function dispose() {\n    // remove controlTextEl_ on dispose\n    this.controlTextEl_ = null;\n\n    _Component.prototype.dispose.call(this);\n  }\n  /**\n   * Create a control text element on this `ClickableComponent`\n   *\n   * @param {Element} [el]\n   *        Parent element for the control text.\n   *\n   * @return {Element}\n   *         The control text element that gets created.\n   */\n  ;\n\n  _proto.createControlTextEl = function createControlTextEl(el) {\n    this.controlTextEl_ = createEl('span', {\n      className: 'vjs-control-text'\n    }, {\n      // let the screen reader user know that the text of the element may change\n      'aria-live': 'polite'\n    });\n\n    if (el) {\n      el.appendChild(this.controlTextEl_);\n    }\n\n    this.controlText(this.controlText_, el);\n    return this.controlTextEl_;\n  }\n  /**\n   * Get or set the localize text to use for the controls on the `ClickableComponent`.\n   *\n   * @param {string} [text]\n   *        Control text for element.\n   *\n   * @param {Element} [el=this.el()]\n   *        Element to set the title on.\n   *\n   * @return {string}\n   *         - The control text when getting\n   */\n  ;\n\n  _proto.controlText = function controlText(text, el) {\n    if (el === void 0) {\n      el = this.el();\n    }\n\n    if (text === undefined) {\n      return this.controlText_ || 'Need Text';\n    }\n\n    var localizedText = this.localize(text);\n    this.controlText_ = text;\n    textContent(this.controlTextEl_, localizedText);\n\n    if (!this.nonIconControl) {\n      // Set title attribute if only an icon is shown\n      el.setAttribute('title', localizedText);\n    }\n  }\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  ;\n\n  _proto.buildCSSClass = function buildCSSClass() {\n    return \"vjs-control vjs-button \" + _Component.prototype.buildCSSClass.call(this);\n  }\n  /**\n   * Enable this `ClickableComponent`\n   */\n  ;\n\n  _proto.enable = function enable() {\n    if (!this.enabled_) {\n      this.enabled_ = true;\n      this.removeClass('vjs-disabled');\n      this.el_.setAttribute('aria-disabled', 'false');\n\n      if (typeof this.tabIndex_ !== 'undefined') {\n        this.el_.setAttribute('tabIndex', this.tabIndex_);\n      }\n\n      this.on(['tap', 'click'], this.handleClick);\n      this.on('keydown', this.handleKeyDown);\n    }\n  }\n  /**\n   * Disable this `ClickableComponent`\n   */\n  ;\n\n  _proto.disable = function disable() {\n    this.enabled_ = false;\n    this.addClass('vjs-disabled');\n    this.el_.setAttribute('aria-disabled', 'true');\n\n    if (typeof this.tabIndex_ !== 'undefined') {\n      this.el_.removeAttribute('tabIndex');\n    }\n\n    this.off(['tap', 'click'], this.handleClick);\n    this.off('keydown', this.handleKeyDown);\n  }\n  /**\n   * Event handler that is called when a `ClickableComponent` receives a\n   * `click` or `tap` event.\n   *\n   * @param {EventTarget~Event} event\n   *        The `tap` or `click` event that caused this function to be called.\n   *\n   * @listens tap\n   * @listens click\n   * @abstract\n   */\n  ;\n\n  _proto.handleClick = function handleClick(event) {}\n  /**\n   * Event handler that is called when a `ClickableComponent` receives a\n   * `keydown` event.\n   *\n   * By default, if the key is Space or Enter, it will trigger a `click` event.\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown` event that caused this function to be called.\n   *\n   * @listens keydown\n   */\n  ;\n\n  _proto.handleKeyDown = function handleKeyDown(event) {\n    // Support Space or Enter key operation to fire a click event. Also,\n    // prevent the event from propagating through the DOM and triggering\n    // Player hotkeys.\n    if (keycode.isEventKey(event, 'Space') || keycode.isEventKey(event, 'Enter')) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.trigger('click');\n    } else {\n      // Pass keypress handling up for unsupported keys\n      _Component.prototype.handleKeyDown.call(this, event);\n    }\n  };\n\n  return ClickableComponent;\n}(Component);\n\nComponent.registerComponent('ClickableComponent', ClickableComponent);\n\n/**\n * A `ClickableComponent` that handles showing the poster image for the player.\n *\n * @extends ClickableComponent\n */\n\nvar PosterImage =\n/*#__PURE__*/\nfunction (_ClickableComponent) {\n  _inheritsLoose(PosterImage, _ClickableComponent);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should attach to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function PosterImage(player, options) {\n    var _this;\n\n    _this = _ClickableComponent.call(this, player, options) || this;\n\n    _this.update();\n\n    player.on('posterchange', bind(_assertThisInitialized(_this), _this.update));\n    return _this;\n  }\n  /**\n   * Clean up and dispose of the `PosterImage`.\n   */\n\n\n  var _proto = PosterImage.prototype;\n\n  _proto.dispose = function dispose() {\n    this.player().off('posterchange', this.update);\n\n    _ClickableComponent.prototype.dispose.call(this);\n  }\n  /**\n   * Create the `PosterImage`s DOM element.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n  ;\n\n  _proto.createEl = function createEl$1() {\n    var el = createEl('div', {\n      className: 'vjs-poster',\n      // Don't want poster to be tabbable.\n      tabIndex: -1\n    });\n    return el;\n  }\n  /**\n   * An {@link EventTarget~EventListener} for {@link Player#posterchange} events.\n   *\n   * @listens Player#posterchange\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `Player#posterchange` event that triggered this function.\n   */\n  ;\n\n  _proto.update = function update(event) {\n    var url = this.player().poster();\n    this.setSrc(url); // If there's no poster source we should display:none on this component\n    // so it's not still clickable or right-clickable\n\n    if (url) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  }\n  /**\n   * Set the source of the `PosterImage` depending on the display method.\n   *\n   * @param {string} url\n   *        The URL to the source for the `PosterImage`.\n   */\n  ;\n\n  _proto.setSrc = function setSrc(url) {\n    var backgroundImage = ''; // Any falsy value should stay as an empty string, otherwise\n    // this will throw an extra error\n\n    if (url) {\n      backgroundImage = \"url(\\\"\" + url + \"\\\")\";\n    }\n\n    this.el_.style.backgroundImage = backgroundImage;\n  }\n  /**\n   * An {@link EventTarget~EventListener} for clicks on the `PosterImage`. See\n   * {@link ClickableComponent#handleClick} for instances where this will be triggered.\n   *\n   * @listens tap\n   * @listens click\n   * @listens keydown\n   *\n   * @param {EventTarget~Event} event\n   +        The `click`, `tap` or `keydown` event that caused this function to be called.\n   */\n  ;\n\n  _proto.handleClick = function handleClick(event) {\n    // We don't want a click to trigger playback when controls are disabled\n    if (!this.player_.controls()) {\n      return;\n    }\n\n    if (this.player_.tech(true)) {\n      this.player_.tech(true).focus();\n    }\n\n    if (this.player_.paused()) {\n      silencePromise(this.player_.play());\n    } else {\n      this.player_.pause();\n    }\n  };\n\n  return PosterImage;\n}(ClickableComponent);\n\nComponent.registerComponent('PosterImage', PosterImage);\n\nvar darkGray = '#222';\nvar lightGray = '#ccc';\nvar fontMap = {\n  monospace: 'monospace',\n  sansSerif: 'sans-serif',\n  serif: 'serif',\n  monospaceSansSerif: '\"Andale Mono\", \"Lucida Console\", monospace',\n  monospaceSerif: '\"Courier New\", monospace',\n  proportionalSansSerif: 'sans-serif',\n  proportionalSerif: 'serif',\n  casual: '\"Comic Sans MS\", Impact, fantasy',\n  script: '\"Monotype Corsiva\", cursive',\n  smallcaps: '\"Andale Mono\", \"Lucida Console\", monospace, sans-serif'\n};\n/**\n * Construct an rgba color from a given hex color code.\n *\n * @param {number} color\n *        Hex number for color, like #f0e or #f604e2.\n *\n * @param {number} opacity\n *        Value for opacity, 0.0 - 1.0.\n *\n * @return {string}\n *         The rgba color that was created, like 'rgba(255, 0, 0, 0.3)'.\n */\n\nfunction constructColor(color, opacity) {\n  var hex;\n\n  if (color.length === 4) {\n    // color looks like \"#f0e\"\n    hex = color[1] + color[1] + color[2] + color[2] + color[3] + color[3];\n  } else if (color.length === 7) {\n    // color looks like \"#f604e2\"\n    hex = color.slice(1);\n  } else {\n    throw new Error('Invalid color code provided, ' + color + '; must be formatted as e.g. #f0e or #f604e2.');\n  }\n\n  return 'rgba(' + parseInt(hex.slice(0, 2), 16) + ',' + parseInt(hex.slice(2, 4), 16) + ',' + parseInt(hex.slice(4, 6), 16) + ',' + opacity + ')';\n}\n/**\n * Try to update the style of a DOM element. Some style changes will throw an error,\n * particularly in IE8. Those should be noops.\n *\n * @param {Element} el\n *        The DOM element to be styled.\n *\n * @param {string} style\n *        The CSS property on the element that should be styled.\n *\n * @param {string} rule\n *        The style rule that should be applied to the property.\n *\n * @private\n */\n\nfunction tryUpdateStyle(el, style, rule) {\n  try {\n    el.style[style] = rule;\n  } catch (e) {\n    // Satisfies linter.\n    return;\n  }\n}\n/**\n * The component for displaying text track cues.\n *\n * @extends Component\n */\n\n\nvar TextTrackDisplay =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(TextTrackDisplay, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Component~ReadyCallback} [ready]\n   *        The function to call when `TextTrackDisplay` is ready.\n   */\n  function TextTrackDisplay(player, options, ready) {\n    var _this;\n\n    _this = _Component.call(this, player, options, ready) || this;\n    var updateDisplayHandler = bind(_assertThisInitialized(_this), _this.updateDisplay);\n    player.on('loadstart', bind(_assertThisInitialized(_this), _this.toggleDisplay));\n    player.on('texttrackchange', updateDisplayHandler);\n    player.on('loadedmetadata', bind(_assertThisInitialized(_this), _this.preselectTrack)); // This used to be called during player init, but was causing an error\n    // if a track should show by default and the display hadn't loaded yet.\n    // Should probably be moved to an external track loader when we support\n    // tracks that don't need a display.\n\n    player.ready(bind(_assertThisInitialized(_this), function () {\n      if (player.tech_ && player.tech_.featuresNativeTextTracks) {\n        this.hide();\n        return;\n      }\n\n      player.on('fullscreenchange', updateDisplayHandler);\n      player.on('playerresize', updateDisplayHandler);\n      window$1.addEventListener('orientationchange', updateDisplayHandler);\n      player.on('dispose', function () {\n        return window$1.removeEventListener('orientationchange', updateDisplayHandler);\n      });\n      var tracks = this.options_.playerOptions.tracks || [];\n\n      for (var i = 0; i < tracks.length; i++) {\n        this.player_.addRemoteTextTrack(tracks[i], true);\n      }\n\n      this.preselectTrack();\n    }));\n    return _this;\n  }\n  /**\n  * Preselect a track following this precedence:\n  * - matches the previously selected {@link TextTrack}'s language and kind\n  * - matches the previously selected {@link TextTrack}'s language only\n  * - is the first default captions track\n  * - is the first default descriptions track\n  *\n  * @listens Player#loadstart\n  */\n\n\n  var _proto = TextTrackDisplay.prototype;\n\n  _proto.preselectTrack = function preselectTrack() {\n    var modes = {\n      captions: 1,\n      subtitles: 1\n    };\n    var trackList = this.player_.textTracks();\n    var userPref = this.player_.cache_.selectedLanguage;\n    var firstDesc;\n    var firstCaptions;\n    var preferredTrack;\n\n    for (var i = 0; i < trackList.length; i++) {\n      var track = trackList[i];\n\n      if (userPref && userPref.enabled && userPref.language && userPref.language === track.language && track.kind in modes) {\n        // Always choose the track that matches both language and kind\n        if (track.kind === userPref.kind) {\n          preferredTrack = track; // or choose the first track that matches language\n        } else if (!preferredTrack) {\n          preferredTrack = track;\n        } // clear everything if offTextTrackMenuItem was clicked\n\n      } else if (userPref && !userPref.enabled) {\n        preferredTrack = null;\n        firstDesc = null;\n        firstCaptions = null;\n      } else if (track[\"default\"]) {\n        if (track.kind === 'descriptions' && !firstDesc) {\n          firstDesc = track;\n        } else if (track.kind in modes && !firstCaptions) {\n          firstCaptions = track;\n        }\n      }\n    } // The preferredTrack matches the user preference and takes\n    // precedence over all the other tracks.\n    // So, display the preferredTrack before the first default track\n    // and the subtitles/captions track before the descriptions track\n\n\n    if (preferredTrack) {\n      preferredTrack.mode = 'showing';\n    } else if (firstCaptions) {\n      firstCaptions.mode = 'showing';\n    } else if (firstDesc) {\n      firstDesc.mode = 'showing';\n    }\n  }\n  /**\n   * Turn display of {@link TextTrack}'s from the current state into the other state.\n   * There are only two states:\n   * - 'shown'\n   * - 'hidden'\n   *\n   * @listens Player#loadstart\n   */\n  ;\n\n  _proto.toggleDisplay = function toggleDisplay() {\n    if (this.player_.tech_ && this.player_.tech_.featuresNativeTextTracks) {\n      this.hide();\n    } else {\n      this.show();\n    }\n  }\n  /**\n   * Create the {@link Component}'s DOM element.\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  ;\n\n  _proto.createEl = function createEl() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-text-track-display'\n    }, {\n      'aria-live': 'off',\n      'aria-atomic': 'true'\n    });\n  }\n  /**\n   * Clear all displayed {@link TextTrack}s.\n   */\n  ;\n\n  _proto.clearDisplay = function clearDisplay() {\n    if (typeof window$1.WebVTT === 'function') {\n      window$1.WebVTT.processCues(window$1, [], this.el_);\n    }\n  }\n  /**\n   * Update the displayed TextTrack when a either a {@link Player#texttrackchange} or\n   * a {@link Player#fullscreenchange} is fired.\n   *\n   * @listens Player#texttrackchange\n   * @listens Player#fullscreenchange\n   */\n  ;\n\n  _proto.updateDisplay = function updateDisplay() {\n    var tracks = this.player_.textTracks();\n    var allowMultipleShowingTracks = this.options_.allowMultipleShowingTracks;\n    this.clearDisplay();\n\n    if (allowMultipleShowingTracks) {\n      var showingTracks = [];\n\n      for (var _i = 0; _i < tracks.length; ++_i) {\n        var track = tracks[_i];\n\n        if (track.mode !== 'showing') {\n          continue;\n        }\n\n        showingTracks.push(track);\n      }\n\n      this.updateForTrack(showingTracks);\n      return;\n    } //  Track display prioritization model: if multiple tracks are 'showing',\n    //  display the first 'subtitles' or 'captions' track which is 'showing',\n    //  otherwise display the first 'descriptions' track which is 'showing'\n\n\n    var descriptionsTrack = null;\n    var captionsSubtitlesTrack = null;\n    var i = tracks.length;\n\n    while (i--) {\n      var _track = tracks[i];\n\n      if (_track.mode === 'showing') {\n        if (_track.kind === 'descriptions') {\n          descriptionsTrack = _track;\n        } else {\n          captionsSubtitlesTrack = _track;\n        }\n      }\n    }\n\n    if (captionsSubtitlesTrack) {\n      if (this.getAttribute('aria-live') !== 'off') {\n        this.setAttribute('aria-live', 'off');\n      }\n\n      this.updateForTrack(captionsSubtitlesTrack);\n    } else if (descriptionsTrack) {\n      if (this.getAttribute('aria-live') !== 'assertive') {\n        this.setAttribute('aria-live', 'assertive');\n      }\n\n      this.updateForTrack(descriptionsTrack);\n    }\n  }\n  /**\n   * Style {@Link TextTrack} activeCues according to {@Link TextTrackSettings}.\n   *\n   * @param {TextTrack} track\n   *        Text track object containing active cues to style.\n   */\n  ;\n\n  _proto.updateDisplayState = function updateDisplayState(track) {\n    var overrides = this.player_.textTrackSettings.getValues();\n    var cues = track.activeCues;\n    var i = cues.length;\n\n    while (i--) {\n      var cue = cues[i];\n\n      if (!cue) {\n        continue;\n      }\n\n      var cueDiv = cue.displayState;\n\n      if (overrides.color) {\n        cueDiv.firstChild.style.color = overrides.color;\n      }\n\n      if (overrides.textOpacity) {\n        tryUpdateStyle(cueDiv.firstChild, 'color', constructColor(overrides.color || '#fff', overrides.textOpacity));\n      }\n\n      if (overrides.backgroundColor) {\n        cueDiv.firstChild.style.backgroundColor = overrides.backgroundColor;\n      }\n\n      if (overrides.backgroundOpacity) {\n        tryUpdateStyle(cueDiv.firstChild, 'backgroundColor', constructColor(overrides.backgroundColor || '#000', overrides.backgroundOpacity));\n      }\n\n      if (overrides.windowColor) {\n        if (overrides.windowOpacity) {\n          tryUpdateStyle(cueDiv, 'backgroundColor', constructColor(overrides.windowColor, overrides.windowOpacity));\n        } else {\n          cueDiv.style.backgroundColor = overrides.windowColor;\n        }\n      }\n\n      if (overrides.edgeStyle) {\n        if (overrides.edgeStyle === 'dropshadow') {\n          cueDiv.firstChild.style.textShadow = \"2px 2px 3px \" + darkGray + \", 2px 2px 4px \" + darkGray + \", 2px 2px 5px \" + darkGray;\n        } else if (overrides.edgeStyle === 'raised') {\n          cueDiv.firstChild.style.textShadow = \"1px 1px \" + darkGray + \", 2px 2px \" + darkGray + \", 3px 3px \" + darkGray;\n        } else if (overrides.edgeStyle === 'depressed') {\n          cueDiv.firstChild.style.textShadow = \"1px 1px \" + lightGray + \", 0 1px \" + lightGray + \", -1px -1px \" + darkGray + \", 0 -1px \" + darkGray;\n        } else if (overrides.edgeStyle === 'uniform') {\n          cueDiv.firstChild.style.textShadow = \"0 0 4px \" + darkGray + \", 0 0 4px \" + darkGray + \", 0 0 4px \" + darkGray + \", 0 0 4px \" + darkGray;\n        }\n      }\n\n      if (overrides.fontPercent && overrides.fontPercent !== 1) {\n        var fontSize = window$1.parseFloat(cueDiv.style.fontSize);\n        cueDiv.style.fontSize = fontSize * overrides.fontPercent + 'px';\n        cueDiv.style.height = 'auto';\n        cueDiv.style.top = 'auto';\n        cueDiv.style.bottom = '2px';\n      }\n\n      if (overrides.fontFamily && overrides.fontFamily !== 'default') {\n        if (overrides.fontFamily === 'small-caps') {\n          cueDiv.firstChild.style.fontVariant = 'small-caps';\n        } else {\n          cueDiv.firstChild.style.fontFamily = fontMap[overrides.fontFamily];\n        }\n      }\n    }\n  }\n  /**\n   * Add an {@link TextTrack} to to the {@link Tech}s {@link TextTrackList}.\n   *\n   * @param {TextTrack|TextTrack[]} tracks\n   *        Text track object or text track array to be added to the list.\n   */\n  ;\n\n  _proto.updateForTrack = function updateForTrack(tracks) {\n    if (!Array.isArray(tracks)) {\n      tracks = [tracks];\n    }\n\n    if (typeof window$1.WebVTT !== 'function' || tracks.every(function (track) {\n      return !track.activeCues;\n    })) {\n      return;\n    }\n\n    var cues = []; // push all active track cues\n\n    for (var i = 0; i < tracks.length; ++i) {\n      var track = tracks[i];\n\n      for (var j = 0; j < track.activeCues.length; ++j) {\n        cues.push(track.activeCues[j]);\n      }\n    } // removes all cues before it processes new ones\n\n\n    window$1.WebVTT.processCues(window$1, cues, this.el_); // add unique class to each language text track & add settings styling if necessary\n\n    for (var _i2 = 0; _i2 < tracks.length; ++_i2) {\n      var _track2 = tracks[_i2];\n\n      for (var _j = 0; _j < _track2.activeCues.length; ++_j) {\n        var cueEl = _track2.activeCues[_j].displayState;\n        addClass(cueEl, 'vjs-text-track-cue');\n        addClass(cueEl, 'vjs-text-track-cue-' + (_track2.language ? _track2.language : _i2));\n      }\n\n      if (this.player_.textTrackSettings) {\n        this.updateDisplayState(_track2);\n      }\n    }\n  };\n\n  return TextTrackDisplay;\n}(Component);\n\nComponent.registerComponent('TextTrackDisplay', TextTrackDisplay);\n\n/**\n * A loading spinner for use during waiting/loading events.\n *\n * @extends Component\n */\n\nvar LoadingSpinner =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(LoadingSpinner, _Component);\n\n  function LoadingSpinner() {\n    return _Component.apply(this, arguments) || this;\n  }\n\n  var _proto = LoadingSpinner.prototype;\n\n  /**\n   * Create the `LoadingSpinner`s DOM element.\n   *\n   * @return {Element}\n   *         The dom element that gets created.\n   */\n  _proto.createEl = function createEl$1() {\n    var isAudio = this.player_.isAudio();\n    var playerType = this.localize(isAudio ? 'Audio Player' : 'Video Player');\n    var controlText = createEl('span', {\n      className: 'vjs-control-text',\n      innerHTML: this.localize('{1} is loading.', [playerType])\n    });\n\n    var el = _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-loading-spinner',\n      dir: 'ltr'\n    });\n\n    el.appendChild(controlText);\n    return el;\n  };\n\n  return LoadingSpinner;\n}(Component);\n\nComponent.registerComponent('LoadingSpinner', LoadingSpinner);\n\n/**\n * Base class for all buttons.\n *\n * @extends ClickableComponent\n */\n\nvar Button =\n/*#__PURE__*/\nfunction (_ClickableComponent) {\n  _inheritsLoose(Button, _ClickableComponent);\n\n  function Button() {\n    return _ClickableComponent.apply(this, arguments) || this;\n  }\n\n  var _proto = Button.prototype;\n\n  /**\n   * Create the `Button`s DOM element.\n   *\n   * @param {string} [tag=\"button\"]\n   *        The element's node type. This argument is IGNORED: no matter what\n   *        is passed, it will always create a `button` element.\n   *\n   * @param {Object} [props={}]\n   *        An object of properties that should be set on the element.\n   *\n   * @param {Object} [attributes={}]\n   *        An object of attributes that should be set on the element.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n  _proto.createEl = function createEl(tag, props, attributes) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (attributes === void 0) {\n      attributes = {};\n    }\n\n    tag = 'button';\n    props = assign({\n      innerHTML: '<span aria-hidden=\"true\" class=\"vjs-icon-placeholder\"></span>',\n      className: this.buildCSSClass()\n    }, props); // Add attributes for button element\n\n    attributes = assign({\n      // Necessary since the default button type is \"submit\"\n      type: 'button'\n    }, attributes);\n    var el = Component.prototype.createEl.call(this, tag, props, attributes);\n    this.createControlTextEl(el);\n    return el;\n  }\n  /**\n   * Add a child `Component` inside of this `Button`.\n   *\n   * @param {string|Component} child\n   *        The name or instance of a child to add.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of options that will get passed to children of\n   *        the child.\n   *\n   * @return {Component}\n   *         The `Component` that gets added as a child. When using a string the\n   *         `Component` will get created by this process.\n   *\n   * @deprecated since version 5\n   */\n  ;\n\n  _proto.addChild = function addChild(child, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var className = this.constructor.name;\n    log.warn(\"Adding an actionable (user controllable) child to a Button (\" + className + \") is not supported; use a ClickableComponent instead.\"); // Avoid the error message generated by ClickableComponent's addChild method\n\n    return Component.prototype.addChild.call(this, child, options);\n  }\n  /**\n   * Enable the `Button` element so that it can be activated or clicked. Use this with\n   * {@link Button#disable}.\n   */\n  ;\n\n  _proto.enable = function enable() {\n    _ClickableComponent.prototype.enable.call(this);\n\n    this.el_.removeAttribute('disabled');\n  }\n  /**\n   * Disable the `Button` element so that it cannot be activated or clicked. Use this with\n   * {@link Button#enable}.\n   */\n  ;\n\n  _proto.disable = function disable() {\n    _ClickableComponent.prototype.disable.call(this);\n\n    this.el_.setAttribute('disabled', 'disabled');\n  }\n  /**\n   * This gets called when a `Button` has focus and `keydown` is triggered via a key\n   * press.\n   *\n   * @param {EventTarget~Event} event\n   *        The event that caused this function to get called.\n   *\n   * @listens keydown\n   */\n  ;\n\n  _proto.handleKeyDown = function handleKeyDown(event) {\n    // Ignore Space or Enter key operation, which is handled by the browser for\n    // a button - though not for its super class, ClickableComponent. Also,\n    // prevent the event from propagating through the DOM and triggering Player\n    // hotkeys. We do not preventDefault here because we _want_ the browser to\n    // handle it.\n    if (keycode.isEventKey(event, 'Space') || keycode.isEventKey(event, 'Enter')) {\n      event.stopPropagation();\n      return;\n    } // Pass keypress handling up for unsupported keys\n\n\n    _ClickableComponent.prototype.handleKeyDown.call(this, event);\n  };\n\n  return Button;\n}(ClickableComponent);\n\nComponent.registerComponent('Button', Button);\n\n/**\n * The initial play button that shows before the video has played. The hiding of the\n * `BigPlayButton` get done via CSS and `Player` states.\n *\n * @extends Button\n */\n\nvar BigPlayButton =\n/*#__PURE__*/\nfunction (_Button) {\n  _inheritsLoose(BigPlayButton, _Button);\n\n  function BigPlayButton(player, options) {\n    var _this;\n\n    _this = _Button.call(this, player, options) || this;\n    _this.mouseused_ = false;\n\n    _this.on('mousedown', _this.handleMouseDown);\n\n    return _this;\n  }\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object. Always returns 'vjs-big-play-button'.\n   */\n\n\n  var _proto = BigPlayButton.prototype;\n\n  _proto.buildCSSClass = function buildCSSClass() {\n    return 'vjs-big-play-button';\n  }\n  /**\n   * This gets called when a `BigPlayButton` \"clicked\". See {@link ClickableComponent}\n   * for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n  ;\n\n  _proto.handleClick = function handleClick(event) {\n    var playPromise = this.player_.play(); // exit early if clicked via the mouse\n\n    if (this.mouseused_ && event.clientX && event.clientY) {\n      silencePromise(playPromise);\n\n      if (this.player_.tech(true)) {\n        this.player_.tech(true).focus();\n      }\n\n      return;\n    }\n\n    var cb = this.player_.getChild('controlBar');\n    var playToggle = cb && cb.getChild('playToggle');\n\n    if (!playToggle) {\n      this.player_.tech(true).focus();\n      return;\n    }\n\n    var playFocus = function playFocus() {\n      return playToggle.focus();\n    };\n\n    if (isPromise(playPromise)) {\n      playPromise.then(playFocus, function () {});\n    } else {\n      this.setTimeout(playFocus, 1);\n    }\n  };\n\n  _proto.handleKeyDown = function handleKeyDown(event) {\n    this.mouseused_ = false;\n\n    _Button.prototype.handleKeyDown.call(this, event);\n  };\n\n  _proto.handleMouseDown = function handleMouseDown(event) {\n    this.mouseused_ = true;\n  };\n\n  return BigPlayButton;\n}(Button);\n/**\n * The text that should display over the `BigPlayButton`s controls. Added to for localization.\n *\n * @type {string}\n * @private\n */\n\n\nBigPlayButton.prototype.controlText_ = 'Play Video';\nComponent.registerComponent('BigPlayButton', BigPlayButton);\n\n/**\n * The `CloseButton` is a `{@link Button}` that fires a `close` event when\n * it gets clicked.\n *\n * @extends Button\n */\n\nvar CloseButton =\n/*#__PURE__*/\nfunction (_Button) {\n  _inheritsLoose(CloseButton, _Button);\n\n  /**\n  * Creates an instance of the this class.\n  *\n  * @param  {Player} player\n  *         The `Player` that this class should be attached to.\n  *\n  * @param  {Object} [options]\n  *         The key/value store of player options.\n  */\n  function CloseButton(player, options) {\n    var _this;\n\n    _this = _Button.call(this, player, options) || this;\n\n    _this.controlText(options && options.controlText || _this.localize('Close'));\n\n    return _this;\n  }\n  /**\n  * Builds the default DOM `className`.\n  *\n  * @return {string}\n  *         The DOM `className` for this object.\n  */\n\n\n  var _proto = CloseButton.prototype;\n\n  _proto.buildCSSClass = function buildCSSClass() {\n    return \"vjs-close-button \" + _Button.prototype.buildCSSClass.call(this);\n  }\n  /**\n   * This gets called when a `CloseButton` gets clicked. See\n   * {@link ClickableComponent#handleClick} for more information on when\n   * this will be triggered\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   * @fires CloseButton#close\n   */\n  ;\n\n  _proto.handleClick = function handleClick(event) {\n    /**\n     * Triggered when the a `CloseButton` is clicked.\n     *\n     * @event CloseButton#close\n     * @type {EventTarget~Event}\n     *\n     * @property {boolean} [bubbles=false]\n     *           set to false so that the close event does not\n     *           bubble up to parents if there is no listener\n     */\n    this.trigger({\n      type: 'close',\n      bubbles: false\n    });\n  }\n  /**\n   * Event handler that is called when a `CloseButton` receives a\n   * `keydown` event.\n   *\n   * By default, if the key is Esc, it will trigger a `click` event.\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown` event that caused this function to be called.\n   *\n   * @listens keydown\n   */\n  ;\n\n  _proto.handleKeyDown = function handleKeyDown(event) {\n    // Esc button will trigger `click` event\n    if (keycode.isEventKey(event, 'Esc')) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.trigger('click');\n    } else {\n      // Pass keypress handling up for unsupported keys\n      _Button.prototype.handleKeyDown.call(this, event);\n    }\n  };\n\n  return CloseButton;\n}(Button);\n\nComponent.registerComponent('CloseButton', CloseButton);\n\n/**\n * Button to toggle between play and pause.\n *\n * @extends Button\n */\n\nvar PlayToggle =\n/*#__PURE__*/\nfunction (_Button) {\n  _inheritsLoose(PlayToggle, _Button);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of player options.\n   */\n  function PlayToggle(player, options) {\n    var _this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    _this = _Button.call(this, player, options) || this; // show or hide replay icon\n\n    options.replay = options.replay === undefined || options.replay;\n\n    _this.on(player, 'play', _this.handlePlay);\n\n    _this.on(player, 'pause', _this.handlePause);\n\n    if (options.replay) {\n      _this.on(player, 'ended', _this.handleEnded);\n    }\n\n    return _this;\n  }\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  var _proto = PlayToggle.prototype;\n\n  _proto.buildCSSClass = function buildCSSClass() {\n    return \"vjs-play-control \" + _Button.prototype.buildCSSClass.call(this);\n  }\n  /**\n   * This gets called when an `PlayToggle` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n  ;\n\n  _proto.handleClick = function handleClick(event) {\n    if (this.player_.paused()) {\n      this.player_.play();\n    } else {\n      this.player_.pause();\n    }\n\n    event.stopPropagation();\n  }\n  /**\n   * This gets called once after the video has ended and the user seeks so that\n   * we can change the replay button back to a play button.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The event that caused this function to run.\n   *\n   * @listens Player#seeked\n   */\n  ;\n\n  _proto.handleSeeked = function handleSeeked(event) {\n    this.removeClass('vjs-ended');\n\n    if (this.player_.paused()) {\n      this.handlePause(event);\n    } else {\n      this.handlePlay(event);\n    }\n  }\n  /**\n   * Add the vjs-playing class to the element so it can change appearance.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The event that caused this function to run.\n   *\n   * @listens Player#play\n   */\n  ;\n\n  _proto.handlePlay = function handlePlay(event) {\n    this.removeClass('vjs-ended');\n    this.removeClass('vjs-paused');\n    this.addClass('vjs-playing'); // change the button text to \"Pause\"\n\n    this.controlText('Pause');\n  }\n  /**\n   * Add the vjs-paused class to the element so it can change appearance.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The event that caused this function to run.\n   *\n   * @listens Player#pause\n   */\n  ;\n\n  _proto.handlePause = function handlePause(event) {\n    this.removeClass('vjs-playing');\n    this.addClass('vjs-paused'); // change the button text to \"Play\"\n\n    this.controlText('Play');\n  }\n  /**\n   * Add the vjs-ended class to the element so it can change appearance\n   *\n   * @param {EventTarget~Event} [event]\n   *        The event that caused this function to run.\n   *\n   * @listens Player#ended\n   */\n  ;\n\n  _proto.handleEnded = function handleEnded(event) {\n    this.removeClass('vjs-playing');\n    this.addClass('vjs-ended'); // change the button text to \"Replay\"\n\n    this.controlText('Replay'); // on the next seek remove the replay button\n\n    this.one(this.player_, 'seeked', this.handleSeeked);\n  };\n\n  return PlayToggle;\n}(Button);\n/**\n * The text that should display over the `PlayToggle`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\n\n\nPlayToggle.prototype.controlText_ = 'Play';\nComponent.registerComponent('PlayToggle', PlayToggle);\n\n/**\n * @file format-time.js\n * @module format-time\n */\n\n/**\n * Format seconds as a time string, H:MM:SS or M:SS. Supplying a guide (in\n * seconds) will force a number of leading zeros to cover the length of the\n * guide.\n *\n * @private\n * @param  {number} seconds\n *         Number of seconds to be turned into a string\n *\n * @param  {number} guide\n *         Number (in seconds) to model the string after\n *\n * @return {string}\n *         Time formatted as H:MM:SS or M:SS\n */\nvar defaultImplementation = function defaultImplementation(seconds, guide) {\n  seconds = seconds < 0 ? 0 : seconds;\n  var s = Math.floor(seconds % 60);\n  var m = Math.floor(seconds / 60 % 60);\n  var h = Math.floor(seconds / 3600);\n  var gm = Math.floor(guide / 60 % 60);\n  var gh = Math.floor(guide / 3600); // handle invalid times\n\n  if (isNaN(seconds) || seconds === Infinity) {\n    // '-' is false for all relational operators (e.g. <, >=) so this setting\n    // will add the minimum number of fields specified by the guide\n    h = m = s = '-';\n  } // Check if we need to show hours\n\n\n  h = h > 0 || gh > 0 ? h + ':' : ''; // If hours are showing, we may need to add a leading zero.\n  // Always show at least one digit of minutes.\n\n  m = ((h || gm >= 10) && m < 10 ? '0' + m : m) + ':'; // Check if leading zero is need for seconds\n\n  s = s < 10 ? '0' + s : s;\n  return h + m + s;\n}; // Internal pointer to the current implementation.\n\n\nvar implementation = defaultImplementation;\n/**\n * Replaces the default formatTime implementation with a custom implementation.\n *\n * @param {Function} customImplementation\n *        A function which will be used in place of the default formatTime\n *        implementation. Will receive the current time in seconds and the\n *        guide (in seconds) as arguments.\n */\n\nfunction setFormatTime(customImplementation) {\n  implementation = customImplementation;\n}\n/**\n * Resets formatTime to the default implementation.\n */\n\nfunction resetFormatTime() {\n  implementation = defaultImplementation;\n}\n/**\n * Delegates to either the default time formatting function or a custom\n * function supplied via `setFormatTime`.\n *\n * Formats seconds as a time string (H:MM:SS or M:SS). Supplying a\n * guide (in seconds) will force a number of leading zeros to cover the\n * length of the guide.\n *\n * @static\n * @example  formatTime(125, 600) === \"02:05\"\n * @param    {number} seconds\n *           Number of seconds to be turned into a string\n *\n * @param    {number} guide\n *           Number (in seconds) to model the string after\n *\n * @return   {string}\n *           Time formatted as H:MM:SS or M:SS\n */\n\nfunction formatTime(seconds, guide) {\n  if (guide === void 0) {\n    guide = seconds;\n  }\n\n  return implementation(seconds, guide);\n}\n\n/**\n * Displays time information about the video\n *\n * @extends Component\n */\n\nvar TimeDisplay =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(TimeDisplay, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function TimeDisplay(player, options) {\n    var _this;\n\n    _this = _Component.call(this, player, options) || this;\n    _this.throttledUpdateContent = throttle(bind(_assertThisInitialized(_this), _this.updateContent), 25);\n\n    _this.on(player, 'timeupdate', _this.throttledUpdateContent);\n\n    return _this;\n  }\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  var _proto = TimeDisplay.prototype;\n\n  _proto.createEl = function createEl$1() {\n    var className = this.buildCSSClass();\n\n    var el = _Component.prototype.createEl.call(this, 'div', {\n      className: className + \" vjs-time-control vjs-control\",\n      innerHTML: \"<span class=\\\"vjs-control-text\\\" role=\\\"presentation\\\">\" + this.localize(this.labelText_) + \"\\xA0</span>\"\n    });\n\n    this.contentEl_ = createEl('span', {\n      className: className + \"-display\"\n    }, {\n      // tell screen readers not to automatically read the time as it changes\n      'aria-live': 'off',\n      // span elements have no implicit role, but some screen readers (notably VoiceOver)\n      // treat them as a break between items in the DOM when using arrow keys\n      // (or left-to-right swipes on iOS) to read contents of a page. Using\n      // role='presentation' causes VoiceOver to NOT treat this span as a break.\n      'role': 'presentation'\n    });\n    this.updateTextNode_();\n    el.appendChild(this.contentEl_);\n    return el;\n  };\n\n  _proto.dispose = function dispose() {\n    this.contentEl_ = null;\n    this.textNode_ = null;\n\n    _Component.prototype.dispose.call(this);\n  }\n  /**\n   * Updates the \"remaining time\" text node with new content using the\n   * contents of the `formattedTime_` property.\n   *\n   * @private\n   */\n  ;\n\n  _proto.updateTextNode_ = function updateTextNode_() {\n    if (!this.contentEl_) {\n      return;\n    }\n\n    while (this.contentEl_.firstChild) {\n      this.contentEl_.removeChild(this.contentEl_.firstChild);\n    }\n\n    this.textNode_ = document.createTextNode(this.formattedTime_ || this.formatTime_(0));\n    this.contentEl_.appendChild(this.textNode_);\n  }\n  /**\n   * Generates a formatted time for this component to use in display.\n   *\n   * @param  {number} time\n   *         A numeric time, in seconds.\n   *\n   * @return {string}\n   *         A formatted time\n   *\n   * @private\n   */\n  ;\n\n  _proto.formatTime_ = function formatTime_(time) {\n    return formatTime(time);\n  }\n  /**\n   * Updates the time display text node if it has what was passed in changed\n   * the formatted time.\n   *\n   * @param {number} time\n   *        The time to update to\n   *\n   * @private\n   */\n  ;\n\n  _proto.updateFormattedTime_ = function updateFormattedTime_(time) {\n    var formattedTime = this.formatTime_(time);\n\n    if (formattedTime === this.formattedTime_) {\n      return;\n    }\n\n    this.formattedTime_ = formattedTime;\n    this.requestAnimationFrame(this.updateTextNode_);\n  }\n  /**\n   * To be filled out in the child class, should update the displayed time\n   * in accordance with the fact that the current time has changed.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `timeupdate`  event that caused this to run.\n   *\n   * @listens Player#timeupdate\n   */\n  ;\n\n  _proto.updateContent = function updateContent(event) {};\n\n  return TimeDisplay;\n}(Component);\n/**\n * The text that is added to the `TimeDisplay` for screen reader users.\n *\n * @type {string}\n * @private\n */\n\n\nTimeDisplay.prototype.labelText_ = 'Time';\n/**\n * The text that should display over the `TimeDisplay`s controls. Added to for localization.\n *\n * @type {string}\n * @private\n *\n * @deprecated in v7; controlText_ is not used in non-active display Components\n */\n\nTimeDisplay.prototype.controlText_ = 'Time';\nComponent.registerComponent('TimeDisplay', TimeDisplay);\n\n/**\n * Displays the current time\n *\n * @extends Component\n */\n\nvar CurrentTimeDisplay =\n/*#__PURE__*/\nfunction (_TimeDisplay) {\n  _inheritsLoose(CurrentTimeDisplay, _TimeDisplay);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function CurrentTimeDisplay(player, options) {\n    var _this;\n\n    _this = _TimeDisplay.call(this, player, options) || this;\n\n    _this.on(player, 'ended', _this.handleEnded);\n\n    return _this;\n  }\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  var _proto = CurrentTimeDisplay.prototype;\n\n  _proto.buildCSSClass = function buildCSSClass() {\n    return 'vjs-current-time';\n  }\n  /**\n   * Update current time display\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `timeupdate` event that caused this function to run.\n   *\n   * @listens Player#timeupdate\n   */\n  ;\n\n  _proto.updateContent = function updateContent(event) {\n    // Allows for smooth scrubbing, when player can't keep up.\n    var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();\n    this.updateFormattedTime_(time);\n  }\n  /**\n   * When the player fires ended there should be no time left. Sadly\n   * this is not always the case, lets make it seem like that is the case\n   * for users.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `ended` event that caused this to run.\n   *\n   * @listens Player#ended\n   */\n  ;\n\n  _proto.handleEnded = function handleEnded(event) {\n    if (!this.player_.duration()) {\n      return;\n    }\n\n    this.updateFormattedTime_(this.player_.duration());\n  };\n\n  return CurrentTimeDisplay;\n}(TimeDisplay);\n/**\n * The text that is added to the `CurrentTimeDisplay` for screen reader users.\n *\n * @type {string}\n * @private\n */\n\n\nCurrentTimeDisplay.prototype.labelText_ = 'Current Time';\n/**\n * The text that should display over the `CurrentTimeDisplay`s controls. Added to for localization.\n *\n * @type {string}\n * @private\n *\n * @deprecated in v7; controlText_ is not used in non-active display Components\n */\n\nCurrentTimeDisplay.prototype.controlText_ = 'Current Time';\nComponent.registerComponent('CurrentTimeDisplay', CurrentTimeDisplay);\n\n/**\n * Displays the duration\n *\n * @extends Component\n */\n\nvar DurationDisplay =\n/*#__PURE__*/\nfunction (_TimeDisplay) {\n  _inheritsLoose(DurationDisplay, _TimeDisplay);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function DurationDisplay(player, options) {\n    var _this;\n\n    _this = _TimeDisplay.call(this, player, options) || this; // we do not want to/need to throttle duration changes,\n    // as they should always display the changed duration as\n    // it has changed\n\n    _this.on(player, 'durationchange', _this.updateContent); // Listen to loadstart because the player duration is reset when a new media element is loaded,\n    // but the durationchange on the user agent will not fire.\n    // @see [Spec]{@link https://www.w3.org/TR/2011/WD-html5-20110113/video.html#media-element-load-algorithm}\n\n\n    _this.on(player, 'loadstart', _this.updateContent); // Also listen for timeupdate (in the parent) and loadedmetadata because removing those\n    // listeners could have broken dependent applications/libraries. These\n    // can likely be removed for 7.0.\n\n\n    _this.on(player, 'loadedmetadata', _this.throttledUpdateContent);\n\n    return _this;\n  }\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  var _proto = DurationDisplay.prototype;\n\n  _proto.buildCSSClass = function buildCSSClass() {\n    return 'vjs-duration';\n  }\n  /**\n   * Update duration time display.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `durationchange`, `timeupdate`, or `loadedmetadata` event that caused\n   *        this function to be called.\n   *\n   * @listens Player#durationchange\n   * @listens Player#timeupdate\n   * @listens Player#loadedmetadata\n   */\n  ;\n\n  _proto.updateContent = function updateContent(event) {\n    var duration = this.player_.duration();\n\n    if (this.duration_ !== duration) {\n      this.duration_ = duration;\n      this.updateFormattedTime_(duration);\n    }\n  };\n\n  return DurationDisplay;\n}(TimeDisplay);\n/**\n * The text that is added to the `DurationDisplay` for screen reader users.\n *\n * @type {string}\n * @private\n */\n\n\nDurationDisplay.prototype.labelText_ = 'Duration';\n/**\n * The text that should display over the `DurationDisplay`s controls. Added to for localization.\n *\n * @type {string}\n * @private\n *\n * @deprecated in v7; controlText_ is not used in non-active display Components\n */\n\nDurationDisplay.prototype.controlText_ = 'Duration';\nComponent.registerComponent('DurationDisplay', DurationDisplay);\n\n/**\n * The separator between the current time and duration.\n * Can be hidden if it's not needed in the design.\n *\n * @extends Component\n */\n\nvar TimeDivider =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(TimeDivider, _Component);\n\n  function TimeDivider() {\n    return _Component.apply(this, arguments) || this;\n  }\n\n  var _proto = TimeDivider.prototype;\n\n  /**\n   * Create the component's DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  _proto.createEl = function createEl() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-time-control vjs-time-divider',\n      innerHTML: '<div><span>/</span></div>'\n    }, {\n      // this element and its contents can be hidden from assistive techs since\n      // it is made extraneous by the announcement of the control text\n      // for the current time and duration displays\n      'aria-hidden': true\n    });\n  };\n\n  return TimeDivider;\n}(Component);\n\nComponent.registerComponent('TimeDivider', TimeDivider);\n\n/**\n * Displays the time left in the video\n *\n * @extends Component\n */\n\nvar RemainingTimeDisplay =\n/*#__PURE__*/\nfunction (_TimeDisplay) {\n  _inheritsLoose(RemainingTimeDisplay, _TimeDisplay);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function RemainingTimeDisplay(player, options) {\n    var _this;\n\n    _this = _TimeDisplay.call(this, player, options) || this;\n\n    _this.on(player, 'durationchange', _this.throttledUpdateContent);\n\n    _this.on(player, 'ended', _this.handleEnded);\n\n    return _this;\n  }\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  var _proto = RemainingTimeDisplay.prototype;\n\n  _proto.buildCSSClass = function buildCSSClass() {\n    return 'vjs-remaining-time';\n  }\n  /**\n   * Create the `Component`'s DOM element with the \"minus\" characted prepend to the time\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  ;\n\n  _proto.createEl = function createEl$1() {\n    var el = _TimeDisplay.prototype.createEl.call(this);\n\n    el.insertBefore(createEl('span', {}, {\n      'aria-hidden': true\n    }, '-'), this.contentEl_);\n    return el;\n  }\n  /**\n   * Update remaining time display.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `timeupdate` or `durationchange` event that caused this to run.\n   *\n   * @listens Player#timeupdate\n   * @listens Player#durationchange\n   */\n  ;\n\n  _proto.updateContent = function updateContent(event) {\n    if (typeof this.player_.duration() !== 'number') {\n      return;\n    } // @deprecated We should only use remainingTimeDisplay\n    // as of video.js 7\n\n\n    if (this.player_.remainingTimeDisplay) {\n      this.updateFormattedTime_(this.player_.remainingTimeDisplay());\n    } else {\n      this.updateFormattedTime_(this.player_.remainingTime());\n    }\n  }\n  /**\n   * When the player fires ended there should be no time left. Sadly\n   * this is not always the case, lets make it seem like that is the case\n   * for users.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `ended` event that caused this to run.\n   *\n   * @listens Player#ended\n   */\n  ;\n\n  _proto.handleEnded = function handleEnded(event) {\n    if (!this.player_.duration()) {\n      return;\n    }\n\n    this.updateFormattedTime_(0);\n  };\n\n  return RemainingTimeDisplay;\n}(TimeDisplay);\n/**\n * The text that is added to the `RemainingTimeDisplay` for screen reader users.\n *\n * @type {string}\n * @private\n */\n\n\nRemainingTimeDisplay.prototype.labelText_ = 'Remaining Time';\n/**\n * The text that should display over the `RemainingTimeDisplay`s controls. Added to for localization.\n *\n * @type {string}\n * @private\n *\n * @deprecated in v7; controlText_ is not used in non-active display Components\n */\n\nRemainingTimeDisplay.prototype.controlText_ = 'Remaining Time';\nComponent.registerComponent('RemainingTimeDisplay', RemainingTimeDisplay);\n\n/**\n * Displays the live indicator when duration is Infinity.\n *\n * @extends Component\n */\n\nvar LiveDisplay =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(LiveDisplay, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function LiveDisplay(player, options) {\n    var _this;\n\n    _this = _Component.call(this, player, options) || this;\n\n    _this.updateShowing();\n\n    _this.on(_this.player(), 'durationchange', _this.updateShowing);\n\n    return _this;\n  }\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  var _proto = LiveDisplay.prototype;\n\n  _proto.createEl = function createEl$1() {\n    var el = _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-live-control vjs-control'\n    });\n\n    this.contentEl_ = createEl('div', {\n      className: 'vjs-live-display',\n      innerHTML: \"<span class=\\\"vjs-control-text\\\">\" + this.localize('Stream Type') + \"\\xA0</span>\" + this.localize('LIVE')\n    }, {\n      'aria-live': 'off'\n    });\n    el.appendChild(this.contentEl_);\n    return el;\n  };\n\n  _proto.dispose = function dispose() {\n    this.contentEl_ = null;\n\n    _Component.prototype.dispose.call(this);\n  }\n  /**\n   * Check the duration to see if the LiveDisplay should be showing or not. Then show/hide\n   * it accordingly\n   *\n   * @param {EventTarget~Event} [event]\n   *        The {@link Player#durationchange} event that caused this function to run.\n   *\n   * @listens Player#durationchange\n   */\n  ;\n\n  _proto.updateShowing = function updateShowing(event) {\n    if (this.player().duration() === Infinity) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  };\n\n  return LiveDisplay;\n}(Component);\n\nComponent.registerComponent('LiveDisplay', LiveDisplay);\n\n/**\n * Displays the live indicator when duration is Infinity.\n *\n * @extends Component\n */\n\nvar SeekToLive =\n/*#__PURE__*/\nfunction (_Button) {\n  _inheritsLoose(SeekToLive, _Button);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function SeekToLive(player, options) {\n    var _this;\n\n    _this = _Button.call(this, player, options) || this;\n\n    _this.updateLiveEdgeStatus();\n\n    if (_this.player_.liveTracker) {\n      _this.on(_this.player_.liveTracker, 'liveedgechange', _this.updateLiveEdgeStatus);\n    }\n\n    return _this;\n  }\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  var _proto = SeekToLive.prototype;\n\n  _proto.createEl = function createEl$1() {\n    var el = _Button.prototype.createEl.call(this, 'button', {\n      className: 'vjs-seek-to-live-control vjs-control'\n    });\n\n    this.textEl_ = createEl('span', {\n      className: 'vjs-seek-to-live-text',\n      innerHTML: this.localize('LIVE')\n    }, {\n      'aria-hidden': 'true'\n    });\n    el.appendChild(this.textEl_);\n    return el;\n  }\n  /**\n   * Update the state of this button if we are at the live edge\n   * or not\n   */\n  ;\n\n  _proto.updateLiveEdgeStatus = function updateLiveEdgeStatus(e) {\n    // default to live edge\n    if (!this.player_.liveTracker || this.player_.liveTracker.atLiveEdge()) {\n      this.setAttribute('aria-disabled', true);\n      this.addClass('vjs-at-live-edge');\n      this.controlText('Seek to live, currently playing live');\n    } else {\n      this.setAttribute('aria-disabled', false);\n      this.removeClass('vjs-at-live-edge');\n      this.controlText('Seek to live, currently behind live');\n    }\n  }\n  /**\n   * On click bring us as near to the live point as possible.\n   * This requires that we wait for the next `live-seekable-change`\n   * event which will happen every segment length seconds.\n   */\n  ;\n\n  _proto.handleClick = function handleClick() {\n    this.player_.liveTracker.seekToLiveEdge();\n  }\n  /**\n   * Dispose of the element and stop tracking\n   */\n  ;\n\n  _proto.dispose = function dispose() {\n    if (this.player_.liveTracker) {\n      this.off(this.player_.liveTracker, 'liveedgechange', this.updateLiveEdgeStatus);\n    }\n\n    this.textEl_ = null;\n\n    _Button.prototype.dispose.call(this);\n  };\n\n  return SeekToLive;\n}(Button);\n\nSeekToLive.prototype.controlText_ = 'Seek to live, currently playing live';\nComponent.registerComponent('SeekToLive', SeekToLive);\n\n/**\n * The base functionality for a slider. Can be vertical or horizontal.\n * For instance the volume bar or the seek bar on a video is a slider.\n *\n * @extends Component\n */\n\nvar Slider =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(Slider, _Component);\n\n  /**\n  * Create an instance of this class\n  *\n  * @param {Player} player\n  *        The `Player` that this class should be attached to.\n  *\n  * @param {Object} [options]\n  *        The key/value store of player options.\n  */\n  function Slider(player, options) {\n    var _this;\n\n    _this = _Component.call(this, player, options) || this; // Set property names to bar to match with the child Slider class is looking for\n\n    _this.bar = _this.getChild(_this.options_.barName); // Set a horizontal or vertical class on the slider depending on the slider type\n\n    _this.vertical(!!_this.options_.vertical);\n\n    _this.enable();\n\n    return _this;\n  }\n  /**\n   * Are controls are currently enabled for this slider or not.\n   *\n   * @return {boolean}\n   *         true if controls are enabled, false otherwise\n   */\n\n\n  var _proto = Slider.prototype;\n\n  _proto.enabled = function enabled() {\n    return this.enabled_;\n  }\n  /**\n   * Enable controls for this slider if they are disabled\n   */\n  ;\n\n  _proto.enable = function enable() {\n    if (this.enabled()) {\n      return;\n    }\n\n    this.on('mousedown', this.handleMouseDown);\n    this.on('touchstart', this.handleMouseDown);\n    this.on('keydown', this.handleKeyDown);\n    this.on('click', this.handleClick);\n    this.on(this.player_, 'controlsvisible', this.update);\n\n    if (this.playerEvent) {\n      this.on(this.player_, this.playerEvent, this.update);\n    }\n\n    this.removeClass('disabled');\n    this.setAttribute('tabindex', 0);\n    this.enabled_ = true;\n  }\n  /**\n   * Disable controls for this slider if they are enabled\n   */\n  ;\n\n  _proto.disable = function disable() {\n    if (!this.enabled()) {\n      return;\n    }\n\n    var doc = this.bar.el_.ownerDocument;\n    this.off('mousedown', this.handleMouseDown);\n    this.off('touchstart', this.handleMouseDown);\n    this.off('keydown', this.handleKeyDown);\n    this.off('click', this.handleClick);\n    this.off(this.player_, 'controlsvisible', this.update);\n    this.off(doc, 'mousemove', this.handleMouseMove);\n    this.off(doc, 'mouseup', this.handleMouseUp);\n    this.off(doc, 'touchmove', this.handleMouseMove);\n    this.off(doc, 'touchend', this.handleMouseUp);\n    this.removeAttribute('tabindex');\n    this.addClass('disabled');\n\n    if (this.playerEvent) {\n      this.off(this.player_, this.playerEvent, this.update);\n    }\n\n    this.enabled_ = false;\n  }\n  /**\n   * Create the `Slider`s DOM element.\n   *\n   * @param {string} type\n   *        Type of element to create.\n   *\n   * @param {Object} [props={}]\n   *        List of properties in Object form.\n   *\n   * @param {Object} [attributes={}]\n   *        list of attributes in Object form.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n  ;\n\n  _proto.createEl = function createEl(type, props, attributes) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (attributes === void 0) {\n      attributes = {};\n    }\n\n    // Add the slider element class to all sub classes\n    props.className = props.className + ' vjs-slider';\n    props = assign({\n      tabIndex: 0\n    }, props);\n    attributes = assign({\n      'role': 'slider',\n      'aria-valuenow': 0,\n      'aria-valuemin': 0,\n      'aria-valuemax': 100,\n      'tabIndex': 0\n    }, attributes);\n    return _Component.prototype.createEl.call(this, type, props, attributes);\n  }\n  /**\n   * Handle `mousedown` or `touchstart` events on the `Slider`.\n   *\n   * @param {EventTarget~Event} event\n   *        `mousedown` or `touchstart` event that triggered this function\n   *\n   * @listens mousedown\n   * @listens touchstart\n   * @fires Slider#slideractive\n   */\n  ;\n\n  _proto.handleMouseDown = function handleMouseDown(event) {\n    var doc = this.bar.el_.ownerDocument;\n\n    if (event.type === 'mousedown') {\n      event.preventDefault();\n    } // Do not call preventDefault() on touchstart in Chrome\n    // to avoid console warnings. Use a 'touch-action: none' style\n    // instead to prevent unintented scrolling.\n    // https://developers.google.com/web/updates/2017/01/scrolling-intervention\n\n\n    if (event.type === 'touchstart' && !IS_CHROME) {\n      event.preventDefault();\n    }\n\n    blockTextSelection();\n    this.addClass('vjs-sliding');\n    /**\n     * Triggered when the slider is in an active state\n     *\n     * @event Slider#slideractive\n     * @type {EventTarget~Event}\n     */\n\n    this.trigger('slideractive');\n    this.on(doc, 'mousemove', this.handleMouseMove);\n    this.on(doc, 'mouseup', this.handleMouseUp);\n    this.on(doc, 'touchmove', this.handleMouseMove);\n    this.on(doc, 'touchend', this.handleMouseUp);\n    this.handleMouseMove(event);\n  }\n  /**\n   * Handle the `mousemove`, `touchmove`, and `mousedown` events on this `Slider`.\n   * The `mousemove` and `touchmove` events will only only trigger this function during\n   * `mousedown` and `touchstart`. This is due to {@link Slider#handleMouseDown} and\n   * {@link Slider#handleMouseUp}.\n   *\n   * @param {EventTarget~Event} event\n   *        `mousedown`, `mousemove`, `touchstart`, or `touchmove` event that triggered\n   *        this function\n   *\n   * @listens mousemove\n   * @listens touchmove\n   */\n  ;\n\n  _proto.handleMouseMove = function handleMouseMove(event) {}\n  /**\n   * Handle `mouseup` or `touchend` events on the `Slider`.\n   *\n   * @param {EventTarget~Event} event\n   *        `mouseup` or `touchend` event that triggered this function.\n   *\n   * @listens touchend\n   * @listens mouseup\n   * @fires Slider#sliderinactive\n   */\n  ;\n\n  _proto.handleMouseUp = function handleMouseUp() {\n    var doc = this.bar.el_.ownerDocument;\n    unblockTextSelection();\n    this.removeClass('vjs-sliding');\n    /**\n     * Triggered when the slider is no longer in an active state.\n     *\n     * @event Slider#sliderinactive\n     * @type {EventTarget~Event}\n     */\n\n    this.trigger('sliderinactive');\n    this.off(doc, 'mousemove', this.handleMouseMove);\n    this.off(doc, 'mouseup', this.handleMouseUp);\n    this.off(doc, 'touchmove', this.handleMouseMove);\n    this.off(doc, 'touchend', this.handleMouseUp);\n    this.update();\n  }\n  /**\n   * Update the progress bar of the `Slider`.\n   *\n   * @return {number}\n   *          The percentage of progress the progress bar represents as a\n   *          number from 0 to 1.\n   */\n  ;\n\n  _proto.update = function update() {\n    // In VolumeBar init we have a setTimeout for update that pops and update\n    // to the end of the execution stack. The player is destroyed before then\n    // update will cause an error\n    if (!this.el_) {\n      return;\n    } // If scrubbing, we could use a cached value to make the handle keep up\n    // with the user's mouse. On HTML5 browsers scrubbing is really smooth, but\n    // some flash players are slow, so we might want to utilize this later.\n    // var progress =  (this.player_.scrubbing()) ? this.player_.getCache().currentTime / this.player_.duration() : this.player_.currentTime() / this.player_.duration();\n\n\n    var progress = this.getPercent();\n    var bar = this.bar; // If there's no bar...\n\n    if (!bar) {\n      return;\n    } // Protect against no duration and other division issues\n\n\n    if (typeof progress !== 'number' || progress !== progress || progress < 0 || progress === Infinity) {\n      progress = 0;\n    } // Convert to a percentage for setting\n\n\n    var percentage = (progress * 100).toFixed(2) + '%';\n    var style = bar.el().style; // Set the new bar width or height\n\n    if (this.vertical()) {\n      style.height = percentage;\n    } else {\n      style.width = percentage;\n    }\n\n    return progress;\n  }\n  /**\n   * Calculate distance for slider\n   *\n   * @param {EventTarget~Event} event\n   *        The event that caused this function to run.\n   *\n   * @return {number}\n   *         The current position of the Slider.\n   *         - position.x for vertical `Slider`s\n   *         - position.y for horizontal `Slider`s\n   */\n  ;\n\n  _proto.calculateDistance = function calculateDistance(event) {\n    var position = getPointerPosition(this.el_, event);\n\n    if (this.vertical()) {\n      return position.y;\n    }\n\n    return position.x;\n  }\n  /**\n   * Handle a `keydown` event on the `Slider`. Watches for left, rigth, up, and down\n   * arrow keys. This function will only be called when the slider has focus. See\n   * {@link Slider#handleFocus} and {@link Slider#handleBlur}.\n   *\n   * @param {EventTarget~Event} event\n   *        the `keydown` event that caused this function to run.\n   *\n   * @listens keydown\n   */\n  ;\n\n  _proto.handleKeyDown = function handleKeyDown(event) {\n    // Left and Down Arrows\n    if (keycode.isEventKey(event, 'Left') || keycode.isEventKey(event, 'Down')) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.stepBack(); // Up and Right Arrows\n    } else if (keycode.isEventKey(event, 'Right') || keycode.isEventKey(event, 'Up')) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.stepForward();\n    } else {\n      // Pass keydown handling up for unsupported keys\n      _Component.prototype.handleKeyDown.call(this, event);\n    }\n  }\n  /**\n   * Listener for click events on slider, used to prevent clicks\n   *   from bubbling up to parent elements like button menus.\n   *\n   * @param {Object} event\n   *        Event that caused this object to run\n   */\n  ;\n\n  _proto.handleClick = function handleClick(event) {\n    event.stopPropagation();\n    event.preventDefault();\n  }\n  /**\n   * Get/set if slider is horizontal for vertical\n   *\n   * @param {boolean} [bool]\n   *        - true if slider is vertical,\n   *        - false is horizontal\n   *\n   * @return {boolean}\n   *         - true if slider is vertical, and getting\n   *         - false if the slider is horizontal, and getting\n   */\n  ;\n\n  _proto.vertical = function vertical(bool) {\n    if (bool === undefined) {\n      return this.vertical_ || false;\n    }\n\n    this.vertical_ = !!bool;\n\n    if (this.vertical_) {\n      this.addClass('vjs-slider-vertical');\n    } else {\n      this.addClass('vjs-slider-horizontal');\n    }\n  };\n\n  return Slider;\n}(Component);\n\nComponent.registerComponent('Slider', Slider);\n\n/**\n * Shows loading progress\n *\n * @extends Component\n */\n\nvar LoadProgressBar =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(LoadProgressBar, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function LoadProgressBar(player, options) {\n    var _this;\n\n    _this = _Component.call(this, player, options) || this;\n    _this.partEls_ = [];\n\n    _this.on(player, 'progress', _this.update);\n\n    return _this;\n  }\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  var _proto = LoadProgressBar.prototype;\n\n  _proto.createEl = function createEl() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-load-progress',\n      innerHTML: \"<span class=\\\"vjs-control-text\\\"><span>\" + this.localize('Loaded') + \"</span>: <span class=\\\"vjs-control-text-loaded-percentage\\\">0%</span></span>\"\n    });\n  };\n\n  _proto.dispose = function dispose() {\n    this.partEls_ = null;\n\n    _Component.prototype.dispose.call(this);\n  }\n  /**\n   * Update progress bar\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `progress` event that caused this function to run.\n   *\n   * @listens Player#progress\n   */\n  ;\n\n  _proto.update = function update(event) {\n    var liveTracker = this.player_.liveTracker;\n    var buffered = this.player_.buffered();\n    var duration = liveTracker && liveTracker.isLive() ? liveTracker.seekableEnd() : this.player_.duration();\n    var bufferedEnd = this.player_.bufferedEnd();\n    var children = this.partEls_;\n    var controlTextPercentage = this.$('.vjs-control-text-loaded-percentage'); // get the percent width of a time compared to the total end\n\n    var percentify = function percentify(time, end, rounded) {\n      // no NaN\n      var percent = time / end || 0;\n      percent = (percent >= 1 ? 1 : percent) * 100;\n\n      if (rounded) {\n        percent = percent.toFixed(2);\n      }\n\n      return percent + '%';\n    }; // update the width of the progress bar\n\n\n    this.el_.style.width = percentify(bufferedEnd, duration); // update the control-text\n\n    textContent(controlTextPercentage, percentify(bufferedEnd, duration, true)); // add child elements to represent the individual buffered time ranges\n\n    for (var i = 0; i < buffered.length; i++) {\n      var start = buffered.start(i);\n      var end = buffered.end(i);\n      var part = children[i];\n\n      if (!part) {\n        part = this.el_.appendChild(createEl());\n        children[i] = part;\n      } // set the percent based on the width of the progress bar (bufferedEnd)\n\n\n      part.style.left = percentify(start, bufferedEnd);\n      part.style.width = percentify(end - start, bufferedEnd);\n    } // remove unused buffered range elements\n\n\n    for (var _i = children.length; _i > buffered.length; _i--) {\n      this.el_.removeChild(children[_i - 1]);\n    }\n\n    children.length = buffered.length;\n  };\n\n  return LoadProgressBar;\n}(Component);\n\nComponent.registerComponent('LoadProgressBar', LoadProgressBar);\n\n/**\n * Time tooltips display a time above the progress bar.\n *\n * @extends Component\n */\n\nvar TimeTooltip =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(TimeTooltip, _Component);\n\n  function TimeTooltip() {\n    return _Component.apply(this, arguments) || this;\n  }\n\n  var _proto = TimeTooltip.prototype;\n\n  /**\n   * Create the time tooltip DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  _proto.createEl = function createEl() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-time-tooltip'\n    }, {\n      'aria-hidden': 'true'\n    });\n  }\n  /**\n   * Updates the position of the time tooltip relative to the `SeekBar`.\n   *\n   * @param {Object} seekBarRect\n   *        The `ClientRect` for the {@link SeekBar} element.\n   *\n   * @param {number} seekBarPoint\n   *        A number from 0 to 1, representing a horizontal reference point\n   *        from the left edge of the {@link SeekBar}\n   */\n  ;\n\n  _proto.update = function update(seekBarRect, seekBarPoint, content) {\n    var tooltipRect = getBoundingClientRect(this.el_);\n    var playerRect = getBoundingClientRect(this.player_.el());\n    var seekBarPointPx = seekBarRect.width * seekBarPoint; // do nothing if either rect isn't available\n    // for example, if the player isn't in the DOM for testing\n\n    if (!playerRect || !tooltipRect) {\n      return;\n    } // This is the space left of the `seekBarPoint` available within the bounds\n    // of the player. We calculate any gap between the left edge of the player\n    // and the left edge of the `SeekBar` and add the number of pixels in the\n    // `SeekBar` before hitting the `seekBarPoint`\n\n\n    var spaceLeftOfPoint = seekBarRect.left - playerRect.left + seekBarPointPx; // This is the space right of the `seekBarPoint` available within the bounds\n    // of the player. We calculate the number of pixels from the `seekBarPoint`\n    // to the right edge of the `SeekBar` and add to that any gap between the\n    // right edge of the `SeekBar` and the player.\n\n    var spaceRightOfPoint = seekBarRect.width - seekBarPointPx + (playerRect.right - seekBarRect.right); // This is the number of pixels by which the tooltip will need to be pulled\n    // further to the right to center it over the `seekBarPoint`.\n\n    var pullTooltipBy = tooltipRect.width / 2; // Adjust the `pullTooltipBy` distance to the left or right depending on\n    // the results of the space calculations above.\n\n    if (spaceLeftOfPoint < pullTooltipBy) {\n      pullTooltipBy += pullTooltipBy - spaceLeftOfPoint;\n    } else if (spaceRightOfPoint < pullTooltipBy) {\n      pullTooltipBy = spaceRightOfPoint;\n    } // Due to the imprecision of decimal/ratio based calculations and varying\n    // rounding behaviors, there are cases where the spacing adjustment is off\n    // by a pixel or two. This adds insurance to these calculations.\n\n\n    if (pullTooltipBy < 0) {\n      pullTooltipBy = 0;\n    } else if (pullTooltipBy > tooltipRect.width) {\n      pullTooltipBy = tooltipRect.width;\n    }\n\n    this.el_.style.right = \"-\" + pullTooltipBy + \"px\";\n    this.write(content);\n  }\n  /**\n   * Write the time to the tooltip DOM element.\n   *\n   * @param {String} content\n   *        The formatted time for the tooltip.\n   */\n  ;\n\n  _proto.write = function write(content) {\n    textContent(this.el_, content);\n  }\n  /**\n   * Updates the position of the time tooltip relative to the `SeekBar`.\n   *\n   * @param {Object} seekBarRect\n   *        The `ClientRect` for the {@link SeekBar} element.\n   *\n   * @param {number} seekBarPoint\n   *        A number from 0 to 1, representing a horizontal reference point\n   *        from the left edge of the {@link SeekBar}\n   *\n   * @param {number} time\n   *        The time to update the tooltip to, not used during live playback\n   *\n   * @param {Function} cb\n   *        A function that will be called during the request animation frame\n   *        for tooltips that need to do additional animations from the default\n   */\n  ;\n\n  _proto.updateTime = function updateTime(seekBarRect, seekBarPoint, time, cb) {\n    var _this = this;\n\n    // If there is an existing rAF ID, cancel it so we don't over-queue.\n    if (this.rafId_) {\n      this.cancelAnimationFrame(this.rafId_);\n    }\n\n    this.rafId_ = this.requestAnimationFrame(function () {\n      var content;\n\n      var duration = _this.player_.duration();\n\n      if (_this.player_.liveTracker && _this.player_.liveTracker.isLive()) {\n        var liveWindow = _this.player_.liveTracker.liveWindow();\n\n        var secondsBehind = liveWindow - seekBarPoint * liveWindow;\n        content = (secondsBehind < 1 ? '' : '-') + formatTime(secondsBehind, liveWindow);\n      } else {\n        content = formatTime(time, duration);\n      }\n\n      _this.update(seekBarRect, seekBarPoint, content);\n\n      if (cb) {\n        cb();\n      }\n    });\n  };\n\n  return TimeTooltip;\n}(Component);\n\nComponent.registerComponent('TimeTooltip', TimeTooltip);\n\n/**\n * Used by {@link SeekBar} to display media playback progress as part of the\n * {@link ProgressControl}.\n *\n * @extends Component\n */\n\nvar PlayProgressBar =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(PlayProgressBar, _Component);\n\n  function PlayProgressBar() {\n    return _Component.apply(this, arguments) || this;\n  }\n\n  var _proto = PlayProgressBar.prototype;\n\n  /**\n   * Create the the DOM element for this class.\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  _proto.createEl = function createEl() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-play-progress vjs-slider-bar'\n    }, {\n      'aria-hidden': 'true'\n    });\n  }\n  /**\n   * Enqueues updates to its own DOM as well as the DOM of its\n   * {@link TimeTooltip} child.\n   *\n   * @param {Object} seekBarRect\n   *        The `ClientRect` for the {@link SeekBar} element.\n   *\n   * @param {number} seekBarPoint\n   *        A number from 0 to 1, representing a horizontal reference point\n   *        from the left edge of the {@link SeekBar}\n   */\n  ;\n\n  _proto.update = function update(seekBarRect, seekBarPoint) {\n    var timeTooltip = this.getChild('timeTooltip');\n\n    if (!timeTooltip) {\n      return;\n    }\n\n    var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();\n    timeTooltip.updateTime(seekBarRect, seekBarPoint, time);\n  };\n\n  return PlayProgressBar;\n}(Component);\n/**\n * Default options for {@link PlayProgressBar}.\n *\n * @type {Object}\n * @private\n */\n\n\nPlayProgressBar.prototype.options_ = {\n  children: []\n}; // Time tooltips should not be added to a player on mobile devices\n\nif (!IS_IOS && !IS_ANDROID) {\n  PlayProgressBar.prototype.options_.children.push('timeTooltip');\n}\n\nComponent.registerComponent('PlayProgressBar', PlayProgressBar);\n\n/**\n * The {@link MouseTimeDisplay} component tracks mouse movement over the\n * {@link ProgressControl}. It displays an indicator and a {@link TimeTooltip}\n * indicating the time which is represented by a given point in the\n * {@link ProgressControl}.\n *\n * @extends Component\n */\n\nvar MouseTimeDisplay =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(MouseTimeDisplay, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The {@link Player} that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function MouseTimeDisplay(player, options) {\n    var _this;\n\n    _this = _Component.call(this, player, options) || this;\n    _this.update = throttle(bind(_assertThisInitialized(_this), _this.update), 25);\n    return _this;\n  }\n  /**\n   * Create the DOM element for this class.\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  var _proto = MouseTimeDisplay.prototype;\n\n  _proto.createEl = function createEl() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-mouse-display'\n    });\n  }\n  /**\n   * Enqueues updates to its own DOM as well as the DOM of its\n   * {@link TimeTooltip} child.\n   *\n   * @param {Object} seekBarRect\n   *        The `ClientRect` for the {@link SeekBar} element.\n   *\n   * @param {number} seekBarPoint\n   *        A number from 0 to 1, representing a horizontal reference point\n   *        from the left edge of the {@link SeekBar}\n   */\n  ;\n\n  _proto.update = function update(seekBarRect, seekBarPoint) {\n    var _this2 = this;\n\n    var time = seekBarPoint * this.player_.duration();\n    this.getChild('timeTooltip').updateTime(seekBarRect, seekBarPoint, time, function () {\n      _this2.el_.style.left = seekBarRect.width * seekBarPoint + \"px\";\n    });\n  };\n\n  return MouseTimeDisplay;\n}(Component);\n/**\n * Default options for `MouseTimeDisplay`\n *\n * @type {Object}\n * @private\n */\n\n\nMouseTimeDisplay.prototype.options_ = {\n  children: ['timeTooltip']\n};\nComponent.registerComponent('MouseTimeDisplay', MouseTimeDisplay);\n\nvar STEP_SECONDS = 5; // The multiplier of STEP_SECONDS that PgUp/PgDown move the timeline.\n\nvar PAGE_KEY_MULTIPLIER = 12; // The interval at which the bar should update as it progresses.\n\nvar UPDATE_REFRESH_INTERVAL = 30;\n/**\n * Seek bar and container for the progress bars. Uses {@link PlayProgressBar}\n * as its `bar`.\n *\n * @extends Slider\n */\n\nvar SeekBar =\n/*#__PURE__*/\nfunction (_Slider) {\n  _inheritsLoose(SeekBar, _Slider);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function SeekBar(player, options) {\n    var _this;\n\n    _this = _Slider.call(this, player, options) || this;\n\n    _this.setEventHandlers_();\n\n    return _this;\n  }\n  /**\n   * Sets the event handlers\n   *\n   * @private\n   */\n\n\n  var _proto = SeekBar.prototype;\n\n  _proto.setEventHandlers_ = function setEventHandlers_() {\n    this.update = throttle(bind(this, this.update), UPDATE_REFRESH_INTERVAL);\n    this.on(this.player_, 'timeupdate', this.update);\n    this.on(this.player_, 'ended', this.handleEnded);\n    this.on(this.player_, 'durationchange', this.update);\n\n    if (this.player_.liveTracker) {\n      this.on(this.player_.liveTracker, 'liveedgechange', this.update);\n    } // when playing, let's ensure we smoothly update the play progress bar\n    // via an interval\n\n\n    this.updateInterval = null;\n    this.on(this.player_, ['playing'], this.enableInterval_);\n    this.on(this.player_, ['ended', 'pause', 'waiting'], this.disableInterval_); // we don't need to update the play progress if the document is hidden,\n    // also, this causes the CPU to spike and eventually crash the page on IE11.\n\n    if ('hidden' in document && 'visibilityState' in document) {\n      this.on(document, 'visibilitychange', this.toggleVisibility_);\n    }\n  };\n\n  _proto.toggleVisibility_ = function toggleVisibility_(e) {\n    if (document.hidden) {\n      this.disableInterval_(e);\n    } else {\n      this.enableInterval_(); // we just switched back to the page and someone may be looking, so, update ASAP\n\n      this.requestAnimationFrame(this.update);\n    }\n  };\n\n  _proto.enableInterval_ = function enableInterval_() {\n    var _this2 = this;\n\n    this.clearInterval(this.updateInterval);\n    this.updateInterval = this.setInterval(function () {\n      _this2.requestAnimationFrame(_this2.update);\n    }, UPDATE_REFRESH_INTERVAL);\n  };\n\n  _proto.disableInterval_ = function disableInterval_(e) {\n    if (this.player_.liveTracker && this.player_.liveTracker.isLive() && e.type !== 'ended') {\n      return;\n    }\n\n    this.clearInterval(this.updateInterval);\n  }\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  ;\n\n  _proto.createEl = function createEl() {\n    return _Slider.prototype.createEl.call(this, 'div', {\n      className: 'vjs-progress-holder'\n    }, {\n      'aria-label': this.localize('Progress Bar')\n    });\n  }\n  /**\n   * This function updates the play progress bar and accessibility\n   * attributes to whatever is passed in.\n   *\n   * @param {number} currentTime\n   *        The currentTime value that should be used for accessibility\n   *\n   * @param {number} percent\n   *        The percentage as a decimal that the bar should be filled from 0-1.\n   *\n   * @private\n   */\n  ;\n\n  _proto.update_ = function update_(currentTime, percent) {\n    var liveTracker = this.player_.liveTracker;\n    var duration = this.player_.duration();\n\n    if (liveTracker && liveTracker.isLive()) {\n      duration = this.player_.liveTracker.liveCurrentTime();\n    } // machine readable value of progress bar (percentage complete)\n\n\n    this.el_.setAttribute('aria-valuenow', (percent * 100).toFixed(2)); // human readable value of progress bar (time complete)\n\n    this.el_.setAttribute('aria-valuetext', this.localize('progress bar timing: currentTime={1} duration={2}', [formatTime(currentTime, duration), formatTime(duration, duration)], '{1} of {2}')); // Update the `PlayProgressBar`.\n\n    if (this.bar) {\n      this.bar.update(getBoundingClientRect(this.el_), percent);\n    }\n  }\n  /**\n   * Update the seek bar's UI.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `timeupdate` or `ended` event that caused this to run.\n   *\n   * @listens Player#timeupdate\n   *\n   * @return {number}\n   *          The current percent at a number from 0-1\n   */\n  ;\n\n  _proto.update = function update(event) {\n    // if the offsetParent is null, then this element is hidden, in which case\n    // we don't need to update it.\n    if (this.el().offsetParent === null) {\n      return;\n    }\n\n    var percent = _Slider.prototype.update.call(this);\n\n    this.update_(this.getCurrentTime_(), percent);\n    return percent;\n  }\n  /**\n   * Get the value of current time but allows for smooth scrubbing,\n   * when player can't keep up.\n   *\n   * @return {number}\n   *         The current time value to display\n   *\n   * @private\n   */\n  ;\n\n  _proto.getCurrentTime_ = function getCurrentTime_() {\n    return this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();\n  }\n  /**\n   * We want the seek bar to be full on ended\n   * no matter what the actual internal values are. so we force it.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `timeupdate` or `ended` event that caused this to run.\n   *\n   * @listens Player#ended\n   */\n  ;\n\n  _proto.handleEnded = function handleEnded(event) {\n    this.update_(this.player_.duration(), 1);\n  }\n  /**\n   * Get the percentage of media played so far.\n   *\n   * @return {number}\n   *         The percentage of media played so far (0 to 1).\n   */\n  ;\n\n  _proto.getPercent = function getPercent() {\n    var currentTime = this.getCurrentTime_();\n    var percent;\n    var liveTracker = this.player_.liveTracker;\n\n    if (liveTracker && liveTracker.isLive()) {\n      percent = (currentTime - liveTracker.seekableStart()) / liveTracker.liveWindow(); // prevent the percent from changing at the live edge\n\n      if (liveTracker.atLiveEdge()) {\n        percent = 1;\n      }\n    } else {\n      percent = currentTime / this.player_.duration();\n    }\n\n    return percent >= 1 ? 1 : percent || 0;\n  }\n  /**\n   * Handle mouse down on seek bar\n   *\n   * @param {EventTarget~Event} event\n   *        The `mousedown` event that caused this to run.\n   *\n   * @listens mousedown\n   */\n  ;\n\n  _proto.handleMouseDown = function handleMouseDown(event) {\n    if (!isSingleLeftClick(event)) {\n      return;\n    } // Stop event propagation to prevent double fire in progress-control.js\n\n\n    event.stopPropagation();\n    this.player_.scrubbing(true);\n    this.videoWasPlaying = !this.player_.paused();\n    this.player_.pause();\n\n    _Slider.prototype.handleMouseDown.call(this, event);\n  }\n  /**\n   * Handle mouse move on seek bar\n   *\n   * @param {EventTarget~Event} event\n   *        The `mousemove` event that caused this to run.\n   *\n   * @listens mousemove\n   */\n  ;\n\n  _proto.handleMouseMove = function handleMouseMove(event) {\n    if (!isSingleLeftClick(event)) {\n      return;\n    }\n\n    var newTime;\n    var distance = this.calculateDistance(event);\n    var liveTracker = this.player_.liveTracker;\n\n    if (!liveTracker || !liveTracker.isLive()) {\n      newTime = distance * this.player_.duration(); // Don't let video end while scrubbing.\n\n      if (newTime === this.player_.duration()) {\n        newTime = newTime - 0.1;\n      }\n    } else {\n      var seekableStart = liveTracker.seekableStart();\n      var seekableEnd = liveTracker.liveCurrentTime();\n      newTime = seekableStart + distance * liveTracker.liveWindow(); // Don't let video end while scrubbing.\n\n      if (newTime >= seekableEnd) {\n        newTime = seekableEnd;\n      } // Compensate for precision differences so that currentTime is not less\n      // than seekable start\n\n\n      if (newTime <= seekableStart) {\n        newTime = seekableStart + 0.1;\n      } // On android seekableEnd can be Infinity sometimes,\n      // this will cause newTime to be Infinity, which is\n      // not a valid currentTime.\n\n\n      if (newTime === Infinity) {\n        return;\n      }\n    } // Set new time (tell player to seek to new time)\n\n\n    this.player_.currentTime(newTime);\n  };\n\n  _proto.enable = function enable() {\n    _Slider.prototype.enable.call(this);\n\n    var mouseTimeDisplay = this.getChild('mouseTimeDisplay');\n\n    if (!mouseTimeDisplay) {\n      return;\n    }\n\n    mouseTimeDisplay.show();\n  };\n\n  _proto.disable = function disable() {\n    _Slider.prototype.disable.call(this);\n\n    var mouseTimeDisplay = this.getChild('mouseTimeDisplay');\n\n    if (!mouseTimeDisplay) {\n      return;\n    }\n\n    mouseTimeDisplay.hide();\n  }\n  /**\n   * Handle mouse up on seek bar\n   *\n   * @param {EventTarget~Event} event\n   *        The `mouseup` event that caused this to run.\n   *\n   * @listens mouseup\n   */\n  ;\n\n  _proto.handleMouseUp = function handleMouseUp(event) {\n    _Slider.prototype.handleMouseUp.call(this, event); // Stop event propagation to prevent double fire in progress-control.js\n\n\n    if (event) {\n      event.stopPropagation();\n    }\n\n    this.player_.scrubbing(false);\n    /**\n     * Trigger timeupdate because we're done seeking and the time has changed.\n     * This is particularly useful for if the player is paused to time the time displays.\n     *\n     * @event Tech#timeupdate\n     * @type {EventTarget~Event}\n     */\n\n    this.player_.trigger({\n      type: 'timeupdate',\n      target: this,\n      manuallyTriggered: true\n    });\n\n    if (this.videoWasPlaying) {\n      silencePromise(this.player_.play());\n    }\n  }\n  /**\n   * Move more quickly fast forward for keyboard-only users\n   */\n  ;\n\n  _proto.stepForward = function stepForward() {\n    this.player_.currentTime(this.player_.currentTime() + STEP_SECONDS);\n  }\n  /**\n   * Move more quickly rewind for keyboard-only users\n   */\n  ;\n\n  _proto.stepBack = function stepBack() {\n    this.player_.currentTime(this.player_.currentTime() - STEP_SECONDS);\n  }\n  /**\n   * Toggles the playback state of the player\n   * This gets called when enter or space is used on the seekbar\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown` event that caused this function to be called\n   *\n   */\n  ;\n\n  _proto.handleAction = function handleAction(event) {\n    if (this.player_.paused()) {\n      this.player_.play();\n    } else {\n      this.player_.pause();\n    }\n  }\n  /**\n   * Called when this SeekBar has focus and a key gets pressed down.\n   * Supports the following keys:\n   *\n   *   Space or Enter key fire a click event\n   *   Home key moves to start of the timeline\n   *   End key moves to end of the timeline\n   *   Digit \"0\" through \"9\" keys move to 0%, 10% ... 80%, 90% of the timeline\n   *   PageDown key moves back a larger step than ArrowDown\n   *   PageUp key moves forward a large step\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown` event that caused this function to be called.\n   *\n   * @listens keydown\n   */\n  ;\n\n  _proto.handleKeyDown = function handleKeyDown(event) {\n    if (keycode.isEventKey(event, 'Space') || keycode.isEventKey(event, 'Enter')) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.handleAction(event);\n    } else if (keycode.isEventKey(event, 'Home')) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.player_.currentTime(0);\n    } else if (keycode.isEventKey(event, 'End')) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.player_.currentTime(this.player_.duration());\n    } else if (/^[0-9]$/.test(keycode(event))) {\n      event.preventDefault();\n      event.stopPropagation();\n      var gotoFraction = (keycode.codes[keycode(event)] - keycode.codes['0']) * 10.0 / 100.0;\n      this.player_.currentTime(this.player_.duration() * gotoFraction);\n    } else if (keycode.isEventKey(event, 'PgDn')) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.player_.currentTime(this.player_.currentTime() - STEP_SECONDS * PAGE_KEY_MULTIPLIER);\n    } else if (keycode.isEventKey(event, 'PgUp')) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.player_.currentTime(this.player_.currentTime() + STEP_SECONDS * PAGE_KEY_MULTIPLIER);\n    } else {\n      // Pass keydown handling up for unsupported keys\n      _Slider.prototype.handleKeyDown.call(this, event);\n    }\n  };\n\n  return SeekBar;\n}(Slider);\n/**\n * Default options for the `SeekBar`\n *\n * @type {Object}\n * @private\n */\n\n\nSeekBar.prototype.options_ = {\n  children: ['loadProgressBar', 'playProgressBar'],\n  barName: 'playProgressBar'\n}; // MouseTimeDisplay tooltips should not be added to a player on mobile devices\n\nif (!IS_IOS && !IS_ANDROID) {\n  SeekBar.prototype.options_.children.splice(1, 0, 'mouseTimeDisplay');\n}\n\nComponent.registerComponent('SeekBar', SeekBar);\n\n/**\n * The Progress Control component contains the seek bar, load progress,\n * and play progress.\n *\n * @extends Component\n */\n\nvar ProgressControl =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(ProgressControl, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function ProgressControl(player, options) {\n    var _this;\n\n    _this = _Component.call(this, player, options) || this;\n    _this.handleMouseMove = throttle(bind(_assertThisInitialized(_this), _this.handleMouseMove), 25);\n    _this.throttledHandleMouseSeek = throttle(bind(_assertThisInitialized(_this), _this.handleMouseSeek), 25);\n\n    _this.enable();\n\n    return _this;\n  }\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  var _proto = ProgressControl.prototype;\n\n  _proto.createEl = function createEl() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-progress-control vjs-control'\n    });\n  }\n  /**\n   * When the mouse moves over the `ProgressControl`, the pointer position\n   * gets passed down to the `MouseTimeDisplay` component.\n   *\n   * @param {EventTarget~Event} event\n   *        The `mousemove` event that caused this function to run.\n   *\n   * @listen mousemove\n   */\n  ;\n\n  _proto.handleMouseMove = function handleMouseMove(event) {\n    var seekBar = this.getChild('seekBar');\n\n    if (seekBar) {\n      var mouseTimeDisplay = seekBar.getChild('mouseTimeDisplay');\n      var seekBarEl = seekBar.el();\n      var seekBarRect = getBoundingClientRect(seekBarEl);\n      var seekBarPoint = getPointerPosition(seekBarEl, event).x; // The default skin has a gap on either side of the `SeekBar`. This means\n      // that it's possible to trigger this behavior outside the boundaries of\n      // the `SeekBar`. This ensures we stay within it at all times.\n\n      if (seekBarPoint > 1) {\n        seekBarPoint = 1;\n      } else if (seekBarPoint < 0) {\n        seekBarPoint = 0;\n      }\n\n      if (mouseTimeDisplay) {\n        mouseTimeDisplay.update(seekBarRect, seekBarPoint);\n      }\n    }\n  }\n  /**\n   * A throttled version of the {@link ProgressControl#handleMouseSeek} listener.\n   *\n   * @method ProgressControl#throttledHandleMouseSeek\n   * @param {EventTarget~Event} event\n   *        The `mousemove` event that caused this function to run.\n   *\n   * @listen mousemove\n   * @listen touchmove\n   */\n\n  /**\n   * Handle `mousemove` or `touchmove` events on the `ProgressControl`.\n   *\n   * @param {EventTarget~Event} event\n   *        `mousedown` or `touchstart` event that triggered this function\n   *\n   * @listens mousemove\n   * @listens touchmove\n   */\n  ;\n\n  _proto.handleMouseSeek = function handleMouseSeek(event) {\n    var seekBar = this.getChild('seekBar');\n\n    if (seekBar) {\n      seekBar.handleMouseMove(event);\n    }\n  }\n  /**\n   * Are controls are currently enabled for this progress control.\n   *\n   * @return {boolean}\n   *         true if controls are enabled, false otherwise\n   */\n  ;\n\n  _proto.enabled = function enabled() {\n    return this.enabled_;\n  }\n  /**\n   * Disable all controls on the progress control and its children\n   */\n  ;\n\n  _proto.disable = function disable() {\n    this.children().forEach(function (child) {\n      return child.disable && child.disable();\n    });\n\n    if (!this.enabled()) {\n      return;\n    }\n\n    this.off(['mousedown', 'touchstart'], this.handleMouseDown);\n    this.off(this.el_, 'mousemove', this.handleMouseMove);\n    this.handleMouseUp();\n    this.addClass('disabled');\n    this.enabled_ = false;\n  }\n  /**\n   * Enable all controls on the progress control and its children\n   */\n  ;\n\n  _proto.enable = function enable() {\n    this.children().forEach(function (child) {\n      return child.enable && child.enable();\n    });\n\n    if (this.enabled()) {\n      return;\n    }\n\n    this.on(['mousedown', 'touchstart'], this.handleMouseDown);\n    this.on(this.el_, 'mousemove', this.handleMouseMove);\n    this.removeClass('disabled');\n    this.enabled_ = true;\n  }\n  /**\n   * Handle `mousedown` or `touchstart` events on the `ProgressControl`.\n   *\n   * @param {EventTarget~Event} event\n   *        `mousedown` or `touchstart` event that triggered this function\n   *\n   * @listens mousedown\n   * @listens touchstart\n   */\n  ;\n\n  _proto.handleMouseDown = function handleMouseDown(event) {\n    var doc = this.el_.ownerDocument;\n    var seekBar = this.getChild('seekBar');\n\n    if (seekBar) {\n      seekBar.handleMouseDown(event);\n    }\n\n    this.on(doc, 'mousemove', this.throttledHandleMouseSeek);\n    this.on(doc, 'touchmove', this.throttledHandleMouseSeek);\n    this.on(doc, 'mouseup', this.handleMouseUp);\n    this.on(doc, 'touchend', this.handleMouseUp);\n  }\n  /**\n   * Handle `mouseup` or `touchend` events on the `ProgressControl`.\n   *\n   * @param {EventTarget~Event} event\n   *        `mouseup` or `touchend` event that triggered this function.\n   *\n   * @listens touchend\n   * @listens mouseup\n   */\n  ;\n\n  _proto.handleMouseUp = function handleMouseUp(event) {\n    var doc = this.el_.ownerDocument;\n    var seekBar = this.getChild('seekBar');\n\n    if (seekBar) {\n      seekBar.handleMouseUp(event);\n    }\n\n    this.off(doc, 'mousemove', this.throttledHandleMouseSeek);\n    this.off(doc, 'touchmove', this.throttledHandleMouseSeek);\n    this.off(doc, 'mouseup', this.handleMouseUp);\n    this.off(doc, 'touchend', this.handleMouseUp);\n  };\n\n  return ProgressControl;\n}(Component);\n/**\n * Default options for `ProgressControl`\n *\n * @type {Object}\n * @private\n */\n\n\nProgressControl.prototype.options_ = {\n  children: ['seekBar']\n};\nComponent.registerComponent('ProgressControl', ProgressControl);\n\n/**\n * Toggle Picture-in-Picture mode\n *\n * @extends Button\n */\n\nvar PictureInPictureToggle =\n/*#__PURE__*/\nfunction (_Button) {\n  _inheritsLoose(PictureInPictureToggle, _Button);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @listens Player#enterpictureinpicture\n   * @listens Player#leavepictureinpicture\n   */\n  function PictureInPictureToggle(player, options) {\n    var _this;\n\n    _this = _Button.call(this, player, options) || this;\n\n    _this.on(player, ['enterpictureinpicture', 'leavepictureinpicture'], _this.handlePictureInPictureChange); // TODO: Activate button on player loadedmetadata event.\n    // TODO: Deactivate button on player emptied event.\n    // TODO: Deactivate button if disablepictureinpicture attribute is present.\n\n\n    if (!document.pictureInPictureEnabled) {\n      _this.disable();\n    }\n\n    return _this;\n  }\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  var _proto = PictureInPictureToggle.prototype;\n\n  _proto.buildCSSClass = function buildCSSClass() {\n    return \"vjs-picture-in-picture-control \" + _Button.prototype.buildCSSClass.call(this);\n  }\n  /**\n   * Handles enterpictureinpicture and leavepictureinpicture on the player and change control text accordingly.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The {@link Player#enterpictureinpicture} or {@link Player#leavepictureinpicture} event that caused this function to be\n   *        called.\n   *\n   * @listens Player#enterpictureinpicture\n   * @listens Player#leavepictureinpicture\n   */\n  ;\n\n  _proto.handlePictureInPictureChange = function handlePictureInPictureChange(event) {\n    if (this.player_.isInPictureInPicture()) {\n      this.controlText('Exit Picture-in-Picture');\n    } else {\n      this.controlText('Picture-in-Picture');\n    }\n  }\n  /**\n   * This gets called when an `PictureInPictureToggle` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n  ;\n\n  _proto.handleClick = function handleClick(event) {\n    if (!this.player_.isInPictureInPicture()) {\n      this.player_.requestPictureInPicture();\n    } else {\n      this.player_.exitPictureInPicture();\n    }\n  };\n\n  return PictureInPictureToggle;\n}(Button);\n/**\n * The text that should display over the `PictureInPictureToggle`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\n\n\nPictureInPictureToggle.prototype.controlText_ = 'Picture-in-Picture';\nComponent.registerComponent('PictureInPictureToggle', PictureInPictureToggle);\n\n/**\n * Toggle fullscreen video\n *\n * @extends Button\n */\n\nvar FullscreenToggle =\n/*#__PURE__*/\nfunction (_Button) {\n  _inheritsLoose(FullscreenToggle, _Button);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function FullscreenToggle(player, options) {\n    var _this;\n\n    _this = _Button.call(this, player, options) || this;\n\n    _this.on(player, 'fullscreenchange', _this.handleFullscreenChange);\n\n    if (document[player.fsApi_.fullscreenEnabled] === false) {\n      _this.disable();\n    }\n\n    return _this;\n  }\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  var _proto = FullscreenToggle.prototype;\n\n  _proto.buildCSSClass = function buildCSSClass() {\n    return \"vjs-fullscreen-control \" + _Button.prototype.buildCSSClass.call(this);\n  }\n  /**\n   * Handles fullscreenchange on the player and change control text accordingly.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The {@link Player#fullscreenchange} event that caused this function to be\n   *        called.\n   *\n   * @listens Player#fullscreenchange\n   */\n  ;\n\n  _proto.handleFullscreenChange = function handleFullscreenChange(event) {\n    if (this.player_.isFullscreen()) {\n      this.controlText('Non-Fullscreen');\n    } else {\n      this.controlText('Fullscreen');\n    }\n  }\n  /**\n   * This gets called when an `FullscreenToggle` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n  ;\n\n  _proto.handleClick = function handleClick(event) {\n    if (!this.player_.isFullscreen()) {\n      this.player_.requestFullscreen();\n    } else {\n      this.player_.exitFullscreen();\n    }\n  };\n\n  return FullscreenToggle;\n}(Button);\n/**\n * The text that should display over the `FullscreenToggle`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\n\n\nFullscreenToggle.prototype.controlText_ = 'Fullscreen';\nComponent.registerComponent('FullscreenToggle', FullscreenToggle);\n\n/**\n * Check if volume control is supported and if it isn't hide the\n * `Component` that was passed  using the `vjs-hidden` class.\n *\n * @param {Component} self\n *        The component that should be hidden if volume is unsupported\n *\n * @param {Player} player\n *        A reference to the player\n *\n * @private\n */\nvar checkVolumeSupport = function checkVolumeSupport(self, player) {\n  // hide volume controls when they're not supported by the current tech\n  if (player.tech_ && !player.tech_.featuresVolumeControl) {\n    self.addClass('vjs-hidden');\n  }\n\n  self.on(player, 'loadstart', function () {\n    if (!player.tech_.featuresVolumeControl) {\n      self.addClass('vjs-hidden');\n    } else {\n      self.removeClass('vjs-hidden');\n    }\n  });\n};\n\n/**\n * Shows volume level\n *\n * @extends Component\n */\n\nvar VolumeLevel =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(VolumeLevel, _Component);\n\n  function VolumeLevel() {\n    return _Component.apply(this, arguments) || this;\n  }\n\n  var _proto = VolumeLevel.prototype;\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  _proto.createEl = function createEl() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-volume-level',\n      innerHTML: '<span class=\"vjs-control-text\"></span>'\n    });\n  };\n\n  return VolumeLevel;\n}(Component);\n\nComponent.registerComponent('VolumeLevel', VolumeLevel);\n\n/**\n * The bar that contains the volume level and can be clicked on to adjust the level\n *\n * @extends Slider\n */\n\nvar VolumeBar =\n/*#__PURE__*/\nfunction (_Slider) {\n  _inheritsLoose(VolumeBar, _Slider);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function VolumeBar(player, options) {\n    var _this;\n\n    _this = _Slider.call(this, player, options) || this;\n\n    _this.on('slideractive', _this.updateLastVolume_);\n\n    _this.on(player, 'volumechange', _this.updateARIAAttributes);\n\n    player.ready(function () {\n      return _this.updateARIAAttributes();\n    });\n    return _this;\n  }\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  var _proto = VolumeBar.prototype;\n\n  _proto.createEl = function createEl() {\n    return _Slider.prototype.createEl.call(this, 'div', {\n      className: 'vjs-volume-bar vjs-slider-bar'\n    }, {\n      'aria-label': this.localize('Volume Level'),\n      'aria-live': 'polite'\n    });\n  }\n  /**\n   * Handle mouse down on volume bar\n   *\n   * @param {EventTarget~Event} event\n   *        The `mousedown` event that caused this to run.\n   *\n   * @listens mousedown\n   */\n  ;\n\n  _proto.handleMouseDown = function handleMouseDown(event) {\n    if (!isSingleLeftClick(event)) {\n      return;\n    }\n\n    _Slider.prototype.handleMouseDown.call(this, event);\n  }\n  /**\n   * Handle movement events on the {@link VolumeMenuButton}.\n   *\n   * @param {EventTarget~Event} event\n   *        The event that caused this function to run.\n   *\n   * @listens mousemove\n   */\n  ;\n\n  _proto.handleMouseMove = function handleMouseMove(event) {\n    if (!isSingleLeftClick(event)) {\n      return;\n    }\n\n    this.checkMuted();\n    this.player_.volume(this.calculateDistance(event));\n  }\n  /**\n   * If the player is muted unmute it.\n   */\n  ;\n\n  _proto.checkMuted = function checkMuted() {\n    if (this.player_.muted()) {\n      this.player_.muted(false);\n    }\n  }\n  /**\n   * Get percent of volume level\n   *\n   * @return {number}\n   *         Volume level percent as a decimal number.\n   */\n  ;\n\n  _proto.getPercent = function getPercent() {\n    if (this.player_.muted()) {\n      return 0;\n    }\n\n    return this.player_.volume();\n  }\n  /**\n   * Increase volume level for keyboard users\n   */\n  ;\n\n  _proto.stepForward = function stepForward() {\n    this.checkMuted();\n    this.player_.volume(this.player_.volume() + 0.1);\n  }\n  /**\n   * Decrease volume level for keyboard users\n   */\n  ;\n\n  _proto.stepBack = function stepBack() {\n    this.checkMuted();\n    this.player_.volume(this.player_.volume() - 0.1);\n  }\n  /**\n   * Update ARIA accessibility attributes\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `volumechange` event that caused this function to run.\n   *\n   * @listens Player#volumechange\n   */\n  ;\n\n  _proto.updateARIAAttributes = function updateARIAAttributes(event) {\n    var ariaValue = this.player_.muted() ? 0 : this.volumeAsPercentage_();\n    this.el_.setAttribute('aria-valuenow', ariaValue);\n    this.el_.setAttribute('aria-valuetext', ariaValue + '%');\n  }\n  /**\n   * Returns the current value of the player volume as a percentage\n   *\n   * @private\n   */\n  ;\n\n  _proto.volumeAsPercentage_ = function volumeAsPercentage_() {\n    return Math.round(this.player_.volume() * 100);\n  }\n  /**\n   * When user starts dragging the VolumeBar, store the volume and listen for\n   * the end of the drag. When the drag ends, if the volume was set to zero,\n   * set lastVolume to the stored volume.\n   *\n   * @listens slideractive\n   * @private\n   */\n  ;\n\n  _proto.updateLastVolume_ = function updateLastVolume_() {\n    var _this2 = this;\n\n    var volumeBeforeDrag = this.player_.volume();\n    this.one('sliderinactive', function () {\n      if (_this2.player_.volume() === 0) {\n        _this2.player_.lastVolume_(volumeBeforeDrag);\n      }\n    });\n  };\n\n  return VolumeBar;\n}(Slider);\n/**\n * Default options for the `VolumeBar`\n *\n * @type {Object}\n * @private\n */\n\n\nVolumeBar.prototype.options_ = {\n  children: ['volumeLevel'],\n  barName: 'volumeLevel'\n};\n/**\n * Call the update event for this Slider when this event happens on the player.\n *\n * @type {string}\n */\n\nVolumeBar.prototype.playerEvent = 'volumechange';\nComponent.registerComponent('VolumeBar', VolumeBar);\n\n/**\n * The component for controlling the volume level\n *\n * @extends Component\n */\n\nvar VolumeControl =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(VolumeControl, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of player options.\n   */\n  function VolumeControl(player, options) {\n    var _this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    options.vertical = options.vertical || false; // Pass the vertical option down to the VolumeBar if\n    // the VolumeBar is turned on.\n\n    if (typeof options.volumeBar === 'undefined' || isPlain(options.volumeBar)) {\n      options.volumeBar = options.volumeBar || {};\n      options.volumeBar.vertical = options.vertical;\n    }\n\n    _this = _Component.call(this, player, options) || this; // hide this control if volume support is missing\n\n    checkVolumeSupport(_assertThisInitialized(_this), player);\n    _this.throttledHandleMouseMove = throttle(bind(_assertThisInitialized(_this), _this.handleMouseMove), 25);\n\n    _this.on('mousedown', _this.handleMouseDown);\n\n    _this.on('touchstart', _this.handleMouseDown); // while the slider is active (the mouse has been pressed down and\n    // is dragging) or in focus we do not want to hide the VolumeBar\n\n\n    _this.on(_this.volumeBar, ['focus', 'slideractive'], function () {\n      _this.volumeBar.addClass('vjs-slider-active');\n\n      _this.addClass('vjs-slider-active');\n\n      _this.trigger('slideractive');\n    });\n\n    _this.on(_this.volumeBar, ['blur', 'sliderinactive'], function () {\n      _this.volumeBar.removeClass('vjs-slider-active');\n\n      _this.removeClass('vjs-slider-active');\n\n      _this.trigger('sliderinactive');\n    });\n\n    return _this;\n  }\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  var _proto = VolumeControl.prototype;\n\n  _proto.createEl = function createEl() {\n    var orientationClass = 'vjs-volume-horizontal';\n\n    if (this.options_.vertical) {\n      orientationClass = 'vjs-volume-vertical';\n    }\n\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: \"vjs-volume-control vjs-control \" + orientationClass\n    });\n  }\n  /**\n   * Handle `mousedown` or `touchstart` events on the `VolumeControl`.\n   *\n   * @param {EventTarget~Event} event\n   *        `mousedown` or `touchstart` event that triggered this function\n   *\n   * @listens mousedown\n   * @listens touchstart\n   */\n  ;\n\n  _proto.handleMouseDown = function handleMouseDown(event) {\n    var doc = this.el_.ownerDocument;\n    this.on(doc, 'mousemove', this.throttledHandleMouseMove);\n    this.on(doc, 'touchmove', this.throttledHandleMouseMove);\n    this.on(doc, 'mouseup', this.handleMouseUp);\n    this.on(doc, 'touchend', this.handleMouseUp);\n  }\n  /**\n   * Handle `mouseup` or `touchend` events on the `VolumeControl`.\n   *\n   * @param {EventTarget~Event} event\n   *        `mouseup` or `touchend` event that triggered this function.\n   *\n   * @listens touchend\n   * @listens mouseup\n   */\n  ;\n\n  _proto.handleMouseUp = function handleMouseUp(event) {\n    var doc = this.el_.ownerDocument;\n    this.off(doc, 'mousemove', this.throttledHandleMouseMove);\n    this.off(doc, 'touchmove', this.throttledHandleMouseMove);\n    this.off(doc, 'mouseup', this.handleMouseUp);\n    this.off(doc, 'touchend', this.handleMouseUp);\n  }\n  /**\n   * Handle `mousedown` or `touchstart` events on the `VolumeControl`.\n   *\n   * @param {EventTarget~Event} event\n   *        `mousedown` or `touchstart` event that triggered this function\n   *\n   * @listens mousedown\n   * @listens touchstart\n   */\n  ;\n\n  _proto.handleMouseMove = function handleMouseMove(event) {\n    this.volumeBar.handleMouseMove(event);\n  };\n\n  return VolumeControl;\n}(Component);\n/**\n * Default options for the `VolumeControl`\n *\n * @type {Object}\n * @private\n */\n\n\nVolumeControl.prototype.options_ = {\n  children: ['volumeBar']\n};\nComponent.registerComponent('VolumeControl', VolumeControl);\n\n/**\n * Check if muting volume is supported and if it isn't hide the mute toggle\n * button.\n *\n * @param {Component} self\n *        A reference to the mute toggle button\n *\n * @param {Player} player\n *        A reference to the player\n *\n * @private\n */\nvar checkMuteSupport = function checkMuteSupport(self, player) {\n  // hide mute toggle button if it's not supported by the current tech\n  if (player.tech_ && !player.tech_.featuresMuteControl) {\n    self.addClass('vjs-hidden');\n  }\n\n  self.on(player, 'loadstart', function () {\n    if (!player.tech_.featuresMuteControl) {\n      self.addClass('vjs-hidden');\n    } else {\n      self.removeClass('vjs-hidden');\n    }\n  });\n};\n\n/**\n * A button component for muting the audio.\n *\n * @extends Button\n */\n\nvar MuteToggle =\n/*#__PURE__*/\nfunction (_Button) {\n  _inheritsLoose(MuteToggle, _Button);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function MuteToggle(player, options) {\n    var _this;\n\n    _this = _Button.call(this, player, options) || this; // hide this control if volume support is missing\n\n    checkMuteSupport(_assertThisInitialized(_this), player);\n\n    _this.on(player, ['loadstart', 'volumechange'], _this.update);\n\n    return _this;\n  }\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  var _proto = MuteToggle.prototype;\n\n  _proto.buildCSSClass = function buildCSSClass() {\n    return \"vjs-mute-control \" + _Button.prototype.buildCSSClass.call(this);\n  }\n  /**\n   * This gets called when an `MuteToggle` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n  ;\n\n  _proto.handleClick = function handleClick(event) {\n    var vol = this.player_.volume();\n    var lastVolume = this.player_.lastVolume_();\n\n    if (vol === 0) {\n      var volumeToSet = lastVolume < 0.1 ? 0.1 : lastVolume;\n      this.player_.volume(volumeToSet);\n      this.player_.muted(false);\n    } else {\n      this.player_.muted(this.player_.muted() ? false : true);\n    }\n  }\n  /**\n   * Update the `MuteToggle` button based on the state of `volume` and `muted`\n   * on the player.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The {@link Player#loadstart} event if this function was called\n   *        through an event.\n   *\n   * @listens Player#loadstart\n   * @listens Player#volumechange\n   */\n  ;\n\n  _proto.update = function update(event) {\n    this.updateIcon_();\n    this.updateControlText_();\n  }\n  /**\n   * Update the appearance of the `MuteToggle` icon.\n   *\n   * Possible states (given `level` variable below):\n   * - 0: crossed out\n   * - 1: zero bars of volume\n   * - 2: one bar of volume\n   * - 3: two bars of volume\n   *\n   * @private\n   */\n  ;\n\n  _proto.updateIcon_ = function updateIcon_() {\n    var vol = this.player_.volume();\n    var level = 3; // in iOS when a player is loaded with muted attribute\n    // and volume is changed with a native mute button\n    // we want to make sure muted state is updated\n\n    if (IS_IOS && this.player_.tech_ && this.player_.tech_.el_) {\n      this.player_.muted(this.player_.tech_.el_.muted);\n    }\n\n    if (vol === 0 || this.player_.muted()) {\n      level = 0;\n    } else if (vol < 0.33) {\n      level = 1;\n    } else if (vol < 0.67) {\n      level = 2;\n    } // TODO improve muted icon classes\n\n\n    for (var i = 0; i < 4; i++) {\n      removeClass(this.el_, \"vjs-vol-\" + i);\n    }\n\n    addClass(this.el_, \"vjs-vol-\" + level);\n  }\n  /**\n   * If `muted` has changed on the player, update the control text\n   * (`title` attribute on `vjs-mute-control` element and content of\n   * `vjs-control-text` element).\n   *\n   * @private\n   */\n  ;\n\n  _proto.updateControlText_ = function updateControlText_() {\n    var soundOff = this.player_.muted() || this.player_.volume() === 0;\n    var text = soundOff ? 'Unmute' : 'Mute';\n\n    if (this.controlText() !== text) {\n      this.controlText(text);\n    }\n  };\n\n  return MuteToggle;\n}(Button);\n/**\n * The text that should display over the `MuteToggle`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\n\n\nMuteToggle.prototype.controlText_ = 'Mute';\nComponent.registerComponent('MuteToggle', MuteToggle);\n\n/**\n * A Component to contain the MuteToggle and VolumeControl so that\n * they can work together.\n *\n * @extends Component\n */\n\nvar VolumePanel =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(VolumePanel, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of player options.\n   */\n  function VolumePanel(player, options) {\n    var _this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    if (typeof options.inline !== 'undefined') {\n      options.inline = options.inline;\n    } else {\n      options.inline = true;\n    } // pass the inline option down to the VolumeControl as vertical if\n    // the VolumeControl is on.\n\n\n    if (typeof options.volumeControl === 'undefined' || isPlain(options.volumeControl)) {\n      options.volumeControl = options.volumeControl || {};\n      options.volumeControl.vertical = !options.inline;\n    }\n\n    _this = _Component.call(this, player, options) || this;\n\n    _this.on(player, ['loadstart'], _this.volumePanelState_); // while the slider is active (the mouse has been pressed down and\n    // is dragging) we do not want to hide the VolumeBar\n\n\n    _this.on(_this.volumeControl, ['slideractive'], _this.sliderActive_);\n\n    _this.on(_this.volumeControl, ['sliderinactive'], _this.sliderInactive_);\n\n    return _this;\n  }\n  /**\n   * Add vjs-slider-active class to the VolumePanel\n   *\n   * @listens VolumeControl#slideractive\n   * @private\n   */\n\n\n  var _proto = VolumePanel.prototype;\n\n  _proto.sliderActive_ = function sliderActive_() {\n    this.addClass('vjs-slider-active');\n  }\n  /**\n   * Removes vjs-slider-active class to the VolumePanel\n   *\n   * @listens VolumeControl#sliderinactive\n   * @private\n   */\n  ;\n\n  _proto.sliderInactive_ = function sliderInactive_() {\n    this.removeClass('vjs-slider-active');\n  }\n  /**\n   * Adds vjs-hidden or vjs-mute-toggle-only to the VolumePanel\n   * depending on MuteToggle and VolumeControl state\n   *\n   * @listens Player#loadstart\n   * @private\n   */\n  ;\n\n  _proto.volumePanelState_ = function volumePanelState_() {\n    // hide volume panel if neither volume control or mute toggle\n    // are displayed\n    if (this.volumeControl.hasClass('vjs-hidden') && this.muteToggle.hasClass('vjs-hidden')) {\n      this.addClass('vjs-hidden');\n    } // if only mute toggle is visible we don't want\n    // volume panel expanding when hovered or active\n\n\n    if (this.volumeControl.hasClass('vjs-hidden') && !this.muteToggle.hasClass('vjs-hidden')) {\n      this.addClass('vjs-mute-toggle-only');\n    }\n  }\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  ;\n\n  _proto.createEl = function createEl() {\n    var orientationClass = 'vjs-volume-panel-horizontal';\n\n    if (!this.options_.inline) {\n      orientationClass = 'vjs-volume-panel-vertical';\n    }\n\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: \"vjs-volume-panel vjs-control \" + orientationClass\n    });\n  };\n\n  return VolumePanel;\n}(Component);\n/**\n * Default options for the `VolumeControl`\n *\n * @type {Object}\n * @private\n */\n\n\nVolumePanel.prototype.options_ = {\n  children: ['muteToggle', 'volumeControl']\n};\nComponent.registerComponent('VolumePanel', VolumePanel);\n\n/**\n * The Menu component is used to build popup menus, including subtitle and\n * captions selection menus.\n *\n * @extends Component\n */\n\nvar Menu =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(Menu, _Component);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Player} player\n   *        the player that this component should attach to\n   *\n   * @param {Object} [options]\n   *        Object of option names and values\n   *\n   */\n  function Menu(player, options) {\n    var _this;\n\n    _this = _Component.call(this, player, options) || this;\n\n    if (options) {\n      _this.menuButton_ = options.menuButton;\n    }\n\n    _this.focusedChild_ = -1;\n\n    _this.on('keydown', _this.handleKeyDown); // All the menu item instances share the same blur handler provided by the menu container.\n\n\n    _this.boundHandleBlur_ = bind(_assertThisInitialized(_this), _this.handleBlur);\n    _this.boundHandleTapClick_ = bind(_assertThisInitialized(_this), _this.handleTapClick);\n    return _this;\n  }\n  /**\n   * Add event listeners to the {@link MenuItem}.\n   *\n   * @param {Object} component\n   *        The instance of the `MenuItem` to add listeners to.\n   *\n   */\n\n\n  var _proto = Menu.prototype;\n\n  _proto.addEventListenerForItem = function addEventListenerForItem(component) {\n    if (!(component instanceof Component)) {\n      return;\n    }\n\n    this.on(component, 'blur', this.boundHandleBlur_);\n    this.on(component, ['tap', 'click'], this.boundHandleTapClick_);\n  }\n  /**\n   * Remove event listeners from the {@link MenuItem}.\n   *\n   * @param {Object} component\n   *        The instance of the `MenuItem` to remove listeners.\n   *\n   */\n  ;\n\n  _proto.removeEventListenerForItem = function removeEventListenerForItem(component) {\n    if (!(component instanceof Component)) {\n      return;\n    }\n\n    this.off(component, 'blur', this.boundHandleBlur_);\n    this.off(component, ['tap', 'click'], this.boundHandleTapClick_);\n  }\n  /**\n   * This method will be called indirectly when the component has been added\n   * before the component adds to the new menu instance by `addItem`.\n   * In this case, the original menu instance will remove the component\n   * by calling `removeChild`.\n   *\n   * @param {Object} component\n   *        The instance of the `MenuItem`\n   */\n  ;\n\n  _proto.removeChild = function removeChild(component) {\n    if (typeof component === 'string') {\n      component = this.getChild(component);\n    }\n\n    this.removeEventListenerForItem(component);\n\n    _Component.prototype.removeChild.call(this, component);\n  }\n  /**\n   * Add a {@link MenuItem} to the menu.\n   *\n   * @param {Object|string} component\n   *        The name or instance of the `MenuItem` to add.\n   *\n   */\n  ;\n\n  _proto.addItem = function addItem(component) {\n    var childComponent = this.addChild(component);\n\n    if (childComponent) {\n      this.addEventListenerForItem(childComponent);\n    }\n  }\n  /**\n   * Create the `Menu`s DOM element.\n   *\n   * @return {Element}\n   *         the element that was created\n   */\n  ;\n\n  _proto.createEl = function createEl$1() {\n    var contentElType = this.options_.contentElType || 'ul';\n    this.contentEl_ = createEl(contentElType, {\n      className: 'vjs-menu-content'\n    });\n    this.contentEl_.setAttribute('role', 'menu');\n\n    var el = _Component.prototype.createEl.call(this, 'div', {\n      append: this.contentEl_,\n      className: 'vjs-menu'\n    });\n\n    el.appendChild(this.contentEl_); // Prevent clicks from bubbling up. Needed for Menu Buttons,\n    // where a click on the parent is significant\n\n    on(el, 'click', function (event) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    });\n    return el;\n  };\n\n  _proto.dispose = function dispose() {\n    this.contentEl_ = null;\n    this.boundHandleBlur_ = null;\n    this.boundHandleTapClick_ = null;\n\n    _Component.prototype.dispose.call(this);\n  }\n  /**\n   * Called when a `MenuItem` loses focus.\n   *\n   * @param {EventTarget~Event} event\n   *        The `blur` event that caused this function to be called.\n   *\n   * @listens blur\n   */\n  ;\n\n  _proto.handleBlur = function handleBlur(event) {\n    var relatedTarget = event.relatedTarget || document.activeElement; // Close menu popup when a user clicks outside the menu\n\n    if (!this.children().some(function (element) {\n      return element.el() === relatedTarget;\n    })) {\n      var btn = this.menuButton_;\n\n      if (btn && btn.buttonPressed_ && relatedTarget !== btn.el().firstChild) {\n        btn.unpressButton();\n      }\n    }\n  }\n  /**\n   * Called when a `MenuItem` gets clicked or tapped.\n   *\n   * @param {EventTarget~Event} event\n   *        The `click` or `tap` event that caused this function to be called.\n   *\n   * @listens click,tap\n   */\n  ;\n\n  _proto.handleTapClick = function handleTapClick(event) {\n    // Unpress the associated MenuButton, and move focus back to it\n    if (this.menuButton_) {\n      this.menuButton_.unpressButton();\n      var childComponents = this.children();\n\n      if (!Array.isArray(childComponents)) {\n        return;\n      }\n\n      var foundComponent = childComponents.filter(function (component) {\n        return component.el() === event.target;\n      })[0];\n\n      if (!foundComponent) {\n        return;\n      } // don't focus menu button if item is a caption settings item\n      // because focus will move elsewhere\n\n\n      if (foundComponent.name() !== 'CaptionSettingsMenuItem') {\n        this.menuButton_.focus();\n      }\n    }\n  }\n  /**\n   * Handle a `keydown` event on this menu. This listener is added in the constructor.\n   *\n   * @param {EventTarget~Event} event\n   *        A `keydown` event that happened on the menu.\n   *\n   * @listens keydown\n   */\n  ;\n\n  _proto.handleKeyDown = function handleKeyDown(event) {\n    // Left and Down Arrows\n    if (keycode.isEventKey(event, 'Left') || keycode.isEventKey(event, 'Down')) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.stepForward(); // Up and Right Arrows\n    } else if (keycode.isEventKey(event, 'Right') || keycode.isEventKey(event, 'Up')) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.stepBack();\n    }\n  }\n  /**\n   * Move to next (lower) menu item for keyboard users.\n   */\n  ;\n\n  _proto.stepForward = function stepForward() {\n    var stepChild = 0;\n\n    if (this.focusedChild_ !== undefined) {\n      stepChild = this.focusedChild_ + 1;\n    }\n\n    this.focus(stepChild);\n  }\n  /**\n   * Move to previous (higher) menu item for keyboard users.\n   */\n  ;\n\n  _proto.stepBack = function stepBack() {\n    var stepChild = 0;\n\n    if (this.focusedChild_ !== undefined) {\n      stepChild = this.focusedChild_ - 1;\n    }\n\n    this.focus(stepChild);\n  }\n  /**\n   * Set focus on a {@link MenuItem} in the `Menu`.\n   *\n   * @param {Object|string} [item=0]\n   *        Index of child item set focus on.\n   */\n  ;\n\n  _proto.focus = function focus(item) {\n    if (item === void 0) {\n      item = 0;\n    }\n\n    var children = this.children().slice();\n    var haveTitle = children.length && children[0].className && /vjs-menu-title/.test(children[0].className);\n\n    if (haveTitle) {\n      children.shift();\n    }\n\n    if (children.length > 0) {\n      if (item < 0) {\n        item = 0;\n      } else if (item >= children.length) {\n        item = children.length - 1;\n      }\n\n      this.focusedChild_ = item;\n      children[item].el_.focus();\n    }\n  };\n\n  return Menu;\n}(Component);\n\nComponent.registerComponent('Menu', Menu);\n\n/**\n * A `MenuButton` class for any popup {@link Menu}.\n *\n * @extends Component\n */\n\nvar MenuButton =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(MenuButton, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of player options.\n   */\n  function MenuButton(player, options) {\n    var _this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    _this = _Component.call(this, player, options) || this;\n    _this.menuButton_ = new Button(player, options);\n\n    _this.menuButton_.controlText(_this.controlText_);\n\n    _this.menuButton_.el_.setAttribute('aria-haspopup', 'true'); // Add buildCSSClass values to the button, not the wrapper\n\n\n    var buttonClass = Button.prototype.buildCSSClass();\n    _this.menuButton_.el_.className = _this.buildCSSClass() + ' ' + buttonClass;\n\n    _this.menuButton_.removeClass('vjs-control');\n\n    _this.addChild(_this.menuButton_);\n\n    _this.update();\n\n    _this.enabled_ = true;\n\n    _this.on(_this.menuButton_, 'tap', _this.handleClick);\n\n    _this.on(_this.menuButton_, 'click', _this.handleClick);\n\n    _this.on(_this.menuButton_, 'keydown', _this.handleKeyDown);\n\n    _this.on(_this.menuButton_, 'mouseenter', function () {\n      _this.menu.show();\n    });\n\n    _this.on('keydown', _this.handleSubmenuKeyDown);\n\n    return _this;\n  }\n  /**\n   * Update the menu based on the current state of its items.\n   */\n\n\n  var _proto = MenuButton.prototype;\n\n  _proto.update = function update() {\n    var menu = this.createMenu();\n\n    if (this.menu) {\n      this.menu.dispose();\n      this.removeChild(this.menu);\n    }\n\n    this.menu = menu;\n    this.addChild(menu);\n    /**\n     * Track the state of the menu button\n     *\n     * @type {Boolean}\n     * @private\n     */\n\n    this.buttonPressed_ = false;\n    this.menuButton_.el_.setAttribute('aria-expanded', 'false');\n\n    if (this.items && this.items.length <= this.hideThreshold_) {\n      this.hide();\n    } else {\n      this.show();\n    }\n  }\n  /**\n   * Create the menu and add all items to it.\n   *\n   * @return {Menu}\n   *         The constructed menu\n   */\n  ;\n\n  _proto.createMenu = function createMenu() {\n    var menu = new Menu(this.player_, {\n      menuButton: this\n    });\n    /**\n     * Hide the menu if the number of items is less than or equal to this threshold. This defaults\n     * to 0 and whenever we add items which can be hidden to the menu we'll increment it. We list\n     * it here because every time we run `createMenu` we need to reset the value.\n     *\n     * @protected\n     * @type {Number}\n     */\n\n    this.hideThreshold_ = 0; // Add a title list item to the top\n\n    if (this.options_.title) {\n      var titleEl = createEl('li', {\n        className: 'vjs-menu-title',\n        innerHTML: toTitleCase(this.options_.title),\n        tabIndex: -1\n      });\n      this.hideThreshold_ += 1;\n      var titleComponent = new Component(this.player_, {\n        el: titleEl\n      });\n      menu.addItem(titleComponent);\n    }\n\n    this.items = this.createItems();\n\n    if (this.items) {\n      // Add menu items to the menu\n      for (var i = 0; i < this.items.length; i++) {\n        menu.addItem(this.items[i]);\n      }\n    }\n\n    return menu;\n  }\n  /**\n   * Create the list of menu items. Specific to each subclass.\n   *\n   * @abstract\n   */\n  ;\n\n  _proto.createItems = function createItems() {}\n  /**\n   * Create the `MenuButtons`s DOM element.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n  ;\n\n  _proto.createEl = function createEl() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: this.buildWrapperCSSClass()\n    }, {});\n  }\n  /**\n   * Allow sub components to stack CSS class names for the wrapper element\n   *\n   * @return {string}\n   *         The constructed wrapper DOM `className`\n   */\n  ;\n\n  _proto.buildWrapperCSSClass = function buildWrapperCSSClass() {\n    var menuButtonClass = 'vjs-menu-button'; // If the inline option is passed, we want to use different styles altogether.\n\n    if (this.options_.inline === true) {\n      menuButtonClass += '-inline';\n    } else {\n      menuButtonClass += '-popup';\n    } // TODO: Fix the CSS so that this isn't necessary\n\n\n    var buttonClass = Button.prototype.buildCSSClass();\n    return \"vjs-menu-button \" + menuButtonClass + \" \" + buttonClass + \" \" + _Component.prototype.buildCSSClass.call(this);\n  }\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  ;\n\n  _proto.buildCSSClass = function buildCSSClass() {\n    var menuButtonClass = 'vjs-menu-button'; // If the inline option is passed, we want to use different styles altogether.\n\n    if (this.options_.inline === true) {\n      menuButtonClass += '-inline';\n    } else {\n      menuButtonClass += '-popup';\n    }\n\n    return \"vjs-menu-button \" + menuButtonClass + \" \" + _Component.prototype.buildCSSClass.call(this);\n  }\n  /**\n   * Get or set the localized control text that will be used for accessibility.\n   *\n   * > NOTE: This will come from the internal `menuButton_` element.\n   *\n   * @param {string} [text]\n   *        Control text for element.\n   *\n   * @param {Element} [el=this.menuButton_.el()]\n   *        Element to set the title on.\n   *\n   * @return {string}\n   *         - The control text when getting\n   */\n  ;\n\n  _proto.controlText = function controlText(text, el) {\n    if (el === void 0) {\n      el = this.menuButton_.el();\n    }\n\n    return this.menuButton_.controlText(text, el);\n  }\n  /**\n   * Handle a click on a `MenuButton`.\n   * See {@link ClickableComponent#handleClick} for instances where this is called.\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n  ;\n\n  _proto.handleClick = function handleClick(event) {\n    if (this.buttonPressed_) {\n      this.unpressButton();\n    } else {\n      this.pressButton();\n    }\n  }\n  /**\n   * Set the focus to the actual button, not to this element\n   */\n  ;\n\n  _proto.focus = function focus() {\n    this.menuButton_.focus();\n  }\n  /**\n   * Remove the focus from the actual button, not this element\n   */\n  ;\n\n  _proto.blur = function blur() {\n    this.menuButton_.blur();\n  }\n  /**\n   * Handle tab, escape, down arrow, and up arrow keys for `MenuButton`. See\n   * {@link ClickableComponent#handleKeyDown} for instances where this is called.\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown` event that caused this function to be called.\n   *\n   * @listens keydown\n   */\n  ;\n\n  _proto.handleKeyDown = function handleKeyDown(event) {\n    // Escape or Tab unpress the 'button'\n    if (keycode.isEventKey(event, 'Esc') || keycode.isEventKey(event, 'Tab')) {\n      if (this.buttonPressed_) {\n        this.unpressButton();\n      } // Don't preventDefault for Tab key - we still want to lose focus\n\n\n      if (!keycode.isEventKey(event, 'Tab')) {\n        event.preventDefault(); // Set focus back to the menu button's button\n\n        this.menuButton_.focus();\n      } // Up Arrow or Down Arrow also 'press' the button to open the menu\n\n    } else if (keycode.isEventKey(event, 'Up') || keycode.isEventKey(event, 'Down')) {\n      if (!this.buttonPressed_) {\n        event.preventDefault();\n        this.pressButton();\n      }\n    }\n  }\n  /**\n   * This method name now delegates to `handleSubmenuKeyDown`. This means\n   * anyone calling `handleSubmenuKeyPress` will not see their method calls\n   * stop working.\n   *\n   * @param {EventTarget~Event} event\n   *        The event that caused this function to be called.\n   */\n  ;\n\n  _proto.handleSubmenuKeyPress = function handleSubmenuKeyPress(event) {\n    this.handleSubmenuKeyDown(event);\n  }\n  /**\n   * Handle a `keydown` event on a sub-menu. The listener for this is added in\n   * the constructor.\n   *\n   * @param {EventTarget~Event} event\n   *        Key press event\n   *\n   * @listens keydown\n   */\n  ;\n\n  _proto.handleSubmenuKeyDown = function handleSubmenuKeyDown(event) {\n    // Escape or Tab unpress the 'button'\n    if (keycode.isEventKey(event, 'Esc') || keycode.isEventKey(event, 'Tab')) {\n      if (this.buttonPressed_) {\n        this.unpressButton();\n      } // Don't preventDefault for Tab key - we still want to lose focus\n\n\n      if (!keycode.isEventKey(event, 'Tab')) {\n        event.preventDefault(); // Set focus back to the menu button's button\n\n        this.menuButton_.focus();\n      }\n    }\n  }\n  /**\n   * Put the current `MenuButton` into a pressed state.\n   */\n  ;\n\n  _proto.pressButton = function pressButton() {\n    if (this.enabled_) {\n      this.buttonPressed_ = true;\n      this.menu.show();\n      this.menu.lockShowing();\n      this.menuButton_.el_.setAttribute('aria-expanded', 'true'); // set the focus into the submenu, except on iOS where it is resulting in\n      // undesired scrolling behavior when the player is in an iframe\n\n      if (IS_IOS && isInFrame()) {\n        // Return early so that the menu isn't focused\n        return;\n      }\n\n      this.menu.focus();\n    }\n  }\n  /**\n   * Take the current `MenuButton` out of a pressed state.\n   */\n  ;\n\n  _proto.unpressButton = function unpressButton() {\n    if (this.enabled_) {\n      this.buttonPressed_ = false;\n      this.menu.unlockShowing();\n      this.menu.hide();\n      this.menuButton_.el_.setAttribute('aria-expanded', 'false');\n    }\n  }\n  /**\n   * Disable the `MenuButton`. Don't allow it to be clicked.\n   */\n  ;\n\n  _proto.disable = function disable() {\n    this.unpressButton();\n    this.enabled_ = false;\n    this.addClass('vjs-disabled');\n    this.menuButton_.disable();\n  }\n  /**\n   * Enable the `MenuButton`. Allow it to be clicked.\n   */\n  ;\n\n  _proto.enable = function enable() {\n    this.enabled_ = true;\n    this.removeClass('vjs-disabled');\n    this.menuButton_.enable();\n  };\n\n  return MenuButton;\n}(Component);\n\nComponent.registerComponent('MenuButton', MenuButton);\n\n/**\n * The base class for buttons that toggle specific  track types (e.g. subtitles).\n *\n * @extends MenuButton\n */\n\nvar TrackButton =\n/*#__PURE__*/\nfunction (_MenuButton) {\n  _inheritsLoose(TrackButton, _MenuButton);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function TrackButton(player, options) {\n    var _this;\n\n    var tracks = options.tracks;\n    _this = _MenuButton.call(this, player, options) || this;\n\n    if (_this.items.length <= 1) {\n      _this.hide();\n    }\n\n    if (!tracks) {\n      return _assertThisInitialized(_this);\n    }\n\n    var updateHandler = bind(_assertThisInitialized(_this), _this.update);\n    tracks.addEventListener('removetrack', updateHandler);\n    tracks.addEventListener('addtrack', updateHandler);\n\n    _this.player_.on('ready', updateHandler);\n\n    _this.player_.on('dispose', function () {\n      tracks.removeEventListener('removetrack', updateHandler);\n      tracks.removeEventListener('addtrack', updateHandler);\n    });\n\n    return _this;\n  }\n\n  return TrackButton;\n}(MenuButton);\n\nComponent.registerComponent('TrackButton', TrackButton);\n\n/**\n * @file menu-keys.js\n */\n\n/**\n  * All keys used for operation of a menu (`MenuButton`, `Menu`, and `MenuItem`)\n  * Note that 'Enter' and 'Space' are not included here (otherwise they would\n  * prevent the `MenuButton` and `MenuItem` from being keyboard-clickable)\n  * @typedef MenuKeys\n  * @array\n  */\nvar MenuKeys = ['Tab', 'Esc', 'Up', 'Down', 'Right', 'Left'];\n\n/**\n * The component for a menu item. `<li>`\n *\n * @extends ClickableComponent\n */\n\nvar MenuItem =\n/*#__PURE__*/\nfunction (_ClickableComponent) {\n  _inheritsLoose(MenuItem, _ClickableComponent);\n\n  /**\n   * Creates an instance of the this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of player options.\n   *\n   */\n  function MenuItem(player, options) {\n    var _this;\n\n    _this = _ClickableComponent.call(this, player, options) || this;\n    _this.selectable = options.selectable;\n    _this.isSelected_ = options.selected || false;\n    _this.multiSelectable = options.multiSelectable;\n\n    _this.selected(_this.isSelected_);\n\n    if (_this.selectable) {\n      if (_this.multiSelectable) {\n        _this.el_.setAttribute('role', 'menuitemcheckbox');\n      } else {\n        _this.el_.setAttribute('role', 'menuitemradio');\n      }\n    } else {\n      _this.el_.setAttribute('role', 'menuitem');\n    }\n\n    return _this;\n  }\n  /**\n   * Create the `MenuItem's DOM element\n   *\n   * @param {string} [type=li]\n   *        Element's node type, not actually used, always set to `li`.\n   *\n   * @param {Object} [props={}]\n   *        An object of properties that should be set on the element\n   *\n   * @param {Object} [attrs={}]\n   *        An object of attributes that should be set on the element\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n\n\n  var _proto = MenuItem.prototype;\n\n  _proto.createEl = function createEl(type, props, attrs) {\n    // The control is textual, not just an icon\n    this.nonIconControl = true;\n    return _ClickableComponent.prototype.createEl.call(this, 'li', assign({\n      className: 'vjs-menu-item',\n      innerHTML: \"<span class=\\\"vjs-menu-item-text\\\">\" + this.localize(this.options_.label) + \"</span>\",\n      tabIndex: -1\n    }, props), attrs);\n  }\n  /**\n   * Ignore keys which are used by the menu, but pass any other ones up. See\n   * {@link ClickableComponent#handleKeyDown} for instances where this is called.\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown` event that caused this function to be called.\n   *\n   * @listens keydown\n   */\n  ;\n\n  _proto.handleKeyDown = function handleKeyDown(event) {\n    if (!MenuKeys.some(function (key) {\n      return keycode.isEventKey(event, key);\n    })) {\n      // Pass keydown handling up for unused keys\n      _ClickableComponent.prototype.handleKeyDown.call(this, event);\n    }\n  }\n  /**\n   * Any click on a `MenuItem` puts it into the selected state.\n   * See {@link ClickableComponent#handleClick} for instances where this is called.\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n  ;\n\n  _proto.handleClick = function handleClick(event) {\n    this.selected(true);\n  }\n  /**\n   * Set the state for this menu item as selected or not.\n   *\n   * @param {boolean} selected\n   *        if the menu item is selected or not\n   */\n  ;\n\n  _proto.selected = function selected(_selected) {\n    if (this.selectable) {\n      if (_selected) {\n        this.addClass('vjs-selected');\n        this.el_.setAttribute('aria-checked', 'true'); // aria-checked isn't fully supported by browsers/screen readers,\n        // so indicate selected state to screen reader in the control text.\n\n        this.controlText(', selected');\n        this.isSelected_ = true;\n      } else {\n        this.removeClass('vjs-selected');\n        this.el_.setAttribute('aria-checked', 'false'); // Indicate un-selected state to screen reader\n\n        this.controlText('');\n        this.isSelected_ = false;\n      }\n    }\n  };\n\n  return MenuItem;\n}(ClickableComponent);\n\nComponent.registerComponent('MenuItem', MenuItem);\n\n/**\n * The specific menu item type for selecting a language within a text track kind\n *\n * @extends MenuItem\n */\n\nvar TextTrackMenuItem =\n/*#__PURE__*/\nfunction (_MenuItem) {\n  _inheritsLoose(TextTrackMenuItem, _MenuItem);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function TextTrackMenuItem(player, options) {\n    var _this;\n\n    var track = options.track;\n    var tracks = player.textTracks(); // Modify options for parent MenuItem class's init.\n\n    options.label = track.label || track.language || 'Unknown';\n    options.selected = track.mode === 'showing';\n    _this = _MenuItem.call(this, player, options) || this;\n    _this.track = track; // Determine the relevant kind(s) of tracks for this component and filter\n    // out empty kinds.\n\n    _this.kinds = (options.kinds || [options.kind || _this.track.kind]).filter(Boolean);\n\n    var changeHandler = function changeHandler() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this.handleTracksChange.apply(_assertThisInitialized(_this), args);\n    };\n\n    var selectedLanguageChangeHandler = function selectedLanguageChangeHandler() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      _this.handleSelectedLanguageChange.apply(_assertThisInitialized(_this), args);\n    };\n\n    player.on(['loadstart', 'texttrackchange'], changeHandler);\n    tracks.addEventListener('change', changeHandler);\n    tracks.addEventListener('selectedlanguagechange', selectedLanguageChangeHandler);\n\n    _this.on('dispose', function () {\n      player.off(['loadstart', 'texttrackchange'], changeHandler);\n      tracks.removeEventListener('change', changeHandler);\n      tracks.removeEventListener('selectedlanguagechange', selectedLanguageChangeHandler);\n    }); // iOS7 doesn't dispatch change events to TextTrackLists when an\n    // associated track's mode changes. Without something like\n    // Object.observe() (also not present on iOS7), it's not\n    // possible to detect changes to the mode attribute and polyfill\n    // the change event. As a poor substitute, we manually dispatch\n    // change events whenever the controls modify the mode.\n\n\n    if (tracks.onchange === undefined) {\n      var event;\n\n      _this.on(['tap', 'click'], function () {\n        if (typeof window$1.Event !== 'object') {\n          // Android 2.3 throws an Illegal Constructor error for window.Event\n          try {\n            event = new window$1.Event('change');\n          } catch (err) {// continue regardless of error\n          }\n        }\n\n        if (!event) {\n          event = document.createEvent('Event');\n          event.initEvent('change', true, true);\n        }\n\n        tracks.dispatchEvent(event);\n      });\n    } // set the default state based on current tracks\n\n\n    _this.handleTracksChange();\n\n    return _this;\n  }\n  /**\n   * This gets called when an `TextTrackMenuItem` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n\n\n  var _proto = TextTrackMenuItem.prototype;\n\n  _proto.handleClick = function handleClick(event) {\n    var referenceTrack = this.track;\n    var tracks = this.player_.textTracks();\n\n    _MenuItem.prototype.handleClick.call(this, event);\n\n    if (!tracks) {\n      return;\n    }\n\n    for (var i = 0; i < tracks.length; i++) {\n      var track = tracks[i]; // If the track from the text tracks list is not of the right kind,\n      // skip it. We do not want to affect tracks of incompatible kind(s).\n\n      if (this.kinds.indexOf(track.kind) === -1) {\n        continue;\n      } // If this text track is the component's track and it is not showing,\n      // set it to showing.\n\n\n      if (track === referenceTrack) {\n        if (track.mode !== 'showing') {\n          track.mode = 'showing';\n        } // If this text track is not the component's track and it is not\n        // disabled, set it to disabled.\n\n      } else if (track.mode !== 'disabled') {\n        track.mode = 'disabled';\n      }\n    }\n  }\n  /**\n   * Handle text track list change\n   *\n   * @param {EventTarget~Event} event\n   *        The `change` event that caused this function to be called.\n   *\n   * @listens TextTrackList#change\n   */\n  ;\n\n  _proto.handleTracksChange = function handleTracksChange(event) {\n    var shouldBeSelected = this.track.mode === 'showing'; // Prevent redundant selected() calls because they may cause\n    // screen readers to read the appended control text unnecessarily\n\n    if (shouldBeSelected !== this.isSelected_) {\n      this.selected(shouldBeSelected);\n    }\n  };\n\n  _proto.handleSelectedLanguageChange = function handleSelectedLanguageChange(event) {\n    if (this.track.mode === 'showing') {\n      var selectedLanguage = this.player_.cache_.selectedLanguage; // Don't replace the kind of track across the same language\n\n      if (selectedLanguage && selectedLanguage.enabled && selectedLanguage.language === this.track.language && selectedLanguage.kind !== this.track.kind) {\n        return;\n      }\n\n      this.player_.cache_.selectedLanguage = {\n        enabled: true,\n        language: this.track.language,\n        kind: this.track.kind\n      };\n    }\n  };\n\n  _proto.dispose = function dispose() {\n    // remove reference to track object on dispose\n    this.track = null;\n\n    _MenuItem.prototype.dispose.call(this);\n  };\n\n  return TextTrackMenuItem;\n}(MenuItem);\n\nComponent.registerComponent('TextTrackMenuItem', TextTrackMenuItem);\n\n/**\n * A special menu item for turning of a specific type of text track\n *\n * @extends TextTrackMenuItem\n */\n\nvar OffTextTrackMenuItem =\n/*#__PURE__*/\nfunction (_TextTrackMenuItem) {\n  _inheritsLoose(OffTextTrackMenuItem, _TextTrackMenuItem);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function OffTextTrackMenuItem(player, options) {\n    // Create pseudo track info\n    // Requires options['kind']\n    options.track = {\n      player: player,\n      // it is no longer necessary to store `kind` or `kinds` on the track itself\n      // since they are now stored in the `kinds` property of all instances of\n      // TextTrackMenuItem, but this will remain for backwards compatibility\n      kind: options.kind,\n      kinds: options.kinds,\n      \"default\": false,\n      mode: 'disabled'\n    };\n\n    if (!options.kinds) {\n      options.kinds = [options.kind];\n    }\n\n    if (options.label) {\n      options.track.label = options.label;\n    } else {\n      options.track.label = options.kinds.join(' and ') + ' off';\n    } // MenuItem is selectable\n\n\n    options.selectable = true; // MenuItem is NOT multiSelectable (i.e. only one can be marked \"selected\" at a time)\n\n    options.multiSelectable = false;\n    return _TextTrackMenuItem.call(this, player, options) || this;\n  }\n  /**\n   * Handle text track change\n   *\n   * @param {EventTarget~Event} event\n   *        The event that caused this function to run\n   */\n\n\n  var _proto = OffTextTrackMenuItem.prototype;\n\n  _proto.handleTracksChange = function handleTracksChange(event) {\n    var tracks = this.player().textTracks();\n    var shouldBeSelected = true;\n\n    for (var i = 0, l = tracks.length; i < l; i++) {\n      var track = tracks[i];\n\n      if (this.options_.kinds.indexOf(track.kind) > -1 && track.mode === 'showing') {\n        shouldBeSelected = false;\n        break;\n      }\n    } // Prevent redundant selected() calls because they may cause\n    // screen readers to read the appended control text unnecessarily\n\n\n    if (shouldBeSelected !== this.isSelected_) {\n      this.selected(shouldBeSelected);\n    }\n  };\n\n  _proto.handleSelectedLanguageChange = function handleSelectedLanguageChange(event) {\n    var tracks = this.player().textTracks();\n    var allHidden = true;\n\n    for (var i = 0, l = tracks.length; i < l; i++) {\n      var track = tracks[i];\n\n      if (['captions', 'descriptions', 'subtitles'].indexOf(track.kind) > -1 && track.mode === 'showing') {\n        allHidden = false;\n        break;\n      }\n    }\n\n    if (allHidden) {\n      this.player_.cache_.selectedLanguage = {\n        enabled: false\n      };\n    }\n  };\n\n  return OffTextTrackMenuItem;\n}(TextTrackMenuItem);\n\nComponent.registerComponent('OffTextTrackMenuItem', OffTextTrackMenuItem);\n\n/**\n * The base class for buttons that toggle specific text track types (e.g. subtitles)\n *\n * @extends MenuButton\n */\n\nvar TextTrackButton =\n/*#__PURE__*/\nfunction (_TrackButton) {\n  _inheritsLoose(TextTrackButton, _TrackButton);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of player options.\n   */\n  function TextTrackButton(player, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    options.tracks = player.textTracks();\n    return _TrackButton.call(this, player, options) || this;\n  }\n  /**\n   * Create a menu item for each text track\n   *\n   * @param {TextTrackMenuItem[]} [items=[]]\n   *        Existing array of items to use during creation\n   *\n   * @return {TextTrackMenuItem[]}\n   *         Array of menu items that were created\n   */\n\n\n  var _proto = TextTrackButton.prototype;\n\n  _proto.createItems = function createItems(items, TrackMenuItem) {\n    if (items === void 0) {\n      items = [];\n    }\n\n    if (TrackMenuItem === void 0) {\n      TrackMenuItem = TextTrackMenuItem;\n    }\n\n    // Label is an override for the [track] off label\n    // USed to localise captions/subtitles\n    var label;\n\n    if (this.label_) {\n      label = this.label_ + \" off\";\n    } // Add an OFF menu item to turn all tracks off\n\n\n    items.push(new OffTextTrackMenuItem(this.player_, {\n      kinds: this.kinds_,\n      kind: this.kind_,\n      label: label\n    }));\n    this.hideThreshold_ += 1;\n    var tracks = this.player_.textTracks();\n\n    if (!Array.isArray(this.kinds_)) {\n      this.kinds_ = [this.kind_];\n    }\n\n    for (var i = 0; i < tracks.length; i++) {\n      var track = tracks[i]; // only add tracks that are of an appropriate kind and have a label\n\n      if (this.kinds_.indexOf(track.kind) > -1) {\n        var item = new TrackMenuItem(this.player_, {\n          track: track,\n          kinds: this.kinds_,\n          kind: this.kind_,\n          // MenuItem is selectable\n          selectable: true,\n          // MenuItem is NOT multiSelectable (i.e. only one can be marked \"selected\" at a time)\n          multiSelectable: false\n        });\n        item.addClass(\"vjs-\" + track.kind + \"-menu-item\");\n        items.push(item);\n      }\n    }\n\n    return items;\n  };\n\n  return TextTrackButton;\n}(TrackButton);\n\nComponent.registerComponent('TextTrackButton', TextTrackButton);\n\n/**\n * The chapter track menu item\n *\n * @extends MenuItem\n */\n\nvar ChaptersTrackMenuItem =\n/*#__PURE__*/\nfunction (_MenuItem) {\n  _inheritsLoose(ChaptersTrackMenuItem, _MenuItem);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function ChaptersTrackMenuItem(player, options) {\n    var _this;\n\n    var track = options.track;\n    var cue = options.cue;\n    var currentTime = player.currentTime(); // Modify options for parent MenuItem class's init.\n\n    options.selectable = true;\n    options.multiSelectable = false;\n    options.label = cue.text;\n    options.selected = cue.startTime <= currentTime && currentTime < cue.endTime;\n    _this = _MenuItem.call(this, player, options) || this;\n    _this.track = track;\n    _this.cue = cue;\n    track.addEventListener('cuechange', bind(_assertThisInitialized(_this), _this.update));\n    return _this;\n  }\n  /**\n   * This gets called when an `ChaptersTrackMenuItem` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n\n\n  var _proto = ChaptersTrackMenuItem.prototype;\n\n  _proto.handleClick = function handleClick(event) {\n    _MenuItem.prototype.handleClick.call(this);\n\n    this.player_.currentTime(this.cue.startTime);\n    this.update(this.cue.startTime);\n  }\n  /**\n   * Update chapter menu item\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `cuechange` event that caused this function to run.\n   *\n   * @listens TextTrack#cuechange\n   */\n  ;\n\n  _proto.update = function update(event) {\n    var cue = this.cue;\n    var currentTime = this.player_.currentTime(); // vjs.log(currentTime, cue.startTime);\n\n    this.selected(cue.startTime <= currentTime && currentTime < cue.endTime);\n  };\n\n  return ChaptersTrackMenuItem;\n}(MenuItem);\n\nComponent.registerComponent('ChaptersTrackMenuItem', ChaptersTrackMenuItem);\n\n/**\n * The button component for toggling and selecting chapters\n * Chapters act much differently than other text tracks\n * Cues are navigation vs. other tracks of alternative languages\n *\n * @extends TextTrackButton\n */\n\nvar ChaptersButton =\n/*#__PURE__*/\nfunction (_TextTrackButton) {\n  _inheritsLoose(ChaptersButton, _TextTrackButton);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Component~ReadyCallback} [ready]\n   *        The function to call when this function is ready.\n   */\n  function ChaptersButton(player, options, ready) {\n    return _TextTrackButton.call(this, player, options, ready) || this;\n  }\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  var _proto = ChaptersButton.prototype;\n\n  _proto.buildCSSClass = function buildCSSClass() {\n    return \"vjs-chapters-button \" + _TextTrackButton.prototype.buildCSSClass.call(this);\n  };\n\n  _proto.buildWrapperCSSClass = function buildWrapperCSSClass() {\n    return \"vjs-chapters-button \" + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);\n  }\n  /**\n   * Update the menu based on the current state of its items.\n   *\n   * @param {EventTarget~Event} [event]\n   *        An event that triggered this function to run.\n   *\n   * @listens TextTrackList#addtrack\n   * @listens TextTrackList#removetrack\n   * @listens TextTrackList#change\n   */\n  ;\n\n  _proto.update = function update(event) {\n    if (!this.track_ || event && (event.type === 'addtrack' || event.type === 'removetrack')) {\n      this.setTrack(this.findChaptersTrack());\n    }\n\n    _TextTrackButton.prototype.update.call(this);\n  }\n  /**\n   * Set the currently selected track for the chapters button.\n   *\n   * @param {TextTrack} track\n   *        The new track to select. Nothing will change if this is the currently selected\n   *        track.\n   */\n  ;\n\n  _proto.setTrack = function setTrack(track) {\n    if (this.track_ === track) {\n      return;\n    }\n\n    if (!this.updateHandler_) {\n      this.updateHandler_ = this.update.bind(this);\n    } // here this.track_ refers to the old track instance\n\n\n    if (this.track_) {\n      var remoteTextTrackEl = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);\n\n      if (remoteTextTrackEl) {\n        remoteTextTrackEl.removeEventListener('load', this.updateHandler_);\n      }\n\n      this.track_ = null;\n    }\n\n    this.track_ = track; // here this.track_ refers to the new track instance\n\n    if (this.track_) {\n      this.track_.mode = 'hidden';\n\n      var _remoteTextTrackEl = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);\n\n      if (_remoteTextTrackEl) {\n        _remoteTextTrackEl.addEventListener('load', this.updateHandler_);\n      }\n    }\n  }\n  /**\n   * Find the track object that is currently in use by this ChaptersButton\n   *\n   * @return {TextTrack|undefined}\n   *         The current track or undefined if none was found.\n   */\n  ;\n\n  _proto.findChaptersTrack = function findChaptersTrack() {\n    var tracks = this.player_.textTracks() || [];\n\n    for (var i = tracks.length - 1; i >= 0; i--) {\n      // We will always choose the last track as our chaptersTrack\n      var track = tracks[i];\n\n      if (track.kind === this.kind_) {\n        return track;\n      }\n    }\n  }\n  /**\n   * Get the caption for the ChaptersButton based on the track label. This will also\n   * use the current tracks localized kind as a fallback if a label does not exist.\n   *\n   * @return {string}\n   *         The tracks current label or the localized track kind.\n   */\n  ;\n\n  _proto.getMenuCaption = function getMenuCaption() {\n    if (this.track_ && this.track_.label) {\n      return this.track_.label;\n    }\n\n    return this.localize(toTitleCase(this.kind_));\n  }\n  /**\n   * Create menu from chapter track\n   *\n   * @return {Menu}\n   *         New menu for the chapter buttons\n   */\n  ;\n\n  _proto.createMenu = function createMenu() {\n    this.options_.title = this.getMenuCaption();\n    return _TextTrackButton.prototype.createMenu.call(this);\n  }\n  /**\n   * Create a menu item for each text track\n   *\n   * @return {TextTrackMenuItem[]}\n   *         Array of menu items\n   */\n  ;\n\n  _proto.createItems = function createItems() {\n    var items = [];\n\n    if (!this.track_) {\n      return items;\n    }\n\n    var cues = this.track_.cues;\n\n    if (!cues) {\n      return items;\n    }\n\n    for (var i = 0, l = cues.length; i < l; i++) {\n      var cue = cues[i];\n      var mi = new ChaptersTrackMenuItem(this.player_, {\n        track: this.track_,\n        cue: cue\n      });\n      items.push(mi);\n    }\n\n    return items;\n  };\n\n  return ChaptersButton;\n}(TextTrackButton);\n/**\n * `kind` of TextTrack to look for to associate it with this menu.\n *\n * @type {string}\n * @private\n */\n\n\nChaptersButton.prototype.kind_ = 'chapters';\n/**\n * The text that should display over the `ChaptersButton`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\n\nChaptersButton.prototype.controlText_ = 'Chapters';\nComponent.registerComponent('ChaptersButton', ChaptersButton);\n\n/**\n * The button component for toggling and selecting descriptions\n *\n * @extends TextTrackButton\n */\n\nvar DescriptionsButton =\n/*#__PURE__*/\nfunction (_TextTrackButton) {\n  _inheritsLoose(DescriptionsButton, _TextTrackButton);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Component~ReadyCallback} [ready]\n   *        The function to call when this component is ready.\n   */\n  function DescriptionsButton(player, options, ready) {\n    var _this;\n\n    _this = _TextTrackButton.call(this, player, options, ready) || this;\n    var tracks = player.textTracks();\n    var changeHandler = bind(_assertThisInitialized(_this), _this.handleTracksChange);\n    tracks.addEventListener('change', changeHandler);\n\n    _this.on('dispose', function () {\n      tracks.removeEventListener('change', changeHandler);\n    });\n\n    return _this;\n  }\n  /**\n   * Handle text track change\n   *\n   * @param {EventTarget~Event} event\n   *        The event that caused this function to run\n   *\n   * @listens TextTrackList#change\n   */\n\n\n  var _proto = DescriptionsButton.prototype;\n\n  _proto.handleTracksChange = function handleTracksChange(event) {\n    var tracks = this.player().textTracks();\n    var disabled = false; // Check whether a track of a different kind is showing\n\n    for (var i = 0, l = tracks.length; i < l; i++) {\n      var track = tracks[i];\n\n      if (track.kind !== this.kind_ && track.mode === 'showing') {\n        disabled = true;\n        break;\n      }\n    } // If another track is showing, disable this menu button\n\n\n    if (disabled) {\n      this.disable();\n    } else {\n      this.enable();\n    }\n  }\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  ;\n\n  _proto.buildCSSClass = function buildCSSClass() {\n    return \"vjs-descriptions-button \" + _TextTrackButton.prototype.buildCSSClass.call(this);\n  };\n\n  _proto.buildWrapperCSSClass = function buildWrapperCSSClass() {\n    return \"vjs-descriptions-button \" + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);\n  };\n\n  return DescriptionsButton;\n}(TextTrackButton);\n/**\n * `kind` of TextTrack to look for to associate it with this menu.\n *\n * @type {string}\n * @private\n */\n\n\nDescriptionsButton.prototype.kind_ = 'descriptions';\n/**\n * The text that should display over the `DescriptionsButton`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\n\nDescriptionsButton.prototype.controlText_ = 'Descriptions';\nComponent.registerComponent('DescriptionsButton', DescriptionsButton);\n\n/**\n * The button component for toggling and selecting subtitles\n *\n * @extends TextTrackButton\n */\n\nvar SubtitlesButton =\n/*#__PURE__*/\nfunction (_TextTrackButton) {\n  _inheritsLoose(SubtitlesButton, _TextTrackButton);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Component~ReadyCallback} [ready]\n   *        The function to call when this component is ready.\n   */\n  function SubtitlesButton(player, options, ready) {\n    return _TextTrackButton.call(this, player, options, ready) || this;\n  }\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  var _proto = SubtitlesButton.prototype;\n\n  _proto.buildCSSClass = function buildCSSClass() {\n    return \"vjs-subtitles-button \" + _TextTrackButton.prototype.buildCSSClass.call(this);\n  };\n\n  _proto.buildWrapperCSSClass = function buildWrapperCSSClass() {\n    return \"vjs-subtitles-button \" + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);\n  };\n\n  return SubtitlesButton;\n}(TextTrackButton);\n/**\n * `kind` of TextTrack to look for to associate it with this menu.\n *\n * @type {string}\n * @private\n */\n\n\nSubtitlesButton.prototype.kind_ = 'subtitles';\n/**\n * The text that should display over the `SubtitlesButton`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\n\nSubtitlesButton.prototype.controlText_ = 'Subtitles';\nComponent.registerComponent('SubtitlesButton', SubtitlesButton);\n\n/**\n * The menu item for caption track settings menu\n *\n * @extends TextTrackMenuItem\n */\n\nvar CaptionSettingsMenuItem =\n/*#__PURE__*/\nfunction (_TextTrackMenuItem) {\n  _inheritsLoose(CaptionSettingsMenuItem, _TextTrackMenuItem);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function CaptionSettingsMenuItem(player, options) {\n    var _this;\n\n    options.track = {\n      player: player,\n      kind: options.kind,\n      label: options.kind + ' settings',\n      selectable: false,\n      \"default\": false,\n      mode: 'disabled'\n    }; // CaptionSettingsMenuItem has no concept of 'selected'\n\n    options.selectable = false;\n    options.name = 'CaptionSettingsMenuItem';\n    _this = _TextTrackMenuItem.call(this, player, options) || this;\n\n    _this.addClass('vjs-texttrack-settings');\n\n    _this.controlText(', opens ' + options.kind + ' settings dialog');\n\n    return _this;\n  }\n  /**\n   * This gets called when an `CaptionSettingsMenuItem` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n\n\n  var _proto = CaptionSettingsMenuItem.prototype;\n\n  _proto.handleClick = function handleClick(event) {\n    this.player().getChild('textTrackSettings').open();\n  };\n\n  return CaptionSettingsMenuItem;\n}(TextTrackMenuItem);\n\nComponent.registerComponent('CaptionSettingsMenuItem', CaptionSettingsMenuItem);\n\n/**\n * The button component for toggling and selecting captions\n *\n * @extends TextTrackButton\n */\n\nvar CaptionsButton =\n/*#__PURE__*/\nfunction (_TextTrackButton) {\n  _inheritsLoose(CaptionsButton, _TextTrackButton);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Component~ReadyCallback} [ready]\n   *        The function to call when this component is ready.\n   */\n  function CaptionsButton(player, options, ready) {\n    return _TextTrackButton.call(this, player, options, ready) || this;\n  }\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  var _proto = CaptionsButton.prototype;\n\n  _proto.buildCSSClass = function buildCSSClass() {\n    return \"vjs-captions-button \" + _TextTrackButton.prototype.buildCSSClass.call(this);\n  };\n\n  _proto.buildWrapperCSSClass = function buildWrapperCSSClass() {\n    return \"vjs-captions-button \" + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);\n  }\n  /**\n   * Create caption menu items\n   *\n   * @return {CaptionSettingsMenuItem[]}\n   *         The array of current menu items.\n   */\n  ;\n\n  _proto.createItems = function createItems() {\n    var items = [];\n\n    if (!(this.player().tech_ && this.player().tech_.featuresNativeTextTracks) && this.player().getChild('textTrackSettings')) {\n      items.push(new CaptionSettingsMenuItem(this.player_, {\n        kind: this.kind_\n      }));\n      this.hideThreshold_ += 1;\n    }\n\n    return _TextTrackButton.prototype.createItems.call(this, items);\n  };\n\n  return CaptionsButton;\n}(TextTrackButton);\n/**\n * `kind` of TextTrack to look for to associate it with this menu.\n *\n * @type {string}\n * @private\n */\n\n\nCaptionsButton.prototype.kind_ = 'captions';\n/**\n * The text that should display over the `CaptionsButton`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\n\nCaptionsButton.prototype.controlText_ = 'Captions';\nComponent.registerComponent('CaptionsButton', CaptionsButton);\n\n/**\n * SubsCapsMenuItem has an [cc] icon to distinguish captions from subtitles\n * in the SubsCapsMenu.\n *\n * @extends TextTrackMenuItem\n */\n\nvar SubsCapsMenuItem =\n/*#__PURE__*/\nfunction (_TextTrackMenuItem) {\n  _inheritsLoose(SubsCapsMenuItem, _TextTrackMenuItem);\n\n  function SubsCapsMenuItem() {\n    return _TextTrackMenuItem.apply(this, arguments) || this;\n  }\n\n  var _proto = SubsCapsMenuItem.prototype;\n\n  _proto.createEl = function createEl(type, props, attrs) {\n    var innerHTML = \"<span class=\\\"vjs-menu-item-text\\\">\" + this.localize(this.options_.label);\n\n    if (this.options_.track.kind === 'captions') {\n      innerHTML += \"\\n        <span aria-hidden=\\\"true\\\" class=\\\"vjs-icon-placeholder\\\"></span>\\n        <span class=\\\"vjs-control-text\\\"> \" + this.localize('Captions') + \"</span>\\n      \";\n    }\n\n    innerHTML += '</span>';\n\n    var el = _TextTrackMenuItem.prototype.createEl.call(this, type, assign({\n      innerHTML: innerHTML\n    }, props), attrs);\n\n    return el;\n  };\n\n  return SubsCapsMenuItem;\n}(TextTrackMenuItem);\n\nComponent.registerComponent('SubsCapsMenuItem', SubsCapsMenuItem);\n\n/**\n * The button component for toggling and selecting captions and/or subtitles\n *\n * @extends TextTrackButton\n */\n\nvar SubsCapsButton =\n/*#__PURE__*/\nfunction (_TextTrackButton) {\n  _inheritsLoose(SubsCapsButton, _TextTrackButton);\n\n  function SubsCapsButton(player, options) {\n    var _this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    _this = _TextTrackButton.call(this, player, options) || this; // Although North America uses \"captions\" in most cases for\n    // \"captions and subtitles\" other locales use \"subtitles\"\n\n    _this.label_ = 'subtitles';\n\n    if (['en', 'en-us', 'en-ca', 'fr-ca'].indexOf(_this.player_.language_) > -1) {\n      _this.label_ = 'captions';\n    }\n\n    _this.menuButton_.controlText(toTitleCase(_this.label_));\n\n    return _this;\n  }\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  var _proto = SubsCapsButton.prototype;\n\n  _proto.buildCSSClass = function buildCSSClass() {\n    return \"vjs-subs-caps-button \" + _TextTrackButton.prototype.buildCSSClass.call(this);\n  };\n\n  _proto.buildWrapperCSSClass = function buildWrapperCSSClass() {\n    return \"vjs-subs-caps-button \" + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);\n  }\n  /**\n   * Create caption/subtitles menu items\n   *\n   * @return {CaptionSettingsMenuItem[]}\n   *         The array of current menu items.\n   */\n  ;\n\n  _proto.createItems = function createItems() {\n    var items = [];\n\n    if (!(this.player().tech_ && this.player().tech_.featuresNativeTextTracks) && this.player().getChild('textTrackSettings')) {\n      items.push(new CaptionSettingsMenuItem(this.player_, {\n        kind: this.label_\n      }));\n      this.hideThreshold_ += 1;\n    }\n\n    items = _TextTrackButton.prototype.createItems.call(this, items, SubsCapsMenuItem);\n    return items;\n  };\n\n  return SubsCapsButton;\n}(TextTrackButton);\n/**\n * `kind`s of TextTrack to look for to associate it with this menu.\n *\n * @type {array}\n * @private\n */\n\n\nSubsCapsButton.prototype.kinds_ = ['captions', 'subtitles'];\n/**\n * The text that should display over the `SubsCapsButton`s controls.\n *\n *\n * @type {string}\n * @private\n */\n\nSubsCapsButton.prototype.controlText_ = 'Subtitles';\nComponent.registerComponent('SubsCapsButton', SubsCapsButton);\n\n/**\n * An {@link AudioTrack} {@link MenuItem}\n *\n * @extends MenuItem\n */\n\nvar AudioTrackMenuItem =\n/*#__PURE__*/\nfunction (_MenuItem) {\n  _inheritsLoose(AudioTrackMenuItem, _MenuItem);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function AudioTrackMenuItem(player, options) {\n    var _this;\n\n    var track = options.track;\n    var tracks = player.audioTracks(); // Modify options for parent MenuItem class's init.\n\n    options.label = track.label || track.language || 'Unknown';\n    options.selected = track.enabled;\n    _this = _MenuItem.call(this, player, options) || this;\n    _this.track = track;\n\n    _this.addClass(\"vjs-\" + track.kind + \"-menu-item\");\n\n    var changeHandler = function changeHandler() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this.handleTracksChange.apply(_assertThisInitialized(_this), args);\n    };\n\n    tracks.addEventListener('change', changeHandler);\n\n    _this.on('dispose', function () {\n      tracks.removeEventListener('change', changeHandler);\n    });\n\n    return _this;\n  }\n\n  var _proto = AudioTrackMenuItem.prototype;\n\n  _proto.createEl = function createEl(type, props, attrs) {\n    var innerHTML = \"<span class=\\\"vjs-menu-item-text\\\">\" + this.localize(this.options_.label);\n\n    if (this.options_.track.kind === 'main-desc') {\n      innerHTML += \"\\n        <span aria-hidden=\\\"true\\\" class=\\\"vjs-icon-placeholder\\\"></span>\\n        <span class=\\\"vjs-control-text\\\"> \" + this.localize('Descriptions') + \"</span>\\n      \";\n    }\n\n    innerHTML += '</span>';\n\n    var el = _MenuItem.prototype.createEl.call(this, type, assign({\n      innerHTML: innerHTML\n    }, props), attrs);\n\n    return el;\n  }\n  /**\n   * This gets called when an `AudioTrackMenuItem is \"clicked\". See {@link ClickableComponent}\n   * for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n  ;\n\n  _proto.handleClick = function handleClick(event) {\n    var tracks = this.player_.audioTracks();\n\n    _MenuItem.prototype.handleClick.call(this, event);\n\n    for (var i = 0; i < tracks.length; i++) {\n      var track = tracks[i];\n      track.enabled = track === this.track;\n    }\n  }\n  /**\n   * Handle any {@link AudioTrack} change.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The {@link AudioTrackList#change} event that caused this to run.\n   *\n   * @listens AudioTrackList#change\n   */\n  ;\n\n  _proto.handleTracksChange = function handleTracksChange(event) {\n    this.selected(this.track.enabled);\n  };\n\n  return AudioTrackMenuItem;\n}(MenuItem);\n\nComponent.registerComponent('AudioTrackMenuItem', AudioTrackMenuItem);\n\n/**\n * The base class for buttons that toggle specific {@link AudioTrack} types.\n *\n * @extends TrackButton\n */\n\nvar AudioTrackButton =\n/*#__PURE__*/\nfunction (_TrackButton) {\n  _inheritsLoose(AudioTrackButton, _TrackButton);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of player options.\n   */\n  function AudioTrackButton(player, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    options.tracks = player.audioTracks();\n    return _TrackButton.call(this, player, options) || this;\n  }\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  var _proto = AudioTrackButton.prototype;\n\n  _proto.buildCSSClass = function buildCSSClass() {\n    return \"vjs-audio-button \" + _TrackButton.prototype.buildCSSClass.call(this);\n  };\n\n  _proto.buildWrapperCSSClass = function buildWrapperCSSClass() {\n    return \"vjs-audio-button \" + _TrackButton.prototype.buildWrapperCSSClass.call(this);\n  }\n  /**\n   * Create a menu item for each audio track\n   *\n   * @param {AudioTrackMenuItem[]} [items=[]]\n   *        An array of existing menu items to use.\n   *\n   * @return {AudioTrackMenuItem[]}\n   *         An array of menu items\n   */\n  ;\n\n  _proto.createItems = function createItems(items) {\n    if (items === void 0) {\n      items = [];\n    }\n\n    // if there's only one audio track, there no point in showing it\n    this.hideThreshold_ = 1;\n    var tracks = this.player_.audioTracks();\n\n    for (var i = 0; i < tracks.length; i++) {\n      var track = tracks[i];\n      items.push(new AudioTrackMenuItem(this.player_, {\n        track: track,\n        // MenuItem is selectable\n        selectable: true,\n        // MenuItem is NOT multiSelectable (i.e. only one can be marked \"selected\" at a time)\n        multiSelectable: false\n      }));\n    }\n\n    return items;\n  };\n\n  return AudioTrackButton;\n}(TrackButton);\n/**\n * The text that should display over the `AudioTrackButton`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\n\n\nAudioTrackButton.prototype.controlText_ = 'Audio Track';\nComponent.registerComponent('AudioTrackButton', AudioTrackButton);\n\n/**\n * The specific menu item type for selecting a playback rate.\n *\n * @extends MenuItem\n */\n\nvar PlaybackRateMenuItem =\n/*#__PURE__*/\nfunction (_MenuItem) {\n  _inheritsLoose(PlaybackRateMenuItem, _MenuItem);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function PlaybackRateMenuItem(player, options) {\n    var _this;\n\n    var label = options.rate;\n    var rate = parseFloat(label, 10); // Modify options for parent MenuItem class's init.\n\n    options.label = label;\n    options.selected = rate === 1;\n    options.selectable = true;\n    options.multiSelectable = false;\n    _this = _MenuItem.call(this, player, options) || this;\n    _this.label = label;\n    _this.rate = rate;\n\n    _this.on(player, 'ratechange', _this.update);\n\n    return _this;\n  }\n  /**\n   * This gets called when an `PlaybackRateMenuItem` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n\n\n  var _proto = PlaybackRateMenuItem.prototype;\n\n  _proto.handleClick = function handleClick(event) {\n    _MenuItem.prototype.handleClick.call(this);\n\n    this.player().playbackRate(this.rate);\n  }\n  /**\n   * Update the PlaybackRateMenuItem when the playbackrate changes.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `ratechange` event that caused this function to run.\n   *\n   * @listens Player#ratechange\n   */\n  ;\n\n  _proto.update = function update(event) {\n    this.selected(this.player().playbackRate() === this.rate);\n  };\n\n  return PlaybackRateMenuItem;\n}(MenuItem);\n/**\n * The text that should display over the `PlaybackRateMenuItem`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\n\n\nPlaybackRateMenuItem.prototype.contentElType = 'button';\nComponent.registerComponent('PlaybackRateMenuItem', PlaybackRateMenuItem);\n\n/**\n * The component for controlling the playback rate.\n *\n * @extends MenuButton\n */\n\nvar PlaybackRateMenuButton =\n/*#__PURE__*/\nfunction (_MenuButton) {\n  _inheritsLoose(PlaybackRateMenuButton, _MenuButton);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function PlaybackRateMenuButton(player, options) {\n    var _this;\n\n    _this = _MenuButton.call(this, player, options) || this;\n\n    _this.updateVisibility();\n\n    _this.updateLabel();\n\n    _this.on(player, 'loadstart', _this.updateVisibility);\n\n    _this.on(player, 'ratechange', _this.updateLabel);\n\n    return _this;\n  }\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  var _proto = PlaybackRateMenuButton.prototype;\n\n  _proto.createEl = function createEl$1() {\n    var el = _MenuButton.prototype.createEl.call(this);\n\n    this.labelEl_ = createEl('div', {\n      className: 'vjs-playback-rate-value',\n      innerHTML: '1x'\n    });\n    el.appendChild(this.labelEl_);\n    return el;\n  };\n\n  _proto.dispose = function dispose() {\n    this.labelEl_ = null;\n\n    _MenuButton.prototype.dispose.call(this);\n  }\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  ;\n\n  _proto.buildCSSClass = function buildCSSClass() {\n    return \"vjs-playback-rate \" + _MenuButton.prototype.buildCSSClass.call(this);\n  };\n\n  _proto.buildWrapperCSSClass = function buildWrapperCSSClass() {\n    return \"vjs-playback-rate \" + _MenuButton.prototype.buildWrapperCSSClass.call(this);\n  }\n  /**\n   * Create the playback rate menu\n   *\n   * @return {Menu}\n   *         Menu object populated with {@link PlaybackRateMenuItem}s\n   */\n  ;\n\n  _proto.createMenu = function createMenu() {\n    var menu = new Menu(this.player());\n    var rates = this.playbackRates();\n\n    if (rates) {\n      for (var i = rates.length - 1; i >= 0; i--) {\n        menu.addChild(new PlaybackRateMenuItem(this.player(), {\n          rate: rates[i] + 'x'\n        }));\n      }\n    }\n\n    return menu;\n  }\n  /**\n   * Updates ARIA accessibility attributes\n   */\n  ;\n\n  _proto.updateARIAAttributes = function updateARIAAttributes() {\n    // Current playback rate\n    this.el().setAttribute('aria-valuenow', this.player().playbackRate());\n  }\n  /**\n   * This gets called when an `PlaybackRateMenuButton` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n  ;\n\n  _proto.handleClick = function handleClick(event) {\n    // select next rate option\n    var currentRate = this.player().playbackRate();\n    var rates = this.playbackRates(); // this will select first one if the last one currently selected\n\n    var newRate = rates[0];\n\n    for (var i = 0; i < rates.length; i++) {\n      if (rates[i] > currentRate) {\n        newRate = rates[i];\n        break;\n      }\n    }\n\n    this.player().playbackRate(newRate);\n  }\n  /**\n   * Get possible playback rates\n   *\n   * @return {Array}\n   *         All possible playback rates\n   */\n  ;\n\n  _proto.playbackRates = function playbackRates() {\n    return this.options_.playbackRates || this.options_.playerOptions && this.options_.playerOptions.playbackRates;\n  }\n  /**\n   * Get whether playback rates is supported by the tech\n   * and an array of playback rates exists\n   *\n   * @return {boolean}\n   *         Whether changing playback rate is supported\n   */\n  ;\n\n  _proto.playbackRateSupported = function playbackRateSupported() {\n    return this.player().tech_ && this.player().tech_.featuresPlaybackRate && this.playbackRates() && this.playbackRates().length > 0;\n  }\n  /**\n   * Hide playback rate controls when they're no playback rate options to select\n   *\n   * @param {EventTarget~Event} [event]\n   *        The event that caused this function to run.\n   *\n   * @listens Player#loadstart\n   */\n  ;\n\n  _proto.updateVisibility = function updateVisibility(event) {\n    if (this.playbackRateSupported()) {\n      this.removeClass('vjs-hidden');\n    } else {\n      this.addClass('vjs-hidden');\n    }\n  }\n  /**\n   * Update button label when rate changed\n   *\n   * @param {EventTarget~Event} [event]\n   *        The event that caused this function to run.\n   *\n   * @listens Player#ratechange\n   */\n  ;\n\n  _proto.updateLabel = function updateLabel(event) {\n    if (this.playbackRateSupported()) {\n      this.labelEl_.innerHTML = this.player().playbackRate() + 'x';\n    }\n  };\n\n  return PlaybackRateMenuButton;\n}(MenuButton);\n/**\n * The text that should display over the `FullscreenToggle`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\n\n\nPlaybackRateMenuButton.prototype.controlText_ = 'Playback Rate';\nComponent.registerComponent('PlaybackRateMenuButton', PlaybackRateMenuButton);\n\n/**\n * Just an empty spacer element that can be used as an append point for plugins, etc.\n * Also can be used to create space between elements when necessary.\n *\n * @extends Component\n */\n\nvar Spacer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(Spacer, _Component);\n\n  function Spacer() {\n    return _Component.apply(this, arguments) || this;\n  }\n\n  var _proto = Spacer.prototype;\n\n  /**\n  * Builds the default DOM `className`.\n  *\n  * @return {string}\n  *         The DOM `className` for this object.\n  */\n  _proto.buildCSSClass = function buildCSSClass() {\n    return \"vjs-spacer \" + _Component.prototype.buildCSSClass.call(this);\n  }\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  ;\n\n  _proto.createEl = function createEl() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: this.buildCSSClass()\n    });\n  };\n\n  return Spacer;\n}(Component);\n\nComponent.registerComponent('Spacer', Spacer);\n\n/**\n * Spacer specifically meant to be used as an insertion point for new plugins, etc.\n *\n * @extends Spacer\n */\n\nvar CustomControlSpacer =\n/*#__PURE__*/\nfunction (_Spacer) {\n  _inheritsLoose(CustomControlSpacer, _Spacer);\n\n  function CustomControlSpacer() {\n    return _Spacer.apply(this, arguments) || this;\n  }\n\n  var _proto = CustomControlSpacer.prototype;\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  _proto.buildCSSClass = function buildCSSClass() {\n    return \"vjs-custom-control-spacer \" + _Spacer.prototype.buildCSSClass.call(this);\n  }\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  ;\n\n  _proto.createEl = function createEl() {\n    var el = _Spacer.prototype.createEl.call(this, {\n      className: this.buildCSSClass()\n    }); // No-flex/table-cell mode requires there be some content\n    // in the cell to fill the remaining space of the table.\n\n\n    el.innerHTML = \"\\xA0\";\n    return el;\n  };\n\n  return CustomControlSpacer;\n}(Spacer);\n\nComponent.registerComponent('CustomControlSpacer', CustomControlSpacer);\n\n/**\n * Container of main controls.\n *\n * @extends Component\n */\n\nvar ControlBar =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(ControlBar, _Component);\n\n  function ControlBar() {\n    return _Component.apply(this, arguments) || this;\n  }\n\n  var _proto = ControlBar.prototype;\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  _proto.createEl = function createEl() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-control-bar',\n      dir: 'ltr'\n    });\n  };\n\n  return ControlBar;\n}(Component);\n/**\n * Default options for `ControlBar`\n *\n * @type {Object}\n * @private\n */\n\n\nControlBar.prototype.options_ = {\n  children: ['playToggle', 'volumePanel', 'currentTimeDisplay', 'timeDivider', 'durationDisplay', 'progressControl', 'liveDisplay', 'seekToLive', 'remainingTimeDisplay', 'customControlSpacer', 'playbackRateMenuButton', 'chaptersButton', 'descriptionsButton', 'subsCapsButton', 'audioTrackButton', 'pictureInPictureToggle', 'fullscreenToggle']\n};\nComponent.registerComponent('ControlBar', ControlBar);\n\n/**\n * A display that indicates an error has occurred. This means that the video\n * is unplayable.\n *\n * @extends ModalDialog\n */\n\nvar ErrorDisplay =\n/*#__PURE__*/\nfunction (_ModalDialog) {\n  _inheritsLoose(ErrorDisplay, _ModalDialog);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param  {Player} player\n   *         The `Player` that this class should be attached to.\n   *\n   * @param  {Object} [options]\n   *         The key/value store of player options.\n   */\n  function ErrorDisplay(player, options) {\n    var _this;\n\n    _this = _ModalDialog.call(this, player, options) || this;\n\n    _this.on(player, 'error', _this.open);\n\n    return _this;\n  }\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   *\n   * @deprecated Since version 5.\n   */\n\n\n  var _proto = ErrorDisplay.prototype;\n\n  _proto.buildCSSClass = function buildCSSClass() {\n    return \"vjs-error-display \" + _ModalDialog.prototype.buildCSSClass.call(this);\n  }\n  /**\n   * Gets the localized error message based on the `Player`s error.\n   *\n   * @return {string}\n   *         The `Player`s error message localized or an empty string.\n   */\n  ;\n\n  _proto.content = function content() {\n    var error = this.player().error();\n    return error ? this.localize(error.message) : '';\n  };\n\n  return ErrorDisplay;\n}(ModalDialog);\n/**\n * The default options for an `ErrorDisplay`.\n *\n * @private\n */\n\n\nErrorDisplay.prototype.options_ = mergeOptions(ModalDialog.prototype.options_, {\n  pauseOnOpen: false,\n  fillAlways: true,\n  temporary: false,\n  uncloseable: true\n});\nComponent.registerComponent('ErrorDisplay', ErrorDisplay);\n\nvar LOCAL_STORAGE_KEY = 'vjs-text-track-settings';\nvar COLOR_BLACK = ['#000', 'Black'];\nvar COLOR_BLUE = ['#00F', 'Blue'];\nvar COLOR_CYAN = ['#0FF', 'Cyan'];\nvar COLOR_GREEN = ['#0F0', 'Green'];\nvar COLOR_MAGENTA = ['#F0F', 'Magenta'];\nvar COLOR_RED = ['#F00', 'Red'];\nvar COLOR_WHITE = ['#FFF', 'White'];\nvar COLOR_YELLOW = ['#FF0', 'Yellow'];\nvar OPACITY_OPAQUE = ['1', 'Opaque'];\nvar OPACITY_SEMI = ['0.5', 'Semi-Transparent'];\nvar OPACITY_TRANS = ['0', 'Transparent']; // Configuration for the various <select> elements in the DOM of this component.\n//\n// Possible keys include:\n//\n// `default`:\n//   The default option index. Only needs to be provided if not zero.\n// `parser`:\n//   A function which is used to parse the value from the selected option in\n//   a customized way.\n// `selector`:\n//   The selector used to find the associated <select> element.\n\nvar selectConfigs = {\n  backgroundColor: {\n    selector: '.vjs-bg-color > select',\n    id: 'captions-background-color-%s',\n    label: 'Color',\n    options: [COLOR_BLACK, COLOR_WHITE, COLOR_RED, COLOR_GREEN, COLOR_BLUE, COLOR_YELLOW, COLOR_MAGENTA, COLOR_CYAN]\n  },\n  backgroundOpacity: {\n    selector: '.vjs-bg-opacity > select',\n    id: 'captions-background-opacity-%s',\n    label: 'Transparency',\n    options: [OPACITY_OPAQUE, OPACITY_SEMI, OPACITY_TRANS]\n  },\n  color: {\n    selector: '.vjs-fg-color > select',\n    id: 'captions-foreground-color-%s',\n    label: 'Color',\n    options: [COLOR_WHITE, COLOR_BLACK, COLOR_RED, COLOR_GREEN, COLOR_BLUE, COLOR_YELLOW, COLOR_MAGENTA, COLOR_CYAN]\n  },\n  edgeStyle: {\n    selector: '.vjs-edge-style > select',\n    id: '%s',\n    label: 'Text Edge Style',\n    options: [['none', 'None'], ['raised', 'Raised'], ['depressed', 'Depressed'], ['uniform', 'Uniform'], ['dropshadow', 'Dropshadow']]\n  },\n  fontFamily: {\n    selector: '.vjs-font-family > select',\n    id: 'captions-font-family-%s',\n    label: 'Font Family',\n    options: [['proportionalSansSerif', 'Proportional Sans-Serif'], ['monospaceSansSerif', 'Monospace Sans-Serif'], ['proportionalSerif', 'Proportional Serif'], ['monospaceSerif', 'Monospace Serif'], ['casual', 'Casual'], ['script', 'Script'], ['small-caps', 'Small Caps']]\n  },\n  fontPercent: {\n    selector: '.vjs-font-percent > select',\n    id: 'captions-font-size-%s',\n    label: 'Font Size',\n    options: [['0.50', '50%'], ['0.75', '75%'], ['1.00', '100%'], ['1.25', '125%'], ['1.50', '150%'], ['1.75', '175%'], ['2.00', '200%'], ['3.00', '300%'], ['4.00', '400%']],\n    \"default\": 2,\n    parser: function parser(v) {\n      return v === '1.00' ? null : Number(v);\n    }\n  },\n  textOpacity: {\n    selector: '.vjs-text-opacity > select',\n    id: 'captions-foreground-opacity-%s',\n    label: 'Transparency',\n    options: [OPACITY_OPAQUE, OPACITY_SEMI]\n  },\n  // Options for this object are defined below.\n  windowColor: {\n    selector: '.vjs-window-color > select',\n    id: 'captions-window-color-%s',\n    label: 'Color'\n  },\n  // Options for this object are defined below.\n  windowOpacity: {\n    selector: '.vjs-window-opacity > select',\n    id: 'captions-window-opacity-%s',\n    label: 'Transparency',\n    options: [OPACITY_TRANS, OPACITY_SEMI, OPACITY_OPAQUE]\n  }\n};\nselectConfigs.windowColor.options = selectConfigs.backgroundColor.options;\n/**\n * Get the actual value of an option.\n *\n * @param  {string} value\n *         The value to get\n *\n * @param  {Function} [parser]\n *         Optional function to adjust the value.\n *\n * @return {Mixed}\n *         - Will be `undefined` if no value exists\n *         - Will be `undefined` if the given value is \"none\".\n *         - Will be the actual value otherwise.\n *\n * @private\n */\n\nfunction parseOptionValue(value, parser) {\n  if (parser) {\n    value = parser(value);\n  }\n\n  if (value && value !== 'none') {\n    return value;\n  }\n}\n/**\n * Gets the value of the selected <option> element within a <select> element.\n *\n * @param  {Element} el\n *         the element to look in\n *\n * @param  {Function} [parser]\n *         Optional function to adjust the value.\n *\n * @return {Mixed}\n *         - Will be `undefined` if no value exists\n *         - Will be `undefined` if the given value is \"none\".\n *         - Will be the actual value otherwise.\n *\n * @private\n */\n\n\nfunction getSelectedOptionValue(el, parser) {\n  var value = el.options[el.options.selectedIndex].value;\n  return parseOptionValue(value, parser);\n}\n/**\n * Sets the selected <option> element within a <select> element based on a\n * given value.\n *\n * @param {Element} el\n *        The element to look in.\n *\n * @param {string} value\n *        the property to look on.\n *\n * @param {Function} [parser]\n *        Optional function to adjust the value before comparing.\n *\n * @private\n */\n\n\nfunction setSelectedOption(el, value, parser) {\n  if (!value) {\n    return;\n  }\n\n  for (var i = 0; i < el.options.length; i++) {\n    if (parseOptionValue(el.options[i].value, parser) === value) {\n      el.selectedIndex = i;\n      break;\n    }\n  }\n}\n/**\n * Manipulate Text Tracks settings.\n *\n * @extends ModalDialog\n */\n\n\nvar TextTrackSettings =\n/*#__PURE__*/\nfunction (_ModalDialog) {\n  _inheritsLoose(TextTrackSettings, _ModalDialog);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *         The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *         The key/value store of player options.\n   */\n  function TextTrackSettings(player, options) {\n    var _this;\n\n    options.temporary = false;\n    _this = _ModalDialog.call(this, player, options) || this;\n    _this.updateDisplay = bind(_assertThisInitialized(_this), _this.updateDisplay); // fill the modal and pretend we have opened it\n\n    _this.fill();\n\n    _this.hasBeenOpened_ = _this.hasBeenFilled_ = true;\n    _this.endDialog = createEl('p', {\n      className: 'vjs-control-text',\n      textContent: _this.localize('End of dialog window.')\n    });\n\n    _this.el().appendChild(_this.endDialog);\n\n    _this.setDefaults(); // Grab `persistTextTrackSettings` from the player options if not passed in child options\n\n\n    if (options.persistTextTrackSettings === undefined) {\n      _this.options_.persistTextTrackSettings = _this.options_.playerOptions.persistTextTrackSettings;\n    }\n\n    _this.on(_this.$('.vjs-done-button'), 'click', function () {\n      _this.saveSettings();\n\n      _this.close();\n    });\n\n    _this.on(_this.$('.vjs-default-button'), 'click', function () {\n      _this.setDefaults();\n\n      _this.updateDisplay();\n    });\n\n    each(selectConfigs, function (config) {\n      _this.on(_this.$(config.selector), 'change', _this.updateDisplay);\n    });\n\n    if (_this.options_.persistTextTrackSettings) {\n      _this.restoreSettings();\n    }\n\n    return _this;\n  }\n\n  var _proto = TextTrackSettings.prototype;\n\n  _proto.dispose = function dispose() {\n    this.endDialog = null;\n\n    _ModalDialog.prototype.dispose.call(this);\n  }\n  /**\n   * Create a <select> element with configured options.\n   *\n   * @param {string} key\n   *        Configuration key to use during creation.\n   *\n   * @return {string}\n   *         An HTML string.\n   *\n   * @private\n   */\n  ;\n\n  _proto.createElSelect_ = function createElSelect_(key, legendId, type) {\n    var _this2 = this;\n\n    if (legendId === void 0) {\n      legendId = '';\n    }\n\n    if (type === void 0) {\n      type = 'label';\n    }\n\n    var config = selectConfigs[key];\n    var id = config.id.replace('%s', this.id_);\n    var selectLabelledbyIds = [legendId, id].join(' ').trim();\n    return [\"<\" + type + \" id=\\\"\" + id + \"\\\" class=\\\"\" + (type === 'label' ? 'vjs-label' : '') + \"\\\">\", this.localize(config.label), \"</\" + type + \">\", \"<select aria-labelledby=\\\"\" + selectLabelledbyIds + \"\\\">\"].concat(config.options.map(function (o) {\n      var optionId = id + '-' + o[1].replace(/\\W+/g, '');\n      return [\"<option id=\\\"\" + optionId + \"\\\" value=\\\"\" + o[0] + \"\\\" \", \"aria-labelledby=\\\"\" + selectLabelledbyIds + \" \" + optionId + \"\\\">\", _this2.localize(o[1]), '</option>'].join('');\n    })).concat('</select>').join('');\n  }\n  /**\n   * Create foreground color element for the component\n   *\n   * @return {string}\n   *         An HTML string.\n   *\n   * @private\n   */\n  ;\n\n  _proto.createElFgColor_ = function createElFgColor_() {\n    var legendId = \"captions-text-legend-\" + this.id_;\n    return ['<fieldset class=\"vjs-fg-color vjs-track-setting\">', \"<legend id=\\\"\" + legendId + \"\\\">\", this.localize('Text'), '</legend>', this.createElSelect_('color', legendId), '<span class=\"vjs-text-opacity vjs-opacity\">', this.createElSelect_('textOpacity', legendId), '</span>', '</fieldset>'].join('');\n  }\n  /**\n   * Create background color element for the component\n   *\n   * @return {string}\n   *         An HTML string.\n   *\n   * @private\n   */\n  ;\n\n  _proto.createElBgColor_ = function createElBgColor_() {\n    var legendId = \"captions-background-\" + this.id_;\n    return ['<fieldset class=\"vjs-bg-color vjs-track-setting\">', \"<legend id=\\\"\" + legendId + \"\\\">\", this.localize('Background'), '</legend>', this.createElSelect_('backgroundColor', legendId), '<span class=\"vjs-bg-opacity vjs-opacity\">', this.createElSelect_('backgroundOpacity', legendId), '</span>', '</fieldset>'].join('');\n  }\n  /**\n   * Create window color element for the component\n   *\n   * @return {string}\n   *         An HTML string.\n   *\n   * @private\n   */\n  ;\n\n  _proto.createElWinColor_ = function createElWinColor_() {\n    var legendId = \"captions-window-\" + this.id_;\n    return ['<fieldset class=\"vjs-window-color vjs-track-setting\">', \"<legend id=\\\"\" + legendId + \"\\\">\", this.localize('Window'), '</legend>', this.createElSelect_('windowColor', legendId), '<span class=\"vjs-window-opacity vjs-opacity\">', this.createElSelect_('windowOpacity', legendId), '</span>', '</fieldset>'].join('');\n  }\n  /**\n   * Create color elements for the component\n   *\n   * @return {Element}\n   *         The element that was created\n   *\n   * @private\n   */\n  ;\n\n  _proto.createElColors_ = function createElColors_() {\n    return createEl('div', {\n      className: 'vjs-track-settings-colors',\n      innerHTML: [this.createElFgColor_(), this.createElBgColor_(), this.createElWinColor_()].join('')\n    });\n  }\n  /**\n   * Create font elements for the component\n   *\n   * @return {Element}\n   *         The element that was created.\n   *\n   * @private\n   */\n  ;\n\n  _proto.createElFont_ = function createElFont_() {\n    return createEl('div', {\n      className: 'vjs-track-settings-font',\n      innerHTML: ['<fieldset class=\"vjs-font-percent vjs-track-setting\">', this.createElSelect_('fontPercent', '', 'legend'), '</fieldset>', '<fieldset class=\"vjs-edge-style vjs-track-setting\">', this.createElSelect_('edgeStyle', '', 'legend'), '</fieldset>', '<fieldset class=\"vjs-font-family vjs-track-setting\">', this.createElSelect_('fontFamily', '', 'legend'), '</fieldset>'].join('')\n    });\n  }\n  /**\n   * Create controls for the component\n   *\n   * @return {Element}\n   *         The element that was created.\n   *\n   * @private\n   */\n  ;\n\n  _proto.createElControls_ = function createElControls_() {\n    var defaultsDescription = this.localize('restore all settings to the default values');\n    return createEl('div', {\n      className: 'vjs-track-settings-controls',\n      innerHTML: [\"<button type=\\\"button\\\" class=\\\"vjs-default-button\\\" title=\\\"\" + defaultsDescription + \"\\\">\", this.localize('Reset'), \"<span class=\\\"vjs-control-text\\\"> \" + defaultsDescription + \"</span>\", '</button>', \"<button type=\\\"button\\\" class=\\\"vjs-done-button\\\">\" + this.localize('Done') + \"</button>\"].join('')\n    });\n  };\n\n  _proto.content = function content() {\n    return [this.createElColors_(), this.createElFont_(), this.createElControls_()];\n  };\n\n  _proto.label = function label() {\n    return this.localize('Caption Settings Dialog');\n  };\n\n  _proto.description = function description() {\n    return this.localize('Beginning of dialog window. Escape will cancel and close the window.');\n  };\n\n  _proto.buildCSSClass = function buildCSSClass() {\n    return _ModalDialog.prototype.buildCSSClass.call(this) + ' vjs-text-track-settings';\n  }\n  /**\n   * Gets an object of text track settings (or null).\n   *\n   * @return {Object}\n   *         An object with config values parsed from the DOM or localStorage.\n   */\n  ;\n\n  _proto.getValues = function getValues() {\n    var _this3 = this;\n\n    return reduce(selectConfigs, function (accum, config, key) {\n      var value = getSelectedOptionValue(_this3.$(config.selector), config.parser);\n\n      if (value !== undefined) {\n        accum[key] = value;\n      }\n\n      return accum;\n    }, {});\n  }\n  /**\n   * Sets text track settings from an object of values.\n   *\n   * @param {Object} values\n   *        An object with config values parsed from the DOM or localStorage.\n   */\n  ;\n\n  _proto.setValues = function setValues(values) {\n    var _this4 = this;\n\n    each(selectConfigs, function (config, key) {\n      setSelectedOption(_this4.$(config.selector), values[key], config.parser);\n    });\n  }\n  /**\n   * Sets all `<select>` elements to their default values.\n   */\n  ;\n\n  _proto.setDefaults = function setDefaults() {\n    var _this5 = this;\n\n    each(selectConfigs, function (config) {\n      var index = config.hasOwnProperty('default') ? config[\"default\"] : 0;\n      _this5.$(config.selector).selectedIndex = index;\n    });\n  }\n  /**\n   * Restore texttrack settings from localStorage\n   */\n  ;\n\n  _proto.restoreSettings = function restoreSettings() {\n    var values;\n\n    try {\n      values = JSON.parse(window$1.localStorage.getItem(LOCAL_STORAGE_KEY));\n    } catch (err) {\n      log.warn(err);\n    }\n\n    if (values) {\n      this.setValues(values);\n    }\n  }\n  /**\n   * Save text track settings to localStorage\n   */\n  ;\n\n  _proto.saveSettings = function saveSettings() {\n    if (!this.options_.persistTextTrackSettings) {\n      return;\n    }\n\n    var values = this.getValues();\n\n    try {\n      if (Object.keys(values).length) {\n        window$1.localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(values));\n      } else {\n        window$1.localStorage.removeItem(LOCAL_STORAGE_KEY);\n      }\n    } catch (err) {\n      log.warn(err);\n    }\n  }\n  /**\n   * Update display of text track settings\n   */\n  ;\n\n  _proto.updateDisplay = function updateDisplay() {\n    var ttDisplay = this.player_.getChild('textTrackDisplay');\n\n    if (ttDisplay) {\n      ttDisplay.updateDisplay();\n    }\n  }\n  /**\n   * conditionally blur the element and refocus the captions button\n   *\n   * @private\n   */\n  ;\n\n  _proto.conditionalBlur_ = function conditionalBlur_() {\n    this.previouslyActiveEl_ = null;\n    var cb = this.player_.controlBar;\n    var subsCapsBtn = cb && cb.subsCapsButton;\n    var ccBtn = cb && cb.captionsButton;\n\n    if (subsCapsBtn) {\n      subsCapsBtn.focus();\n    } else if (ccBtn) {\n      ccBtn.focus();\n    }\n  };\n\n  return TextTrackSettings;\n}(ModalDialog);\n\nComponent.registerComponent('TextTrackSettings', TextTrackSettings);\n\n/**\n * A Resize Manager. It is in charge of triggering `playerresize` on the player in the right conditions.\n *\n * It'll either create an iframe and use a debounced resize handler on it or use the new {@link https://wicg.github.io/ResizeObserver/|ResizeObserver}.\n *\n * If the ResizeObserver is available natively, it will be used. A polyfill can be passed in as an option.\n * If a `playerresize` event is not needed, the ResizeManager component can be removed from the player, see the example below.\n * @example <caption>How to disable the resize manager</caption>\n * const player = videojs('#vid', {\n *   resizeManager: false\n * });\n *\n * @see {@link https://wicg.github.io/ResizeObserver/|ResizeObserver specification}\n *\n * @extends Component\n */\n\nvar ResizeManager =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(ResizeManager, _Component);\n\n  /**\n   * Create the ResizeManager.\n   *\n   * @param {Object} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of ResizeManager options.\n   *\n   * @param {Object} [options.ResizeObserver]\n   *        A polyfill for ResizeObserver can be passed in here.\n   *        If this is set to null it will ignore the native ResizeObserver and fall back to the iframe fallback.\n   */\n  function ResizeManager(player, options) {\n    var _this;\n\n    var RESIZE_OBSERVER_AVAILABLE = options.ResizeObserver || window$1.ResizeObserver; // if `null` was passed, we want to disable the ResizeObserver\n\n    if (options.ResizeObserver === null) {\n      RESIZE_OBSERVER_AVAILABLE = false;\n    } // Only create an element when ResizeObserver isn't available\n\n\n    var options_ = mergeOptions({\n      createEl: !RESIZE_OBSERVER_AVAILABLE,\n      reportTouchActivity: false\n    }, options);\n    _this = _Component.call(this, player, options_) || this;\n    _this.ResizeObserver = options.ResizeObserver || window$1.ResizeObserver;\n    _this.loadListener_ = null;\n    _this.resizeObserver_ = null;\n    _this.debouncedHandler_ = debounce(function () {\n      _this.resizeHandler();\n    }, 100, false, _assertThisInitialized(_this));\n\n    if (RESIZE_OBSERVER_AVAILABLE) {\n      _this.resizeObserver_ = new _this.ResizeObserver(_this.debouncedHandler_);\n\n      _this.resizeObserver_.observe(player.el());\n    } else {\n      _this.loadListener_ = function () {\n        if (!_this.el_ || !_this.el_.contentWindow) {\n          return;\n        }\n\n        var debouncedHandler_ = _this.debouncedHandler_;\n\n        var unloadListener_ = _this.unloadListener_ = function () {\n          off(this, 'resize', debouncedHandler_);\n          off(this, 'unload', unloadListener_);\n          unloadListener_ = null;\n        }; // safari and edge can unload the iframe before resizemanager dispose\n        // we have to dispose of event handlers correctly before that happens\n\n\n        on(_this.el_.contentWindow, 'unload', unloadListener_);\n        on(_this.el_.contentWindow, 'resize', debouncedHandler_);\n      };\n\n      _this.one('load', _this.loadListener_);\n    }\n\n    return _this;\n  }\n\n  var _proto = ResizeManager.prototype;\n\n  _proto.createEl = function createEl() {\n    return _Component.prototype.createEl.call(this, 'iframe', {\n      className: 'vjs-resize-manager',\n      tabIndex: -1\n    }, {\n      'aria-hidden': 'true'\n    });\n  }\n  /**\n   * Called when a resize is triggered on the iframe or a resize is observed via the ResizeObserver\n   *\n   * @fires Player#playerresize\n   */\n  ;\n\n  _proto.resizeHandler = function resizeHandler() {\n    /**\n     * Called when the player size has changed\n     *\n     * @event Player#playerresize\n     * @type {EventTarget~Event}\n     */\n    // make sure player is still around to trigger\n    // prevents this from causing an error after dispose\n    if (!this.player_ || !this.player_.trigger) {\n      return;\n    }\n\n    this.player_.trigger('playerresize');\n  };\n\n  _proto.dispose = function dispose() {\n    if (this.debouncedHandler_) {\n      this.debouncedHandler_.cancel();\n    }\n\n    if (this.resizeObserver_) {\n      if (this.player_.el()) {\n        this.resizeObserver_.unobserve(this.player_.el());\n      }\n\n      this.resizeObserver_.disconnect();\n    }\n\n    if (this.loadListener_) {\n      this.off('load', this.loadListener_);\n    }\n\n    if (this.el_ && this.el_.contentWindow && this.unloadListener_) {\n      this.unloadListener_.call(this.el_.contentWindow);\n    }\n\n    this.ResizeObserver = null;\n    this.resizeObserver = null;\n    this.debouncedHandler_ = null;\n    this.loadListener_ = null;\n\n    _Component.prototype.dispose.call(this);\n  };\n\n  return ResizeManager;\n}(Component);\n\nComponent.registerComponent('ResizeManager', ResizeManager);\n\n/* track when we are at the live edge, and other helpers for live playback */\n\nvar LiveTracker =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(LiveTracker, _Component);\n\n  function LiveTracker(player, options) {\n    var _this;\n\n    // LiveTracker does not need an element\n    var options_ = mergeOptions({\n      createEl: false\n    }, options);\n    _this = _Component.call(this, player, options_) || this;\n\n    _this.reset_();\n\n    _this.on(_this.player_, 'durationchange', _this.handleDurationchange); // we don't need to track live playback if the document is hidden,\n    // also, tracking when the document is hidden can\n    // cause the CPU to spike and eventually crash the page on IE11.\n\n\n    if (IE_VERSION && 'hidden' in document && 'visibilityState' in document) {\n      _this.on(document, 'visibilitychange', _this.handleVisibilityChange);\n    }\n\n    return _this;\n  }\n\n  var _proto = LiveTracker.prototype;\n\n  _proto.handleVisibilityChange = function handleVisibilityChange() {\n    if (this.player_.duration() !== Infinity) {\n      return;\n    }\n\n    if (document.hidden) {\n      this.stopTracking();\n    } else {\n      this.startTracking();\n    }\n  };\n\n  _proto.isBehind_ = function isBehind_() {\n    // don't report that we are behind until a timeupdate has been seen\n    if (!this.timeupdateSeen_) {\n      return false;\n    }\n\n    var liveCurrentTime = this.liveCurrentTime();\n    var currentTime = this.player_.currentTime();\n    var seekableIncrement = this.seekableIncrement_; // the live edge window is the amount of seconds away from live\n    // that a player can be, but still be considered live.\n    // we add 0.07 because the live tracking happens every 30ms\n    // and we want some wiggle room for short segment live playback\n\n    var liveEdgeWindow = seekableIncrement * 2 + 0.07; // on Android liveCurrentTime can bee Infinity, because seekableEnd\n    // can be Infinity, so we handle that case.\n\n    return liveCurrentTime !== Infinity && liveCurrentTime - liveEdgeWindow >= currentTime;\n  } // all the functionality for tracking when seek end changes\n  // and for tracking how far past seek end we should be\n  ;\n\n  _proto.trackLive_ = function trackLive_() {\n    this.pastSeekEnd_ = this.pastSeekEnd_;\n    var seekable = this.player_.seekable(); // skip undefined seekable\n\n    if (!seekable || !seekable.length) {\n      return;\n    }\n\n    var newSeekEnd = this.seekableEnd(); // we can only tell if we are behind live, when seekable changes\n    // once we detect that seekable has changed we check the new seek\n    // end against current time, with a fudge value of half a second.\n\n    if (newSeekEnd !== this.lastSeekEnd_) {\n      if (this.lastSeekEnd_) {\n        this.seekableIncrement_ = Math.abs(newSeekEnd - this.lastSeekEnd_);\n      }\n\n      this.pastSeekEnd_ = 0;\n      this.lastSeekEnd_ = newSeekEnd;\n      this.trigger('seekableendchange');\n    }\n\n    this.pastSeekEnd_ = this.pastSeekEnd() + 0.03;\n\n    if (this.isBehind_() !== this.behindLiveEdge()) {\n      this.behindLiveEdge_ = this.isBehind_();\n      this.trigger('liveedgechange');\n    }\n  }\n  /**\n   * handle a durationchange event on the player\n   * and start/stop tracking accordingly.\n   */\n  ;\n\n  _proto.handleDurationchange = function handleDurationchange() {\n    if (this.player_.duration() === Infinity) {\n      this.startTracking();\n    } else {\n      this.stopTracking();\n    }\n  }\n  /**\n   * start tracking live playback\n   */\n  ;\n\n  _proto.startTracking = function startTracking() {\n    var _this2 = this;\n\n    if (this.isTracking()) {\n      return;\n    } // If we haven't seen a timeupdate, we need to check whether playback\n    // began before this component started tracking. This can happen commonly\n    // when using autoplay.\n\n\n    if (!this.timeupdateSeen_) {\n      this.timeupdateSeen_ = this.player_.hasStarted();\n    }\n\n    this.trackingInterval_ = this.setInterval(this.trackLive_, 30);\n    this.trackLive_();\n    this.on(this.player_, 'play', this.trackLive_);\n    this.on(this.player_, 'pause', this.trackLive_); // this is to prevent showing that we are not live\n    // before a video starts to play\n\n    if (!this.timeupdateSeen_) {\n      this.one(this.player_, 'play', this.handlePlay);\n\n      this.handleTimeupdate = function () {\n        _this2.timeupdateSeen_ = true;\n        _this2.handleTimeupdate = null;\n      };\n\n      this.one(this.player_, 'timeupdate', this.handleTimeupdate);\n    }\n  };\n\n  _proto.handlePlay = function handlePlay() {\n    this.one(this.player_, 'timeupdate', this.seekToLiveEdge);\n  }\n  /**\n   * Stop tracking, and set all internal variables to\n   * their initial value.\n   */\n  ;\n\n  _proto.reset_ = function reset_() {\n    this.pastSeekEnd_ = 0;\n    this.lastSeekEnd_ = null;\n    this.behindLiveEdge_ = null;\n    this.timeupdateSeen_ = false;\n    this.clearInterval(this.trackingInterval_);\n    this.trackingInterval_ = null;\n    this.seekableIncrement_ = 12;\n    this.off(this.player_, 'play', this.trackLive_);\n    this.off(this.player_, 'pause', this.trackLive_);\n    this.off(this.player_, 'play', this.handlePlay);\n    this.off(this.player_, 'timeupdate', this.seekToLiveEdge);\n\n    if (this.handleTimeupdate) {\n      this.off(this.player_, 'timeupdate', this.handleTimeupdate);\n      this.handleTimeupdate = null;\n    }\n  }\n  /**\n   * stop tracking live playback\n   */\n  ;\n\n  _proto.stopTracking = function stopTracking() {\n    if (!this.isTracking()) {\n      return;\n    }\n\n    this.reset_();\n  }\n  /**\n   * A helper to get the player seekable end\n   * so that we don't have to null check everywhere\n   */\n  ;\n\n  _proto.seekableEnd = function seekableEnd() {\n    var seekable = this.player_.seekable();\n    var seekableEnds = [];\n    var i = seekable ? seekable.length : 0;\n\n    while (i--) {\n      seekableEnds.push(seekable.end(i));\n    } // grab the furthest seekable end after sorting, or if there are none\n    // default to Infinity\n\n\n    return seekableEnds.length ? seekableEnds.sort()[seekableEnds.length - 1] : Infinity;\n  }\n  /**\n   * A helper to get the player seekable start\n   * so that we don't have to null check everywhere\n   */\n  ;\n\n  _proto.seekableStart = function seekableStart() {\n    var seekable = this.player_.seekable();\n    var seekableStarts = [];\n    var i = seekable ? seekable.length : 0;\n\n    while (i--) {\n      seekableStarts.push(seekable.start(i));\n    } // grab the first seekable start after sorting, or if there are none\n    // default to 0\n\n\n    return seekableStarts.length ? seekableStarts.sort()[0] : 0;\n  }\n  /**\n   * Get the live time window\n   */\n  ;\n\n  _proto.liveWindow = function liveWindow() {\n    var liveCurrentTime = this.liveCurrentTime();\n\n    if (liveCurrentTime === Infinity) {\n      return Infinity;\n    }\n\n    return liveCurrentTime - this.seekableStart();\n  }\n  /**\n   * Determines if the player is live, only checks if this component\n   * is tracking live playback or not\n   */\n  ;\n\n  _proto.isLive = function isLive() {\n    return this.isTracking();\n  }\n  /**\n   * Determines if currentTime is at the live edge and won't fall behind\n   * on each seekableendchange\n   */\n  ;\n\n  _proto.atLiveEdge = function atLiveEdge() {\n    return !this.behindLiveEdge();\n  }\n  /**\n   * get what we expect the live current time to be\n   */\n  ;\n\n  _proto.liveCurrentTime = function liveCurrentTime() {\n    return this.pastSeekEnd() + this.seekableEnd();\n  }\n  /**\n   * Returns how far past seek end we expect current time to be\n   */\n  ;\n\n  _proto.pastSeekEnd = function pastSeekEnd() {\n    return this.pastSeekEnd_;\n  }\n  /**\n   * If we are currently behind the live edge, aka currentTime will be\n   * behind on a seekableendchange\n   */\n  ;\n\n  _proto.behindLiveEdge = function behindLiveEdge() {\n    return this.behindLiveEdge_;\n  };\n\n  _proto.isTracking = function isTracking() {\n    return typeof this.trackingInterval_ === 'number';\n  }\n  /**\n   * Seek to the live edge if we are behind the live edge\n   */\n  ;\n\n  _proto.seekToLiveEdge = function seekToLiveEdge() {\n    if (this.atLiveEdge()) {\n      return;\n    }\n\n    this.player_.currentTime(this.liveCurrentTime());\n\n    if (this.player_.paused()) {\n      this.player_.play();\n    }\n  };\n\n  _proto.dispose = function dispose() {\n    this.stopTracking();\n\n    _Component.prototype.dispose.call(this);\n  };\n\n  return LiveTracker;\n}(Component);\n\nComponent.registerComponent('LiveTracker', LiveTracker);\n\n/**\n * This function is used to fire a sourceset when there is something\n * similar to `mediaEl.load()` being called. It will try to find the source via\n * the `src` attribute and then the `<source>` elements. It will then fire `sourceset`\n * with the source that was found or empty string if we cannot know. If it cannot\n * find a source then `sourceset` will not be fired.\n *\n * @param {Html5} tech\n *        The tech object that sourceset was setup on\n *\n * @return {boolean}\n *         returns false if the sourceset was not fired and true otherwise.\n */\n\nvar sourcesetLoad = function sourcesetLoad(tech) {\n  var el = tech.el(); // if `el.src` is set, that source will be loaded.\n\n  if (el.hasAttribute('src')) {\n    tech.triggerSourceset(el.src);\n    return true;\n  }\n  /**\n   * Since there isn't a src property on the media element, source elements will be used for\n   * implementing the source selection algorithm. This happens asynchronously and\n   * for most cases were there is more than one source we cannot tell what source will\n   * be loaded, without re-implementing the source selection algorithm. At this time we are not\n   * going to do that. There are three special cases that we do handle here though:\n   *\n   * 1. If there are no sources, do not fire `sourceset`.\n   * 2. If there is only one `<source>` with a `src` property/attribute that is our `src`\n   * 3. If there is more than one `<source>` but all of them have the same `src` url.\n   *    That will be our src.\n   */\n\n\n  var sources = tech.$$('source');\n  var srcUrls = [];\n  var src = ''; // if there are no sources, do not fire sourceset\n\n  if (!sources.length) {\n    return false;\n  } // only count valid/non-duplicate source elements\n\n\n  for (var i = 0; i < sources.length; i++) {\n    var url = sources[i].src;\n\n    if (url && srcUrls.indexOf(url) === -1) {\n      srcUrls.push(url);\n    }\n  } // there were no valid sources\n\n\n  if (!srcUrls.length) {\n    return false;\n  } // there is only one valid source element url\n  // use that\n\n\n  if (srcUrls.length === 1) {\n    src = srcUrls[0];\n  }\n\n  tech.triggerSourceset(src);\n  return true;\n};\n/**\n * our implementation of an `innerHTML` descriptor for browsers\n * that do not have one.\n */\n\n\nvar innerHTMLDescriptorPolyfill = Object.defineProperty({}, 'innerHTML', {\n  get: function get() {\n    return this.cloneNode(true).innerHTML;\n  },\n  set: function set(v) {\n    // make a dummy node to use innerHTML on\n    var dummy = document.createElement(this.nodeName.toLowerCase()); // set innerHTML to the value provided\n\n    dummy.innerHTML = v; // make a document fragment to hold the nodes from dummy\n\n    var docFrag = document.createDocumentFragment(); // copy all of the nodes created by the innerHTML on dummy\n    // to the document fragment\n\n    while (dummy.childNodes.length) {\n      docFrag.appendChild(dummy.childNodes[0]);\n    } // remove content\n\n\n    this.innerText = ''; // now we add all of that html in one by appending the\n    // document fragment. This is how innerHTML does it.\n\n    window$1.Element.prototype.appendChild.call(this, docFrag); // then return the result that innerHTML's setter would\n\n    return this.innerHTML;\n  }\n});\n/**\n * Get a property descriptor given a list of priorities and the\n * property to get.\n */\n\nvar getDescriptor = function getDescriptor(priority, prop) {\n  var descriptor = {};\n\n  for (var i = 0; i < priority.length; i++) {\n    descriptor = Object.getOwnPropertyDescriptor(priority[i], prop);\n\n    if (descriptor && descriptor.set && descriptor.get) {\n      break;\n    }\n  }\n\n  descriptor.enumerable = true;\n  descriptor.configurable = true;\n  return descriptor;\n};\n\nvar getInnerHTMLDescriptor = function getInnerHTMLDescriptor(tech) {\n  return getDescriptor([tech.el(), window$1.HTMLMediaElement.prototype, window$1.Element.prototype, innerHTMLDescriptorPolyfill], 'innerHTML');\n};\n/**\n * Patches browser internal functions so that we can tell synchronously\n * if a `<source>` was appended to the media element. For some reason this\n * causes a `sourceset` if the the media element is ready and has no source.\n * This happens when:\n * - The page has just loaded and the media element does not have a source.\n * - The media element was emptied of all sources, then `load()` was called.\n *\n * It does this by patching the following functions/properties when they are supported:\n *\n * - `append()` - can be used to add a `<source>` element to the media element\n * - `appendChild()` - can be used to add a `<source>` element to the media element\n * - `insertAdjacentHTML()` -  can be used to add a `<source>` element to the media element\n * - `innerHTML` -  can be used to add a `<source>` element to the media element\n *\n * @param {Html5} tech\n *        The tech object that sourceset is being setup on.\n */\n\n\nvar firstSourceWatch = function firstSourceWatch(tech) {\n  var el = tech.el(); // make sure firstSourceWatch isn't setup twice.\n\n  if (el.resetSourceWatch_) {\n    return;\n  }\n\n  var old = {};\n  var innerDescriptor = getInnerHTMLDescriptor(tech);\n\n  var appendWrapper = function appendWrapper(appendFn) {\n    return function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var retval = appendFn.apply(el, args);\n      sourcesetLoad(tech);\n      return retval;\n    };\n  };\n\n  ['append', 'appendChild', 'insertAdjacentHTML'].forEach(function (k) {\n    if (!el[k]) {\n      return;\n    } // store the old function\n\n\n    old[k] = el[k]; // call the old function with a sourceset if a source\n    // was loaded\n\n    el[k] = appendWrapper(old[k]);\n  });\n  Object.defineProperty(el, 'innerHTML', mergeOptions(innerDescriptor, {\n    set: appendWrapper(innerDescriptor.set)\n  }));\n\n  el.resetSourceWatch_ = function () {\n    el.resetSourceWatch_ = null;\n    Object.keys(old).forEach(function (k) {\n      el[k] = old[k];\n    });\n    Object.defineProperty(el, 'innerHTML', innerDescriptor);\n  }; // on the first sourceset, we need to revert our changes\n\n\n  tech.one('sourceset', el.resetSourceWatch_);\n};\n/**\n * our implementation of a `src` descriptor for browsers\n * that do not have one.\n */\n\n\nvar srcDescriptorPolyfill = Object.defineProperty({}, 'src', {\n  get: function get() {\n    if (this.hasAttribute('src')) {\n      return getAbsoluteURL(window$1.Element.prototype.getAttribute.call(this, 'src'));\n    }\n\n    return '';\n  },\n  set: function set(v) {\n    window$1.Element.prototype.setAttribute.call(this, 'src', v);\n    return v;\n  }\n});\n\nvar getSrcDescriptor = function getSrcDescriptor(tech) {\n  return getDescriptor([tech.el(), window$1.HTMLMediaElement.prototype, srcDescriptorPolyfill], 'src');\n};\n/**\n * setup `sourceset` handling on the `Html5` tech. This function\n * patches the following element properties/functions:\n *\n * - `src` - to determine when `src` is set\n * - `setAttribute()` - to determine when `src` is set\n * - `load()` - this re-triggers the source selection algorithm, and can\n *              cause a sourceset.\n *\n * If there is no source when we are adding `sourceset` support or during a `load()`\n * we also patch the functions listed in `firstSourceWatch`.\n *\n * @param {Html5} tech\n *        The tech to patch\n */\n\n\nvar setupSourceset = function setupSourceset(tech) {\n  if (!tech.featuresSourceset) {\n    return;\n  }\n\n  var el = tech.el(); // make sure sourceset isn't setup twice.\n\n  if (el.resetSourceset_) {\n    return;\n  }\n\n  var srcDescriptor = getSrcDescriptor(tech);\n  var oldSetAttribute = el.setAttribute;\n  var oldLoad = el.load;\n  Object.defineProperty(el, 'src', mergeOptions(srcDescriptor, {\n    set: function set(v) {\n      var retval = srcDescriptor.set.call(el, v); // we use the getter here to get the actual value set on src\n\n      tech.triggerSourceset(el.src);\n      return retval;\n    }\n  }));\n\n  el.setAttribute = function (n, v) {\n    var retval = oldSetAttribute.call(el, n, v);\n\n    if (/src/i.test(n)) {\n      tech.triggerSourceset(el.src);\n    }\n\n    return retval;\n  };\n\n  el.load = function () {\n    var retval = oldLoad.call(el); // if load was called, but there was no source to fire\n    // sourceset on. We have to watch for a source append\n    // as that can trigger a `sourceset` when the media element\n    // has no source\n\n    if (!sourcesetLoad(tech)) {\n      tech.triggerSourceset('');\n      firstSourceWatch(tech);\n    }\n\n    return retval;\n  };\n\n  if (el.currentSrc) {\n    tech.triggerSourceset(el.currentSrc);\n  } else if (!sourcesetLoad(tech)) {\n    firstSourceWatch(tech);\n  }\n\n  el.resetSourceset_ = function () {\n    el.resetSourceset_ = null;\n    el.load = oldLoad;\n    el.setAttribute = oldSetAttribute;\n    Object.defineProperty(el, 'src', srcDescriptor);\n\n    if (el.resetSourceWatch_) {\n      el.resetSourceWatch_();\n    }\n  };\n};\n\nfunction _templateObject$1() {\n  var data = _taggedTemplateLiteralLoose([\"Text Tracks are being loaded from another origin but the crossorigin attribute isn't used.\\n            This may prevent text tracks from loading.\"]);\n\n  _templateObject$1 = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n/**\n * HTML5 Media Controller - Wrapper for HTML5 Media API\n *\n * @mixes Tech~SourceHandlerAdditions\n * @extends Tech\n */\n\nvar Html5 =\n/*#__PURE__*/\nfunction (_Tech) {\n  _inheritsLoose(Html5, _Tech);\n\n  /**\n  * Create an instance of this Tech.\n  *\n  * @param {Object} [options]\n  *        The key/value store of player options.\n  *\n  * @param {Component~ReadyCallback} ready\n  *        Callback function to call when the `HTML5` Tech is ready.\n  */\n  function Html5(options, ready) {\n    var _this;\n\n    _this = _Tech.call(this, options, ready) || this;\n    var source = options.source;\n    var crossoriginTracks = false; // Set the source if one is provided\n    // 1) Check if the source is new (if not, we want to keep the original so playback isn't interrupted)\n    // 2) Check to see if the network state of the tag was failed at init, and if so, reset the source\n    // anyway so the error gets fired.\n\n    if (source && (_this.el_.currentSrc !== source.src || options.tag && options.tag.initNetworkState_ === 3)) {\n      _this.setSource(source);\n    } else {\n      _this.handleLateInit_(_this.el_);\n    } // setup sourceset after late sourceset/init\n\n\n    if (options.enableSourceset) {\n      _this.setupSourcesetHandling_();\n    }\n\n    if (_this.el_.hasChildNodes()) {\n      var nodes = _this.el_.childNodes;\n      var nodesLength = nodes.length;\n      var removeNodes = [];\n\n      while (nodesLength--) {\n        var node = nodes[nodesLength];\n        var nodeName = node.nodeName.toLowerCase();\n\n        if (nodeName === 'track') {\n          if (!_this.featuresNativeTextTracks) {\n            // Empty video tag tracks so the built-in player doesn't use them also.\n            // This may not be fast enough to stop HTML5 browsers from reading the tags\n            // so we'll need to turn off any default tracks if we're manually doing\n            // captions and subtitles. videoElement.textTracks\n            removeNodes.push(node);\n          } else {\n            // store HTMLTrackElement and TextTrack to remote list\n            _this.remoteTextTrackEls().addTrackElement_(node);\n\n            _this.remoteTextTracks().addTrack(node.track);\n\n            _this.textTracks().addTrack(node.track);\n\n            if (!crossoriginTracks && !_this.el_.hasAttribute('crossorigin') && isCrossOrigin(node.src)) {\n              crossoriginTracks = true;\n            }\n          }\n        }\n      }\n\n      for (var i = 0; i < removeNodes.length; i++) {\n        _this.el_.removeChild(removeNodes[i]);\n      }\n    }\n\n    _this.proxyNativeTracks_();\n\n    if (_this.featuresNativeTextTracks && crossoriginTracks) {\n      log.warn(tsml(_templateObject$1()));\n    } // prevent iOS Safari from disabling metadata text tracks during native playback\n\n\n    _this.restoreMetadataTracksInIOSNativePlayer_(); // Determine if native controls should be used\n    // Our goal should be to get the custom controls on mobile solid everywhere\n    // so we can remove this all together. Right now this will block custom\n    // controls on touch enabled laptops like the Chrome Pixel\n\n\n    if ((TOUCH_ENABLED || IS_IPHONE || IS_NATIVE_ANDROID) && options.nativeControlsForTouch === true) {\n      _this.setControls(true);\n    } // on iOS, we want to proxy `webkitbeginfullscreen` and `webkitendfullscreen`\n    // into a `fullscreenchange` event\n\n\n    _this.proxyWebkitFullscreen_();\n\n    _this.triggerReady();\n\n    return _this;\n  }\n  /**\n   * Dispose of `HTML5` media element and remove all tracks.\n   */\n\n\n  var _proto = Html5.prototype;\n\n  _proto.dispose = function dispose() {\n    if (this.el_ && this.el_.resetSourceset_) {\n      this.el_.resetSourceset_();\n    }\n\n    Html5.disposeMediaElement(this.el_);\n    this.options_ = null; // tech will handle clearing of the emulated track list\n\n    _Tech.prototype.dispose.call(this);\n  }\n  /**\n   * Modify the media element so that we can detect when\n   * the source is changed. Fires `sourceset` just after the source has changed\n   */\n  ;\n\n  _proto.setupSourcesetHandling_ = function setupSourcesetHandling_() {\n    setupSourceset(this);\n  }\n  /**\n   * When a captions track is enabled in the iOS Safari native player, all other\n   * tracks are disabled (including metadata tracks), which nulls all of their\n   * associated cue points. This will restore metadata tracks to their pre-fullscreen\n   * state in those cases so that cue points are not needlessly lost.\n   *\n   * @private\n   */\n  ;\n\n  _proto.restoreMetadataTracksInIOSNativePlayer_ = function restoreMetadataTracksInIOSNativePlayer_() {\n    var textTracks = this.textTracks();\n    var metadataTracksPreFullscreenState; // captures a snapshot of every metadata track's current state\n\n    var takeMetadataTrackSnapshot = function takeMetadataTrackSnapshot() {\n      metadataTracksPreFullscreenState = [];\n\n      for (var i = 0; i < textTracks.length; i++) {\n        var track = textTracks[i];\n\n        if (track.kind === 'metadata') {\n          metadataTracksPreFullscreenState.push({\n            track: track,\n            storedMode: track.mode\n          });\n        }\n      }\n    }; // snapshot each metadata track's initial state, and update the snapshot\n    // each time there is a track 'change' event\n\n\n    takeMetadataTrackSnapshot();\n    textTracks.addEventListener('change', takeMetadataTrackSnapshot);\n    this.on('dispose', function () {\n      return textTracks.removeEventListener('change', takeMetadataTrackSnapshot);\n    });\n\n    var restoreTrackMode = function restoreTrackMode() {\n      for (var i = 0; i < metadataTracksPreFullscreenState.length; i++) {\n        var storedTrack = metadataTracksPreFullscreenState[i];\n\n        if (storedTrack.track.mode === 'disabled' && storedTrack.track.mode !== storedTrack.storedMode) {\n          storedTrack.track.mode = storedTrack.storedMode;\n        }\n      } // we only want this handler to be executed on the first 'change' event\n\n\n      textTracks.removeEventListener('change', restoreTrackMode);\n    }; // when we enter fullscreen playback, stop updating the snapshot and\n    // restore all track modes to their pre-fullscreen state\n\n\n    this.on('webkitbeginfullscreen', function () {\n      textTracks.removeEventListener('change', takeMetadataTrackSnapshot); // remove the listener before adding it just in case it wasn't previously removed\n\n      textTracks.removeEventListener('change', restoreTrackMode);\n      textTracks.addEventListener('change', restoreTrackMode);\n    }); // start updating the snapshot again after leaving fullscreen\n\n    this.on('webkitendfullscreen', function () {\n      // remove the listener before adding it just in case it wasn't previously removed\n      textTracks.removeEventListener('change', takeMetadataTrackSnapshot);\n      textTracks.addEventListener('change', takeMetadataTrackSnapshot); // remove the restoreTrackMode handler in case it wasn't triggered during fullscreen playback\n\n      textTracks.removeEventListener('change', restoreTrackMode);\n    });\n  }\n  /**\n   * Attempt to force override of tracks for the given type\n   *\n   * @param {string} type - Track type to override, possible values include 'Audio',\n   * 'Video', and 'Text'.\n   * @param {boolean} override - If set to true native audio/video will be overridden,\n   * otherwise native audio/video will potentially be used.\n   * @private\n   */\n  ;\n\n  _proto.overrideNative_ = function overrideNative_(type, override) {\n    var _this2 = this;\n\n    // If there is no behavioral change don't add/remove listeners\n    if (override !== this[\"featuresNative\" + type + \"Tracks\"]) {\n      return;\n    }\n\n    var lowerCaseType = type.toLowerCase();\n\n    if (this[lowerCaseType + \"TracksListeners_\"]) {\n      Object.keys(this[lowerCaseType + \"TracksListeners_\"]).forEach(function (eventName) {\n        var elTracks = _this2.el()[lowerCaseType + \"Tracks\"];\n\n        elTracks.removeEventListener(eventName, _this2[lowerCaseType + \"TracksListeners_\"][eventName]);\n      });\n    }\n\n    this[\"featuresNative\" + type + \"Tracks\"] = !override;\n    this[lowerCaseType + \"TracksListeners_\"] = null;\n    this.proxyNativeTracksForType_(lowerCaseType);\n  }\n  /**\n   * Attempt to force override of native audio tracks.\n   *\n   * @param {boolean} override - If set to true native audio will be overridden,\n   * otherwise native audio will potentially be used.\n   */\n  ;\n\n  _proto.overrideNativeAudioTracks = function overrideNativeAudioTracks(override) {\n    this.overrideNative_('Audio', override);\n  }\n  /**\n   * Attempt to force override of native video tracks.\n   *\n   * @param {boolean} override - If set to true native video will be overridden,\n   * otherwise native video will potentially be used.\n   */\n  ;\n\n  _proto.overrideNativeVideoTracks = function overrideNativeVideoTracks(override) {\n    this.overrideNative_('Video', override);\n  }\n  /**\n   * Proxy native track list events for the given type to our track\n   * lists if the browser we are playing in supports that type of track list.\n   *\n   * @param {string} name - Track type; values include 'audio', 'video', and 'text'\n   * @private\n   */\n  ;\n\n  _proto.proxyNativeTracksForType_ = function proxyNativeTracksForType_(name) {\n    var _this3 = this;\n\n    var props = NORMAL[name];\n    var elTracks = this.el()[props.getterName];\n    var techTracks = this[props.getterName]();\n\n    if (!this[\"featuresNative\" + props.capitalName + \"Tracks\"] || !elTracks || !elTracks.addEventListener) {\n      return;\n    }\n\n    var listeners = {\n      change: function change(e) {\n        techTracks.trigger({\n          type: 'change',\n          target: techTracks,\n          currentTarget: techTracks,\n          srcElement: techTracks\n        });\n      },\n      addtrack: function addtrack(e) {\n        techTracks.addTrack(e.track);\n      },\n      removetrack: function removetrack(e) {\n        techTracks.removeTrack(e.track);\n      }\n    };\n\n    var removeOldTracks = function removeOldTracks() {\n      var removeTracks = [];\n\n      for (var i = 0; i < techTracks.length; i++) {\n        var found = false;\n\n        for (var j = 0; j < elTracks.length; j++) {\n          if (elTracks[j] === techTracks[i]) {\n            found = true;\n            break;\n          }\n        }\n\n        if (!found) {\n          removeTracks.push(techTracks[i]);\n        }\n      }\n\n      while (removeTracks.length) {\n        techTracks.removeTrack(removeTracks.shift());\n      }\n    };\n\n    this[props.getterName + 'Listeners_'] = listeners;\n    Object.keys(listeners).forEach(function (eventName) {\n      var listener = listeners[eventName];\n      elTracks.addEventListener(eventName, listener);\n\n      _this3.on('dispose', function (e) {\n        return elTracks.removeEventListener(eventName, listener);\n      });\n    }); // Remove (native) tracks that are not used anymore\n\n    this.on('loadstart', removeOldTracks);\n    this.on('dispose', function (e) {\n      return _this3.off('loadstart', removeOldTracks);\n    });\n  }\n  /**\n   * Proxy all native track list events to our track lists if the browser we are playing\n   * in supports that type of track list.\n   *\n   * @private\n   */\n  ;\n\n  _proto.proxyNativeTracks_ = function proxyNativeTracks_() {\n    var _this4 = this;\n\n    NORMAL.names.forEach(function (name) {\n      _this4.proxyNativeTracksForType_(name);\n    });\n  }\n  /**\n   * Create the `Html5` Tech's DOM element.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n  ;\n\n  _proto.createEl = function createEl() {\n    var el = this.options_.tag; // Check if this browser supports moving the element into the box.\n    // On the iPhone video will break if you move the element,\n    // So we have to create a brand new element.\n    // If we ingested the player div, we do not need to move the media element.\n\n    if (!el || !(this.options_.playerElIngest || this.movingMediaElementInDOM)) {\n      // If the original tag is still there, clone and remove it.\n      if (el) {\n        var clone = el.cloneNode(true);\n\n        if (el.parentNode) {\n          el.parentNode.insertBefore(clone, el);\n        }\n\n        Html5.disposeMediaElement(el);\n        el = clone;\n      } else {\n        el = document.createElement('video'); // determine if native controls should be used\n\n        var tagAttributes = this.options_.tag && getAttributes(this.options_.tag);\n        var attributes = mergeOptions({}, tagAttributes);\n\n        if (!TOUCH_ENABLED || this.options_.nativeControlsForTouch !== true) {\n          delete attributes.controls;\n        }\n\n        setAttributes(el, assign(attributes, {\n          id: this.options_.techId,\n          \"class\": 'vjs-tech'\n        }));\n      }\n\n      el.playerId = this.options_.playerId;\n    }\n\n    if (typeof this.options_.preload !== 'undefined') {\n      setAttribute(el, 'preload', this.options_.preload);\n    } // Update specific tag settings, in case they were overridden\n    // `autoplay` has to be *last* so that `muted` and `playsinline` are present\n    // when iOS/Safari or other browsers attempt to autoplay.\n\n\n    var settingsAttrs = ['loop', 'muted', 'playsinline', 'autoplay'];\n\n    for (var i = 0; i < settingsAttrs.length; i++) {\n      var attr = settingsAttrs[i];\n      var value = this.options_[attr];\n\n      if (typeof value !== 'undefined') {\n        if (value) {\n          setAttribute(el, attr, attr);\n        } else {\n          removeAttribute(el, attr);\n        }\n\n        el[attr] = value;\n      }\n    }\n\n    return el;\n  }\n  /**\n   * This will be triggered if the loadstart event has already fired, before videojs was\n   * ready. Two known examples of when this can happen are:\n   * 1. If we're loading the playback object after it has started loading\n   * 2. The media is already playing the (often with autoplay on) then\n   *\n   * This function will fire another loadstart so that videojs can catchup.\n   *\n   * @fires Tech#loadstart\n   *\n   * @return {undefined}\n   *         returns nothing.\n   */\n  ;\n\n  _proto.handleLateInit_ = function handleLateInit_(el) {\n    if (el.networkState === 0 || el.networkState === 3) {\n      // The video element hasn't started loading the source yet\n      // or didn't find a source\n      return;\n    }\n\n    if (el.readyState === 0) {\n      // NetworkState is set synchronously BUT loadstart is fired at the\n      // end of the current stack, usually before setInterval(fn, 0).\n      // So at this point we know loadstart may have already fired or is\n      // about to fire, and either way the player hasn't seen it yet.\n      // We don't want to fire loadstart prematurely here and cause a\n      // double loadstart so we'll wait and see if it happens between now\n      // and the next loop, and fire it if not.\n      // HOWEVER, we also want to make sure it fires before loadedmetadata\n      // which could also happen between now and the next loop, so we'll\n      // watch for that also.\n      var loadstartFired = false;\n\n      var setLoadstartFired = function setLoadstartFired() {\n        loadstartFired = true;\n      };\n\n      this.on('loadstart', setLoadstartFired);\n\n      var triggerLoadstart = function triggerLoadstart() {\n        // We did miss the original loadstart. Make sure the player\n        // sees loadstart before loadedmetadata\n        if (!loadstartFired) {\n          this.trigger('loadstart');\n        }\n      };\n\n      this.on('loadedmetadata', triggerLoadstart);\n      this.ready(function () {\n        this.off('loadstart', setLoadstartFired);\n        this.off('loadedmetadata', triggerLoadstart);\n\n        if (!loadstartFired) {\n          // We did miss the original native loadstart. Fire it now.\n          this.trigger('loadstart');\n        }\n      });\n      return;\n    } // From here on we know that loadstart already fired and we missed it.\n    // The other readyState events aren't as much of a problem if we double\n    // them, so not going to go to as much trouble as loadstart to prevent\n    // that unless we find reason to.\n\n\n    var eventsToTrigger = ['loadstart']; // loadedmetadata: newly equal to HAVE_METADATA (1) or greater\n\n    eventsToTrigger.push('loadedmetadata'); // loadeddata: newly increased to HAVE_CURRENT_DATA (2) or greater\n\n    if (el.readyState >= 2) {\n      eventsToTrigger.push('loadeddata');\n    } // canplay: newly increased to HAVE_FUTURE_DATA (3) or greater\n\n\n    if (el.readyState >= 3) {\n      eventsToTrigger.push('canplay');\n    } // canplaythrough: newly equal to HAVE_ENOUGH_DATA (4)\n\n\n    if (el.readyState >= 4) {\n      eventsToTrigger.push('canplaythrough');\n    } // We still need to give the player time to add event listeners\n\n\n    this.ready(function () {\n      eventsToTrigger.forEach(function (type) {\n        this.trigger(type);\n      }, this);\n    });\n  }\n  /**\n   * Set current time for the `HTML5` tech.\n   *\n   * @param {number} seconds\n   *        Set the current time of the media to this.\n   */\n  ;\n\n  _proto.setCurrentTime = function setCurrentTime(seconds) {\n    try {\n      this.el_.currentTime = seconds;\n    } catch (e) {\n      log(e, 'Video is not ready. (Video.js)'); // this.warning(VideoJS.warnings.videoNotReady);\n    }\n  }\n  /**\n   * Get the current duration of the HTML5 media element.\n   *\n   * @return {number}\n   *         The duration of the media or 0 if there is no duration.\n   */\n  ;\n\n  _proto.duration = function duration() {\n    var _this5 = this;\n\n    // Android Chrome will report duration as Infinity for VOD HLS until after\n    // playback has started, which triggers the live display erroneously.\n    // Return NaN if playback has not started and trigger a durationupdate once\n    // the duration can be reliably known.\n    if (this.el_.duration === Infinity && IS_ANDROID && IS_CHROME && this.el_.currentTime === 0) {\n      // Wait for the first `timeupdate` with currentTime > 0 - there may be\n      // several with 0\n      var checkProgress = function checkProgress() {\n        if (_this5.el_.currentTime > 0) {\n          // Trigger durationchange for genuinely live video\n          if (_this5.el_.duration === Infinity) {\n            _this5.trigger('durationchange');\n          }\n\n          _this5.off('timeupdate', checkProgress);\n        }\n      };\n\n      this.on('timeupdate', checkProgress);\n      return NaN;\n    }\n\n    return this.el_.duration || NaN;\n  }\n  /**\n   * Get the current width of the HTML5 media element.\n   *\n   * @return {number}\n   *         The width of the HTML5 media element.\n   */\n  ;\n\n  _proto.width = function width() {\n    return this.el_.offsetWidth;\n  }\n  /**\n   * Get the current height of the HTML5 media element.\n   *\n   * @return {number}\n   *         The height of the HTML5 media element.\n   */\n  ;\n\n  _proto.height = function height() {\n    return this.el_.offsetHeight;\n  }\n  /**\n   * Proxy iOS `webkitbeginfullscreen` and `webkitendfullscreen` into\n   * `fullscreenchange` event.\n   *\n   * @private\n   * @fires fullscreenchange\n   * @listens webkitendfullscreen\n   * @listens webkitbeginfullscreen\n   * @listens webkitbeginfullscreen\n   */\n  ;\n\n  _proto.proxyWebkitFullscreen_ = function proxyWebkitFullscreen_() {\n    var _this6 = this;\n\n    if (!('webkitDisplayingFullscreen' in this.el_)) {\n      return;\n    }\n\n    var endFn = function endFn() {\n      this.trigger('fullscreenchange', {\n        isFullscreen: false\n      });\n    };\n\n    var beginFn = function beginFn() {\n      if ('webkitPresentationMode' in this.el_ && this.el_.webkitPresentationMode !== 'picture-in-picture') {\n        this.one('webkitendfullscreen', endFn);\n        this.trigger('fullscreenchange', {\n          isFullscreen: true\n        });\n      }\n    };\n\n    this.on('webkitbeginfullscreen', beginFn);\n    this.on('dispose', function () {\n      _this6.off('webkitbeginfullscreen', beginFn);\n\n      _this6.off('webkitendfullscreen', endFn);\n    });\n  }\n  /**\n   * Check if fullscreen is supported on the current playback device.\n   *\n   * @return {boolean}\n   *         - True if fullscreen is supported.\n   *         - False if fullscreen is not supported.\n   */\n  ;\n\n  _proto.supportsFullScreen = function supportsFullScreen() {\n    if (typeof this.el_.webkitEnterFullScreen === 'function') {\n      var userAgent = window$1.navigator && window$1.navigator.userAgent || ''; // Seems to be broken in Chromium/Chrome && Safari in Leopard\n\n      if (/Android/.test(userAgent) || !/Chrome|Mac OS X 10.5/.test(userAgent)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  /**\n   * Request that the `HTML5` Tech enter fullscreen.\n   */\n  ;\n\n  _proto.enterFullScreen = function enterFullScreen() {\n    var video = this.el_;\n\n    if (video.paused && video.networkState <= video.HAVE_METADATA) {\n      // attempt to prime the video element for programmatic access\n      // this isn't necessary on the desktop but shouldn't hurt\n      this.el_.play(); // playing and pausing synchronously during the transition to fullscreen\n      // can get iOS ~6.1 devices into a play/pause loop\n\n      this.setTimeout(function () {\n        video.pause();\n        video.webkitEnterFullScreen();\n      }, 0);\n    } else {\n      video.webkitEnterFullScreen();\n    }\n  }\n  /**\n   * Request that the `HTML5` Tech exit fullscreen.\n   */\n  ;\n\n  _proto.exitFullScreen = function exitFullScreen() {\n    this.el_.webkitExitFullScreen();\n  }\n  /**\n   * Create a floating video window always on top of other windows so that users may\n   * continue consuming media while they interact with other content sites, or\n   * applications on their device.\n   *\n   * @see [Spec]{@link https://wicg.github.io/picture-in-picture}\n   *\n   * @return {Promise}\n   *         A promise with a Picture-in-Picture window.\n   */\n  ;\n\n  _proto.requestPictureInPicture = function requestPictureInPicture() {\n    return this.el_.requestPictureInPicture();\n  }\n  /**\n   * A getter/setter for the `Html5` Tech's source object.\n   * > Note: Please use {@link Html5#setSource}\n   *\n   * @param {Tech~SourceObject} [src]\n   *        The source object you want to set on the `HTML5` techs element.\n   *\n   * @return {Tech~SourceObject|undefined}\n   *         - The current source object when a source is not passed in.\n   *         - undefined when setting\n   *\n   * @deprecated Since version 5.\n   */\n  ;\n\n  _proto.src = function src(_src) {\n    if (_src === undefined) {\n      return this.el_.src;\n    } // Setting src through `src` instead of `setSrc` will be deprecated\n\n\n    this.setSrc(_src);\n  }\n  /**\n   * Reset the tech by removing all sources and then calling\n   * {@link Html5.resetMediaElement}.\n   */\n  ;\n\n  _proto.reset = function reset() {\n    Html5.resetMediaElement(this.el_);\n  }\n  /**\n   * Get the current source on the `HTML5` Tech. Falls back to returning the source from\n   * the HTML5 media element.\n   *\n   * @return {Tech~SourceObject}\n   *         The current source object from the HTML5 tech. With a fallback to the\n   *         elements source.\n   */\n  ;\n\n  _proto.currentSrc = function currentSrc() {\n    if (this.currentSource_) {\n      return this.currentSource_.src;\n    }\n\n    return this.el_.currentSrc;\n  }\n  /**\n   * Set controls attribute for the HTML5 media Element.\n   *\n   * @param {string} val\n   *        Value to set the controls attribute to\n   */\n  ;\n\n  _proto.setControls = function setControls(val) {\n    this.el_.controls = !!val;\n  }\n  /**\n   * Create and returns a remote {@link TextTrack} object.\n   *\n   * @param {string} kind\n   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)\n   *\n   * @param {string} [label]\n   *        Label to identify the text track\n   *\n   * @param {string} [language]\n   *        Two letter language abbreviation\n   *\n   * @return {TextTrack}\n   *         The TextTrack that gets created.\n   */\n  ;\n\n  _proto.addTextTrack = function addTextTrack(kind, label, language) {\n    if (!this.featuresNativeTextTracks) {\n      return _Tech.prototype.addTextTrack.call(this, kind, label, language);\n    }\n\n    return this.el_.addTextTrack(kind, label, language);\n  }\n  /**\n   * Creates either native TextTrack or an emulated TextTrack depending\n   * on the value of `featuresNativeTextTracks`\n   *\n   * @param {Object} options\n   *        The object should contain the options to initialize the TextTrack with.\n   *\n   * @param {string} [options.kind]\n   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata).\n   *\n   * @param {string} [options.label]\n   *        Label to identify the text track\n   *\n   * @param {string} [options.language]\n   *        Two letter language abbreviation.\n   *\n   * @param {boolean} [options.default]\n   *        Default this track to on.\n   *\n   * @param {string} [options.id]\n   *        The internal id to assign this track.\n   *\n   * @param {string} [options.src]\n   *        A source url for the track.\n   *\n   * @return {HTMLTrackElement}\n   *         The track element that gets created.\n   */\n  ;\n\n  _proto.createRemoteTextTrack = function createRemoteTextTrack(options) {\n    if (!this.featuresNativeTextTracks) {\n      return _Tech.prototype.createRemoteTextTrack.call(this, options);\n    }\n\n    var htmlTrackElement = document.createElement('track');\n\n    if (options.kind) {\n      htmlTrackElement.kind = options.kind;\n    }\n\n    if (options.label) {\n      htmlTrackElement.label = options.label;\n    }\n\n    if (options.language || options.srclang) {\n      htmlTrackElement.srclang = options.language || options.srclang;\n    }\n\n    if (options[\"default\"]) {\n      htmlTrackElement[\"default\"] = options[\"default\"];\n    }\n\n    if (options.id) {\n      htmlTrackElement.id = options.id;\n    }\n\n    if (options.src) {\n      htmlTrackElement.src = options.src;\n    }\n\n    return htmlTrackElement;\n  }\n  /**\n   * Creates a remote text track object and returns an html track element.\n   *\n   * @param {Object} options The object should contain values for\n   * kind, language, label, and src (location of the WebVTT file)\n   * @param {boolean} [manualCleanup=true] if set to false, the TextTrack will be\n   * automatically removed from the video element whenever the source changes\n   * @return {HTMLTrackElement} An Html Track Element.\n   * This can be an emulated {@link HTMLTrackElement} or a native one.\n   * @deprecated The default value of the \"manualCleanup\" parameter will default\n   * to \"false\" in upcoming versions of Video.js\n   */\n  ;\n\n  _proto.addRemoteTextTrack = function addRemoteTextTrack(options, manualCleanup) {\n    var htmlTrackElement = _Tech.prototype.addRemoteTextTrack.call(this, options, manualCleanup);\n\n    if (this.featuresNativeTextTracks) {\n      this.el().appendChild(htmlTrackElement);\n    }\n\n    return htmlTrackElement;\n  }\n  /**\n   * Remove remote `TextTrack` from `TextTrackList` object\n   *\n   * @param {TextTrack} track\n   *        `TextTrack` object to remove\n   */\n  ;\n\n  _proto.removeRemoteTextTrack = function removeRemoteTextTrack(track) {\n    _Tech.prototype.removeRemoteTextTrack.call(this, track);\n\n    if (this.featuresNativeTextTracks) {\n      var tracks = this.$$('track');\n      var i = tracks.length;\n\n      while (i--) {\n        if (track === tracks[i] || track === tracks[i].track) {\n          this.el().removeChild(tracks[i]);\n        }\n      }\n    }\n  }\n  /**\n   * Gets available media playback quality metrics as specified by the W3C's Media\n   * Playback Quality API.\n   *\n   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}\n   *\n   * @return {Object}\n   *         An object with supported media playback quality metrics\n   */\n  ;\n\n  _proto.getVideoPlaybackQuality = function getVideoPlaybackQuality() {\n    if (typeof this.el().getVideoPlaybackQuality === 'function') {\n      return this.el().getVideoPlaybackQuality();\n    }\n\n    var videoPlaybackQuality = {};\n\n    if (typeof this.el().webkitDroppedFrameCount !== 'undefined' && typeof this.el().webkitDecodedFrameCount !== 'undefined') {\n      videoPlaybackQuality.droppedVideoFrames = this.el().webkitDroppedFrameCount;\n      videoPlaybackQuality.totalVideoFrames = this.el().webkitDecodedFrameCount;\n    }\n\n    if (window$1.performance && typeof window$1.performance.now === 'function') {\n      videoPlaybackQuality.creationTime = window$1.performance.now();\n    } else if (window$1.performance && window$1.performance.timing && typeof window$1.performance.timing.navigationStart === 'number') {\n      videoPlaybackQuality.creationTime = window$1.Date.now() - window$1.performance.timing.navigationStart;\n    }\n\n    return videoPlaybackQuality;\n  };\n\n  return Html5;\n}(Tech);\n/* HTML5 Support Testing ---------------------------------------------------- */\n\n\nif (isReal()) {\n  /**\n   * Element for testing browser HTML5 media capabilities\n   *\n   * @type {Element}\n   * @constant\n   * @private\n   */\n  Html5.TEST_VID = document.createElement('video');\n  var track = document.createElement('track');\n  track.kind = 'captions';\n  track.srclang = 'en';\n  track.label = 'English';\n  Html5.TEST_VID.appendChild(track);\n}\n/**\n * Check if HTML5 media is supported by this browser/device.\n *\n * @return {boolean}\n *         - True if HTML5 media is supported.\n *         - False if HTML5 media is not supported.\n */\n\n\nHtml5.isSupported = function () {\n  // IE with no Media Player is a LIAR! (#984)\n  try {\n    Html5.TEST_VID.volume = 0.5;\n  } catch (e) {\n    return false;\n  }\n\n  return !!(Html5.TEST_VID && Html5.TEST_VID.canPlayType);\n};\n/**\n * Check if the tech can support the given type\n *\n * @param {string} type\n *        The mimetype to check\n * @return {string} 'probably', 'maybe', or '' (empty string)\n */\n\n\nHtml5.canPlayType = function (type) {\n  return Html5.TEST_VID.canPlayType(type);\n};\n/**\n * Check if the tech can support the given source\n *\n * @param {Object} srcObj\n *        The source object\n * @param {Object} options\n *        The options passed to the tech\n * @return {string} 'probably', 'maybe', or '' (empty string)\n */\n\n\nHtml5.canPlaySource = function (srcObj, options) {\n  return Html5.canPlayType(srcObj.type);\n};\n/**\n * Check if the volume can be changed in this browser/device.\n * Volume cannot be changed in a lot of mobile devices.\n * Specifically, it can't be changed from 1 on iOS.\n *\n * @return {boolean}\n *         - True if volume can be controlled\n *         - False otherwise\n */\n\n\nHtml5.canControlVolume = function () {\n  // IE will error if Windows Media Player not installed #3315\n  try {\n    var volume = Html5.TEST_VID.volume;\n    Html5.TEST_VID.volume = volume / 2 + 0.1;\n    return volume !== Html5.TEST_VID.volume;\n  } catch (e) {\n    return false;\n  }\n};\n/**\n * Check if the volume can be muted in this browser/device.\n * Some devices, e.g. iOS, don't allow changing volume\n * but permits muting/unmuting.\n *\n * @return {bolean}\n *      - True if volume can be muted\n *      - False otherwise\n */\n\n\nHtml5.canMuteVolume = function () {\n  try {\n    var muted = Html5.TEST_VID.muted; // in some versions of iOS muted property doesn't always\n    // work, so we want to set both property and attribute\n\n    Html5.TEST_VID.muted = !muted;\n\n    if (Html5.TEST_VID.muted) {\n      setAttribute(Html5.TEST_VID, 'muted', 'muted');\n    } else {\n      removeAttribute(Html5.TEST_VID, 'muted', 'muted');\n    }\n\n    return muted !== Html5.TEST_VID.muted;\n  } catch (e) {\n    return false;\n  }\n};\n/**\n * Check if the playback rate can be changed in this browser/device.\n *\n * @return {boolean}\n *         - True if playback rate can be controlled\n *         - False otherwise\n */\n\n\nHtml5.canControlPlaybackRate = function () {\n  // Playback rate API is implemented in Android Chrome, but doesn't do anything\n  // https://github.com/videojs/video.js/issues/3180\n  if (IS_ANDROID && IS_CHROME && CHROME_VERSION < 58) {\n    return false;\n  } // IE will error if Windows Media Player not installed #3315\n\n\n  try {\n    var playbackRate = Html5.TEST_VID.playbackRate;\n    Html5.TEST_VID.playbackRate = playbackRate / 2 + 0.1;\n    return playbackRate !== Html5.TEST_VID.playbackRate;\n  } catch (e) {\n    return false;\n  }\n};\n/**\n * Check if we can override a video/audio elements attributes, with\n * Object.defineProperty.\n *\n * @return {boolean}\n *         - True if builtin attributes can be overridden\n *         - False otherwise\n */\n\n\nHtml5.canOverrideAttributes = function () {\n  // if we cannot overwrite the src/innerHTML property, there is no support\n  // iOS 7 safari for instance cannot do this.\n  try {\n    var noop = function noop() {};\n\n    Object.defineProperty(document.createElement('video'), 'src', {\n      get: noop,\n      set: noop\n    });\n    Object.defineProperty(document.createElement('audio'), 'src', {\n      get: noop,\n      set: noop\n    });\n    Object.defineProperty(document.createElement('video'), 'innerHTML', {\n      get: noop,\n      set: noop\n    });\n    Object.defineProperty(document.createElement('audio'), 'innerHTML', {\n      get: noop,\n      set: noop\n    });\n  } catch (e) {\n    return false;\n  }\n\n  return true;\n};\n/**\n * Check to see if native `TextTrack`s are supported by this browser/device.\n *\n * @return {boolean}\n *         - True if native `TextTrack`s are supported.\n *         - False otherwise\n */\n\n\nHtml5.supportsNativeTextTracks = function () {\n  return IS_ANY_SAFARI || IS_IOS && IS_CHROME;\n};\n/**\n * Check to see if native `VideoTrack`s are supported by this browser/device\n *\n * @return {boolean}\n *        - True if native `VideoTrack`s are supported.\n *        - False otherwise\n */\n\n\nHtml5.supportsNativeVideoTracks = function () {\n  return !!(Html5.TEST_VID && Html5.TEST_VID.videoTracks);\n};\n/**\n * Check to see if native `AudioTrack`s are supported by this browser/device\n *\n * @return {boolean}\n *        - True if native `AudioTrack`s are supported.\n *        - False otherwise\n */\n\n\nHtml5.supportsNativeAudioTracks = function () {\n  return !!(Html5.TEST_VID && Html5.TEST_VID.audioTracks);\n};\n/**\n * An array of events available on the Html5 tech.\n *\n * @private\n * @type {Array}\n */\n\n\nHtml5.Events = ['loadstart', 'suspend', 'abort', 'error', 'emptied', 'stalled', 'loadedmetadata', 'loadeddata', 'canplay', 'canplaythrough', 'playing', 'waiting', 'seeking', 'seeked', 'ended', 'durationchange', 'timeupdate', 'progress', 'play', 'pause', 'ratechange', 'resize', 'volumechange'];\n/**\n * Boolean indicating whether the `Tech` supports volume control.\n *\n * @type {boolean}\n * @default {@link Html5.canControlVolume}\n */\n\nHtml5.prototype.featuresVolumeControl = Html5.canControlVolume();\n/**\n * Boolean indicating whether the `Tech` supports muting volume.\n *\n * @type {bolean}\n * @default {@link Html5.canMuteVolume}\n */\n\nHtml5.prototype.featuresMuteControl = Html5.canMuteVolume();\n/**\n * Boolean indicating whether the `Tech` supports changing the speed at which the media\n * plays. Examples:\n *   - Set player to play 2x (twice) as fast\n *   - Set player to play 0.5x (half) as fast\n *\n * @type {boolean}\n * @default {@link Html5.canControlPlaybackRate}\n */\n\nHtml5.prototype.featuresPlaybackRate = Html5.canControlPlaybackRate();\n/**\n * Boolean indicating whether the `Tech` supports the `sourceset` event.\n *\n * @type {boolean}\n * @default\n */\n\nHtml5.prototype.featuresSourceset = Html5.canOverrideAttributes();\n/**\n * Boolean indicating whether the `HTML5` tech currently supports the media element\n * moving in the DOM. iOS breaks if you move the media element, so this is set this to\n * false there. Everywhere else this should be true.\n *\n * @type {boolean}\n * @default\n */\n\nHtml5.prototype.movingMediaElementInDOM = !IS_IOS; // TODO: Previous comment: No longer appears to be used. Can probably be removed.\n//       Is this true?\n\n/**\n * Boolean indicating whether the `HTML5` tech currently supports automatic media resize\n * when going into fullscreen.\n *\n * @type {boolean}\n * @default\n */\n\nHtml5.prototype.featuresFullscreenResize = true;\n/**\n * Boolean indicating whether the `HTML5` tech currently supports the progress event.\n * If this is false, manual `progress` events will be triggered instead.\n *\n * @type {boolean}\n * @default\n */\n\nHtml5.prototype.featuresProgressEvents = true;\n/**\n * Boolean indicating whether the `HTML5` tech currently supports the timeupdate event.\n * If this is false, manual `timeupdate` events will be triggered instead.\n *\n * @default\n */\n\nHtml5.prototype.featuresTimeupdateEvents = true;\n/**\n * Boolean indicating whether the `HTML5` tech currently supports native `TextTrack`s.\n *\n * @type {boolean}\n * @default {@link Html5.supportsNativeTextTracks}\n */\n\nHtml5.prototype.featuresNativeTextTracks = Html5.supportsNativeTextTracks();\n/**\n * Boolean indicating whether the `HTML5` tech currently supports native `VideoTrack`s.\n *\n * @type {boolean}\n * @default {@link Html5.supportsNativeVideoTracks}\n */\n\nHtml5.prototype.featuresNativeVideoTracks = Html5.supportsNativeVideoTracks();\n/**\n * Boolean indicating whether the `HTML5` tech currently supports native `AudioTrack`s.\n *\n * @type {boolean}\n * @default {@link Html5.supportsNativeAudioTracks}\n */\n\nHtml5.prototype.featuresNativeAudioTracks = Html5.supportsNativeAudioTracks(); // HTML5 Feature detection and Device Fixes --------------------------------- //\n\nvar canPlayType = Html5.TEST_VID && Html5.TEST_VID.constructor.prototype.canPlayType;\nvar mpegurlRE = /^application\\/(?:x-|vnd\\.apple\\.)mpegurl/i;\n\nHtml5.patchCanPlayType = function () {\n  // Android 4.0 and above can play HLS to some extent but it reports being unable to do so\n  // Firefox and Chrome report correctly\n  if (ANDROID_VERSION >= 4.0 && !IS_FIREFOX && !IS_CHROME) {\n    Html5.TEST_VID.constructor.prototype.canPlayType = function (type) {\n      if (type && mpegurlRE.test(type)) {\n        return 'maybe';\n      }\n\n      return canPlayType.call(this, type);\n    };\n  }\n};\n\nHtml5.unpatchCanPlayType = function () {\n  var r = Html5.TEST_VID.constructor.prototype.canPlayType;\n  Html5.TEST_VID.constructor.prototype.canPlayType = canPlayType;\n  return r;\n}; // by default, patch the media element\n\n\nHtml5.patchCanPlayType();\n\nHtml5.disposeMediaElement = function (el) {\n  if (!el) {\n    return;\n  }\n\n  if (el.parentNode) {\n    el.parentNode.removeChild(el);\n  } // remove any child track or source nodes to prevent their loading\n\n\n  while (el.hasChildNodes()) {\n    el.removeChild(el.firstChild);\n  } // remove any src reference. not setting `src=''` because that causes a warning\n  // in firefox\n\n\n  el.removeAttribute('src'); // force the media element to update its loading state by calling load()\n  // however IE on Windows 7N has a bug that throws an error so need a try/catch (#793)\n\n  if (typeof el.load === 'function') {\n    // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)\n    (function () {\n      try {\n        el.load();\n      } catch (e) {// not supported\n      }\n    })();\n  }\n};\n\nHtml5.resetMediaElement = function (el) {\n  if (!el) {\n    return;\n  }\n\n  var sources = el.querySelectorAll('source');\n  var i = sources.length;\n\n  while (i--) {\n    el.removeChild(sources[i]);\n  } // remove any src reference.\n  // not setting `src=''` because that throws an error\n\n\n  el.removeAttribute('src');\n\n  if (typeof el.load === 'function') {\n    // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)\n    (function () {\n      try {\n        el.load();\n      } catch (e) {// satisfy linter\n      }\n    })();\n  }\n};\n/* Native HTML5 element property wrapping ----------------------------------- */\n// Wrap native boolean attributes with getters that check both property and attribute\n// The list is as followed:\n// muted, defaultMuted, autoplay, controls, loop, playsinline\n\n\n[\n/**\n * Get the value of `muted` from the media element. `muted` indicates\n * that the volume for the media should be set to silent. This does not actually change\n * the `volume` attribute.\n *\n * @method Html5#muted\n * @return {boolean}\n *         - True if the value of `volume` should be ignored and the audio set to silent.\n *         - False if the value of `volume` should be used.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}\n */\n'muted',\n/**\n * Get the value of `defaultMuted` from the media element. `defaultMuted` indicates\n * whether the media should start muted or not. Only changes the default state of the\n * media. `muted` and `defaultMuted` can have different values. {@link Html5#muted} indicates the\n * current state.\n *\n * @method Html5#defaultMuted\n * @return {boolean}\n *         - The value of `defaultMuted` from the media element.\n *         - True indicates that the media should start muted.\n *         - False indicates that the media should not start muted\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultmuted}\n */\n'defaultMuted',\n/**\n * Get the value of `autoplay` from the media element. `autoplay` indicates\n * that the media should start to play as soon as the page is ready.\n *\n * @method Html5#autoplay\n * @return {boolean}\n *         - The value of `autoplay` from the media element.\n *         - True indicates that the media should start as soon as the page loads.\n *         - False indicates that the media should not start as soon as the page loads.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}\n */\n'autoplay',\n/**\n * Get the value of `controls` from the media element. `controls` indicates\n * whether the native media controls should be shown or hidden.\n *\n * @method Html5#controls\n * @return {boolean}\n *         - The value of `controls` from the media element.\n *         - True indicates that native controls should be showing.\n *         - False indicates that native controls should be hidden.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-controls}\n */\n'controls',\n/**\n * Get the value of `loop` from the media element. `loop` indicates\n * that the media should return to the start of the media and continue playing once\n * it reaches the end.\n *\n * @method Html5#loop\n * @return {boolean}\n *         - The value of `loop` from the media element.\n *         - True indicates that playback should seek back to start once\n *           the end of a media is reached.\n *         - False indicates that playback should not loop back to the start when the\n *           end of the media is reached.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}\n */\n'loop',\n/**\n * Get the value of `playsinline` from the media element. `playsinline` indicates\n * to the browser that non-fullscreen playback is preferred when fullscreen\n * playback is the native default, such as in iOS Safari.\n *\n * @method Html5#playsinline\n * @return {boolean}\n *         - The value of `playsinline` from the media element.\n *         - True indicates that the media should play inline.\n *         - False indicates that the media should not play inline.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}\n */\n'playsinline'].forEach(function (prop) {\n  Html5.prototype[prop] = function () {\n    return this.el_[prop] || this.el_.hasAttribute(prop);\n  };\n}); // Wrap native boolean attributes with setters that set both property and attribute\n// The list is as followed:\n// setMuted, setDefaultMuted, setAutoplay, setLoop, setPlaysinline\n// setControls is special-cased above\n\n[\n/**\n * Set the value of `muted` on the media element. `muted` indicates that the current\n * audio level should be silent.\n *\n * @method Html5#setMuted\n * @param {boolean} muted\n *        - True if the audio should be set to silent\n *        - False otherwise\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}\n */\n'muted',\n/**\n * Set the value of `defaultMuted` on the media element. `defaultMuted` indicates that the current\n * audio level should be silent, but will only effect the muted level on intial playback..\n *\n * @method Html5.prototype.setDefaultMuted\n * @param {boolean} defaultMuted\n *        - True if the audio should be set to silent\n *        - False otherwise\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultmuted}\n */\n'defaultMuted',\n/**\n * Set the value of `autoplay` on the media element. `autoplay` indicates\n * that the media should start to play as soon as the page is ready.\n *\n * @method Html5#setAutoplay\n * @param {boolean} autoplay\n *         - True indicates that the media should start as soon as the page loads.\n *         - False indicates that the media should not start as soon as the page loads.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}\n */\n'autoplay',\n/**\n * Set the value of `loop` on the media element. `loop` indicates\n * that the media should return to the start of the media and continue playing once\n * it reaches the end.\n *\n * @method Html5#setLoop\n * @param {boolean} loop\n *         - True indicates that playback should seek back to start once\n *           the end of a media is reached.\n *         - False indicates that playback should not loop back to the start when the\n *           end of the media is reached.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}\n */\n'loop',\n/**\n * Set the value of `playsinline` from the media element. `playsinline` indicates\n * to the browser that non-fullscreen playback is preferred when fullscreen\n * playback is the native default, such as in iOS Safari.\n *\n * @method Html5#setPlaysinline\n * @param {boolean} playsinline\n *         - True indicates that the media should play inline.\n *         - False indicates that the media should not play inline.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}\n */\n'playsinline'].forEach(function (prop) {\n  Html5.prototype['set' + toTitleCase(prop)] = function (v) {\n    this.el_[prop] = v;\n\n    if (v) {\n      this.el_.setAttribute(prop, prop);\n    } else {\n      this.el_.removeAttribute(prop);\n    }\n  };\n}); // Wrap native properties with a getter\n// The list is as followed\n// paused, currentTime, buffered, volume, poster, preload, error, seeking\n// seekable, ended, playbackRate, defaultPlaybackRate, played, networkState\n// readyState, videoWidth, videoHeight\n\n[\n/**\n * Get the value of `paused` from the media element. `paused` indicates whether the media element\n * is currently paused or not.\n *\n * @method Html5#paused\n * @return {boolean}\n *         The value of `paused` from the media element.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-paused}\n */\n'paused',\n/**\n * Get the value of `currentTime` from the media element. `currentTime` indicates\n * the current second that the media is at in playback.\n *\n * @method Html5#currentTime\n * @return {number}\n *         The value of `currentTime` from the media element.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-currenttime}\n */\n'currentTime',\n/**\n * Get the value of `buffered` from the media element. `buffered` is a `TimeRange`\n * object that represents the parts of the media that are already downloaded and\n * available for playback.\n *\n * @method Html5#buffered\n * @return {TimeRange}\n *         The value of `buffered` from the media element.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-buffered}\n */\n'buffered',\n/**\n * Get the value of `volume` from the media element. `volume` indicates\n * the current playback volume of audio for a media. `volume` will be a value from 0\n * (silent) to 1 (loudest and default).\n *\n * @method Html5#volume\n * @return {number}\n *         The value of `volume` from the media element. Value will be between 0-1.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}\n */\n'volume',\n/**\n * Get the value of `poster` from the media element. `poster` indicates\n * that the url of an image file that can/will be shown when no media data is available.\n *\n * @method Html5#poster\n * @return {string}\n *         The value of `poster` from the media element. Value will be a url to an\n *         image.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-video-poster}\n */\n'poster',\n/**\n * Get the value of `preload` from the media element. `preload` indicates\n * what should download before the media is interacted with. It can have the following\n * values:\n * - none: nothing should be downloaded\n * - metadata: poster and the first few frames of the media may be downloaded to get\n *   media dimensions and other metadata\n * - auto: allow the media and metadata for the media to be downloaded before\n *    interaction\n *\n * @method Html5#preload\n * @return {string}\n *         The value of `preload` from the media element. Will be 'none', 'metadata',\n *         or 'auto'.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}\n */\n'preload',\n/**\n * Get the value of the `error` from the media element. `error` indicates any\n * MediaError that may have occurred during playback. If error returns null there is no\n * current error.\n *\n * @method Html5#error\n * @return {MediaError|null}\n *         The value of `error` from the media element. Will be `MediaError` if there\n *         is a current error and null otherwise.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-error}\n */\n'error',\n/**\n * Get the value of `seeking` from the media element. `seeking` indicates whether the\n * media is currently seeking to a new position or not.\n *\n * @method Html5#seeking\n * @return {boolean}\n *         - The value of `seeking` from the media element.\n *         - True indicates that the media is currently seeking to a new position.\n *         - False indicates that the media is not seeking to a new position at this time.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seeking}\n */\n'seeking',\n/**\n * Get the value of `seekable` from the media element. `seekable` returns a\n * `TimeRange` object indicating ranges of time that can currently be `seeked` to.\n *\n * @method Html5#seekable\n * @return {TimeRange}\n *         The value of `seekable` from the media element. A `TimeRange` object\n *         indicating the current ranges of time that can be seeked to.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seekable}\n */\n'seekable',\n/**\n * Get the value of `ended` from the media element. `ended` indicates whether\n * the media has reached the end or not.\n *\n * @method Html5#ended\n * @return {boolean}\n *         - The value of `ended` from the media element.\n *         - True indicates that the media has ended.\n *         - False indicates that the media has not ended.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-ended}\n */\n'ended',\n/**\n * Get the value of `playbackRate` from the media element. `playbackRate` indicates\n * the rate at which the media is currently playing back. Examples:\n *   - if playbackRate is set to 2, media will play twice as fast.\n *   - if playbackRate is set to 0.5, media will play half as fast.\n *\n * @method Html5#playbackRate\n * @return {number}\n *         The value of `playbackRate` from the media element. A number indicating\n *         the current playback speed of the media, where 1 is normal speed.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}\n */\n'playbackRate',\n/**\n * Get the value of `defaultPlaybackRate` from the media element. `defaultPlaybackRate` indicates\n * the rate at which the media is currently playing back. This value will not indicate the current\n * `playbackRate` after playback has started, use {@link Html5#playbackRate} for that.\n *\n * Examples:\n *   - if defaultPlaybackRate is set to 2, media will play twice as fast.\n *   - if defaultPlaybackRate is set to 0.5, media will play half as fast.\n *\n * @method Html5.prototype.defaultPlaybackRate\n * @return {number}\n *         The value of `defaultPlaybackRate` from the media element. A number indicating\n *         the current playback speed of the media, where 1 is normal speed.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}\n */\n'defaultPlaybackRate',\n/**\n * Get the value of `played` from the media element. `played` returns a `TimeRange`\n * object representing points in the media timeline that have been played.\n *\n * @method Html5#played\n * @return {TimeRange}\n *         The value of `played` from the media element. A `TimeRange` object indicating\n *         the ranges of time that have been played.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-played}\n */\n'played',\n/**\n * Get the value of `networkState` from the media element. `networkState` indicates\n * the current network state. It returns an enumeration from the following list:\n * - 0: NETWORK_EMPTY\n * - 1: NETWORK_IDLE\n * - 2: NETWORK_LOADING\n * - 3: NETWORK_NO_SOURCE\n *\n * @method Html5#networkState\n * @return {number}\n *         The value of `networkState` from the media element. This will be a number\n *         from the list in the description.\n *\n * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-networkstate}\n */\n'networkState',\n/**\n * Get the value of `readyState` from the media element. `readyState` indicates\n * the current state of the media element. It returns an enumeration from the\n * following list:\n * - 0: HAVE_NOTHING\n * - 1: HAVE_METADATA\n * - 2: HAVE_CURRENT_DATA\n * - 3: HAVE_FUTURE_DATA\n * - 4: HAVE_ENOUGH_DATA\n *\n * @method Html5#readyState\n * @return {number}\n *         The value of `readyState` from the media element. This will be a number\n *         from the list in the description.\n *\n * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#ready-states}\n */\n'readyState',\n/**\n * Get the value of `videoWidth` from the video element. `videoWidth` indicates\n * the current width of the video in css pixels.\n *\n * @method Html5#videoWidth\n * @return {number}\n *         The value of `videoWidth` from the video element. This will be a number\n *         in css pixels.\n *\n * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}\n */\n'videoWidth',\n/**\n * Get the value of `videoHeight` from the video element. `videoHeight` indicates\n * the current height of the video in css pixels.\n *\n * @method Html5#videoHeight\n * @return {number}\n *         The value of `videoHeight` from the video element. This will be a number\n *         in css pixels.\n *\n * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}\n */\n'videoHeight'].forEach(function (prop) {\n  Html5.prototype[prop] = function () {\n    return this.el_[prop];\n  };\n}); // Wrap native properties with a setter in this format:\n// set + toTitleCase(name)\n// The list is as follows:\n// setVolume, setSrc, setPoster, setPreload, setPlaybackRate, setDefaultPlaybackRate\n\n[\n/**\n * Set the value of `volume` on the media element. `volume` indicates the current\n * audio level as a percentage in decimal form. This means that 1 is 100%, 0.5 is 50%, and\n * so on.\n *\n * @method Html5#setVolume\n * @param {number} percentAsDecimal\n *        The volume percent as a decimal. Valid range is from 0-1.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}\n */\n'volume',\n/**\n * Set the value of `src` on the media element. `src` indicates the current\n * {@link Tech~SourceObject} for the media.\n *\n * @method Html5#setSrc\n * @param {Tech~SourceObject} src\n *        The source object to set as the current source.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-src}\n */\n'src',\n/**\n * Set the value of `poster` on the media element. `poster` is the url to\n * an image file that can/will be shown when no media data is available.\n *\n * @method Html5#setPoster\n * @param {string} poster\n *        The url to an image that should be used as the `poster` for the media\n *        element.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-poster}\n */\n'poster',\n/**\n * Set the value of `preload` on the media element. `preload` indicates\n * what should download before the media is interacted with. It can have the following\n * values:\n * - none: nothing should be downloaded\n * - metadata: poster and the first few frames of the media may be downloaded to get\n *   media dimensions and other metadata\n * - auto: allow the media and metadata for the media to be downloaded before\n *    interaction\n *\n * @method Html5#setPreload\n * @param {string} preload\n *         The value of `preload` to set on the media element. Must be 'none', 'metadata',\n *         or 'auto'.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}\n */\n'preload',\n/**\n * Set the value of `playbackRate` on the media element. `playbackRate` indicates\n * the rate at which the media should play back. Examples:\n *   - if playbackRate is set to 2, media will play twice as fast.\n *   - if playbackRate is set to 0.5, media will play half as fast.\n *\n * @method Html5#setPlaybackRate\n * @return {number}\n *         The value of `playbackRate` from the media element. A number indicating\n *         the current playback speed of the media, where 1 is normal speed.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}\n */\n'playbackRate',\n/**\n * Set the value of `defaultPlaybackRate` on the media element. `defaultPlaybackRate` indicates\n * the rate at which the media should play back upon initial startup. Changing this value\n * after a video has started will do nothing. Instead you should used {@link Html5#setPlaybackRate}.\n *\n * Example Values:\n *   - if playbackRate is set to 2, media will play twice as fast.\n *   - if playbackRate is set to 0.5, media will play half as fast.\n *\n * @method Html5.prototype.setDefaultPlaybackRate\n * @return {number}\n *         The value of `defaultPlaybackRate` from the media element. A number indicating\n *         the current playback speed of the media, where 1 is normal speed.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultplaybackrate}\n */\n'defaultPlaybackRate'].forEach(function (prop) {\n  Html5.prototype['set' + toTitleCase(prop)] = function (v) {\n    this.el_[prop] = v;\n  };\n}); // wrap native functions with a function\n// The list is as follows:\n// pause, load, play\n\n[\n/**\n * A wrapper around the media elements `pause` function. This will call the `HTML5`\n * media elements `pause` function.\n *\n * @method Html5#pause\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-pause}\n */\n'pause',\n/**\n * A wrapper around the media elements `load` function. This will call the `HTML5`s\n * media element `load` function.\n *\n * @method Html5#load\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-load}\n */\n'load',\n/**\n * A wrapper around the media elements `play` function. This will call the `HTML5`s\n * media element `play` function.\n *\n * @method Html5#play\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-play}\n */\n'play'].forEach(function (prop) {\n  Html5.prototype[prop] = function () {\n    return this.el_[prop]();\n  };\n});\nTech.withSourceHandlers(Html5);\n/**\n * Native source handler for Html5, simply passes the source to the media element.\n *\n * @property {Tech~SourceObject} source\n *        The source object\n *\n * @property {Html5} tech\n *        The instance of the HTML5 tech.\n */\n\nHtml5.nativeSourceHandler = {};\n/**\n * Check if the media element can play the given mime type.\n *\n * @param {string} type\n *        The mimetype to check\n *\n * @return {string}\n *         'probably', 'maybe', or '' (empty string)\n */\n\nHtml5.nativeSourceHandler.canPlayType = function (type) {\n  // IE without MediaPlayer throws an error (#519)\n  try {\n    return Html5.TEST_VID.canPlayType(type);\n  } catch (e) {\n    return '';\n  }\n};\n/**\n * Check if the media element can handle a source natively.\n *\n * @param {Tech~SourceObject} source\n *         The source object\n *\n * @param {Object} [options]\n *         Options to be passed to the tech.\n *\n * @return {string}\n *         'probably', 'maybe', or '' (empty string).\n */\n\n\nHtml5.nativeSourceHandler.canHandleSource = function (source, options) {\n  // If a type was provided we should rely on that\n  if (source.type) {\n    return Html5.nativeSourceHandler.canPlayType(source.type); // If no type, fall back to checking 'video/[EXTENSION]'\n  } else if (source.src) {\n    var ext = getFileExtension(source.src);\n    return Html5.nativeSourceHandler.canPlayType(\"video/\" + ext);\n  }\n\n  return '';\n};\n/**\n * Pass the source to the native media element.\n *\n * @param {Tech~SourceObject} source\n *        The source object\n *\n * @param {Html5} tech\n *        The instance of the Html5 tech\n *\n * @param {Object} [options]\n *        The options to pass to the source\n */\n\n\nHtml5.nativeSourceHandler.handleSource = function (source, tech, options) {\n  tech.setSrc(source.src);\n};\n/**\n * A noop for the native dispose function, as cleanup is not needed.\n */\n\n\nHtml5.nativeSourceHandler.dispose = function () {}; // Register the native source handler\n\n\nHtml5.registerSourceHandler(Html5.nativeSourceHandler);\nTech.registerTech('Html5', Html5);\n\nfunction _templateObject$2() {\n  var data = _taggedTemplateLiteralLoose([\"\\n        Using the tech directly can be dangerous. I hope you know what you're doing.\\n        See https://github.com/videojs/video.js/issues/2617 for more info.\\n      \"]);\n\n  _templateObject$2 = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n// on the player when they happen\n\nvar TECH_EVENTS_RETRIGGER = [\n/**\n * Fired while the user agent is downloading media data.\n *\n * @event Player#progress\n * @type {EventTarget~Event}\n */\n\n/**\n * Retrigger the `progress` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechProgress_\n * @fires Player#progress\n * @listens Tech#progress\n */\n'progress',\n/**\n * Fires when the loading of an audio/video is aborted.\n *\n * @event Player#abort\n * @type {EventTarget~Event}\n */\n\n/**\n * Retrigger the `abort` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechAbort_\n * @fires Player#abort\n * @listens Tech#abort\n */\n'abort',\n/**\n * Fires when the browser is intentionally not getting media data.\n *\n * @event Player#suspend\n * @type {EventTarget~Event}\n */\n\n/**\n * Retrigger the `suspend` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechSuspend_\n * @fires Player#suspend\n * @listens Tech#suspend\n */\n'suspend',\n/**\n * Fires when the current playlist is empty.\n *\n * @event Player#emptied\n * @type {EventTarget~Event}\n */\n\n/**\n * Retrigger the `emptied` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechEmptied_\n * @fires Player#emptied\n * @listens Tech#emptied\n */\n'emptied',\n/**\n * Fires when the browser is trying to get media data, but data is not available.\n *\n * @event Player#stalled\n * @type {EventTarget~Event}\n */\n\n/**\n * Retrigger the `stalled` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechStalled_\n * @fires Player#stalled\n * @listens Tech#stalled\n */\n'stalled',\n/**\n * Fires when the browser has loaded meta data for the audio/video.\n *\n * @event Player#loadedmetadata\n * @type {EventTarget~Event}\n */\n\n/**\n * Retrigger the `stalled` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechLoadedmetadata_\n * @fires Player#loadedmetadata\n * @listens Tech#loadedmetadata\n */\n'loadedmetadata',\n/**\n * Fires when the browser has loaded the current frame of the audio/video.\n *\n * @event Player#loadeddata\n * @type {event}\n */\n\n/**\n * Retrigger the `loadeddata` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechLoaddeddata_\n * @fires Player#loadeddata\n * @listens Tech#loadeddata\n */\n'loadeddata',\n/**\n * Fires when the current playback position has changed.\n *\n * @event Player#timeupdate\n * @type {event}\n */\n\n/**\n * Retrigger the `timeupdate` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechTimeUpdate_\n * @fires Player#timeupdate\n * @listens Tech#timeupdate\n */\n'timeupdate',\n/**\n * Fires when the video's intrinsic dimensions change\n *\n * @event Player#resize\n * @type {event}\n */\n\n/**\n * Retrigger the `resize` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechResize_\n * @fires Player#resize\n * @listens Tech#resize\n */\n'resize',\n/**\n * Fires when the volume has been changed\n *\n * @event Player#volumechange\n * @type {event}\n */\n\n/**\n * Retrigger the `volumechange` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechVolumechange_\n * @fires Player#volumechange\n * @listens Tech#volumechange\n */\n'volumechange',\n/**\n * Fires when the text track has been changed\n *\n * @event Player#texttrackchange\n * @type {event}\n */\n\n/**\n * Retrigger the `texttrackchange` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechTexttrackchange_\n * @fires Player#texttrackchange\n * @listens Tech#texttrackchange\n */\n'texttrackchange']; // events to queue when playback rate is zero\n// this is a hash for the sole purpose of mapping non-camel-cased event names\n// to camel-cased function names\n\nvar TECH_EVENTS_QUEUE = {\n  canplay: 'CanPlay',\n  canplaythrough: 'CanPlayThrough',\n  playing: 'Playing',\n  seeked: 'Seeked'\n};\nvar BREAKPOINT_ORDER = ['tiny', 'xsmall', 'small', 'medium', 'large', 'xlarge', 'huge'];\nvar BREAKPOINT_CLASSES = {}; // grep: vjs-layout-tiny\n// grep: vjs-layout-x-small\n// grep: vjs-layout-small\n// grep: vjs-layout-medium\n// grep: vjs-layout-large\n// grep: vjs-layout-x-large\n// grep: vjs-layout-huge\n\nBREAKPOINT_ORDER.forEach(function (k) {\n  var v = k.charAt(0) === 'x' ? \"x-\" + k.substring(1) : k;\n  BREAKPOINT_CLASSES[k] = \"vjs-layout-\" + v;\n});\nvar DEFAULT_BREAKPOINTS = {\n  tiny: 210,\n  xsmall: 320,\n  small: 425,\n  medium: 768,\n  large: 1440,\n  xlarge: 2560,\n  huge: Infinity\n};\n/**\n * An instance of the `Player` class is created when any of the Video.js setup methods\n * are used to initialize a video.\n *\n * After an instance has been created it can be accessed globally in two ways:\n * 1. By calling `videojs('example_video_1');`\n * 2. By using it directly via  `videojs.players.example_video_1;`\n *\n * @extends Component\n */\n\nvar Player =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(Player, _Component);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Element} tag\n   *        The original video DOM element used for configuring options.\n   *\n   * @param {Object} [options]\n   *        Object of option names and values.\n   *\n   * @param {Component~ReadyCallback} [ready]\n   *        Ready callback function.\n   */\n  function Player(tag, options, ready) {\n    var _this;\n\n    // Make sure tag ID exists\n    tag.id = tag.id || options.id || \"vjs_video_\" + newGUID(); // Set Options\n    // The options argument overrides options set in the video tag\n    // which overrides globally set options.\n    // This latter part coincides with the load order\n    // (tag must exist before Player)\n\n    options = assign(Player.getTagSettings(tag), options); // Delay the initialization of children because we need to set up\n    // player properties first, and can't use `this` before `super()`\n\n    options.initChildren = false; // Same with creating the element\n\n    options.createEl = false; // don't auto mixin the evented mixin\n\n    options.evented = false; // we don't want the player to report touch activity on itself\n    // see enableTouchActivity in Component\n\n    options.reportTouchActivity = false; // If language is not set, get the closest lang attribute\n\n    if (!options.language) {\n      if (typeof tag.closest === 'function') {\n        var closest = tag.closest('[lang]');\n\n        if (closest && closest.getAttribute) {\n          options.language = closest.getAttribute('lang');\n        }\n      } else {\n        var element = tag;\n\n        while (element && element.nodeType === 1) {\n          if (getAttributes(element).hasOwnProperty('lang')) {\n            options.language = element.getAttribute('lang');\n            break;\n          }\n\n          element = element.parentNode;\n        }\n      }\n    } // Run base component initializing with new options\n\n\n    _this = _Component.call(this, null, options, ready) || this; // Create bound methods for document listeners.\n\n    _this.boundDocumentFullscreenChange_ = bind(_assertThisInitialized(_this), _this.documentFullscreenChange_);\n    _this.boundFullWindowOnEscKey_ = bind(_assertThisInitialized(_this), _this.fullWindowOnEscKey); // create logger\n\n    _this.log = createLogger$1(_this.id_); // Hold our own reference to fullscreen api so it can be mocked in tests\n\n    _this.fsApi_ = FullscreenApi; // Tracks when a tech changes the poster\n\n    _this.isPosterFromTech_ = false; // Holds callback info that gets queued when playback rate is zero\n    // and a seek is happening\n\n    _this.queuedCallbacks_ = []; // Turn off API access because we're loading a new tech that might load asynchronously\n\n    _this.isReady_ = false; // Init state hasStarted_\n\n    _this.hasStarted_ = false; // Init state userActive_\n\n    _this.userActive_ = false; // if the global option object was accidentally blown away by\n    // someone, bail early with an informative error\n\n    if (!_this.options_ || !_this.options_.techOrder || !_this.options_.techOrder.length) {\n      throw new Error('No techOrder specified. Did you overwrite ' + 'videojs.options instead of just changing the ' + 'properties you want to override?');\n    } // Store the original tag used to set options\n\n\n    _this.tag = tag; // Store the tag attributes used to restore html5 element\n\n    _this.tagAttributes = tag && getAttributes(tag); // Update current language\n\n    _this.language(_this.options_.language); // Update Supported Languages\n\n\n    if (options.languages) {\n      // Normalise player option languages to lowercase\n      var languagesToLower = {};\n      Object.getOwnPropertyNames(options.languages).forEach(function (name) {\n        languagesToLower[name.toLowerCase()] = options.languages[name];\n      });\n      _this.languages_ = languagesToLower;\n    } else {\n      _this.languages_ = Player.prototype.options_.languages;\n    }\n\n    _this.resetCache_(); // Set poster\n\n\n    _this.poster_ = options.poster || ''; // Set controls\n\n    _this.controls_ = !!options.controls; // Original tag settings stored in options\n    // now remove immediately so native controls don't flash.\n    // May be turned back on by HTML5 tech if nativeControlsForTouch is true\n\n    tag.controls = false;\n    tag.removeAttribute('controls');\n    _this.changingSrc_ = false;\n    _this.playCallbacks_ = [];\n    _this.playTerminatedQueue_ = []; // the attribute overrides the option\n\n    if (tag.hasAttribute('autoplay')) {\n      _this.autoplay(true);\n    } else {\n      // otherwise use the setter to validate and\n      // set the correct value.\n      _this.autoplay(_this.options_.autoplay);\n    } // check plugins\n\n\n    if (options.plugins) {\n      Object.keys(options.plugins).forEach(function (name) {\n        if (typeof _this[name] !== 'function') {\n          throw new Error(\"plugin \\\"\" + name + \"\\\" does not exist\");\n        }\n      });\n    }\n    /*\n     * Store the internal state of scrubbing\n     *\n     * @private\n     * @return {Boolean} True if the user is scrubbing\n     */\n\n\n    _this.scrubbing_ = false;\n    _this.el_ = _this.createEl(); // Make this an evented object and use `el_` as its event bus.\n\n    evented(_assertThisInitialized(_this), {\n      eventBusKey: 'el_'\n    });\n\n    if (_this.fluid_) {\n      _this.on('playerreset', _this.updateStyleEl_);\n    } // We also want to pass the original player options to each component and plugin\n    // as well so they don't need to reach back into the player for options later.\n    // We also need to do another copy of this.options_ so we don't end up with\n    // an infinite loop.\n\n\n    var playerOptionsCopy = mergeOptions(_this.options_); // Load plugins\n\n    if (options.plugins) {\n      Object.keys(options.plugins).forEach(function (name) {\n        _this[name](options.plugins[name]);\n      });\n    }\n\n    _this.options_.playerOptions = playerOptionsCopy;\n    _this.middleware_ = [];\n\n    _this.initChildren(); // Set isAudio based on whether or not an audio tag was used\n\n\n    _this.isAudio(tag.nodeName.toLowerCase() === 'audio'); // Update controls className. Can't do this when the controls are initially\n    // set because the element doesn't exist yet.\n\n\n    if (_this.controls()) {\n      _this.addClass('vjs-controls-enabled');\n    } else {\n      _this.addClass('vjs-controls-disabled');\n    } // Set ARIA label and region role depending on player type\n\n\n    _this.el_.setAttribute('role', 'region');\n\n    if (_this.isAudio()) {\n      _this.el_.setAttribute('aria-label', _this.localize('Audio Player'));\n    } else {\n      _this.el_.setAttribute('aria-label', _this.localize('Video Player'));\n    }\n\n    if (_this.isAudio()) {\n      _this.addClass('vjs-audio');\n    }\n\n    if (_this.flexNotSupported_()) {\n      _this.addClass('vjs-no-flex');\n    } // TODO: Make this smarter. Toggle user state between touching/mousing\n    // using events, since devices can have both touch and mouse events.\n    // TODO: Make this check be performed again when the window switches between monitors\n    // (See https://github.com/videojs/video.js/issues/5683)\n\n\n    if (TOUCH_ENABLED) {\n      _this.addClass('vjs-touch-enabled');\n    } // iOS Safari has broken hover handling\n\n\n    if (!IS_IOS) {\n      _this.addClass('vjs-workinghover');\n    } // Make player easily findable by ID\n\n\n    Player.players[_this.id_] = _assertThisInitialized(_this); // Add a major version class to aid css in plugins\n\n    var majorVersion = version.split('.')[0];\n\n    _this.addClass(\"vjs-v\" + majorVersion); // When the player is first initialized, trigger activity so components\n    // like the control bar show themselves if needed\n\n\n    _this.userActive(true);\n\n    _this.reportUserActivity();\n\n    _this.one('play', _this.listenForUserActivity_);\n\n    _this.on('stageclick', _this.handleStageClick_);\n\n    _this.on('keydown', _this.handleKeyDown);\n\n    _this.breakpoints(_this.options_.breakpoints);\n\n    _this.responsive(_this.options_.responsive);\n\n    return _this;\n  }\n  /**\n   * Destroys the video player and does any necessary cleanup.\n   *\n   * This is especially helpful if you are dynamically adding and removing videos\n   * to/from the DOM.\n   *\n   * @fires Player#dispose\n   */\n\n\n  var _proto = Player.prototype;\n\n  _proto.dispose = function dispose() {\n    var _this2 = this;\n\n    /**\n     * Called when the player is being disposed of.\n     *\n     * @event Player#dispose\n     * @type {EventTarget~Event}\n     */\n    this.trigger('dispose'); // prevent dispose from being called twice\n\n    this.off('dispose'); // Make sure all player-specific document listeners are unbound. This is\n\n    off(document, this.fsApi_.fullscreenchange, this.boundDocumentFullscreenChange_);\n    off(document, 'keydown', this.boundFullWindowOnEscKey_);\n\n    if (this.styleEl_ && this.styleEl_.parentNode) {\n      this.styleEl_.parentNode.removeChild(this.styleEl_);\n      this.styleEl_ = null;\n    } // Kill reference to this player\n\n\n    Player.players[this.id_] = null;\n\n    if (this.tag && this.tag.player) {\n      this.tag.player = null;\n    }\n\n    if (this.el_ && this.el_.player) {\n      this.el_.player = null;\n    }\n\n    if (this.tech_) {\n      this.tech_.dispose();\n      this.isPosterFromTech_ = false;\n      this.poster_ = '';\n    }\n\n    if (this.playerElIngest_) {\n      this.playerElIngest_ = null;\n    }\n\n    if (this.tag) {\n      this.tag = null;\n    }\n\n    clearCacheForPlayer(this); // remove all event handlers for track lists\n    // all tracks and track listeners are removed on\n    // tech dispose\n\n    ALL.names.forEach(function (name) {\n      var props = ALL[name];\n\n      var list = _this2[props.getterName](); // if it is not a native list\n      // we have to manually remove event listeners\n\n\n      if (list && list.off) {\n        list.off();\n      }\n    }); // the actual .el_ is removed here\n\n    _Component.prototype.dispose.call(this);\n  }\n  /**\n   * Create the `Player`'s DOM element.\n   *\n   * @return {Element}\n   *         The DOM element that gets created.\n   */\n  ;\n\n  _proto.createEl = function createEl() {\n    var tag = this.tag;\n    var el;\n    var playerElIngest = this.playerElIngest_ = tag.parentNode && tag.parentNode.hasAttribute && tag.parentNode.hasAttribute('data-vjs-player');\n    var divEmbed = this.tag.tagName.toLowerCase() === 'video-js';\n\n    if (playerElIngest) {\n      el = this.el_ = tag.parentNode;\n    } else if (!divEmbed) {\n      el = this.el_ = _Component.prototype.createEl.call(this, 'div');\n    } // Copy over all the attributes from the tag, including ID and class\n    // ID will now reference player box, not the video tag\n\n\n    var attrs = getAttributes(tag);\n\n    if (divEmbed) {\n      el = this.el_ = tag;\n      tag = this.tag = document.createElement('video');\n\n      while (el.children.length) {\n        tag.appendChild(el.firstChild);\n      }\n\n      if (!hasClass(el, 'video-js')) {\n        addClass(el, 'video-js');\n      }\n\n      el.appendChild(tag);\n      playerElIngest = this.playerElIngest_ = el; // move properties over from our custom `video-js` element\n      // to our new `video` element. This will move things like\n      // `src` or `controls` that were set via js before the player\n      // was initialized.\n\n      Object.keys(el).forEach(function (k) {\n        tag[k] = el[k];\n      });\n    } // set tabindex to -1 to remove the video element from the focus order\n\n\n    tag.setAttribute('tabindex', '-1');\n    attrs.tabindex = '-1'; // Workaround for #4583 (JAWS+IE doesn't announce BPB or play button), and\n    // for the same issue with Chrome (on Windows) with JAWS.\n    // See https://github.com/FreedomScientific/VFO-standards-support/issues/78\n    // Note that we can't detect if JAWS is being used, but this ARIA attribute\n    //  doesn't change behavior of IE11 or Chrome if JAWS is not being used\n\n    if (IE_VERSION || IS_CHROME && IS_WINDOWS) {\n      tag.setAttribute('role', 'application');\n      attrs.role = 'application';\n    } // Remove width/height attrs from tag so CSS can make it 100% width/height\n\n\n    tag.removeAttribute('width');\n    tag.removeAttribute('height');\n\n    if ('width' in attrs) {\n      delete attrs.width;\n    }\n\n    if ('height' in attrs) {\n      delete attrs.height;\n    }\n\n    Object.getOwnPropertyNames(attrs).forEach(function (attr) {\n      // don't copy over the class attribute to the player element when we're in a div embed\n      // the class is already set up properly in the divEmbed case\n      // and we want to make sure that the `video-js` class doesn't get lost\n      if (!(divEmbed && attr === 'class')) {\n        el.setAttribute(attr, attrs[attr]);\n      }\n\n      if (divEmbed) {\n        tag.setAttribute(attr, attrs[attr]);\n      }\n    }); // Update tag id/class for use as HTML5 playback tech\n    // Might think we should do this after embedding in container so .vjs-tech class\n    // doesn't flash 100% width/height, but class only applies with .video-js parent\n\n    tag.playerId = tag.id;\n    tag.id += '_html5_api';\n    tag.className = 'vjs-tech'; // Make player findable on elements\n\n    tag.player = el.player = this; // Default state of video is paused\n\n    this.addClass('vjs-paused'); // Add a style element in the player that we'll use to set the width/height\n    // of the player in a way that's still overrideable by CSS, just like the\n    // video element\n\n    if (window$1.VIDEOJS_NO_DYNAMIC_STYLE !== true) {\n      this.styleEl_ = createStyleElement('vjs-styles-dimensions');\n      var defaultsStyleEl = $('.vjs-styles-defaults');\n      var head = $('head');\n      head.insertBefore(this.styleEl_, defaultsStyleEl ? defaultsStyleEl.nextSibling : head.firstChild);\n    }\n\n    this.fill_ = false;\n    this.fluid_ = false; // Pass in the width/height/aspectRatio options which will update the style el\n\n    this.width(this.options_.width);\n    this.height(this.options_.height);\n    this.fill(this.options_.fill);\n    this.fluid(this.options_.fluid);\n    this.aspectRatio(this.options_.aspectRatio); // Hide any links within the video/audio tag,\n    // because IE doesn't hide them completely from screen readers.\n\n    var links = tag.getElementsByTagName('a');\n\n    for (var i = 0; i < links.length; i++) {\n      var linkEl = links.item(i);\n      addClass(linkEl, 'vjs-hidden');\n      linkEl.setAttribute('hidden', 'hidden');\n    } // insertElFirst seems to cause the networkState to flicker from 3 to 2, so\n    // keep track of the original for later so we can know if the source originally failed\n\n\n    tag.initNetworkState_ = tag.networkState; // Wrap video tag in div (el/box) container\n\n    if (tag.parentNode && !playerElIngest) {\n      tag.parentNode.insertBefore(el, tag);\n    } // insert the tag as the first child of the player element\n    // then manually add it to the children array so that this.addChild\n    // will work properly for other components\n    //\n    // Breaks iPhone, fixed in HTML5 setup.\n\n\n    prependTo(tag, el);\n    this.children_.unshift(tag); // Set lang attr on player to ensure CSS :lang() in consistent with player\n    // if it's been set to something different to the doc\n\n    this.el_.setAttribute('lang', this.language_);\n    this.el_ = el;\n    return el;\n  }\n  /**\n   * A getter/setter for the `Player`'s width. Returns the player's configured value.\n   * To get the current width use `currentWidth()`.\n   *\n   * @param {number} [value]\n   *        The value to set the `Player`'s width to.\n   *\n   * @return {number}\n   *         The current width of the `Player` when getting.\n   */\n  ;\n\n  _proto.width = function width(value) {\n    return this.dimension('width', value);\n  }\n  /**\n   * A getter/setter for the `Player`'s height. Returns the player's configured value.\n   * To get the current height use `currentheight()`.\n   *\n   * @param {number} [value]\n   *        The value to set the `Player`'s heigth to.\n   *\n   * @return {number}\n   *         The current height of the `Player` when getting.\n   */\n  ;\n\n  _proto.height = function height(value) {\n    return this.dimension('height', value);\n  }\n  /**\n   * A getter/setter for the `Player`'s width & height.\n   *\n   * @param {string} dimension\n   *        This string can be:\n   *        - 'width'\n   *        - 'height'\n   *\n   * @param {number} [value]\n   *        Value for dimension specified in the first argument.\n   *\n   * @return {number}\n   *         The dimension arguments value when getting (width/height).\n   */\n  ;\n\n  _proto.dimension = function dimension(_dimension, value) {\n    var privDimension = _dimension + '_';\n\n    if (value === undefined) {\n      return this[privDimension] || 0;\n    }\n\n    if (value === '') {\n      // If an empty string is given, reset the dimension to be automatic\n      this[privDimension] = undefined;\n      this.updateStyleEl_();\n      return;\n    }\n\n    var parsedVal = parseFloat(value);\n\n    if (isNaN(parsedVal)) {\n      log.error(\"Improper value \\\"\" + value + \"\\\" supplied for for \" + _dimension);\n      return;\n    }\n\n    this[privDimension] = parsedVal;\n    this.updateStyleEl_();\n  }\n  /**\n   * A getter/setter/toggler for the vjs-fluid `className` on the `Player`.\n   *\n   * Turning this on will turn off fill mode.\n   *\n   * @param {boolean} [bool]\n   *        - A value of true adds the class.\n   *        - A value of false removes the class.\n   *        - No value will be a getter.\n   *\n   * @return {boolean|undefined}\n   *         - The value of fluid when getting.\n   *         - `undefined` when setting.\n   */\n  ;\n\n  _proto.fluid = function fluid(bool) {\n    if (bool === undefined) {\n      return !!this.fluid_;\n    }\n\n    this.fluid_ = !!bool;\n\n    if (isEvented(this)) {\n      this.off('playerreset', this.updateStyleEl_);\n    }\n\n    if (bool) {\n      this.addClass('vjs-fluid');\n      this.fill(false);\n      addEventedCallback(function () {\n        this.on('playerreset', this.updateStyleEl_);\n      });\n    } else {\n      this.removeClass('vjs-fluid');\n    }\n\n    this.updateStyleEl_();\n  }\n  /**\n   * A getter/setter/toggler for the vjs-fill `className` on the `Player`.\n   *\n   * Turning this on will turn off fluid mode.\n   *\n   * @param {boolean} [bool]\n   *        - A value of true adds the class.\n   *        - A value of false removes the class.\n   *        - No value will be a getter.\n   *\n   * @return {boolean|undefined}\n   *         - The value of fluid when getting.\n   *         - `undefined` when setting.\n   */\n  ;\n\n  _proto.fill = function fill(bool) {\n    if (bool === undefined) {\n      return !!this.fill_;\n    }\n\n    this.fill_ = !!bool;\n\n    if (bool) {\n      this.addClass('vjs-fill');\n      this.fluid(false);\n    } else {\n      this.removeClass('vjs-fill');\n    }\n  }\n  /**\n   * Get/Set the aspect ratio\n   *\n   * @param {string} [ratio]\n   *        Aspect ratio for player\n   *\n   * @return {string|undefined}\n   *         returns the current aspect ratio when getting\n   */\n\n  /**\n   * A getter/setter for the `Player`'s aspect ratio.\n   *\n   * @param {string} [ratio]\n   *        The value to set the `Player's aspect ratio to.\n   *\n   * @return {string|undefined}\n   *         - The current aspect ratio of the `Player` when getting.\n   *         - undefined when setting\n   */\n  ;\n\n  _proto.aspectRatio = function aspectRatio(ratio) {\n    if (ratio === undefined) {\n      return this.aspectRatio_;\n    } // Check for width:height format\n\n\n    if (!/^\\d+\\:\\d+$/.test(ratio)) {\n      throw new Error('Improper value supplied for aspect ratio. The format should be width:height, for example 16:9.');\n    }\n\n    this.aspectRatio_ = ratio; // We're assuming if you set an aspect ratio you want fluid mode,\n    // because in fixed mode you could calculate width and height yourself.\n\n    this.fluid(true);\n    this.updateStyleEl_();\n  }\n  /**\n   * Update styles of the `Player` element (height, width and aspect ratio).\n   *\n   * @private\n   * @listens Tech#loadedmetadata\n   */\n  ;\n\n  _proto.updateStyleEl_ = function updateStyleEl_() {\n    if (window$1.VIDEOJS_NO_DYNAMIC_STYLE === true) {\n      var _width = typeof this.width_ === 'number' ? this.width_ : this.options_.width;\n\n      var _height = typeof this.height_ === 'number' ? this.height_ : this.options_.height;\n\n      var techEl = this.tech_ && this.tech_.el();\n\n      if (techEl) {\n        if (_width >= 0) {\n          techEl.width = _width;\n        }\n\n        if (_height >= 0) {\n          techEl.height = _height;\n        }\n      }\n\n      return;\n    }\n\n    var width;\n    var height;\n    var aspectRatio;\n    var idClass; // The aspect ratio is either used directly or to calculate width and height.\n\n    if (this.aspectRatio_ !== undefined && this.aspectRatio_ !== 'auto') {\n      // Use any aspectRatio that's been specifically set\n      aspectRatio = this.aspectRatio_;\n    } else if (this.videoWidth() > 0) {\n      // Otherwise try to get the aspect ratio from the video metadata\n      aspectRatio = this.videoWidth() + ':' + this.videoHeight();\n    } else {\n      // Or use a default. The video element's is 2:1, but 16:9 is more common.\n      aspectRatio = '16:9';\n    } // Get the ratio as a decimal we can use to calculate dimensions\n\n\n    var ratioParts = aspectRatio.split(':');\n    var ratioMultiplier = ratioParts[1] / ratioParts[0];\n\n    if (this.width_ !== undefined) {\n      // Use any width that's been specifically set\n      width = this.width_;\n    } else if (this.height_ !== undefined) {\n      // Or calulate the width from the aspect ratio if a height has been set\n      width = this.height_ / ratioMultiplier;\n    } else {\n      // Or use the video's metadata, or use the video el's default of 300\n      width = this.videoWidth() || 300;\n    }\n\n    if (this.height_ !== undefined) {\n      // Use any height that's been specifically set\n      height = this.height_;\n    } else {\n      // Otherwise calculate the height from the ratio and the width\n      height = width * ratioMultiplier;\n    } // Ensure the CSS class is valid by starting with an alpha character\n\n\n    if (/^[^a-zA-Z]/.test(this.id())) {\n      idClass = 'dimensions-' + this.id();\n    } else {\n      idClass = this.id() + '-dimensions';\n    } // Ensure the right class is still on the player for the style element\n\n\n    this.addClass(idClass);\n    setTextContent(this.styleEl_, \"\\n      .\" + idClass + \" {\\n        width: \" + width + \"px;\\n        height: \" + height + \"px;\\n      }\\n\\n      .\" + idClass + \".vjs-fluid {\\n        padding-top: \" + ratioMultiplier * 100 + \"%;\\n      }\\n    \");\n  }\n  /**\n   * Load/Create an instance of playback {@link Tech} including element\n   * and API methods. Then append the `Tech` element in `Player` as a child.\n   *\n   * @param {string} techName\n   *        name of the playback technology\n   *\n   * @param {string} source\n   *        video source\n   *\n   * @private\n   */\n  ;\n\n  _proto.loadTech_ = function loadTech_(techName, source) {\n    var _this3 = this;\n\n    // Pause and remove current playback technology\n    if (this.tech_) {\n      this.unloadTech_();\n    }\n\n    var titleTechName = toTitleCase(techName);\n    var camelTechName = techName.charAt(0).toLowerCase() + techName.slice(1); // get rid of the HTML5 video tag as soon as we are using another tech\n\n    if (titleTechName !== 'Html5' && this.tag) {\n      Tech.getTech('Html5').disposeMediaElement(this.tag);\n      this.tag.player = null;\n      this.tag = null;\n    }\n\n    this.techName_ = titleTechName; // Turn off API access because we're loading a new tech that might load asynchronously\n\n    this.isReady_ = false; // if autoplay is a string we pass false to the tech\n    // because the player is going to handle autoplay on `loadstart`\n\n    var autoplay = typeof this.autoplay() === 'string' ? false : this.autoplay(); // Grab tech-specific options from player options and add source and parent element to use.\n\n    var techOptions = {\n      source: source,\n      autoplay: autoplay,\n      'nativeControlsForTouch': this.options_.nativeControlsForTouch,\n      'playerId': this.id(),\n      'techId': this.id() + \"_\" + camelTechName + \"_api\",\n      'playsinline': this.options_.playsinline,\n      'preload': this.options_.preload,\n      'loop': this.options_.loop,\n      'muted': this.options_.muted,\n      'poster': this.poster(),\n      'language': this.language(),\n      'playerElIngest': this.playerElIngest_ || false,\n      'vtt.js': this.options_['vtt.js'],\n      'canOverridePoster': !!this.options_.techCanOverridePoster,\n      'enableSourceset': this.options_.enableSourceset,\n      'Promise': this.options_.Promise\n    };\n    ALL.names.forEach(function (name) {\n      var props = ALL[name];\n      techOptions[props.getterName] = _this3[props.privateName];\n    });\n    assign(techOptions, this.options_[titleTechName]);\n    assign(techOptions, this.options_[camelTechName]);\n    assign(techOptions, this.options_[techName.toLowerCase()]);\n\n    if (this.tag) {\n      techOptions.tag = this.tag;\n    }\n\n    if (source && source.src === this.cache_.src && this.cache_.currentTime > 0) {\n      techOptions.startTime = this.cache_.currentTime;\n    } // Initialize tech instance\n\n\n    var TechClass = Tech.getTech(techName);\n\n    if (!TechClass) {\n      throw new Error(\"No Tech named '\" + titleTechName + \"' exists! '\" + titleTechName + \"' should be registered using videojs.registerTech()'\");\n    }\n\n    this.tech_ = new TechClass(techOptions); // player.triggerReady is always async, so don't need this to be async\n\n    this.tech_.ready(bind(this, this.handleTechReady_), true);\n    textTrackConverter.jsonToTextTracks(this.textTracksJson_ || [], this.tech_); // Listen to all HTML5-defined events and trigger them on the player\n\n    TECH_EVENTS_RETRIGGER.forEach(function (event) {\n      _this3.on(_this3.tech_, event, _this3[\"handleTech\" + toTitleCase(event) + \"_\"]);\n    });\n    Object.keys(TECH_EVENTS_QUEUE).forEach(function (event) {\n      _this3.on(_this3.tech_, event, function (eventObj) {\n        if (_this3.tech_.playbackRate() === 0 && _this3.tech_.seeking()) {\n          _this3.queuedCallbacks_.push({\n            callback: _this3[\"handleTech\" + TECH_EVENTS_QUEUE[event] + \"_\"].bind(_this3),\n            event: eventObj\n          });\n\n          return;\n        }\n\n        _this3[\"handleTech\" + TECH_EVENTS_QUEUE[event] + \"_\"](eventObj);\n      });\n    });\n    this.on(this.tech_, 'loadstart', this.handleTechLoadStart_);\n    this.on(this.tech_, 'sourceset', this.handleTechSourceset_);\n    this.on(this.tech_, 'waiting', this.handleTechWaiting_);\n    this.on(this.tech_, 'ended', this.handleTechEnded_);\n    this.on(this.tech_, 'seeking', this.handleTechSeeking_);\n    this.on(this.tech_, 'play', this.handleTechPlay_);\n    this.on(this.tech_, 'firstplay', this.handleTechFirstPlay_);\n    this.on(this.tech_, 'pause', this.handleTechPause_);\n    this.on(this.tech_, 'durationchange', this.handleTechDurationChange_);\n    this.on(this.tech_, 'fullscreenchange', this.handleTechFullscreenChange_);\n    this.on(this.tech_, 'enterpictureinpicture', this.handleTechEnterPictureInPicture_);\n    this.on(this.tech_, 'leavepictureinpicture', this.handleTechLeavePictureInPicture_);\n    this.on(this.tech_, 'error', this.handleTechError_);\n    this.on(this.tech_, 'loadedmetadata', this.updateStyleEl_);\n    this.on(this.tech_, 'posterchange', this.handleTechPosterChange_);\n    this.on(this.tech_, 'textdata', this.handleTechTextData_);\n    this.on(this.tech_, 'ratechange', this.handleTechRateChange_);\n    this.usingNativeControls(this.techGet_('controls'));\n\n    if (this.controls() && !this.usingNativeControls()) {\n      this.addTechControlsListeners_();\n    } // Add the tech element in the DOM if it was not already there\n    // Make sure to not insert the original video element if using Html5\n\n\n    if (this.tech_.el().parentNode !== this.el() && (titleTechName !== 'Html5' || !this.tag)) {\n      prependTo(this.tech_.el(), this.el());\n    } // Get rid of the original video tag reference after the first tech is loaded\n\n\n    if (this.tag) {\n      this.tag.player = null;\n      this.tag = null;\n    }\n  }\n  /**\n   * Unload and dispose of the current playback {@link Tech}.\n   *\n   * @private\n   */\n  ;\n\n  _proto.unloadTech_ = function unloadTech_() {\n    var _this4 = this;\n\n    // Save the current text tracks so that we can reuse the same text tracks with the next tech\n    ALL.names.forEach(function (name) {\n      var props = ALL[name];\n      _this4[props.privateName] = _this4[props.getterName]();\n    });\n    this.textTracksJson_ = textTrackConverter.textTracksToJson(this.tech_);\n    this.isReady_ = false;\n    this.tech_.dispose();\n    this.tech_ = false;\n\n    if (this.isPosterFromTech_) {\n      this.poster_ = '';\n      this.trigger('posterchange');\n    }\n\n    this.isPosterFromTech_ = false;\n  }\n  /**\n   * Return a reference to the current {@link Tech}.\n   * It will print a warning by default about the danger of using the tech directly\n   * but any argument that is passed in will silence the warning.\n   *\n   * @param {*} [safety]\n   *        Anything passed in to silence the warning\n   *\n   * @return {Tech}\n   *         The Tech\n   */\n  ;\n\n  _proto.tech = function tech(safety) {\n    if (safety === undefined) {\n      log.warn(tsml(_templateObject$2()));\n    }\n\n    return this.tech_;\n  }\n  /**\n   * Set up click and touch listeners for the playback element\n   *\n   * - On desktops: a click on the video itself will toggle playback\n   * - On mobile devices: a click on the video toggles controls\n   *   which is done by toggling the user state between active and\n   *   inactive\n   * - A tap can signal that a user has become active or has become inactive\n   *   e.g. a quick tap on an iPhone movie should reveal the controls. Another\n   *   quick tap should hide them again (signaling the user is in an inactive\n   *   viewing state)\n   * - In addition to this, we still want the user to be considered inactive after\n   *   a few seconds of inactivity.\n   *\n   * > Note: the only part of iOS interaction we can't mimic with this setup\n   * is a touch and hold on the video element counting as activity in order to\n   * keep the controls showing, but that shouldn't be an issue. A touch and hold\n   * on any controls will still keep the user active\n   *\n   * @private\n   */\n  ;\n\n  _proto.addTechControlsListeners_ = function addTechControlsListeners_() {\n    // Make sure to remove all the previous listeners in case we are called multiple times.\n    this.removeTechControlsListeners_(); // Some browsers (Chrome & IE) don't trigger a click on a flash swf, but do\n    // trigger mousedown/up.\n    // http://stackoverflow.com/questions/1444562/javascript-onclick-event-over-flash-object\n    // Any touch events are set to block the mousedown event from happening\n\n    this.on(this.tech_, 'mouseup', this.handleTechClick_);\n    this.on(this.tech_, 'dblclick', this.handleTechDoubleClick_); // If the controls were hidden we don't want that to change without a tap event\n    // so we'll check if the controls were already showing before reporting user\n    // activity\n\n    this.on(this.tech_, 'touchstart', this.handleTechTouchStart_);\n    this.on(this.tech_, 'touchmove', this.handleTechTouchMove_);\n    this.on(this.tech_, 'touchend', this.handleTechTouchEnd_); // The tap listener needs to come after the touchend listener because the tap\n    // listener cancels out any reportedUserActivity when setting userActive(false)\n\n    this.on(this.tech_, 'tap', this.handleTechTap_);\n  }\n  /**\n   * Remove the listeners used for click and tap controls. This is needed for\n   * toggling to controls disabled, where a tap/touch should do nothing.\n   *\n   * @private\n   */\n  ;\n\n  _proto.removeTechControlsListeners_ = function removeTechControlsListeners_() {\n    // We don't want to just use `this.off()` because there might be other needed\n    // listeners added by techs that extend this.\n    this.off(this.tech_, 'tap', this.handleTechTap_);\n    this.off(this.tech_, 'touchstart', this.handleTechTouchStart_);\n    this.off(this.tech_, 'touchmove', this.handleTechTouchMove_);\n    this.off(this.tech_, 'touchend', this.handleTechTouchEnd_);\n    this.off(this.tech_, 'mouseup', this.handleTechClick_);\n    this.off(this.tech_, 'dblclick', this.handleTechDoubleClick_);\n  }\n  /**\n   * Player waits for the tech to be ready\n   *\n   * @private\n   */\n  ;\n\n  _proto.handleTechReady_ = function handleTechReady_() {\n    this.triggerReady(); // Keep the same volume as before\n\n    if (this.cache_.volume) {\n      this.techCall_('setVolume', this.cache_.volume);\n    } // Look if the tech found a higher resolution poster while loading\n\n\n    this.handleTechPosterChange_(); // Update the duration if available\n\n    this.handleTechDurationChange_();\n  }\n  /**\n   * Retrigger the `loadstart` event that was triggered by the {@link Tech}. This\n   * function will also trigger {@link Player#firstplay} if it is the first loadstart\n   * for a video.\n   *\n   * @fires Player#loadstart\n   * @fires Player#firstplay\n   * @listens Tech#loadstart\n   * @private\n   */\n  ;\n\n  _proto.handleTechLoadStart_ = function handleTechLoadStart_() {\n    // TODO: Update to use `emptied` event instead. See #1277.\n    this.removeClass('vjs-ended');\n    this.removeClass('vjs-seeking'); // reset the error state\n\n    this.error(null); // Update the duration\n\n    this.handleTechDurationChange_(); // If it's already playing we want to trigger a firstplay event now.\n    // The firstplay event relies on both the play and loadstart events\n    // which can happen in any order for a new source\n\n    if (!this.paused()) {\n      /**\n       * Fired when the user agent begins looking for media data\n       *\n       * @event Player#loadstart\n       * @type {EventTarget~Event}\n       */\n      this.trigger('loadstart');\n      this.trigger('firstplay');\n    } else {\n      // reset the hasStarted state\n      this.hasStarted(false);\n      this.trigger('loadstart');\n    } // autoplay happens after loadstart for the browser,\n    // so we mimic that behavior\n\n\n    this.manualAutoplay_(this.autoplay());\n  }\n  /**\n   * Handle autoplay string values, rather than the typical boolean\n   * values that should be handled by the tech. Note that this is not\n   * part of any specification. Valid values and what they do can be\n   * found on the autoplay getter at Player#autoplay()\n   */\n  ;\n\n  _proto.manualAutoplay_ = function manualAutoplay_(type) {\n    var _this5 = this;\n\n    if (!this.tech_ || typeof type !== 'string') {\n      return;\n    }\n\n    var muted = function muted() {\n      var previouslyMuted = _this5.muted();\n\n      _this5.muted(true);\n\n      var restoreMuted = function restoreMuted() {\n        _this5.muted(previouslyMuted);\n      }; // restore muted on play terminatation\n\n\n      _this5.playTerminatedQueue_.push(restoreMuted);\n\n      var mutedPromise = _this5.play();\n\n      if (!isPromise(mutedPromise)) {\n        return;\n      }\n\n      return mutedPromise[\"catch\"](restoreMuted);\n    };\n\n    var promise; // if muted defaults to true\n    // the only thing we can do is call play\n\n    if (type === 'any' && this.muted() !== true) {\n      promise = this.play();\n\n      if (isPromise(promise)) {\n        promise = promise[\"catch\"](muted);\n      }\n    } else if (type === 'muted' && this.muted() !== true) {\n      promise = muted();\n    } else {\n      promise = this.play();\n    }\n\n    if (!isPromise(promise)) {\n      return;\n    }\n\n    return promise.then(function () {\n      _this5.trigger({\n        type: 'autoplay-success',\n        autoplay: type\n      });\n    })[\"catch\"](function (e) {\n      _this5.trigger({\n        type: 'autoplay-failure',\n        autoplay: type\n      });\n    });\n  }\n  /**\n   * Update the internal source caches so that we return the correct source from\n   * `src()`, `currentSource()`, and `currentSources()`.\n   *\n   * > Note: `currentSources` will not be updated if the source that is passed in exists\n   *         in the current `currentSources` cache.\n   *\n   *\n   * @param {Tech~SourceObject} srcObj\n   *        A string or object source to update our caches to.\n   */\n  ;\n\n  _proto.updateSourceCaches_ = function updateSourceCaches_(srcObj) {\n    if (srcObj === void 0) {\n      srcObj = '';\n    }\n\n    var src = srcObj;\n    var type = '';\n\n    if (typeof src !== 'string') {\n      src = srcObj.src;\n      type = srcObj.type;\n    } // make sure all the caches are set to default values\n    // to prevent null checking\n\n\n    this.cache_.source = this.cache_.source || {};\n    this.cache_.sources = this.cache_.sources || []; // try to get the type of the src that was passed in\n\n    if (src && !type) {\n      type = findMimetype(this, src);\n    } // update `currentSource` cache always\n\n\n    this.cache_.source = mergeOptions({}, srcObj, {\n      src: src,\n      type: type\n    });\n    var matchingSources = this.cache_.sources.filter(function (s) {\n      return s.src && s.src === src;\n    });\n    var sourceElSources = [];\n    var sourceEls = this.$$('source');\n    var matchingSourceEls = [];\n\n    for (var i = 0; i < sourceEls.length; i++) {\n      var sourceObj = getAttributes(sourceEls[i]);\n      sourceElSources.push(sourceObj);\n\n      if (sourceObj.src && sourceObj.src === src) {\n        matchingSourceEls.push(sourceObj.src);\n      }\n    } // if we have matching source els but not matching sources\n    // the current source cache is not up to date\n\n\n    if (matchingSourceEls.length && !matchingSources.length) {\n      this.cache_.sources = sourceElSources; // if we don't have matching source or source els set the\n      // sources cache to the `currentSource` cache\n    } else if (!matchingSources.length) {\n      this.cache_.sources = [this.cache_.source];\n    } // update the tech `src` cache\n\n\n    this.cache_.src = src;\n  }\n  /**\n   * *EXPERIMENTAL* Fired when the source is set or changed on the {@link Tech}\n   * causing the media element to reload.\n   *\n   * It will fire for the initial source and each subsequent source.\n   * This event is a custom event from Video.js and is triggered by the {@link Tech}.\n   *\n   * The event object for this event contains a `src` property that will contain the source\n   * that was available when the event was triggered. This is generally only necessary if Video.js\n   * is switching techs while the source was being changed.\n   *\n   * It is also fired when `load` is called on the player (or media element)\n   * because the {@link https://html.spec.whatwg.org/multipage/media.html#dom-media-load|specification for `load`}\n   * says that the resource selection algorithm needs to be aborted and restarted.\n   * In this case, it is very likely that the `src` property will be set to the\n   * empty string `\"\"` to indicate we do not know what the source will be but\n   * that it is changing.\n   *\n   * *This event is currently still experimental and may change in minor releases.*\n   * __To use this, pass `enableSourceset` option to the player.__\n   *\n   * @event Player#sourceset\n   * @type {EventTarget~Event}\n   * @prop {string} src\n   *                The source url available when the `sourceset` was triggered.\n   *                It will be an empty string if we cannot know what the source is\n   *                but know that the source will change.\n   */\n\n  /**\n   * Retrigger the `sourceset` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#sourceset\n   * @listens Tech#sourceset\n   * @private\n   */\n  ;\n\n  _proto.handleTechSourceset_ = function handleTechSourceset_(event) {\n    var _this6 = this;\n\n    // only update the source cache when the source\n    // was not updated using the player api\n    if (!this.changingSrc_) {\n      var updateSourceCaches = function updateSourceCaches(src) {\n        return _this6.updateSourceCaches_(src);\n      };\n\n      var playerSrc = this.currentSource().src;\n      var eventSrc = event.src; // if we have a playerSrc that is not a blob, and a tech src that is a blob\n\n      if (playerSrc && !/^blob:/.test(playerSrc) && /^blob:/.test(eventSrc)) {\n        // if both the tech source and the player source were updated we assume\n        // something like @videojs/http-streaming did the sourceset and skip updating the source cache.\n        if (!this.lastSource_ || this.lastSource_.tech !== eventSrc && this.lastSource_.player !== playerSrc) {\n          updateSourceCaches = function updateSourceCaches() {};\n        }\n      } // update the source to the intial source right away\n      // in some cases this will be empty string\n\n\n      updateSourceCaches(eventSrc); // if the `sourceset` `src` was an empty string\n      // wait for a `loadstart` to update the cache to `currentSrc`.\n      // If a sourceset happens before a `loadstart`, we reset the state\n      // as this function will be called again.\n\n      if (!event.src) {\n        var updateCache = function updateCache(e) {\n          if (e.type !== 'sourceset') {\n            var techSrc = _this6.techGet('currentSrc');\n\n            _this6.lastSource_.tech = techSrc;\n\n            _this6.updateSourceCaches_(techSrc);\n          }\n\n          _this6.tech_.off(['sourceset', 'loadstart'], updateCache);\n        };\n\n        this.tech_.one(['sourceset', 'loadstart'], updateCache);\n      }\n    }\n\n    this.lastSource_ = {\n      player: this.currentSource().src,\n      tech: event.src\n    };\n    this.trigger({\n      src: event.src,\n      type: 'sourceset'\n    });\n  }\n  /**\n   * Add/remove the vjs-has-started class\n   *\n   * @fires Player#firstplay\n   *\n   * @param {boolean} request\n   *        - true: adds the class\n   *        - false: remove the class\n   *\n   * @return {boolean}\n   *         the boolean value of hasStarted_\n   */\n  ;\n\n  _proto.hasStarted = function hasStarted(request) {\n    if (request === undefined) {\n      // act as getter, if we have no request to change\n      return this.hasStarted_;\n    }\n\n    if (request === this.hasStarted_) {\n      return;\n    }\n\n    this.hasStarted_ = request;\n\n    if (this.hasStarted_) {\n      this.addClass('vjs-has-started');\n      this.trigger('firstplay');\n    } else {\n      this.removeClass('vjs-has-started');\n    }\n  }\n  /**\n   * Fired whenever the media begins or resumes playback\n   *\n   * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-play}\n   * @fires Player#play\n   * @listens Tech#play\n   * @private\n   */\n  ;\n\n  _proto.handleTechPlay_ = function handleTechPlay_() {\n    this.removeClass('vjs-ended');\n    this.removeClass('vjs-paused');\n    this.addClass('vjs-playing'); // hide the poster when the user hits play\n\n    this.hasStarted(true);\n    /**\n     * Triggered whenever an {@link Tech#play} event happens. Indicates that\n     * playback has started or resumed.\n     *\n     * @event Player#play\n     * @type {EventTarget~Event}\n     */\n\n    this.trigger('play');\n  }\n  /**\n   * Retrigger the `ratechange` event that was triggered by the {@link Tech}.\n   *\n   * If there were any events queued while the playback rate was zero, fire\n   * those events now.\n   *\n   * @private\n   * @method Player#handleTechRateChange_\n   * @fires Player#ratechange\n   * @listens Tech#ratechange\n   */\n  ;\n\n  _proto.handleTechRateChange_ = function handleTechRateChange_() {\n    if (this.tech_.playbackRate() > 0 && this.cache_.lastPlaybackRate === 0) {\n      this.queuedCallbacks_.forEach(function (queued) {\n        return queued.callback(queued.event);\n      });\n      this.queuedCallbacks_ = [];\n    }\n\n    this.cache_.lastPlaybackRate = this.tech_.playbackRate();\n    /**\n     * Fires when the playing speed of the audio/video is changed\n     *\n     * @event Player#ratechange\n     * @type {event}\n     */\n\n    this.trigger('ratechange');\n  }\n  /**\n   * Retrigger the `waiting` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#waiting\n   * @listens Tech#waiting\n   * @private\n   */\n  ;\n\n  _proto.handleTechWaiting_ = function handleTechWaiting_() {\n    var _this7 = this;\n\n    this.addClass('vjs-waiting');\n    /**\n     * A readyState change on the DOM element has caused playback to stop.\n     *\n     * @event Player#waiting\n     * @type {EventTarget~Event}\n     */\n\n    this.trigger('waiting'); // Browsers may emit a timeupdate event after a waiting event. In order to prevent\n    // premature removal of the waiting class, wait for the time to change.\n\n    var timeWhenWaiting = this.currentTime();\n\n    var timeUpdateListener = function timeUpdateListener() {\n      if (timeWhenWaiting !== _this7.currentTime()) {\n        _this7.removeClass('vjs-waiting');\n\n        _this7.off('timeupdate', timeUpdateListener);\n      }\n    };\n\n    this.on('timeupdate', timeUpdateListener);\n  }\n  /**\n   * Retrigger the `canplay` event that was triggered by the {@link Tech}.\n   * > Note: This is not consistent between browsers. See #1351\n   *\n   * @fires Player#canplay\n   * @listens Tech#canplay\n   * @private\n   */\n  ;\n\n  _proto.handleTechCanPlay_ = function handleTechCanPlay_() {\n    this.removeClass('vjs-waiting');\n    /**\n     * The media has a readyState of HAVE_FUTURE_DATA or greater.\n     *\n     * @event Player#canplay\n     * @type {EventTarget~Event}\n     */\n\n    this.trigger('canplay');\n  }\n  /**\n   * Retrigger the `canplaythrough` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#canplaythrough\n   * @listens Tech#canplaythrough\n   * @private\n   */\n  ;\n\n  _proto.handleTechCanPlayThrough_ = function handleTechCanPlayThrough_() {\n    this.removeClass('vjs-waiting');\n    /**\n     * The media has a readyState of HAVE_ENOUGH_DATA or greater. This means that the\n     * entire media file can be played without buffering.\n     *\n     * @event Player#canplaythrough\n     * @type {EventTarget~Event}\n     */\n\n    this.trigger('canplaythrough');\n  }\n  /**\n   * Retrigger the `playing` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#playing\n   * @listens Tech#playing\n   * @private\n   */\n  ;\n\n  _proto.handleTechPlaying_ = function handleTechPlaying_() {\n    this.removeClass('vjs-waiting');\n    /**\n     * The media is no longer blocked from playback, and has started playing.\n     *\n     * @event Player#playing\n     * @type {EventTarget~Event}\n     */\n\n    this.trigger('playing');\n  }\n  /**\n   * Retrigger the `seeking` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#seeking\n   * @listens Tech#seeking\n   * @private\n   */\n  ;\n\n  _proto.handleTechSeeking_ = function handleTechSeeking_() {\n    this.addClass('vjs-seeking');\n    /**\n     * Fired whenever the player is jumping to a new time\n     *\n     * @event Player#seeking\n     * @type {EventTarget~Event}\n     */\n\n    this.trigger('seeking');\n  }\n  /**\n   * Retrigger the `seeked` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#seeked\n   * @listens Tech#seeked\n   * @private\n   */\n  ;\n\n  _proto.handleTechSeeked_ = function handleTechSeeked_() {\n    this.removeClass('vjs-seeking');\n    this.removeClass('vjs-ended');\n    /**\n     * Fired when the player has finished jumping to a new time\n     *\n     * @event Player#seeked\n     * @type {EventTarget~Event}\n     */\n\n    this.trigger('seeked');\n  }\n  /**\n   * Retrigger the `firstplay` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#firstplay\n   * @listens Tech#firstplay\n   * @deprecated As of 6.0 firstplay event is deprecated.\n   *             As of 6.0 passing the `starttime` option to the player and the firstplay event are deprecated.\n   * @private\n   */\n  ;\n\n  _proto.handleTechFirstPlay_ = function handleTechFirstPlay_() {\n    // If the first starttime attribute is specified\n    // then we will start at the given offset in seconds\n    if (this.options_.starttime) {\n      log.warn('Passing the `starttime` option to the player will be deprecated in 6.0');\n      this.currentTime(this.options_.starttime);\n    }\n\n    this.addClass('vjs-has-started');\n    /**\n     * Fired the first time a video is played. Not part of the HLS spec, and this is\n     * probably not the best implementation yet, so use sparingly. If you don't have a\n     * reason to prevent playback, use `myPlayer.one('play');` instead.\n     *\n     * @event Player#firstplay\n     * @deprecated As of 6.0 firstplay event is deprecated.\n     * @type {EventTarget~Event}\n     */\n\n    this.trigger('firstplay');\n  }\n  /**\n   * Retrigger the `pause` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#pause\n   * @listens Tech#pause\n   * @private\n   */\n  ;\n\n  _proto.handleTechPause_ = function handleTechPause_() {\n    this.removeClass('vjs-playing');\n    this.addClass('vjs-paused');\n    /**\n     * Fired whenever the media has been paused\n     *\n     * @event Player#pause\n     * @type {EventTarget~Event}\n     */\n\n    this.trigger('pause');\n  }\n  /**\n   * Retrigger the `ended` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#ended\n   * @listens Tech#ended\n   * @private\n   */\n  ;\n\n  _proto.handleTechEnded_ = function handleTechEnded_() {\n    this.addClass('vjs-ended');\n\n    if (this.options_.loop) {\n      this.currentTime(0);\n      this.play();\n    } else if (!this.paused()) {\n      this.pause();\n    }\n    /**\n     * Fired when the end of the media resource is reached (currentTime == duration)\n     *\n     * @event Player#ended\n     * @type {EventTarget~Event}\n     */\n\n\n    this.trigger('ended');\n  }\n  /**\n   * Fired when the duration of the media resource is first known or changed\n   *\n   * @listens Tech#durationchange\n   * @private\n   */\n  ;\n\n  _proto.handleTechDurationChange_ = function handleTechDurationChange_() {\n    this.duration(this.techGet_('duration'));\n  }\n  /**\n   * Handle a click on the media element to play/pause\n   *\n   * @param {EventTarget~Event} event\n   *        the event that caused this function to trigger\n   *\n   * @listens Tech#mouseup\n   * @private\n   */\n  ;\n\n  _proto.handleTechClick_ = function handleTechClick_(event) {\n    if (!isSingleLeftClick(event)) {\n      return;\n    } // When controls are disabled a click should not toggle playback because\n    // the click is considered a control\n\n\n    if (!this.controls_) {\n      return;\n    }\n\n    if (this.paused()) {\n      silencePromise(this.play());\n    } else {\n      this.pause();\n    }\n  }\n  /**\n   * Handle a double-click on the media element to enter/exit fullscreen\n   *\n   * @param {EventTarget~Event} event\n   *        the event that caused this function to trigger\n   *\n   * @listens Tech#dblclick\n   * @private\n   */\n  ;\n\n  _proto.handleTechDoubleClick_ = function handleTechDoubleClick_(event) {\n    if (!this.controls_) {\n      return;\n    } // we do not want to toggle fullscreen state\n    // when double-clicking inside a control bar or a modal\n\n\n    var inAllowedEls = Array.prototype.some.call(this.$$('.vjs-control-bar, .vjs-modal-dialog'), function (el) {\n      return el.contains(event.target);\n    });\n\n    if (!inAllowedEls) {\n      /*\n       * options.userActions.doubleClick\n       *\n       * If `undefined` or `true`, double-click toggles fullscreen if controls are present\n       * Set to `false` to disable double-click handling\n       * Set to a function to substitute an external double-click handler\n       */\n      if (this.options_ === undefined || this.options_.userActions === undefined || this.options_.userActions.doubleClick === undefined || this.options_.userActions.doubleClick !== false) {\n        if (this.options_ !== undefined && this.options_.userActions !== undefined && typeof this.options_.userActions.doubleClick === 'function') {\n          this.options_.userActions.doubleClick.call(this, event);\n        } else if (this.isFullscreen()) {\n          this.exitFullscreen();\n        } else {\n          this.requestFullscreen();\n        }\n      }\n    }\n  }\n  /**\n   * Handle a tap on the media element. It will toggle the user\n   * activity state, which hides and shows the controls.\n   *\n   * @listens Tech#tap\n   * @private\n   */\n  ;\n\n  _proto.handleTechTap_ = function handleTechTap_() {\n    this.userActive(!this.userActive());\n  }\n  /**\n   * Handle touch to start\n   *\n   * @listens Tech#touchstart\n   * @private\n   */\n  ;\n\n  _proto.handleTechTouchStart_ = function handleTechTouchStart_() {\n    this.userWasActive = this.userActive();\n  }\n  /**\n   * Handle touch to move\n   *\n   * @listens Tech#touchmove\n   * @private\n   */\n  ;\n\n  _proto.handleTechTouchMove_ = function handleTechTouchMove_() {\n    if (this.userWasActive) {\n      this.reportUserActivity();\n    }\n  }\n  /**\n   * Handle touch to end\n   *\n   * @param {EventTarget~Event} event\n   *        the touchend event that triggered\n   *        this function\n   *\n   * @listens Tech#touchend\n   * @private\n   */\n  ;\n\n  _proto.handleTechTouchEnd_ = function handleTechTouchEnd_(event) {\n    // Stop the mouse events from also happening\n    event.preventDefault();\n  }\n  /**\n   * native click events on the SWF aren't triggered on IE11, Win8.1RT\n   * use stageclick events triggered from inside the SWF instead\n   *\n   * @private\n   * @listens stageclick\n   */\n  ;\n\n  _proto.handleStageClick_ = function handleStageClick_() {\n    this.reportUserActivity();\n  }\n  /**\n   * @private\n   */\n  ;\n\n  _proto.toggleFullscreenClass_ = function toggleFullscreenClass_() {\n    if (this.isFullscreen()) {\n      this.addClass('vjs-fullscreen');\n    } else {\n      this.removeClass('vjs-fullscreen');\n    }\n  }\n  /**\n   * when the document fschange event triggers it calls this\n   */\n  ;\n\n  _proto.documentFullscreenChange_ = function documentFullscreenChange_(e) {\n    var el = this.el();\n    var isFs = document[this.fsApi_.fullscreenElement] === el;\n\n    if (!isFs && el.matches) {\n      isFs = el.matches(':' + this.fsApi_.fullscreen);\n    } else if (!isFs && el.msMatchesSelector) {\n      isFs = el.msMatchesSelector(':' + this.fsApi_.fullscreen);\n    }\n\n    this.isFullscreen(isFs); // If cancelling fullscreen, remove event listener.\n\n    if (this.isFullscreen() === false) {\n      off(document, this.fsApi_.fullscreenchange, this.boundDocumentFullscreenChange_);\n    }\n\n    if (this.fsApi_.prefixed) {\n      /**\n       * @event Player#fullscreenchange\n       * @type {EventTarget~Event}\n       */\n      this.trigger('fullscreenchange');\n    }\n  }\n  /**\n   * Handle Tech Fullscreen Change\n   *\n   * @param {EventTarget~Event} event\n   *        the fullscreenchange event that triggered this function\n   *\n   * @param {Object} data\n   *        the data that was sent with the event\n   *\n   * @private\n   * @listens Tech#fullscreenchange\n   * @fires Player#fullscreenchange\n   */\n  ;\n\n  _proto.handleTechFullscreenChange_ = function handleTechFullscreenChange_(event, data) {\n    if (data) {\n      this.isFullscreen(data.isFullscreen);\n    }\n    /**\n     * Fired when going in and out of fullscreen.\n     *\n     * @event Player#fullscreenchange\n     * @type {EventTarget~Event}\n     */\n\n\n    this.trigger('fullscreenchange');\n  }\n  /**\n   * @private\n   */\n  ;\n\n  _proto.togglePictureInPictureClass_ = function togglePictureInPictureClass_() {\n    if (this.isInPictureInPicture()) {\n      this.addClass('vjs-picture-in-picture');\n    } else {\n      this.removeClass('vjs-picture-in-picture');\n    }\n  }\n  /**\n   * Handle Tech Enter Picture-in-Picture.\n   *\n   * @param {EventTarget~Event} event\n   *        the enterpictureinpicture event that triggered this function\n   *\n   * @private\n   * @listens Tech#enterpictureinpicture\n   */\n  ;\n\n  _proto.handleTechEnterPictureInPicture_ = function handleTechEnterPictureInPicture_(event) {\n    this.isInPictureInPicture(true);\n  }\n  /**\n   * Handle Tech Leave Picture-in-Picture.\n   *\n   * @param {EventTarget~Event} event\n   *        the leavepictureinpicture event that triggered this function\n   *\n   * @private\n   * @listens Tech#leavepictureinpicture\n   */\n  ;\n\n  _proto.handleTechLeavePictureInPicture_ = function handleTechLeavePictureInPicture_(event) {\n    this.isInPictureInPicture(false);\n  }\n  /**\n   * Fires when an error occurred during the loading of an audio/video.\n   *\n   * @private\n   * @listens Tech#error\n   */\n  ;\n\n  _proto.handleTechError_ = function handleTechError_() {\n    var error = this.tech_.error();\n    this.error(error);\n  }\n  /**\n   * Retrigger the `textdata` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#textdata\n   * @listens Tech#textdata\n   * @private\n   */\n  ;\n\n  _proto.handleTechTextData_ = function handleTechTextData_() {\n    var data = null;\n\n    if (arguments.length > 1) {\n      data = arguments[1];\n    }\n    /**\n     * Fires when we get a textdata event from tech\n     *\n     * @event Player#textdata\n     * @type {EventTarget~Event}\n     */\n\n\n    this.trigger('textdata', data);\n  }\n  /**\n   * Get object for cached values.\n   *\n   * @return {Object}\n   *         get the current object cache\n   */\n  ;\n\n  _proto.getCache = function getCache() {\n    return this.cache_;\n  }\n  /**\n   * Resets the internal cache object.\n   *\n   * Using this function outside the player constructor or reset method may\n   * have unintended side-effects.\n   *\n   * @private\n   */\n  ;\n\n  _proto.resetCache_ = function resetCache_() {\n    this.cache_ = {\n      // Right now, the currentTime is not _really_ cached because it is always\n      // retrieved from the tech (see: currentTime). However, for completeness,\n      // we set it to zero here to ensure that if we do start actually caching\n      // it, we reset it along with everything else.\n      currentTime: 0,\n      inactivityTimeout: this.options_.inactivityTimeout,\n      duration: NaN,\n      lastVolume: 1,\n      lastPlaybackRate: this.defaultPlaybackRate(),\n      media: null,\n      src: '',\n      source: {},\n      sources: [],\n      volume: 1\n    };\n  }\n  /**\n   * Pass values to the playback tech\n   *\n   * @param {string} [method]\n   *        the method to call\n   *\n   * @param {Object} arg\n   *        the argument to pass\n   *\n   * @private\n   */\n  ;\n\n  _proto.techCall_ = function techCall_(method, arg) {\n    // If it's not ready yet, call method when it is\n    this.ready(function () {\n      if (method in allowedSetters) {\n        return set(this.middleware_, this.tech_, method, arg);\n      } else if (method in allowedMediators) {\n        return mediate(this.middleware_, this.tech_, method, arg);\n      }\n\n      try {\n        if (this.tech_) {\n          this.tech_[method](arg);\n        }\n      } catch (e) {\n        log(e);\n        throw e;\n      }\n    }, true);\n  }\n  /**\n   * Get calls can't wait for the tech, and sometimes don't need to.\n   *\n   * @param {string} method\n   *        Tech method\n   *\n   * @return {Function|undefined}\n   *         the method or undefined\n   *\n   * @private\n   */\n  ;\n\n  _proto.techGet_ = function techGet_(method) {\n    if (!this.tech_ || !this.tech_.isReady_) {\n      return;\n    }\n\n    if (method in allowedGetters) {\n      return get(this.middleware_, this.tech_, method);\n    } else if (method in allowedMediators) {\n      return mediate(this.middleware_, this.tech_, method);\n    } // Flash likes to die and reload when you hide or reposition it.\n    // In these cases the object methods go away and we get errors.\n    // When that happens we'll catch the errors and inform tech that it's not ready any more.\n\n\n    try {\n      return this.tech_[method]();\n    } catch (e) {\n      // When building additional tech libs, an expected method may not be defined yet\n      if (this.tech_[method] === undefined) {\n        log(\"Video.js: \" + method + \" method not defined for \" + this.techName_ + \" playback technology.\", e);\n        throw e;\n      } // When a method isn't available on the object it throws a TypeError\n\n\n      if (e.name === 'TypeError') {\n        log(\"Video.js: \" + method + \" unavailable on \" + this.techName_ + \" playback technology element.\", e);\n        this.tech_.isReady_ = false;\n        throw e;\n      } // If error unknown, just log and throw\n\n\n      log(e);\n      throw e;\n    }\n  }\n  /**\n   * Attempt to begin playback at the first opportunity.\n   *\n   * @return {Promise|undefined}\n   *         Returns a promise if the browser supports Promises (or one\n   *         was passed in as an option). This promise will be resolved on\n   *         the return value of play. If this is undefined it will fulfill the\n   *         promise chain otherwise the promise chain will be fulfilled when\n   *         the promise from play is fulfilled.\n   */\n  ;\n\n  _proto.play = function play() {\n    var _this8 = this;\n\n    var PromiseClass = this.options_.Promise || window$1.Promise;\n\n    if (PromiseClass) {\n      return new PromiseClass(function (resolve) {\n        _this8.play_(resolve);\n      });\n    }\n\n    return this.play_();\n  }\n  /**\n   * The actual logic for play, takes a callback that will be resolved on the\n   * return value of play. This allows us to resolve to the play promise if there\n   * is one on modern browsers.\n   *\n   * @private\n   * @param {Function} [callback]\n   *        The callback that should be called when the techs play is actually called\n   */\n  ;\n\n  _proto.play_ = function play_(callback) {\n    var _this9 = this;\n\n    if (callback === void 0) {\n      callback = silencePromise;\n    }\n\n    this.playCallbacks_.push(callback);\n    var isSrcReady = Boolean(!this.changingSrc_ && (this.src() || this.currentSrc())); // treat calls to play_ somewhat like the `one` event function\n\n    if (this.waitToPlay_) {\n      this.off(['ready', 'loadstart'], this.waitToPlay_);\n      this.waitToPlay_ = null;\n    } // if the player/tech is not ready or the src itself is not ready\n    // queue up a call to play on `ready` or `loadstart`\n\n\n    if (!this.isReady_ || !isSrcReady) {\n      this.waitToPlay_ = function (e) {\n        _this9.play_();\n      };\n\n      this.one(['ready', 'loadstart'], this.waitToPlay_); // if we are in Safari, there is a high chance that loadstart will trigger after the gesture timeperiod\n      // in that case, we need to prime the video element by calling load so it'll be ready in time\n\n      if (!isSrcReady && (IS_ANY_SAFARI || IS_IOS)) {\n        this.load();\n      }\n\n      return;\n    } // If the player/tech is ready and we have a source, we can attempt playback.\n\n\n    var val = this.techGet_('play'); // play was terminated if the returned value is null\n\n    if (val === null) {\n      this.runPlayTerminatedQueue_();\n    } else {\n      this.runPlayCallbacks_(val);\n    }\n  }\n  /**\n   * These functions will be run when if play is terminated. If play\n   * runPlayCallbacks_ is run these function will not be run. This allows us\n   * to differenciate between a terminated play and an actual call to play.\n   */\n  ;\n\n  _proto.runPlayTerminatedQueue_ = function runPlayTerminatedQueue_() {\n    var queue = this.playTerminatedQueue_.slice(0);\n    this.playTerminatedQueue_ = [];\n    queue.forEach(function (q) {\n      q();\n    });\n  }\n  /**\n   * When a callback to play is delayed we have to run these\n   * callbacks when play is actually called on the tech. This function\n   * runs the callbacks that were delayed and accepts the return value\n   * from the tech.\n   *\n   * @param {undefined|Promise} val\n   *        The return value from the tech.\n   */\n  ;\n\n  _proto.runPlayCallbacks_ = function runPlayCallbacks_(val) {\n    var callbacks = this.playCallbacks_.slice(0);\n    this.playCallbacks_ = []; // clear play terminatedQueue since we finished a real play\n\n    this.playTerminatedQueue_ = [];\n    callbacks.forEach(function (cb) {\n      cb(val);\n    });\n  }\n  /**\n   * Pause the video playback\n   *\n   * @return {Player}\n   *         A reference to the player object this function was called on\n   */\n  ;\n\n  _proto.pause = function pause() {\n    this.techCall_('pause');\n  }\n  /**\n   * Check if the player is paused or has yet to play\n   *\n   * @return {boolean}\n   *         - false: if the media is currently playing\n   *         - true: if media is not currently playing\n   */\n  ;\n\n  _proto.paused = function paused() {\n    // The initial state of paused should be true (in Safari it's actually false)\n    return this.techGet_('paused') === false ? false : true;\n  }\n  /**\n   * Get a TimeRange object representing the current ranges of time that the user\n   * has played.\n   *\n   * @return {TimeRange}\n   *         A time range object that represents all the increments of time that have\n   *         been played.\n   */\n  ;\n\n  _proto.played = function played() {\n    return this.techGet_('played') || createTimeRanges(0, 0);\n  }\n  /**\n   * Returns whether or not the user is \"scrubbing\". Scrubbing is\n   * when the user has clicked the progress bar handle and is\n   * dragging it along the progress bar.\n   *\n   * @param {boolean} [isScrubbing]\n   *        whether the user is or is not scrubbing\n   *\n   * @return {boolean}\n   *         The value of scrubbing when getting\n   */\n  ;\n\n  _proto.scrubbing = function scrubbing(isScrubbing) {\n    if (typeof isScrubbing === 'undefined') {\n      return this.scrubbing_;\n    }\n\n    this.scrubbing_ = !!isScrubbing;\n\n    if (isScrubbing) {\n      this.addClass('vjs-scrubbing');\n    } else {\n      this.removeClass('vjs-scrubbing');\n    }\n  }\n  /**\n   * Get or set the current time (in seconds)\n   *\n   * @param {number|string} [seconds]\n   *        The time to seek to in seconds\n   *\n   * @return {number}\n   *         - the current time in seconds when getting\n   */\n  ;\n\n  _proto.currentTime = function currentTime(seconds) {\n    if (typeof seconds !== 'undefined') {\n      if (seconds < 0) {\n        seconds = 0;\n      }\n\n      this.techCall_('setCurrentTime', seconds);\n      return;\n    } // cache last currentTime and return. default to 0 seconds\n    //\n    // Caching the currentTime is meant to prevent a massive amount of reads on the tech's\n    // currentTime when scrubbing, but may not provide much performance benefit afterall.\n    // Should be tested. Also something has to read the actual current time or the cache will\n    // never get updated.\n\n\n    this.cache_.currentTime = this.techGet_('currentTime') || 0;\n    return this.cache_.currentTime;\n  }\n  /**\n   * Normally gets the length in time of the video in seconds;\n   * in all but the rarest use cases an argument will NOT be passed to the method\n   *\n   * > **NOTE**: The video must have started loading before the duration can be\n   * known, and in the case of Flash, may not be known until the video starts\n   * playing.\n   *\n   * @fires Player#durationchange\n   *\n   * @param {number} [seconds]\n   *        The duration of the video to set in seconds\n   *\n   * @return {number}\n   *         - The duration of the video in seconds when getting\n   */\n  ;\n\n  _proto.duration = function duration(seconds) {\n    if (seconds === undefined) {\n      // return NaN if the duration is not known\n      return this.cache_.duration !== undefined ? this.cache_.duration : NaN;\n    }\n\n    seconds = parseFloat(seconds); // Standardize on Infinity for signaling video is live\n\n    if (seconds < 0) {\n      seconds = Infinity;\n    }\n\n    if (seconds !== this.cache_.duration) {\n      // Cache the last set value for optimized scrubbing (esp. Flash)\n      this.cache_.duration = seconds;\n\n      if (seconds === Infinity) {\n        this.addClass('vjs-live');\n\n        if (this.options_.liveui && this.player_.liveTracker) {\n          this.addClass('vjs-liveui');\n        }\n      } else {\n        this.removeClass('vjs-live');\n        this.removeClass('vjs-liveui');\n      }\n\n      if (!isNaN(seconds)) {\n        // Do not fire durationchange unless the duration value is known.\n        // @see [Spec]{@link https://www.w3.org/TR/2011/WD-html5-20110113/video.html#media-element-load-algorithm}\n\n        /**\n         * @event Player#durationchange\n         * @type {EventTarget~Event}\n         */\n        this.trigger('durationchange');\n      }\n    }\n  }\n  /**\n   * Calculates how much time is left in the video. Not part\n   * of the native video API.\n   *\n   * @return {number}\n   *         The time remaining in seconds\n   */\n  ;\n\n  _proto.remainingTime = function remainingTime() {\n    return this.duration() - this.currentTime();\n  }\n  /**\n   * A remaining time function that is intented to be used when\n   * the time is to be displayed directly to the user.\n   *\n   * @return {number}\n   *         The rounded time remaining in seconds\n   */\n  ;\n\n  _proto.remainingTimeDisplay = function remainingTimeDisplay() {\n    return Math.floor(this.duration()) - Math.floor(this.currentTime());\n  } //\n  // Kind of like an array of portions of the video that have been downloaded.\n\n  /**\n   * Get a TimeRange object with an array of the times of the video\n   * that have been downloaded. If you just want the percent of the\n   * video that's been downloaded, use bufferedPercent.\n   *\n   * @see [Buffered Spec]{@link http://dev.w3.org/html5/spec/video.html#dom-media-buffered}\n   *\n   * @return {TimeRange}\n   *         A mock TimeRange object (following HTML spec)\n   */\n  ;\n\n  _proto.buffered = function buffered() {\n    var buffered = this.techGet_('buffered');\n\n    if (!buffered || !buffered.length) {\n      buffered = createTimeRanges(0, 0);\n    }\n\n    return buffered;\n  }\n  /**\n   * Get the percent (as a decimal) of the video that's been downloaded.\n   * This method is not a part of the native HTML video API.\n   *\n   * @return {number}\n   *         A decimal between 0 and 1 representing the percent\n   *         that is buffered 0 being 0% and 1 being 100%\n   */\n  ;\n\n  _proto.bufferedPercent = function bufferedPercent$1() {\n    return bufferedPercent(this.buffered(), this.duration());\n  }\n  /**\n   * Get the ending time of the last buffered time range\n   * This is used in the progress bar to encapsulate all time ranges.\n   *\n   * @return {number}\n   *         The end of the last buffered time range\n   */\n  ;\n\n  _proto.bufferedEnd = function bufferedEnd() {\n    var buffered = this.buffered();\n    var duration = this.duration();\n    var end = buffered.end(buffered.length - 1);\n\n    if (end > duration) {\n      end = duration;\n    }\n\n    return end;\n  }\n  /**\n   * Get or set the current volume of the media\n   *\n   * @param  {number} [percentAsDecimal]\n   *         The new volume as a decimal percent:\n   *         - 0 is muted/0%/off\n   *         - 1.0 is 100%/full\n   *         - 0.5 is half volume or 50%\n   *\n   * @return {number}\n   *         The current volume as a percent when getting\n   */\n  ;\n\n  _proto.volume = function volume(percentAsDecimal) {\n    var vol;\n\n    if (percentAsDecimal !== undefined) {\n      // Force value to between 0 and 1\n      vol = Math.max(0, Math.min(1, parseFloat(percentAsDecimal)));\n      this.cache_.volume = vol;\n      this.techCall_('setVolume', vol);\n\n      if (vol > 0) {\n        this.lastVolume_(vol);\n      }\n\n      return;\n    } // Default to 1 when returning current volume.\n\n\n    vol = parseFloat(this.techGet_('volume'));\n    return isNaN(vol) ? 1 : vol;\n  }\n  /**\n   * Get the current muted state, or turn mute on or off\n   *\n   * @param {boolean} [muted]\n   *        - true to mute\n   *        - false to unmute\n   *\n   * @return {boolean}\n   *         - true if mute is on and getting\n   *         - false if mute is off and getting\n   */\n  ;\n\n  _proto.muted = function muted(_muted) {\n    if (_muted !== undefined) {\n      this.techCall_('setMuted', _muted);\n      return;\n    }\n\n    return this.techGet_('muted') || false;\n  }\n  /**\n   * Get the current defaultMuted state, or turn defaultMuted on or off. defaultMuted\n   * indicates the state of muted on initial playback.\n   *\n   * ```js\n   *   var myPlayer = videojs('some-player-id');\n   *\n   *   myPlayer.src(\"http://www.example.com/path/to/video.mp4\");\n   *\n   *   // get, should be false\n   *   console.log(myPlayer.defaultMuted());\n   *   // set to true\n   *   myPlayer.defaultMuted(true);\n   *   // get should be true\n   *   console.log(myPlayer.defaultMuted());\n   * ```\n   *\n   * @param {boolean} [defaultMuted]\n   *        - true to mute\n   *        - false to unmute\n   *\n   * @return {boolean|Player}\n   *         - true if defaultMuted is on and getting\n   *         - false if defaultMuted is off and getting\n   *         - A reference to the current player when setting\n   */\n  ;\n\n  _proto.defaultMuted = function defaultMuted(_defaultMuted) {\n    if (_defaultMuted !== undefined) {\n      return this.techCall_('setDefaultMuted', _defaultMuted);\n    }\n\n    return this.techGet_('defaultMuted') || false;\n  }\n  /**\n   * Get the last volume, or set it\n   *\n   * @param  {number} [percentAsDecimal]\n   *         The new last volume as a decimal percent:\n   *         - 0 is muted/0%/off\n   *         - 1.0 is 100%/full\n   *         - 0.5 is half volume or 50%\n   *\n   * @return {number}\n   *         the current value of lastVolume as a percent when getting\n   *\n   * @private\n   */\n  ;\n\n  _proto.lastVolume_ = function lastVolume_(percentAsDecimal) {\n    if (percentAsDecimal !== undefined && percentAsDecimal !== 0) {\n      this.cache_.lastVolume = percentAsDecimal;\n      return;\n    }\n\n    return this.cache_.lastVolume;\n  }\n  /**\n   * Check if current tech can support native fullscreen\n   * (e.g. with built in controls like iOS, so not our flash swf)\n   *\n   * @return {boolean}\n   *         if native fullscreen is supported\n   */\n  ;\n\n  _proto.supportsFullScreen = function supportsFullScreen() {\n    return this.techGet_('supportsFullScreen') || false;\n  }\n  /**\n   * Check if the player is in fullscreen mode or tell the player that it\n   * is or is not in fullscreen mode.\n   *\n   * > NOTE: As of the latest HTML5 spec, isFullscreen is no longer an official\n   * property and instead document.fullscreenElement is used. But isFullscreen is\n   * still a valuable property for internal player workings.\n   *\n   * @param  {boolean} [isFS]\n   *         Set the players current fullscreen state\n   *\n   * @return {boolean}\n   *         - true if fullscreen is on and getting\n   *         - false if fullscreen is off and getting\n   */\n  ;\n\n  _proto.isFullscreen = function isFullscreen(isFS) {\n    if (isFS !== undefined) {\n      this.isFullscreen_ = !!isFS;\n      this.toggleFullscreenClass_();\n      return;\n    }\n\n    return !!this.isFullscreen_;\n  }\n  /**\n   * Increase the size of the video to full screen\n   * In some browsers, full screen is not supported natively, so it enters\n   * \"full window mode\", where the video fills the browser window.\n   * In browsers and devices that support native full screen, sometimes the\n   * browser's default controls will be shown, and not the Video.js custom skin.\n   * This includes most mobile devices (iOS, Android) and older versions of\n   * Safari.\n   *\n   * @param  {Object} [fullscreenOptions]\n   *         Override the player fullscreen options\n   *\n   * @fires Player#fullscreenchange\n   */\n  ;\n\n  _proto.requestFullscreen = function requestFullscreen(fullscreenOptions) {\n    var fsOptions;\n    this.isFullscreen(true);\n\n    if (this.fsApi_.requestFullscreen) {\n      // the browser supports going fullscreen at the element level so we can\n      // take the controls fullscreen as well as the video\n      // Trigger fullscreenchange event after change\n      // We have to specifically add this each time, and remove\n      // when canceling fullscreen. Otherwise if there's multiple\n      // players on a page, they would all be reacting to the same fullscreen\n      // events\n      on(document, this.fsApi_.fullscreenchange, this.boundDocumentFullscreenChange_); // only pass FullscreenOptions to requestFullscreen if it isn't prefixed\n\n      if (!this.fsApi_.prefixed) {\n        fsOptions = this.options_.fullscreen && this.options_.fullscreen.options || {};\n\n        if (fullscreenOptions !== undefined) {\n          fsOptions = fullscreenOptions;\n        }\n      }\n\n      silencePromise(this.el_[this.fsApi_.requestFullscreen](fsOptions));\n    } else if (this.tech_.supportsFullScreen()) {\n      // we can't take the video.js controls fullscreen but we can go fullscreen\n      // with native controls\n      this.techCall_('enterFullScreen');\n    } else {\n      // fullscreen isn't supported so we'll just stretch the video element to\n      // fill the viewport\n      this.enterFullWindow();\n      /**\n       * @event Player#fullscreenchange\n       * @type {EventTarget~Event}\n       */\n\n      this.trigger('fullscreenchange');\n    }\n  }\n  /**\n   * Return the video to its normal size after having been in full screen mode\n   *\n   * @fires Player#fullscreenchange\n   */\n  ;\n\n  _proto.exitFullscreen = function exitFullscreen() {\n    this.isFullscreen(false); // Check for browser element fullscreen support\n\n    if (this.fsApi_.requestFullscreen) {\n      silencePromise(document[this.fsApi_.exitFullscreen]());\n    } else if (this.tech_.supportsFullScreen()) {\n      this.techCall_('exitFullScreen');\n    } else {\n      this.exitFullWindow();\n      /**\n       * @event Player#fullscreenchange\n       * @type {EventTarget~Event}\n       */\n\n      this.trigger('fullscreenchange');\n    }\n  }\n  /**\n   * When fullscreen isn't supported we can stretch the\n   * video container to as wide as the browser will let us.\n   *\n   * @fires Player#enterFullWindow\n   */\n  ;\n\n  _proto.enterFullWindow = function enterFullWindow() {\n    this.isFullWindow = true; // Storing original doc overflow value to return to when fullscreen is off\n\n    this.docOrigOverflow = document.documentElement.style.overflow; // Add listener for esc key to exit fullscreen\n\n    on(document, 'keydown', this.boundFullWindowOnEscKey_); // Hide any scroll bars\n\n    document.documentElement.style.overflow = 'hidden'; // Apply fullscreen styles\n\n    addClass(document.body, 'vjs-full-window');\n    /**\n     * @event Player#enterFullWindow\n     * @type {EventTarget~Event}\n     */\n\n    this.trigger('enterFullWindow');\n  }\n  /**\n   * Check for call to either exit full window or\n   * full screen on ESC key\n   *\n   * @param {string} event\n   *        Event to check for key press\n   */\n  ;\n\n  _proto.fullWindowOnEscKey = function fullWindowOnEscKey(event) {\n    if (keycode.isEventKey(event, 'Esc')) {\n      if (this.isFullscreen() === true) {\n        this.exitFullscreen();\n      } else {\n        this.exitFullWindow();\n      }\n    }\n  }\n  /**\n   * Exit full window\n   *\n   * @fires Player#exitFullWindow\n   */\n  ;\n\n  _proto.exitFullWindow = function exitFullWindow() {\n    this.isFullWindow = false;\n    off(document, 'keydown', this.boundFullWindowOnEscKey_); // Unhide scroll bars.\n\n    document.documentElement.style.overflow = this.docOrigOverflow; // Remove fullscreen styles\n\n    removeClass(document.body, 'vjs-full-window'); // Resize the box, controller, and poster to original sizes\n    // this.positionAll();\n\n    /**\n     * @event Player#exitFullWindow\n     * @type {EventTarget~Event}\n     */\n\n    this.trigger('exitFullWindow');\n  }\n  /**\n   * Check if the player is in Picture-in-Picture mode or tell the player that it\n   * is or is not in Picture-in-Picture mode.\n   *\n   * @param  {boolean} [isPiP]\n   *         Set the players current Picture-in-Picture state\n   *\n   * @return {boolean}\n   *         - true if Picture-in-Picture is on and getting\n   *         - false if Picture-in-Picture is off and getting\n   */\n  ;\n\n  _proto.isInPictureInPicture = function isInPictureInPicture(isPiP) {\n    if (isPiP !== undefined) {\n      this.isInPictureInPicture_ = !!isPiP;\n      this.togglePictureInPictureClass_();\n      return;\n    }\n\n    return !!this.isInPictureInPicture_;\n  }\n  /**\n   * Create a floating video window always on top of other windows so that users may\n   * continue consuming media while they interact with other content sites, or\n   * applications on their device.\n   *\n   * @see [Spec]{@link https://wicg.github.io/picture-in-picture}\n   *\n   * @fires Player#enterpictureinpicture\n   *\n   * @return {Promise}\n   *         A promise with a Picture-in-Picture window.\n   */\n  ;\n\n  _proto.requestPictureInPicture = function requestPictureInPicture() {\n    if ('pictureInPictureEnabled' in document) {\n      /**\n       * This event fires when the player enters picture in picture mode\n       *\n       * @event Player#enterpictureinpicture\n       * @type {EventTarget~Event}\n       */\n      return this.techGet_('requestPictureInPicture');\n    }\n  }\n  /**\n   * Exit Picture-in-Picture mode.\n   *\n   * @see [Spec]{@link https://wicg.github.io/picture-in-picture}\n   *\n   * @fires Player#leavepictureinpicture\n   *\n   * @return {Promise}\n   *         A promise.\n   */\n  ;\n\n  _proto.exitPictureInPicture = function exitPictureInPicture() {\n    if ('pictureInPictureEnabled' in document) {\n      /**\n       * This event fires when the player leaves picture in picture mode\n       *\n       * @event Player#leavepictureinpicture\n       * @type {EventTarget~Event}\n       */\n      return document.exitPictureInPicture();\n    }\n  }\n  /**\n   * Called when this Player has focus and a key gets pressed down, or when\n   * any Component of this player receives a key press that it doesn't handle.\n   * This allows player-wide hotkeys (either as defined below, or optionally\n   * by an external function).\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown` event that caused this function to be called.\n   *\n   * @listens keydown\n   */\n  ;\n\n  _proto.handleKeyDown = function handleKeyDown(event) {\n    var userActions = this.options_.userActions; // Bail out if hotkeys are not configured.\n\n    if (!userActions || !userActions.hotkeys) {\n      return;\n    } // Function that determines whether or not to exclude an element from\n    // hotkeys handling.\n\n\n    var excludeElement = function excludeElement(el) {\n      var tagName = el.tagName.toLowerCase(); // These tags will be excluded entirely.\n\n      var excludedTags = ['textarea']; // Inputs matching these types will still trigger hotkey handling as\n      // they are not text inputs.\n\n      var allowedInputTypes = ['button', 'checkbox', 'hidden', 'radio', 'reset', 'submit'];\n\n      if (tagName === 'input') {\n        return allowedInputTypes.indexOf(el.type) === -1;\n      }\n\n      return excludedTags.indexOf(tagName) !== -1;\n    }; // Bail out if the user is focused on an interactive form element.\n\n\n    if (excludeElement(this.el_.ownerDocument.activeElement)) {\n      return;\n    }\n\n    if (typeof userActions.hotkeys === 'function') {\n      userActions.hotkeys.call(this, event);\n    } else {\n      this.handleHotkeys(event);\n    }\n  }\n  /**\n   * Called when this Player receives a hotkey keydown event.\n   * Supported player-wide hotkeys are:\n   *\n   *   f          - toggle fullscreen\n   *   m          - toggle mute\n   *   k or Space - toggle play/pause\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown` event that caused this function to be called.\n   */\n  ;\n\n  _proto.handleHotkeys = function handleHotkeys(event) {\n    var hotkeys = this.options_.userActions ? this.options_.userActions.hotkeys : {}; // set fullscreenKey, muteKey, playPauseKey from `hotkeys`, use defaults if not set\n\n    var _hotkeys$fullscreenKe = hotkeys.fullscreenKey,\n        fullscreenKey = _hotkeys$fullscreenKe === void 0 ? function (keydownEvent) {\n      return keycode.isEventKey(keydownEvent, 'f');\n    } : _hotkeys$fullscreenKe,\n        _hotkeys$muteKey = hotkeys.muteKey,\n        muteKey = _hotkeys$muteKey === void 0 ? function (keydownEvent) {\n      return keycode.isEventKey(keydownEvent, 'm');\n    } : _hotkeys$muteKey,\n        _hotkeys$playPauseKey = hotkeys.playPauseKey,\n        playPauseKey = _hotkeys$playPauseKey === void 0 ? function (keydownEvent) {\n      return keycode.isEventKey(keydownEvent, 'k') || keycode.isEventKey(keydownEvent, 'Space');\n    } : _hotkeys$playPauseKey;\n\n    if (fullscreenKey.call(this, event)) {\n      event.preventDefault();\n      event.stopPropagation();\n      var FSToggle = Component.getComponent('FullscreenToggle');\n\n      if (document[this.fsApi_.fullscreenEnabled] !== false) {\n        FSToggle.prototype.handleClick.call(this, event);\n      }\n    } else if (muteKey.call(this, event)) {\n      event.preventDefault();\n      event.stopPropagation();\n      var MuteToggle = Component.getComponent('MuteToggle');\n      MuteToggle.prototype.handleClick.call(this, event);\n    } else if (playPauseKey.call(this, event)) {\n      event.preventDefault();\n      event.stopPropagation();\n      var PlayToggle = Component.getComponent('PlayToggle');\n      PlayToggle.prototype.handleClick.call(this, event);\n    }\n  }\n  /**\n   * Check whether the player can play a given mimetype\n   *\n   * @see https://www.w3.org/TR/2011/WD-html5-20110113/video.html#dom-navigator-canplaytype\n   *\n   * @param {string} type\n   *        The mimetype to check\n   *\n   * @return {string}\n   *         'probably', 'maybe', or '' (empty string)\n   */\n  ;\n\n  _proto.canPlayType = function canPlayType(type) {\n    var can; // Loop through each playback technology in the options order\n\n    for (var i = 0, j = this.options_.techOrder; i < j.length; i++) {\n      var techName = j[i];\n      var tech = Tech.getTech(techName); // Support old behavior of techs being registered as components.\n      // Remove once that deprecated behavior is removed.\n\n      if (!tech) {\n        tech = Component.getComponent(techName);\n      } // Check if the current tech is defined before continuing\n\n\n      if (!tech) {\n        log.error(\"The \\\"\" + techName + \"\\\" tech is undefined. Skipped browser support check for that tech.\");\n        continue;\n      } // Check if the browser supports this technology\n\n\n      if (tech.isSupported()) {\n        can = tech.canPlayType(type);\n\n        if (can) {\n          return can;\n        }\n      }\n    }\n\n    return '';\n  }\n  /**\n   * Select source based on tech-order or source-order\n   * Uses source-order selection if `options.sourceOrder` is truthy. Otherwise,\n   * defaults to tech-order selection\n   *\n   * @param {Array} sources\n   *        The sources for a media asset\n   *\n   * @return {Object|boolean}\n   *         Object of source and tech order or false\n   */\n  ;\n\n  _proto.selectSource = function selectSource(sources) {\n    var _this10 = this;\n\n    // Get only the techs specified in `techOrder` that exist and are supported by the\n    // current platform\n    var techs = this.options_.techOrder.map(function (techName) {\n      return [techName, Tech.getTech(techName)];\n    }).filter(function (_ref) {\n      var techName = _ref[0],\n          tech = _ref[1];\n\n      // Check if the current tech is defined before continuing\n      if (tech) {\n        // Check if the browser supports this technology\n        return tech.isSupported();\n      }\n\n      log.error(\"The \\\"\" + techName + \"\\\" tech is undefined. Skipped browser support check for that tech.\");\n      return false;\n    }); // Iterate over each `innerArray` element once per `outerArray` element and execute\n    // `tester` with both. If `tester` returns a non-falsy value, exit early and return\n    // that value.\n\n    var findFirstPassingTechSourcePair = function findFirstPassingTechSourcePair(outerArray, innerArray, tester) {\n      var found;\n      outerArray.some(function (outerChoice) {\n        return innerArray.some(function (innerChoice) {\n          found = tester(outerChoice, innerChoice);\n\n          if (found) {\n            return true;\n          }\n        });\n      });\n      return found;\n    };\n\n    var foundSourceAndTech;\n\n    var flip = function flip(fn) {\n      return function (a, b) {\n        return fn(b, a);\n      };\n    };\n\n    var finder = function finder(_ref2, source) {\n      var techName = _ref2[0],\n          tech = _ref2[1];\n\n      if (tech.canPlaySource(source, _this10.options_[techName.toLowerCase()])) {\n        return {\n          source: source,\n          tech: techName\n        };\n      }\n    }; // Depending on the truthiness of `options.sourceOrder`, we swap the order of techs and sources\n    // to select from them based on their priority.\n\n\n    if (this.options_.sourceOrder) {\n      // Source-first ordering\n      foundSourceAndTech = findFirstPassingTechSourcePair(sources, techs, flip(finder));\n    } else {\n      // Tech-first ordering\n      foundSourceAndTech = findFirstPassingTechSourcePair(techs, sources, finder);\n    }\n\n    return foundSourceAndTech || false;\n  }\n  /**\n   * Get or set the video source.\n   *\n   * @param {Tech~SourceObject|Tech~SourceObject[]|string} [source]\n   *        A SourceObject, an array of SourceObjects, or a string referencing\n   *        a URL to a media source. It is _highly recommended_ that an object\n   *        or array of objects is used here, so that source selection\n   *        algorithms can take the `type` into account.\n   *\n   *        If not provided, this method acts as a getter.\n   *\n   * @return {string|undefined}\n   *         If the `source` argument is missing, returns the current source\n   *         URL. Otherwise, returns nothing/undefined.\n   */\n  ;\n\n  _proto.src = function src(source) {\n    var _this11 = this;\n\n    // getter usage\n    if (typeof source === 'undefined') {\n      return this.cache_.src || '';\n    } // filter out invalid sources and turn our source into\n    // an array of source objects\n\n\n    var sources = filterSource(source); // if a source was passed in then it is invalid because\n    // it was filtered to a zero length Array. So we have to\n    // show an error\n\n    if (!sources.length) {\n      this.setTimeout(function () {\n        this.error({\n          code: 4,\n          message: this.localize(this.options_.notSupportedMessage)\n        });\n      }, 0);\n      return;\n    } // intial sources\n\n\n    this.changingSrc_ = true;\n    this.cache_.sources = sources;\n    this.updateSourceCaches_(sources[0]); // middlewareSource is the source after it has been changed by middleware\n\n    setSource(this, sources[0], function (middlewareSource, mws) {\n      _this11.middleware_ = mws; // since sourceSet is async we have to update the cache again after we select a source since\n      // the source that is selected could be out of order from the cache update above this callback.\n\n      _this11.cache_.sources = sources;\n\n      _this11.updateSourceCaches_(middlewareSource);\n\n      var err = _this11.src_(middlewareSource);\n\n      if (err) {\n        if (sources.length > 1) {\n          return _this11.src(sources.slice(1));\n        }\n\n        _this11.changingSrc_ = false; // We need to wrap this in a timeout to give folks a chance to add error event handlers\n\n        _this11.setTimeout(function () {\n          this.error({\n            code: 4,\n            message: this.localize(this.options_.notSupportedMessage)\n          });\n        }, 0); // we could not find an appropriate tech, but let's still notify the delegate that this is it\n        // this needs a better comment about why this is needed\n\n\n        _this11.triggerReady();\n\n        return;\n      }\n\n      setTech(mws, _this11.tech_);\n    });\n  }\n  /**\n   * Set the source object on the tech, returns a boolean that indicates whether\n   * there is a tech that can play the source or not\n   *\n   * @param {Tech~SourceObject} source\n   *        The source object to set on the Tech\n   *\n   * @return {boolean}\n   *         - True if there is no Tech to playback this source\n   *         - False otherwise\n   *\n   * @private\n   */\n  ;\n\n  _proto.src_ = function src_(source) {\n    var _this12 = this;\n\n    var sourceTech = this.selectSource([source]);\n\n    if (!sourceTech) {\n      return true;\n    }\n\n    if (!titleCaseEquals(sourceTech.tech, this.techName_)) {\n      this.changingSrc_ = true; // load this technology with the chosen source\n\n      this.loadTech_(sourceTech.tech, sourceTech.source);\n      this.tech_.ready(function () {\n        _this12.changingSrc_ = false;\n      });\n      return false;\n    } // wait until the tech is ready to set the source\n    // and set it synchronously if possible (#2326)\n\n\n    this.ready(function () {\n      // The setSource tech method was added with source handlers\n      // so older techs won't support it\n      // We need to check the direct prototype for the case where subclasses\n      // of the tech do not support source handlers\n      if (this.tech_.constructor.prototype.hasOwnProperty('setSource')) {\n        this.techCall_('setSource', source);\n      } else {\n        this.techCall_('src', source.src);\n      }\n\n      this.changingSrc_ = false;\n    }, true);\n    return false;\n  }\n  /**\n   * Begin loading the src data.\n   */\n  ;\n\n  _proto.load = function load() {\n    this.techCall_('load');\n  }\n  /**\n   * Reset the player. Loads the first tech in the techOrder,\n   * removes all the text tracks in the existing `tech`,\n   * and calls `reset` on the `tech`.\n   */\n  ;\n\n  _proto.reset = function reset() {\n    var _this13 = this;\n\n    var PromiseClass = this.options_.Promise || window$1.Promise;\n\n    if (this.paused() || !PromiseClass) {\n      this.doReset_();\n    } else {\n      var playPromise = this.play();\n      silencePromise(playPromise.then(function () {\n        return _this13.doReset_();\n      }));\n    }\n  };\n\n  _proto.doReset_ = function doReset_() {\n    if (this.tech_) {\n      this.tech_.clearTracks('text');\n    }\n\n    this.resetCache_();\n    this.poster('');\n    this.loadTech_(this.options_.techOrder[0], null);\n    this.techCall_('reset');\n    this.resetControlBarUI_();\n\n    if (isEvented(this)) {\n      this.trigger('playerreset');\n    }\n  }\n  /**\n   * Reset Control Bar's UI by calling sub-methods that reset\n   * all of Control Bar's components\n   */\n  ;\n\n  _proto.resetControlBarUI_ = function resetControlBarUI_() {\n    this.resetProgressBar_();\n    this.resetPlaybackRate_();\n    this.resetVolumeBar_();\n  }\n  /**\n   * Reset tech's progress so progress bar is reset in the UI\n   */\n  ;\n\n  _proto.resetProgressBar_ = function resetProgressBar_() {\n    this.currentTime(0);\n    var _this$controlBar = this.controlBar,\n        durationDisplay = _this$controlBar.durationDisplay,\n        remainingTimeDisplay = _this$controlBar.remainingTimeDisplay;\n\n    if (durationDisplay) {\n      durationDisplay.updateContent();\n    }\n\n    if (remainingTimeDisplay) {\n      remainingTimeDisplay.updateContent();\n    }\n  }\n  /**\n   * Reset Playback ratio\n   */\n  ;\n\n  _proto.resetPlaybackRate_ = function resetPlaybackRate_() {\n    this.playbackRate(this.defaultPlaybackRate());\n    this.handleTechRateChange_();\n  }\n  /**\n   * Reset Volume bar\n   */\n  ;\n\n  _proto.resetVolumeBar_ = function resetVolumeBar_() {\n    this.volume(1.0);\n    this.trigger('volumechange');\n  }\n  /**\n   * Returns all of the current source objects.\n   *\n   * @return {Tech~SourceObject[]}\n   *         The current source objects\n   */\n  ;\n\n  _proto.currentSources = function currentSources() {\n    var source = this.currentSource();\n    var sources = []; // assume `{}` or `{ src }`\n\n    if (Object.keys(source).length !== 0) {\n      sources.push(source);\n    }\n\n    return this.cache_.sources || sources;\n  }\n  /**\n   * Returns the current source object.\n   *\n   * @return {Tech~SourceObject}\n   *         The current source object\n   */\n  ;\n\n  _proto.currentSource = function currentSource() {\n    return this.cache_.source || {};\n  }\n  /**\n   * Returns the fully qualified URL of the current source value e.g. http://mysite.com/video.mp4\n   * Can be used in conjunction with `currentType` to assist in rebuilding the current source object.\n   *\n   * @return {string}\n   *         The current source\n   */\n  ;\n\n  _proto.currentSrc = function currentSrc() {\n    return this.currentSource() && this.currentSource().src || '';\n  }\n  /**\n   * Get the current source type e.g. video/mp4\n   * This can allow you rebuild the current source object so that you could load the same\n   * source and tech later\n   *\n   * @return {string}\n   *         The source MIME type\n   */\n  ;\n\n  _proto.currentType = function currentType() {\n    return this.currentSource() && this.currentSource().type || '';\n  }\n  /**\n   * Get or set the preload attribute\n   *\n   * @param {boolean} [value]\n   *        - true means that we should preload\n   *        - false means that we should not preload\n   *\n   * @return {string}\n   *         The preload attribute value when getting\n   */\n  ;\n\n  _proto.preload = function preload(value) {\n    if (value !== undefined) {\n      this.techCall_('setPreload', value);\n      this.options_.preload = value;\n      return;\n    }\n\n    return this.techGet_('preload');\n  }\n  /**\n   * Get or set the autoplay option. When this is a boolean it will\n   * modify the attribute on the tech. When this is a string the attribute on\n   * the tech will be removed and `Player` will handle autoplay on loadstarts.\n   *\n   * @param {boolean|string} [value]\n   *        - true: autoplay using the browser behavior\n   *        - false: do not autoplay\n   *        - 'play': call play() on every loadstart\n   *        - 'muted': call muted() then play() on every loadstart\n   *        - 'any': call play() on every loadstart. if that fails call muted() then play().\n   *        - *: values other than those listed here will be set `autoplay` to true\n   *\n   * @return {boolean|string}\n   *         The current value of autoplay when getting\n   */\n  ;\n\n  _proto.autoplay = function autoplay(value) {\n    // getter usage\n    if (value === undefined) {\n      return this.options_.autoplay || false;\n    }\n\n    var techAutoplay; // if the value is a valid string set it to that\n\n    if (typeof value === 'string' && /(any|play|muted)/.test(value)) {\n      this.options_.autoplay = value;\n      this.manualAutoplay_(value);\n      techAutoplay = false; // any falsy value sets autoplay to false in the browser,\n      // lets do the same\n    } else if (!value) {\n      this.options_.autoplay = false; // any other value (ie truthy) sets autoplay to true\n    } else {\n      this.options_.autoplay = true;\n    }\n\n    techAutoplay = typeof techAutoplay === 'undefined' ? this.options_.autoplay : techAutoplay; // if we don't have a tech then we do not queue up\n    // a setAutoplay call on tech ready. We do this because the\n    // autoplay option will be passed in the constructor and we\n    // do not need to set it twice\n\n    if (this.tech_) {\n      this.techCall_('setAutoplay', techAutoplay);\n    }\n  }\n  /**\n   * Set or unset the playsinline attribute.\n   * Playsinline tells the browser that non-fullscreen playback is preferred.\n   *\n   * @param {boolean} [value]\n   *        - true means that we should try to play inline by default\n   *        - false means that we should use the browser's default playback mode,\n   *          which in most cases is inline. iOS Safari is a notable exception\n   *          and plays fullscreen by default.\n   *\n   * @return {string|Player}\n   *         - the current value of playsinline\n   *         - the player when setting\n   *\n   * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}\n   */\n  ;\n\n  _proto.playsinline = function playsinline(value) {\n    if (value !== undefined) {\n      this.techCall_('setPlaysinline', value);\n      this.options_.playsinline = value;\n      return this;\n    }\n\n    return this.techGet_('playsinline');\n  }\n  /**\n   * Get or set the loop attribute on the video element.\n   *\n   * @param {boolean} [value]\n   *        - true means that we should loop the video\n   *        - false means that we should not loop the video\n   *\n   * @return {boolean}\n   *         The current value of loop when getting\n   */\n  ;\n\n  _proto.loop = function loop(value) {\n    if (value !== undefined) {\n      this.techCall_('setLoop', value);\n      this.options_.loop = value;\n      return;\n    }\n\n    return this.techGet_('loop');\n  }\n  /**\n   * Get or set the poster image source url\n   *\n   * @fires Player#posterchange\n   *\n   * @param {string} [src]\n   *        Poster image source URL\n   *\n   * @return {string}\n   *         The current value of poster when getting\n   */\n  ;\n\n  _proto.poster = function poster(src) {\n    if (src === undefined) {\n      return this.poster_;\n    } // The correct way to remove a poster is to set as an empty string\n    // other falsey values will throw errors\n\n\n    if (!src) {\n      src = '';\n    }\n\n    if (src === this.poster_) {\n      return;\n    } // update the internal poster variable\n\n\n    this.poster_ = src; // update the tech's poster\n\n    this.techCall_('setPoster', src);\n    this.isPosterFromTech_ = false; // alert components that the poster has been set\n\n    /**\n     * This event fires when the poster image is changed on the player.\n     *\n     * @event Player#posterchange\n     * @type {EventTarget~Event}\n     */\n\n    this.trigger('posterchange');\n  }\n  /**\n   * Some techs (e.g. YouTube) can provide a poster source in an\n   * asynchronous way. We want the poster component to use this\n   * poster source so that it covers up the tech's controls.\n   * (YouTube's play button). However we only want to use this\n   * source if the player user hasn't set a poster through\n   * the normal APIs.\n   *\n   * @fires Player#posterchange\n   * @listens Tech#posterchange\n   * @private\n   */\n  ;\n\n  _proto.handleTechPosterChange_ = function handleTechPosterChange_() {\n    if ((!this.poster_ || this.options_.techCanOverridePoster) && this.tech_ && this.tech_.poster) {\n      var newPoster = this.tech_.poster() || '';\n\n      if (newPoster !== this.poster_) {\n        this.poster_ = newPoster;\n        this.isPosterFromTech_ = true; // Let components know the poster has changed\n\n        this.trigger('posterchange');\n      }\n    }\n  }\n  /**\n   * Get or set whether or not the controls are showing.\n   *\n   * @fires Player#controlsenabled\n   *\n   * @param {boolean} [bool]\n   *        - true to turn controls on\n   *        - false to turn controls off\n   *\n   * @return {boolean}\n   *         The current value of controls when getting\n   */\n  ;\n\n  _proto.controls = function controls(bool) {\n    if (bool === undefined) {\n      return !!this.controls_;\n    }\n\n    bool = !!bool; // Don't trigger a change event unless it actually changed\n\n    if (this.controls_ === bool) {\n      return;\n    }\n\n    this.controls_ = bool;\n\n    if (this.usingNativeControls()) {\n      this.techCall_('setControls', bool);\n    }\n\n    if (this.controls_) {\n      this.removeClass('vjs-controls-disabled');\n      this.addClass('vjs-controls-enabled');\n      /**\n       * @event Player#controlsenabled\n       * @type {EventTarget~Event}\n       */\n\n      this.trigger('controlsenabled');\n\n      if (!this.usingNativeControls()) {\n        this.addTechControlsListeners_();\n      }\n    } else {\n      this.removeClass('vjs-controls-enabled');\n      this.addClass('vjs-controls-disabled');\n      /**\n       * @event Player#controlsdisabled\n       * @type {EventTarget~Event}\n       */\n\n      this.trigger('controlsdisabled');\n\n      if (!this.usingNativeControls()) {\n        this.removeTechControlsListeners_();\n      }\n    }\n  }\n  /**\n   * Toggle native controls on/off. Native controls are the controls built into\n   * devices (e.g. default iPhone controls), Flash, or other techs\n   * (e.g. Vimeo Controls)\n   * **This should only be set by the current tech, because only the tech knows\n   * if it can support native controls**\n   *\n   * @fires Player#usingnativecontrols\n   * @fires Player#usingcustomcontrols\n   *\n   * @param {boolean} [bool]\n   *        - true to turn native controls on\n   *        - false to turn native controls off\n   *\n   * @return {boolean}\n   *         The current value of native controls when getting\n   */\n  ;\n\n  _proto.usingNativeControls = function usingNativeControls(bool) {\n    if (bool === undefined) {\n      return !!this.usingNativeControls_;\n    }\n\n    bool = !!bool; // Don't trigger a change event unless it actually changed\n\n    if (this.usingNativeControls_ === bool) {\n      return;\n    }\n\n    this.usingNativeControls_ = bool;\n\n    if (this.usingNativeControls_) {\n      this.addClass('vjs-using-native-controls');\n      /**\n       * player is using the native device controls\n       *\n       * @event Player#usingnativecontrols\n       * @type {EventTarget~Event}\n       */\n\n      this.trigger('usingnativecontrols');\n    } else {\n      this.removeClass('vjs-using-native-controls');\n      /**\n       * player is using the custom HTML controls\n       *\n       * @event Player#usingcustomcontrols\n       * @type {EventTarget~Event}\n       */\n\n      this.trigger('usingcustomcontrols');\n    }\n  }\n  /**\n   * Set or get the current MediaError\n   *\n   * @fires Player#error\n   *\n   * @param  {MediaError|string|number} [err]\n   *         A MediaError or a string/number to be turned\n   *         into a MediaError\n   *\n   * @return {MediaError|null}\n   *         The current MediaError when getting (or null)\n   */\n  ;\n\n  _proto.error = function error(err) {\n    if (err === undefined) {\n      return this.error_ || null;\n    } // Suppress the first error message for no compatible source until\n    // user interaction\n\n\n    if (this.options_.suppressNotSupportedError && err && err.message && err.message === this.localize(this.options_.notSupportedMessage)) {\n      var triggerSuppressedError = function triggerSuppressedError() {\n        this.error(err);\n      };\n\n      this.options_.suppressNotSupportedError = false;\n      this.any(['click', 'touchstart'], triggerSuppressedError);\n      this.one('loadstart', function () {\n        this.off(['click', 'touchstart'], triggerSuppressedError);\n      });\n      return;\n    } // restoring to default\n\n\n    if (err === null) {\n      this.error_ = err;\n      this.removeClass('vjs-error');\n\n      if (this.errorDisplay) {\n        this.errorDisplay.close();\n      }\n\n      return;\n    }\n\n    this.error_ = new MediaError(err); // add the vjs-error classname to the player\n\n    this.addClass('vjs-error'); // log the name of the error type and any message\n    // IE11 logs \"[object object]\" and required you to expand message to see error object\n\n    log.error(\"(CODE:\" + this.error_.code + \" \" + MediaError.errorTypes[this.error_.code] + \")\", this.error_.message, this.error_);\n    /**\n     * @event Player#error\n     * @type {EventTarget~Event}\n     */\n\n    this.trigger('error');\n    return;\n  }\n  /**\n   * Report user activity\n   *\n   * @param {Object} event\n   *        Event object\n   */\n  ;\n\n  _proto.reportUserActivity = function reportUserActivity(event) {\n    this.userActivity_ = true;\n  }\n  /**\n   * Get/set if user is active\n   *\n   * @fires Player#useractive\n   * @fires Player#userinactive\n   *\n   * @param {boolean} [bool]\n   *        - true if the user is active\n   *        - false if the user is inactive\n   *\n   * @return {boolean}\n   *         The current value of userActive when getting\n   */\n  ;\n\n  _proto.userActive = function userActive(bool) {\n    if (bool === undefined) {\n      return this.userActive_;\n    }\n\n    bool = !!bool;\n\n    if (bool === this.userActive_) {\n      return;\n    }\n\n    this.userActive_ = bool;\n\n    if (this.userActive_) {\n      this.userActivity_ = true;\n      this.removeClass('vjs-user-inactive');\n      this.addClass('vjs-user-active');\n      /**\n       * @event Player#useractive\n       * @type {EventTarget~Event}\n       */\n\n      this.trigger('useractive');\n      return;\n    } // Chrome/Safari/IE have bugs where when you change the cursor it can\n    // trigger a mousemove event. This causes an issue when you're hiding\n    // the cursor when the user is inactive, and a mousemove signals user\n    // activity. Making it impossible to go into inactive mode. Specifically\n    // this happens in fullscreen when we really need to hide the cursor.\n    //\n    // When this gets resolved in ALL browsers it can be removed\n    // https://code.google.com/p/chromium/issues/detail?id=103041\n\n\n    if (this.tech_) {\n      this.tech_.one('mousemove', function (e) {\n        e.stopPropagation();\n        e.preventDefault();\n      });\n    }\n\n    this.userActivity_ = false;\n    this.removeClass('vjs-user-active');\n    this.addClass('vjs-user-inactive');\n    /**\n     * @event Player#userinactive\n     * @type {EventTarget~Event}\n     */\n\n    this.trigger('userinactive');\n  }\n  /**\n   * Listen for user activity based on timeout value\n   *\n   * @private\n   */\n  ;\n\n  _proto.listenForUserActivity_ = function listenForUserActivity_() {\n    var mouseInProgress;\n    var lastMoveX;\n    var lastMoveY;\n    var handleActivity = bind(this, this.reportUserActivity);\n\n    var handleMouseMove = function handleMouseMove(e) {\n      // #1068 - Prevent mousemove spamming\n      // Chrome Bug: https://code.google.com/p/chromium/issues/detail?id=366970\n      if (e.screenX !== lastMoveX || e.screenY !== lastMoveY) {\n        lastMoveX = e.screenX;\n        lastMoveY = e.screenY;\n        handleActivity();\n      }\n    };\n\n    var handleMouseDown = function handleMouseDown() {\n      handleActivity(); // For as long as the they are touching the device or have their mouse down,\n      // we consider them active even if they're not moving their finger or mouse.\n      // So we want to continue to update that they are active\n\n      this.clearInterval(mouseInProgress); // Setting userActivity=true now and setting the interval to the same time\n      // as the activityCheck interval (250) should ensure we never miss the\n      // next activityCheck\n\n      mouseInProgress = this.setInterval(handleActivity, 250);\n    };\n\n    var handleMouseUp = function handleMouseUp(event) {\n      handleActivity(); // Stop the interval that maintains activity if the mouse/touch is down\n\n      this.clearInterval(mouseInProgress);\n    }; // Any mouse movement will be considered user activity\n\n\n    this.on('mousedown', handleMouseDown);\n    this.on('mousemove', handleMouseMove);\n    this.on('mouseup', handleMouseUp);\n    var controlBar = this.getChild('controlBar'); // Fixes bug on Android & iOS where when tapping progressBar (when control bar is displayed)\n    // controlBar would no longer be hidden by default timeout.\n\n    if (controlBar && !IS_IOS && !IS_ANDROID) {\n      controlBar.on('mouseenter', function (event) {\n        this.player().cache_.inactivityTimeout = this.player().options_.inactivityTimeout;\n        this.player().options_.inactivityTimeout = 0;\n      });\n      controlBar.on('mouseleave', function (event) {\n        this.player().options_.inactivityTimeout = this.player().cache_.inactivityTimeout;\n      });\n    } // Listen for keyboard navigation\n    // Shouldn't need to use inProgress interval because of key repeat\n\n\n    this.on('keydown', handleActivity);\n    this.on('keyup', handleActivity); // Run an interval every 250 milliseconds instead of stuffing everything into\n    // the mousemove/touchmove function itself, to prevent performance degradation.\n    // `this.reportUserActivity` simply sets this.userActivity_ to true, which\n    // then gets picked up by this loop\n    // http://ejohn.org/blog/learning-from-twitter/\n\n    var inactivityTimeout;\n    this.setInterval(function () {\n      // Check to see if mouse/touch activity has happened\n      if (!this.userActivity_) {\n        return;\n      } // Reset the activity tracker\n\n\n      this.userActivity_ = false; // If the user state was inactive, set the state to active\n\n      this.userActive(true); // Clear any existing inactivity timeout to start the timer over\n\n      this.clearTimeout(inactivityTimeout);\n      var timeout = this.options_.inactivityTimeout;\n\n      if (timeout <= 0) {\n        return;\n      } // In <timeout> milliseconds, if no more activity has occurred the\n      // user will be considered inactive\n\n\n      inactivityTimeout = this.setTimeout(function () {\n        // Protect against the case where the inactivityTimeout can trigger just\n        // before the next user activity is picked up by the activity check loop\n        // causing a flicker\n        if (!this.userActivity_) {\n          this.userActive(false);\n        }\n      }, timeout);\n    }, 250);\n  }\n  /**\n   * Gets or sets the current playback rate. A playback rate of\n   * 1.0 represents normal speed and 0.5 would indicate half-speed\n   * playback, for instance.\n   *\n   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-playbackrate\n   *\n   * @param {number} [rate]\n   *       New playback rate to set.\n   *\n   * @return {number}\n   *         The current playback rate when getting or 1.0\n   */\n  ;\n\n  _proto.playbackRate = function playbackRate(rate) {\n    if (rate !== undefined) {\n      // NOTE: this.cache_.lastPlaybackRate is set from the tech handler\n      // that is registered above\n      this.techCall_('setPlaybackRate', rate);\n      return;\n    }\n\n    if (this.tech_ && this.tech_.featuresPlaybackRate) {\n      return this.cache_.lastPlaybackRate || this.techGet_('playbackRate');\n    }\n\n    return 1.0;\n  }\n  /**\n   * Gets or sets the current default playback rate. A default playback rate of\n   * 1.0 represents normal speed and 0.5 would indicate half-speed playback, for instance.\n   * defaultPlaybackRate will only represent what the initial playbackRate of a video was, not\n   * not the current playbackRate.\n   *\n   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-defaultplaybackrate\n   *\n   * @param {number} [rate]\n   *       New default playback rate to set.\n   *\n   * @return {number|Player}\n   *         - The default playback rate when getting or 1.0\n   *         - the player when setting\n   */\n  ;\n\n  _proto.defaultPlaybackRate = function defaultPlaybackRate(rate) {\n    if (rate !== undefined) {\n      return this.techCall_('setDefaultPlaybackRate', rate);\n    }\n\n    if (this.tech_ && this.tech_.featuresPlaybackRate) {\n      return this.techGet_('defaultPlaybackRate');\n    }\n\n    return 1.0;\n  }\n  /**\n   * Gets or sets the audio flag\n   *\n   * @param {boolean} bool\n   *        - true signals that this is an audio player\n   *        - false signals that this is not an audio player\n   *\n   * @return {boolean}\n   *         The current value of isAudio when getting\n   */\n  ;\n\n  _proto.isAudio = function isAudio(bool) {\n    if (bool !== undefined) {\n      this.isAudio_ = !!bool;\n      return;\n    }\n\n    return !!this.isAudio_;\n  }\n  /**\n   * A helper method for adding a {@link TextTrack} to our\n   * {@link TextTrackList}.\n   *\n   * In addition to the W3C settings we allow adding additional info through options.\n   *\n   * @see http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-addtexttrack\n   *\n   * @param {string} [kind]\n   *        the kind of TextTrack you are adding\n   *\n   * @param {string} [label]\n   *        the label to give the TextTrack label\n   *\n   * @param {string} [language]\n   *        the language to set on the TextTrack\n   *\n   * @return {TextTrack|undefined}\n   *         the TextTrack that was added or undefined\n   *         if there is no tech\n   */\n  ;\n\n  _proto.addTextTrack = function addTextTrack(kind, label, language) {\n    if (this.tech_) {\n      return this.tech_.addTextTrack(kind, label, language);\n    }\n  }\n  /**\n   * Create a remote {@link TextTrack} and an {@link HTMLTrackElement}. It will\n   * automatically removed from the video element whenever the source changes, unless\n   * manualCleanup is set to false.\n   *\n   * @param {Object} options\n   *        Options to pass to {@link HTMLTrackElement} during creation. See\n   *        {@link HTMLTrackElement} for object properties that you should use.\n   *\n   * @param {boolean} [manualCleanup=true] if set to false, the TextTrack will be\n   *\n   * @return {HtmlTrackElement}\n   *         the HTMLTrackElement that was created and added\n   *         to the HtmlTrackElementList and the remote\n   *         TextTrackList\n   *\n   * @deprecated The default value of the \"manualCleanup\" parameter will default\n   *             to \"false\" in upcoming versions of Video.js\n   */\n  ;\n\n  _proto.addRemoteTextTrack = function addRemoteTextTrack(options, manualCleanup) {\n    if (this.tech_) {\n      return this.tech_.addRemoteTextTrack(options, manualCleanup);\n    }\n  }\n  /**\n   * Remove a remote {@link TextTrack} from the respective\n   * {@link TextTrackList} and {@link HtmlTrackElementList}.\n   *\n   * @param {Object} track\n   *        Remote {@link TextTrack} to remove\n   *\n   * @return {undefined}\n   *         does not return anything\n   */\n  ;\n\n  _proto.removeRemoteTextTrack = function removeRemoteTextTrack(obj) {\n    if (obj === void 0) {\n      obj = {};\n    }\n\n    var _obj = obj,\n        track = _obj.track;\n\n    if (!track) {\n      track = obj;\n    } // destructure the input into an object with a track argument, defaulting to arguments[0]\n    // default the whole argument to an empty object if nothing was passed in\n\n\n    if (this.tech_) {\n      return this.tech_.removeRemoteTextTrack(track);\n    }\n  }\n  /**\n   * Gets available media playback quality metrics as specified by the W3C's Media\n   * Playback Quality API.\n   *\n   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}\n   *\n   * @return {Object|undefined}\n   *         An object with supported media playback quality metrics or undefined if there\n   *         is no tech or the tech does not support it.\n   */\n  ;\n\n  _proto.getVideoPlaybackQuality = function getVideoPlaybackQuality() {\n    return this.techGet_('getVideoPlaybackQuality');\n  }\n  /**\n   * Get video width\n   *\n   * @return {number}\n   *         current video width\n   */\n  ;\n\n  _proto.videoWidth = function videoWidth() {\n    return this.tech_ && this.tech_.videoWidth && this.tech_.videoWidth() || 0;\n  }\n  /**\n   * Get video height\n   *\n   * @return {number}\n   *         current video height\n   */\n  ;\n\n  _proto.videoHeight = function videoHeight() {\n    return this.tech_ && this.tech_.videoHeight && this.tech_.videoHeight() || 0;\n  }\n  /**\n   * The player's language code\n   * NOTE: The language should be set in the player options if you want the\n   * the controls to be built with a specific language. Changing the language\n   * later will not update controls text.\n   *\n   * @param {string} [code]\n   *        the language code to set the player to\n   *\n   * @return {string}\n   *         The current language code when getting\n   */\n  ;\n\n  _proto.language = function language(code) {\n    if (code === undefined) {\n      return this.language_;\n    }\n\n    this.language_ = String(code).toLowerCase();\n  }\n  /**\n   * Get the player's language dictionary\n   * Merge every time, because a newly added plugin might call videojs.addLanguage() at any time\n   * Languages specified directly in the player options have precedence\n   *\n   * @return {Array}\n   *         An array of of supported languages\n   */\n  ;\n\n  _proto.languages = function languages() {\n    return mergeOptions(Player.prototype.options_.languages, this.languages_);\n  }\n  /**\n   * returns a JavaScript object reperesenting the current track\n   * information. **DOES not return it as JSON**\n   *\n   * @return {Object}\n   *         Object representing the current of track info\n   */\n  ;\n\n  _proto.toJSON = function toJSON() {\n    var options = mergeOptions(this.options_);\n    var tracks = options.tracks;\n    options.tracks = [];\n\n    for (var i = 0; i < tracks.length; i++) {\n      var track = tracks[i]; // deep merge tracks and null out player so no circular references\n\n      track = mergeOptions(track);\n      track.player = undefined;\n      options.tracks[i] = track;\n    }\n\n    return options;\n  }\n  /**\n   * Creates a simple modal dialog (an instance of the {@link ModalDialog}\n   * component) that immediately overlays the player with arbitrary\n   * content and removes itself when closed.\n   *\n   * @param {string|Function|Element|Array|null} content\n   *        Same as {@link ModalDialog#content}'s param of the same name.\n   *        The most straight-forward usage is to provide a string or DOM\n   *        element.\n   *\n   * @param {Object} [options]\n   *        Extra options which will be passed on to the {@link ModalDialog}.\n   *\n   * @return {ModalDialog}\n   *         the {@link ModalDialog} that was created\n   */\n  ;\n\n  _proto.createModal = function createModal(content, options) {\n    var _this14 = this;\n\n    options = options || {};\n    options.content = content || '';\n    var modal = new ModalDialog(this, options);\n    this.addChild(modal);\n    modal.on('dispose', function () {\n      _this14.removeChild(modal);\n    });\n    modal.open();\n    return modal;\n  }\n  /**\n   * Change breakpoint classes when the player resizes.\n   *\n   * @private\n   */\n  ;\n\n  _proto.updateCurrentBreakpoint_ = function updateCurrentBreakpoint_() {\n    if (!this.responsive()) {\n      return;\n    }\n\n    var currentBreakpoint = this.currentBreakpoint();\n    var currentWidth = this.currentWidth();\n\n    for (var i = 0; i < BREAKPOINT_ORDER.length; i++) {\n      var candidateBreakpoint = BREAKPOINT_ORDER[i];\n      var maxWidth = this.breakpoints_[candidateBreakpoint];\n\n      if (currentWidth <= maxWidth) {\n        // The current breakpoint did not change, nothing to do.\n        if (currentBreakpoint === candidateBreakpoint) {\n          return;\n        } // Only remove a class if there is a current breakpoint.\n\n\n        if (currentBreakpoint) {\n          this.removeClass(BREAKPOINT_CLASSES[currentBreakpoint]);\n        }\n\n        this.addClass(BREAKPOINT_CLASSES[candidateBreakpoint]);\n        this.breakpoint_ = candidateBreakpoint;\n        break;\n      }\n    }\n  }\n  /**\n   * Removes the current breakpoint.\n   *\n   * @private\n   */\n  ;\n\n  _proto.removeCurrentBreakpoint_ = function removeCurrentBreakpoint_() {\n    var className = this.currentBreakpointClass();\n    this.breakpoint_ = '';\n\n    if (className) {\n      this.removeClass(className);\n    }\n  }\n  /**\n   * Get or set breakpoints on the player.\n   *\n   * Calling this method with an object or `true` will remove any previous\n   * custom breakpoints and start from the defaults again.\n   *\n   * @param  {Object|boolean} [breakpoints]\n   *         If an object is given, it can be used to provide custom\n   *         breakpoints. If `true` is given, will set default breakpoints.\n   *         If this argument is not given, will simply return the current\n   *         breakpoints.\n   *\n   * @param  {number} [breakpoints.tiny]\n   *         The maximum width for the \"vjs-layout-tiny\" class.\n   *\n   * @param  {number} [breakpoints.xsmall]\n   *         The maximum width for the \"vjs-layout-x-small\" class.\n   *\n   * @param  {number} [breakpoints.small]\n   *         The maximum width for the \"vjs-layout-small\" class.\n   *\n   * @param  {number} [breakpoints.medium]\n   *         The maximum width for the \"vjs-layout-medium\" class.\n   *\n   * @param  {number} [breakpoints.large]\n   *         The maximum width for the \"vjs-layout-large\" class.\n   *\n   * @param  {number} [breakpoints.xlarge]\n   *         The maximum width for the \"vjs-layout-x-large\" class.\n   *\n   * @param  {number} [breakpoints.huge]\n   *         The maximum width for the \"vjs-layout-huge\" class.\n   *\n   * @return {Object}\n   *         An object mapping breakpoint names to maximum width values.\n   */\n  ;\n\n  _proto.breakpoints = function breakpoints(_breakpoints) {\n    // Used as a getter.\n    if (_breakpoints === undefined) {\n      return assign(this.breakpoints_);\n    }\n\n    this.breakpoint_ = '';\n    this.breakpoints_ = assign({}, DEFAULT_BREAKPOINTS, _breakpoints); // When breakpoint definitions change, we need to update the currently\n    // selected breakpoint.\n\n    this.updateCurrentBreakpoint_(); // Clone the breakpoints before returning.\n\n    return assign(this.breakpoints_);\n  }\n  /**\n   * Get or set a flag indicating whether or not this player should adjust\n   * its UI based on its dimensions.\n   *\n   * @param  {boolean} value\n   *         Should be `true` if the player should adjust its UI based on its\n   *         dimensions; otherwise, should be `false`.\n   *\n   * @return {boolean}\n   *         Will be `true` if this player should adjust its UI based on its\n   *         dimensions; otherwise, will be `false`.\n   */\n  ;\n\n  _proto.responsive = function responsive(value) {\n    // Used as a getter.\n    if (value === undefined) {\n      return this.responsive_;\n    }\n\n    value = Boolean(value);\n    var current = this.responsive_; // Nothing changed.\n\n    if (value === current) {\n      return;\n    } // The value actually changed, set it.\n\n\n    this.responsive_ = value; // Start listening for breakpoints and set the initial breakpoint if the\n    // player is now responsive.\n\n    if (value) {\n      this.on('playerresize', this.updateCurrentBreakpoint_);\n      this.updateCurrentBreakpoint_(); // Stop listening for breakpoints if the player is no longer responsive.\n    } else {\n      this.off('playerresize', this.updateCurrentBreakpoint_);\n      this.removeCurrentBreakpoint_();\n    }\n\n    return value;\n  }\n  /**\n   * Get current breakpoint name, if any.\n   *\n   * @return {string}\n   *         If there is currently a breakpoint set, returns a the key from the\n   *         breakpoints object matching it. Otherwise, returns an empty string.\n   */\n  ;\n\n  _proto.currentBreakpoint = function currentBreakpoint() {\n    return this.breakpoint_;\n  }\n  /**\n   * Get the current breakpoint class name.\n   *\n   * @return {string}\n   *         The matching class name (e.g. `\"vjs-layout-tiny\"` or\n   *         `\"vjs-layout-large\"`) for the current breakpoint. Empty string if\n   *         there is no current breakpoint.\n   */\n  ;\n\n  _proto.currentBreakpointClass = function currentBreakpointClass() {\n    return BREAKPOINT_CLASSES[this.breakpoint_] || '';\n  }\n  /**\n   * An object that describes a single piece of media.\n   *\n   * Properties that are not part of this type description will be retained; so,\n   * this can be viewed as a generic metadata storage mechanism as well.\n   *\n   * @see      {@link https://wicg.github.io/mediasession/#the-mediametadata-interface}\n   * @typedef  {Object} Player~MediaObject\n   *\n   * @property {string} [album]\n   *           Unused, except if this object is passed to the `MediaSession`\n   *           API.\n   *\n   * @property {string} [artist]\n   *           Unused, except if this object is passed to the `MediaSession`\n   *           API.\n   *\n   * @property {Object[]} [artwork]\n   *           Unused, except if this object is passed to the `MediaSession`\n   *           API. If not specified, will be populated via the `poster`, if\n   *           available.\n   *\n   * @property {string} [poster]\n   *           URL to an image that will display before playback.\n   *\n   * @property {Tech~SourceObject|Tech~SourceObject[]|string} [src]\n   *           A single source object, an array of source objects, or a string\n   *           referencing a URL to a media source. It is _highly recommended_\n   *           that an object or array of objects is used here, so that source\n   *           selection algorithms can take the `type` into account.\n   *\n   * @property {string} [title]\n   *           Unused, except if this object is passed to the `MediaSession`\n   *           API.\n   *\n   * @property {Object[]} [textTracks]\n   *           An array of objects to be used to create text tracks, following\n   *           the {@link https://www.w3.org/TR/html50/embedded-content-0.html#the-track-element|native track element format}.\n   *           For ease of removal, these will be created as \"remote\" text\n   *           tracks and set to automatically clean up on source changes.\n   *\n   *           These objects may have properties like `src`, `kind`, `label`,\n   *           and `language`, see {@link Tech#createRemoteTextTrack}.\n   */\n\n  /**\n   * Populate the player using a {@link Player~MediaObject|MediaObject}.\n   *\n   * @param  {Player~MediaObject} media\n   *         A media object.\n   *\n   * @param  {Function} ready\n   *         A callback to be called when the player is ready.\n   */\n  ;\n\n  _proto.loadMedia = function loadMedia(media, ready) {\n    var _this15 = this;\n\n    if (!media || typeof media !== 'object') {\n      return;\n    }\n\n    this.reset(); // Clone the media object so it cannot be mutated from outside.\n\n    this.cache_.media = mergeOptions(media);\n    var _this$cache_$media = this.cache_.media,\n        artwork = _this$cache_$media.artwork,\n        poster = _this$cache_$media.poster,\n        src = _this$cache_$media.src,\n        textTracks = _this$cache_$media.textTracks; // If `artwork` is not given, create it using `poster`.\n\n    if (!artwork && poster) {\n      this.cache_.media.artwork = [{\n        src: poster,\n        type: getMimetype(poster)\n      }];\n    }\n\n    if (src) {\n      this.src(src);\n    }\n\n    if (poster) {\n      this.poster(poster);\n    }\n\n    if (Array.isArray(textTracks)) {\n      textTracks.forEach(function (tt) {\n        return _this15.addRemoteTextTrack(tt, false);\n      });\n    }\n\n    this.ready(ready);\n  }\n  /**\n   * Get a clone of the current {@link Player~MediaObject} for this player.\n   *\n   * If the `loadMedia` method has not been used, will attempt to return a\n   * {@link Player~MediaObject} based on the current state of the player.\n   *\n   * @return {Player~MediaObject}\n   */\n  ;\n\n  _proto.getMedia = function getMedia() {\n    if (!this.cache_.media) {\n      var poster = this.poster();\n      var src = this.currentSources();\n      var textTracks = Array.prototype.map.call(this.remoteTextTracks(), function (tt) {\n        return {\n          kind: tt.kind,\n          label: tt.label,\n          language: tt.language,\n          src: tt.src\n        };\n      });\n      var media = {\n        src: src,\n        textTracks: textTracks\n      };\n\n      if (poster) {\n        media.poster = poster;\n        media.artwork = [{\n          src: media.poster,\n          type: getMimetype(media.poster)\n        }];\n      }\n\n      return media;\n    }\n\n    return mergeOptions(this.cache_.media);\n  }\n  /**\n   * Gets tag settings\n   *\n   * @param {Element} tag\n   *        The player tag\n   *\n   * @return {Object}\n   *         An object containing all of the settings\n   *         for a player tag\n   */\n  ;\n\n  Player.getTagSettings = function getTagSettings(tag) {\n    var baseOptions = {\n      sources: [],\n      tracks: []\n    };\n    var tagOptions = getAttributes(tag);\n    var dataSetup = tagOptions['data-setup'];\n\n    if (hasClass(tag, 'vjs-fill')) {\n      tagOptions.fill = true;\n    }\n\n    if (hasClass(tag, 'vjs-fluid')) {\n      tagOptions.fluid = true;\n    } // Check if data-setup attr exists.\n\n\n    if (dataSetup !== null) {\n      // Parse options JSON\n      // If empty string, make it a parsable json object.\n      var _safeParseTuple = safeParseTuple(dataSetup || '{}'),\n          err = _safeParseTuple[0],\n          data = _safeParseTuple[1];\n\n      if (err) {\n        log.error(err);\n      }\n\n      assign(tagOptions, data);\n    }\n\n    assign(baseOptions, tagOptions); // Get tag children settings\n\n    if (tag.hasChildNodes()) {\n      var children = tag.childNodes;\n\n      for (var i = 0, j = children.length; i < j; i++) {\n        var child = children[i]; // Change case needed: http://ejohn.org/blog/nodename-case-sensitivity/\n\n        var childName = child.nodeName.toLowerCase();\n\n        if (childName === 'source') {\n          baseOptions.sources.push(getAttributes(child));\n        } else if (childName === 'track') {\n          baseOptions.tracks.push(getAttributes(child));\n        }\n      }\n    }\n\n    return baseOptions;\n  }\n  /**\n   * Determine whether or not flexbox is supported\n   *\n   * @return {boolean}\n   *         - true if flexbox is supported\n   *         - false if flexbox is not supported\n   */\n  ;\n\n  _proto.flexNotSupported_ = function flexNotSupported_() {\n    var elem = document.createElement('i'); // Note: We don't actually use flexBasis (or flexOrder), but it's one of the more\n    // common flex features that we can rely on when checking for flex support.\n\n    return !('flexBasis' in elem.style || 'webkitFlexBasis' in elem.style || 'mozFlexBasis' in elem.style || 'msFlexBasis' in elem.style || // IE10-specific (2012 flex spec), available for completeness\n    'msFlexOrder' in elem.style);\n  };\n\n  return Player;\n}(Component);\n/**\n * Get the {@link VideoTrackList}\n * @link https://html.spec.whatwg.org/multipage/embedded-content.html#videotracklist\n *\n * @return {VideoTrackList}\n *         the current video track list\n *\n * @method Player.prototype.videoTracks\n */\n\n/**\n * Get the {@link AudioTrackList}\n * @link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist\n *\n * @return {AudioTrackList}\n *         the current audio track list\n *\n * @method Player.prototype.audioTracks\n */\n\n/**\n * Get the {@link TextTrackList}\n *\n * @link http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-texttracks\n *\n * @return {TextTrackList}\n *         the current text track list\n *\n * @method Player.prototype.textTracks\n */\n\n/**\n * Get the remote {@link TextTrackList}\n *\n * @return {TextTrackList}\n *         The current remote text track list\n *\n * @method Player.prototype.remoteTextTracks\n */\n\n/**\n * Get the remote {@link HtmlTrackElementList} tracks.\n *\n * @return {HtmlTrackElementList}\n *         The current remote text track element list\n *\n * @method Player.prototype.remoteTextTrackEls\n */\n\n\nALL.names.forEach(function (name) {\n  var props = ALL[name];\n\n  Player.prototype[props.getterName] = function () {\n    if (this.tech_) {\n      return this.tech_[props.getterName]();\n    } // if we have not yet loadTech_, we create {video,audio,text}Tracks_\n    // these will be passed to the tech during loading\n\n\n    this[props.privateName] = this[props.privateName] || new props.ListClass();\n    return this[props.privateName];\n  };\n});\n/**\n * Global enumeration of players.\n *\n * The keys are the player IDs and the values are either the {@link Player}\n * instance or `null` for disposed players.\n *\n * @type {Object}\n */\n\nPlayer.players = {};\nvar navigator = window$1.navigator;\n/*\n * Player instance options, surfaced using options\n * options = Player.prototype.options_\n * Make changes in options, not here.\n *\n * @type {Object}\n * @private\n */\n\nPlayer.prototype.options_ = {\n  // Default order of fallback technology\n  techOrder: Tech.defaultTechOrder_,\n  html5: {},\n  flash: {},\n  // default inactivity timeout\n  inactivityTimeout: 2000,\n  // default playback rates\n  playbackRates: [],\n  // Add playback rate selection by adding rates\n  // 'playbackRates': [0.5, 1, 1.5, 2],\n  liveui: false,\n  // Included control sets\n  children: ['mediaLoader', 'posterImage', 'textTrackDisplay', 'loadingSpinner', 'bigPlayButton', 'liveTracker', 'controlBar', 'errorDisplay', 'textTrackSettings', 'resizeManager'],\n  language: navigator && (navigator.languages && navigator.languages[0] || navigator.userLanguage || navigator.language) || 'en',\n  // locales and their language translations\n  languages: {},\n  // Default message to show when a video cannot be played.\n  notSupportedMessage: 'No compatible source was found for this media.',\n  fullscreen: {\n    options: {\n      navigationUI: 'hide'\n    }\n  },\n  breakpoints: {},\n  responsive: false\n};\n[\n/**\n * Returns whether or not the player is in the \"ended\" state.\n *\n * @return {Boolean} True if the player is in the ended state, false if not.\n * @method Player#ended\n */\n'ended',\n/**\n * Returns whether or not the player is in the \"seeking\" state.\n *\n * @return {Boolean} True if the player is in the seeking state, false if not.\n * @method Player#seeking\n */\n'seeking',\n/**\n * Returns the TimeRanges of the media that are currently available\n * for seeking to.\n *\n * @return {TimeRanges} the seekable intervals of the media timeline\n * @method Player#seekable\n */\n'seekable',\n/**\n * Returns the current state of network activity for the element, from\n * the codes in the list below.\n * - NETWORK_EMPTY (numeric value 0)\n *   The element has not yet been initialised. All attributes are in\n *   their initial states.\n * - NETWORK_IDLE (numeric value 1)\n *   The element's resource selection algorithm is active and has\n *   selected a resource, but it is not actually using the network at\n *   this time.\n * - NETWORK_LOADING (numeric value 2)\n *   The user agent is actively trying to download data.\n * - NETWORK_NO_SOURCE (numeric value 3)\n *   The element's resource selection algorithm is active, but it has\n *   not yet found a resource to use.\n *\n * @see https://html.spec.whatwg.org/multipage/embedded-content.html#network-states\n * @return {number} the current network activity state\n * @method Player#networkState\n */\n'networkState',\n/**\n * Returns a value that expresses the current state of the element\n * with respect to rendering the current playback position, from the\n * codes in the list below.\n * - HAVE_NOTHING (numeric value 0)\n *   No information regarding the media resource is available.\n * - HAVE_METADATA (numeric value 1)\n *   Enough of the resource has been obtained that the duration of the\n *   resource is available.\n * - HAVE_CURRENT_DATA (numeric value 2)\n *   Data for the immediate current playback position is available.\n * - HAVE_FUTURE_DATA (numeric value 3)\n *   Data for the immediate current playback position is available, as\n *   well as enough data for the user agent to advance the current\n *   playback position in the direction of playback.\n * - HAVE_ENOUGH_DATA (numeric value 4)\n *   The user agent estimates that enough data is available for\n *   playback to proceed uninterrupted.\n *\n * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-readystate\n * @return {number} the current playback rendering state\n * @method Player#readyState\n */\n'readyState'].forEach(function (fn) {\n  Player.prototype[fn] = function () {\n    return this.techGet_(fn);\n  };\n});\nTECH_EVENTS_RETRIGGER.forEach(function (event) {\n  Player.prototype[\"handleTech\" + toTitleCase(event) + \"_\"] = function () {\n    return this.trigger(event);\n  };\n});\n/**\n * Fired when the player has initial duration and dimension information\n *\n * @event Player#loadedmetadata\n * @type {EventTarget~Event}\n */\n\n/**\n * Fired when the player has downloaded data at the current playback position\n *\n * @event Player#loadeddata\n * @type {EventTarget~Event}\n */\n\n/**\n * Fired when the current playback position has changed *\n * During playback this is fired every 15-250 milliseconds, depending on the\n * playback technology in use.\n *\n * @event Player#timeupdate\n * @type {EventTarget~Event}\n */\n\n/**\n * Fired when the volume changes\n *\n * @event Player#volumechange\n * @type {EventTarget~Event}\n */\n\n/**\n * Reports whether or not a player has a plugin available.\n *\n * This does not report whether or not the plugin has ever been initialized\n * on this player. For that, [usingPlugin]{@link Player#usingPlugin}.\n *\n * @method Player#hasPlugin\n * @param  {string}  name\n *         The name of a plugin.\n *\n * @return {boolean}\n *         Whether or not this player has the requested plugin available.\n */\n\n/**\n * Reports whether or not a player is using a plugin by name.\n *\n * For basic plugins, this only reports whether the plugin has _ever_ been\n * initialized on this player.\n *\n * @method Player#usingPlugin\n * @param  {string} name\n *         The name of a plugin.\n *\n * @return {boolean}\n *         Whether or not this player is using the requested plugin.\n */\n\nComponent.registerComponent('Player', Player);\n\n/**\n * The base plugin name.\n *\n * @private\n * @constant\n * @type {string}\n */\n\nvar BASE_PLUGIN_NAME = 'plugin';\n/**\n * The key on which a player's active plugins cache is stored.\n *\n * @private\n * @constant\n * @type     {string}\n */\n\nvar PLUGIN_CACHE_KEY = 'activePlugins_';\n/**\n * Stores registered plugins in a private space.\n *\n * @private\n * @type    {Object}\n */\n\nvar pluginStorage = {};\n/**\n * Reports whether or not a plugin has been registered.\n *\n * @private\n * @param   {string} name\n *          The name of a plugin.\n *\n * @return {boolean}\n *          Whether or not the plugin has been registered.\n */\n\nvar pluginExists = function pluginExists(name) {\n  return pluginStorage.hasOwnProperty(name);\n};\n/**\n * Get a single registered plugin by name.\n *\n * @private\n * @param   {string} name\n *          The name of a plugin.\n *\n * @return {Function|undefined}\n *          The plugin (or undefined).\n */\n\n\nvar getPlugin = function getPlugin(name) {\n  return pluginExists(name) ? pluginStorage[name] : undefined;\n};\n/**\n * Marks a plugin as \"active\" on a player.\n *\n * Also, ensures that the player has an object for tracking active plugins.\n *\n * @private\n * @param   {Player} player\n *          A Video.js player instance.\n *\n * @param   {string} name\n *          The name of a plugin.\n */\n\n\nvar markPluginAsActive = function markPluginAsActive(player, name) {\n  player[PLUGIN_CACHE_KEY] = player[PLUGIN_CACHE_KEY] || {};\n  player[PLUGIN_CACHE_KEY][name] = true;\n};\n/**\n * Triggers a pair of plugin setup events.\n *\n * @private\n * @param  {Player} player\n *         A Video.js player instance.\n *\n * @param  {Plugin~PluginEventHash} hash\n *         A plugin event hash.\n *\n * @param  {boolean} [before]\n *         If true, prefixes the event name with \"before\". In other words,\n *         use this to trigger \"beforepluginsetup\" instead of \"pluginsetup\".\n */\n\n\nvar triggerSetupEvent = function triggerSetupEvent(player, hash, before) {\n  var eventName = (before ? 'before' : '') + 'pluginsetup';\n  player.trigger(eventName, hash);\n  player.trigger(eventName + ':' + hash.name, hash);\n};\n/**\n * Takes a basic plugin function and returns a wrapper function which marks\n * on the player that the plugin has been activated.\n *\n * @private\n * @param   {string} name\n *          The name of the plugin.\n *\n * @param   {Function} plugin\n *          The basic plugin.\n *\n * @return {Function}\n *          A wrapper function for the given plugin.\n */\n\n\nvar createBasicPlugin = function createBasicPlugin(name, plugin) {\n  var basicPluginWrapper = function basicPluginWrapper() {\n    // We trigger the \"beforepluginsetup\" and \"pluginsetup\" events on the player\n    // regardless, but we want the hash to be consistent with the hash provided\n    // for advanced plugins.\n    //\n    // The only potentially counter-intuitive thing here is the `instance` in\n    // the \"pluginsetup\" event is the value returned by the `plugin` function.\n    triggerSetupEvent(this, {\n      name: name,\n      plugin: plugin,\n      instance: null\n    }, true);\n    var instance = plugin.apply(this, arguments);\n    markPluginAsActive(this, name);\n    triggerSetupEvent(this, {\n      name: name,\n      plugin: plugin,\n      instance: instance\n    });\n    return instance;\n  };\n\n  Object.keys(plugin).forEach(function (prop) {\n    basicPluginWrapper[prop] = plugin[prop];\n  });\n  return basicPluginWrapper;\n};\n/**\n * Takes a plugin sub-class and returns a factory function for generating\n * instances of it.\n *\n * This factory function will replace itself with an instance of the requested\n * sub-class of Plugin.\n *\n * @private\n * @param   {string} name\n *          The name of the plugin.\n *\n * @param   {Plugin} PluginSubClass\n *          The advanced plugin.\n *\n * @return {Function}\n */\n\n\nvar createPluginFactory = function createPluginFactory(name, PluginSubClass) {\n  // Add a `name` property to the plugin prototype so that each plugin can\n  // refer to itself by name.\n  PluginSubClass.prototype.name = name;\n  return function () {\n    triggerSetupEvent(this, {\n      name: name,\n      plugin: PluginSubClass,\n      instance: null\n    }, true);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var instance = _construct(PluginSubClass, [this].concat(args)); // The plugin is replaced by a function that returns the current instance.\n\n\n    this[name] = function () {\n      return instance;\n    };\n\n    triggerSetupEvent(this, instance.getEventHash());\n    return instance;\n  };\n};\n/**\n * Parent class for all advanced plugins.\n *\n * @mixes   module:evented~EventedMixin\n * @mixes   module:stateful~StatefulMixin\n * @fires   Player#beforepluginsetup\n * @fires   Player#beforepluginsetup:$name\n * @fires   Player#pluginsetup\n * @fires   Player#pluginsetup:$name\n * @listens Player#dispose\n * @throws  {Error}\n *          If attempting to instantiate the base {@link Plugin} class\n *          directly instead of via a sub-class.\n */\n\n\nvar Plugin =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Creates an instance of this class.\n   *\n   * Sub-classes should call `super` to ensure plugins are properly initialized.\n   *\n   * @param {Player} player\n   *        A Video.js player instance.\n   */\n  function Plugin(player) {\n    if (this.constructor === Plugin) {\n      throw new Error('Plugin must be sub-classed; not directly instantiated.');\n    }\n\n    this.player = player; // Make this object evented, but remove the added `trigger` method so we\n    // use the prototype version instead.\n\n    evented(this);\n    delete this.trigger;\n    stateful(this, this.constructor.defaultState);\n    markPluginAsActive(player, this.name); // Auto-bind the dispose method so we can use it as a listener and unbind\n    // it later easily.\n\n    this.dispose = bind(this, this.dispose); // If the player is disposed, dispose the plugin.\n\n    player.on('dispose', this.dispose);\n  }\n  /**\n   * Get the version of the plugin that was set on <pluginName>.VERSION\n   */\n\n\n  var _proto = Plugin.prototype;\n\n  _proto.version = function version() {\n    return this.constructor.VERSION;\n  }\n  /**\n   * Each event triggered by plugins includes a hash of additional data with\n   * conventional properties.\n   *\n   * This returns that object or mutates an existing hash.\n   *\n   * @param   {Object} [hash={}]\n   *          An object to be used as event an event hash.\n   *\n   * @return {Plugin~PluginEventHash}\n   *          An event hash object with provided properties mixed-in.\n   */\n  ;\n\n  _proto.getEventHash = function getEventHash(hash) {\n    if (hash === void 0) {\n      hash = {};\n    }\n\n    hash.name = this.name;\n    hash.plugin = this.constructor;\n    hash.instance = this;\n    return hash;\n  }\n  /**\n   * Triggers an event on the plugin object and overrides\n   * {@link module:evented~EventedMixin.trigger|EventedMixin.trigger}.\n   *\n   * @param   {string|Object} event\n   *          An event type or an object with a type property.\n   *\n   * @param   {Object} [hash={}]\n   *          Additional data hash to merge with a\n   *          {@link Plugin~PluginEventHash|PluginEventHash}.\n   *\n   * @return {boolean}\n   *          Whether or not default was prevented.\n   */\n  ;\n\n  _proto.trigger = function trigger$1(event, hash) {\n    if (hash === void 0) {\n      hash = {};\n    }\n\n    return trigger(this.eventBusEl_, event, this.getEventHash(hash));\n  }\n  /**\n   * Handles \"statechanged\" events on the plugin. No-op by default, override by\n   * subclassing.\n   *\n   * @abstract\n   * @param    {Event} e\n   *           An event object provided by a \"statechanged\" event.\n   *\n   * @param    {Object} e.changes\n   *           An object describing changes that occurred with the \"statechanged\"\n   *           event.\n   */\n  ;\n\n  _proto.handleStateChanged = function handleStateChanged(e) {}\n  /**\n   * Disposes a plugin.\n   *\n   * Subclasses can override this if they want, but for the sake of safety,\n   * it's probably best to subscribe the \"dispose\" event.\n   *\n   * @fires Plugin#dispose\n   */\n  ;\n\n  _proto.dispose = function dispose() {\n    var name = this.name,\n        player = this.player;\n    /**\n     * Signals that a advanced plugin is about to be disposed.\n     *\n     * @event Plugin#dispose\n     * @type  {EventTarget~Event}\n     */\n\n    this.trigger('dispose');\n    this.off();\n    player.off('dispose', this.dispose); // Eliminate any possible sources of leaking memory by clearing up\n    // references between the player and the plugin instance and nulling out\n    // the plugin's state and replacing methods with a function that throws.\n\n    player[PLUGIN_CACHE_KEY][name] = false;\n    this.player = this.state = null; // Finally, replace the plugin name on the player with a new factory\n    // function, so that the plugin is ready to be set up again.\n\n    player[name] = createPluginFactory(name, pluginStorage[name]);\n  }\n  /**\n   * Determines if a plugin is a basic plugin (i.e. not a sub-class of `Plugin`).\n   *\n   * @param   {string|Function} plugin\n   *          If a string, matches the name of a plugin. If a function, will be\n   *          tested directly.\n   *\n   * @return {boolean}\n   *          Whether or not a plugin is a basic plugin.\n   */\n  ;\n\n  Plugin.isBasic = function isBasic(plugin) {\n    var p = typeof plugin === 'string' ? getPlugin(plugin) : plugin;\n    return typeof p === 'function' && !Plugin.prototype.isPrototypeOf(p.prototype);\n  }\n  /**\n   * Register a Video.js plugin.\n   *\n   * @param   {string} name\n   *          The name of the plugin to be registered. Must be a string and\n   *          must not match an existing plugin or a method on the `Player`\n   *          prototype.\n   *\n   * @param   {Function} plugin\n   *          A sub-class of `Plugin` or a function for basic plugins.\n   *\n   * @return {Function}\n   *          For advanced plugins, a factory function for that plugin. For\n   *          basic plugins, a wrapper function that initializes the plugin.\n   */\n  ;\n\n  Plugin.registerPlugin = function registerPlugin(name, plugin) {\n    if (typeof name !== 'string') {\n      throw new Error(\"Illegal plugin name, \\\"\" + name + \"\\\", must be a string, was \" + typeof name + \".\");\n    }\n\n    if (pluginExists(name)) {\n      log.warn(\"A plugin named \\\"\" + name + \"\\\" already exists. You may want to avoid re-registering plugins!\");\n    } else if (Player.prototype.hasOwnProperty(name)) {\n      throw new Error(\"Illegal plugin name, \\\"\" + name + \"\\\", cannot share a name with an existing player method!\");\n    }\n\n    if (typeof plugin !== 'function') {\n      throw new Error(\"Illegal plugin for \\\"\" + name + \"\\\", must be a function, was \" + typeof plugin + \".\");\n    }\n\n    pluginStorage[name] = plugin; // Add a player prototype method for all sub-classed plugins (but not for\n    // the base Plugin class).\n\n    if (name !== BASE_PLUGIN_NAME) {\n      if (Plugin.isBasic(plugin)) {\n        Player.prototype[name] = createBasicPlugin(name, plugin);\n      } else {\n        Player.prototype[name] = createPluginFactory(name, plugin);\n      }\n    }\n\n    return plugin;\n  }\n  /**\n   * De-register a Video.js plugin.\n   *\n   * @param  {string} name\n   *         The name of the plugin to be de-registered. Must be a string that\n   *         matches an existing plugin.\n   *\n   * @throws {Error}\n   *         If an attempt is made to de-register the base plugin.\n   */\n  ;\n\n  Plugin.deregisterPlugin = function deregisterPlugin(name) {\n    if (name === BASE_PLUGIN_NAME) {\n      throw new Error('Cannot de-register base plugin.');\n    }\n\n    if (pluginExists(name)) {\n      delete pluginStorage[name];\n      delete Player.prototype[name];\n    }\n  }\n  /**\n   * Gets an object containing multiple Video.js plugins.\n   *\n   * @param   {Array} [names]\n   *          If provided, should be an array of plugin names. Defaults to _all_\n   *          plugin names.\n   *\n   * @return {Object|undefined}\n   *          An object containing plugin(s) associated with their name(s) or\n   *          `undefined` if no matching plugins exist).\n   */\n  ;\n\n  Plugin.getPlugins = function getPlugins(names) {\n    if (names === void 0) {\n      names = Object.keys(pluginStorage);\n    }\n\n    var result;\n    names.forEach(function (name) {\n      var plugin = getPlugin(name);\n\n      if (plugin) {\n        result = result || {};\n        result[name] = plugin;\n      }\n    });\n    return result;\n  }\n  /**\n   * Gets a plugin's version, if available\n   *\n   * @param   {string} name\n   *          The name of a plugin.\n   *\n   * @return {string}\n   *          The plugin's version or an empty string.\n   */\n  ;\n\n  Plugin.getPluginVersion = function getPluginVersion(name) {\n    var plugin = getPlugin(name);\n    return plugin && plugin.VERSION || '';\n  };\n\n  return Plugin;\n}();\n/**\n * Gets a plugin by name if it exists.\n *\n * @static\n * @method   getPlugin\n * @memberOf Plugin\n * @param    {string} name\n *           The name of a plugin.\n *\n * @returns  {Function|undefined}\n *           The plugin (or `undefined`).\n */\n\n\nPlugin.getPlugin = getPlugin;\n/**\n * The name of the base plugin class as it is registered.\n *\n * @type {string}\n */\n\nPlugin.BASE_PLUGIN_NAME = BASE_PLUGIN_NAME;\nPlugin.registerPlugin(BASE_PLUGIN_NAME, Plugin);\n/**\n * Documented in player.js\n *\n * @ignore\n */\n\nPlayer.prototype.usingPlugin = function (name) {\n  return !!this[PLUGIN_CACHE_KEY] && this[PLUGIN_CACHE_KEY][name] === true;\n};\n/**\n * Documented in player.js\n *\n * @ignore\n */\n\n\nPlayer.prototype.hasPlugin = function (name) {\n  return !!pluginExists(name);\n};\n/**\n * Signals that a plugin is about to be set up on a player.\n *\n * @event    Player#beforepluginsetup\n * @type     {Plugin~PluginEventHash}\n */\n\n/**\n * Signals that a plugin is about to be set up on a player - by name. The name\n * is the name of the plugin.\n *\n * @event    Player#beforepluginsetup:$name\n * @type     {Plugin~PluginEventHash}\n */\n\n/**\n * Signals that a plugin has just been set up on a player.\n *\n * @event    Player#pluginsetup\n * @type     {Plugin~PluginEventHash}\n */\n\n/**\n * Signals that a plugin has just been set up on a player - by name. The name\n * is the name of the plugin.\n *\n * @event    Player#pluginsetup:$name\n * @type     {Plugin~PluginEventHash}\n */\n\n/**\n * @typedef  {Object} Plugin~PluginEventHash\n *\n * @property {string} instance\n *           For basic plugins, the return value of the plugin function. For\n *           advanced plugins, the plugin instance on which the event is fired.\n *\n * @property {string} name\n *           The name of the plugin.\n *\n * @property {string} plugin\n *           For basic plugins, the plugin function. For advanced plugins, the\n *           plugin class/constructor.\n */\n\n/**\n * @file extend.js\n * @module extend\n */\n\n/**\n * A combination of node inherits and babel's inherits (after transpile).\n * Both work the same but node adds `super_` to the subClass\n * and Bable adds the superClass as __proto__. Both seem useful.\n *\n * @param {Object} subClass\n *        The class to inherit to\n *\n * @param {Object} superClass\n *        The class to inherit from\n *\n * @private\n */\nvar _inherits = function _inherits(subClass, superClass) {\n  if (typeof superClass !== 'function' && superClass !== null) {\n    throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n\n  if (superClass) {\n    // node\n    subClass.super_ = superClass;\n  }\n};\n/**\n * Used to subclass an existing class by emulating ES subclassing using the\n * `extends` keyword.\n *\n * @function\n * @example\n * var MyComponent = videojs.extend(videojs.getComponent('Component'), {\n *   myCustomMethod: function() {\n *     // Do things in my method.\n *   }\n * });\n *\n * @param    {Function} superClass\n *           The class to inherit from\n *\n * @param    {Object}   [subClassMethods={}]\n *           Methods of the new class\n *\n * @return   {Function}\n *           The new class with subClassMethods that inherited superClass.\n */\n\n\nvar extend = function extend(superClass, subClassMethods) {\n  if (subClassMethods === void 0) {\n    subClassMethods = {};\n  }\n\n  var subClass = function subClass() {\n    superClass.apply(this, arguments);\n  };\n\n  var methods = {};\n\n  if (typeof subClassMethods === 'object') {\n    if (subClassMethods.constructor !== Object.prototype.constructor) {\n      subClass = subClassMethods.constructor;\n    }\n\n    methods = subClassMethods;\n  } else if (typeof subClassMethods === 'function') {\n    subClass = subClassMethods;\n  }\n\n  _inherits(subClass, superClass); // Extend subObj's prototype with functions and other properties from props\n\n\n  for (var name in methods) {\n    if (methods.hasOwnProperty(name)) {\n      subClass.prototype[name] = methods[name];\n    }\n  }\n\n  return subClass;\n};\n\n/**\n * @file video.js\n * @module videojs\n */\n/**\n * Normalize an `id` value by trimming off a leading `#`\n *\n * @private\n * @param   {string} id\n *          A string, maybe with a leading `#`.\n *\n * @return {string}\n *          The string, without any leading `#`.\n */\n\nvar normalizeId = function normalizeId(id) {\n  return id.indexOf('#') === 0 ? id.slice(1) : id;\n};\n/**\n * The `videojs()` function doubles as the main function for users to create a\n * {@link Player} instance as well as the main library namespace.\n *\n * It can also be used as a getter for a pre-existing {@link Player} instance.\n * However, we _strongly_ recommend using `videojs.getPlayer()` for this\n * purpose because it avoids any potential for unintended initialization.\n *\n * Due to [limitations](https://github.com/jsdoc3/jsdoc/issues/955#issuecomment-313829149)\n * of our JSDoc template, we cannot properly document this as both a function\n * and a namespace, so its function signature is documented here.\n *\n * #### Arguments\n * ##### id\n * string|Element, **required**\n *\n * Video element or video element ID.\n *\n * ##### options\n * Object, optional\n *\n * Options object for providing settings.\n * See: [Options Guide](https://docs.videojs.com/tutorial-options.html).\n *\n * ##### ready\n * {@link Component~ReadyCallback}, optional\n *\n * A function to be called when the {@link Player} and {@link Tech} are ready.\n *\n * #### Return Value\n *\n * The `videojs()` function returns a {@link Player} instance.\n *\n * @namespace\n *\n * @borrows AudioTrack as AudioTrack\n * @borrows Component.getComponent as getComponent\n * @borrows module:computed-style~computedStyle as computedStyle\n * @borrows module:events.on as on\n * @borrows module:events.one as one\n * @borrows module:events.off as off\n * @borrows module:events.trigger as trigger\n * @borrows EventTarget as EventTarget\n * @borrows module:extend~extend as extend\n * @borrows module:fn.bind as bind\n * @borrows module:format-time.formatTime as formatTime\n * @borrows module:format-time.resetFormatTime as resetFormatTime\n * @borrows module:format-time.setFormatTime as setFormatTime\n * @borrows module:merge-options.mergeOptions as mergeOptions\n * @borrows module:middleware.use as use\n * @borrows Player.players as players\n * @borrows Plugin.registerPlugin as registerPlugin\n * @borrows Plugin.deregisterPlugin as deregisterPlugin\n * @borrows Plugin.getPlugins as getPlugins\n * @borrows Plugin.getPlugin as getPlugin\n * @borrows Plugin.getPluginVersion as getPluginVersion\n * @borrows Tech.getTech as getTech\n * @borrows Tech.registerTech as registerTech\n * @borrows TextTrack as TextTrack\n * @borrows module:time-ranges.createTimeRanges as createTimeRange\n * @borrows module:time-ranges.createTimeRanges as createTimeRanges\n * @borrows module:url.isCrossOrigin as isCrossOrigin\n * @borrows module:url.parseUrl as parseUrl\n * @borrows VideoTrack as VideoTrack\n *\n * @param  {string|Element} id\n *         Video element or video element ID.\n *\n * @param  {Object} [options]\n *         Options object for providing settings.\n *         See: [Options Guide](https://docs.videojs.com/tutorial-options.html).\n *\n * @param  {Component~ReadyCallback} [ready]\n *         A function to be called when the {@link Player} and {@link Tech} are\n *         ready.\n *\n * @return {Player}\n *         The `videojs()` function returns a {@link Player|Player} instance.\n */\n\n\nfunction videojs$1(id, options, ready) {\n  var player = videojs$1.getPlayer(id);\n\n  if (player) {\n    if (options) {\n      log.warn(\"Player \\\"\" + id + \"\\\" is already initialised. Options will not be applied.\");\n    }\n\n    if (ready) {\n      player.ready(ready);\n    }\n\n    return player;\n  }\n\n  var el = typeof id === 'string' ? $('#' + normalizeId(id)) : id;\n\n  if (!isEl(el)) {\n    throw new TypeError('The element or ID supplied is not valid. (videojs)');\n  } // document.body.contains(el) will only check if el is contained within that one document.\n  // This causes problems for elements in iframes.\n  // Instead, use the element's ownerDocument instead of the global document.\n  // This will make sure that the element is indeed in the dom of that document.\n  // Additionally, check that the document in question has a default view.\n  // If the document is no longer attached to the dom, the defaultView of the document will be null.\n\n\n  if (!el.ownerDocument.defaultView || !el.ownerDocument.body.contains(el)) {\n    log.warn('The element supplied is not included in the DOM');\n  }\n\n  options = options || {};\n  videojs$1.hooks('beforesetup').forEach(function (hookFunction) {\n    var opts = hookFunction(el, mergeOptions(options));\n\n    if (!isObject(opts) || Array.isArray(opts)) {\n      log.error('please return an object in beforesetup hooks');\n      return;\n    }\n\n    options = mergeOptions(options, opts);\n  }); // We get the current \"Player\" component here in case an integration has\n  // replaced it with a custom player.\n\n  var PlayerComponent = Component.getComponent('Player');\n  player = new PlayerComponent(el, options, ready);\n  videojs$1.hooks('setup').forEach(function (hookFunction) {\n    return hookFunction(player);\n  });\n  return player;\n}\n/**\n * An Object that contains lifecycle hooks as keys which point to an array\n * of functions that are run when a lifecycle is triggered\n *\n * @private\n */\n\n\nvideojs$1.hooks_ = {};\n/**\n * Get a list of hooks for a specific lifecycle\n *\n * @param  {string} type\n *         the lifecyle to get hooks from\n *\n * @param  {Function|Function[]} [fn]\n *         Optionally add a hook (or hooks) to the lifecycle that your are getting.\n *\n * @return {Array}\n *         an array of hooks, or an empty array if there are none.\n */\n\nvideojs$1.hooks = function (type, fn) {\n  videojs$1.hooks_[type] = videojs$1.hooks_[type] || [];\n\n  if (fn) {\n    videojs$1.hooks_[type] = videojs$1.hooks_[type].concat(fn);\n  }\n\n  return videojs$1.hooks_[type];\n};\n/**\n * Add a function hook to a specific videojs lifecycle.\n *\n * @param {string} type\n *        the lifecycle to hook the function to.\n *\n * @param {Function|Function[]}\n *        The function or array of functions to attach.\n */\n\n\nvideojs$1.hook = function (type, fn) {\n  videojs$1.hooks(type, fn);\n};\n/**\n * Add a function hook that will only run once to a specific videojs lifecycle.\n *\n * @param {string} type\n *        the lifecycle to hook the function to.\n *\n * @param {Function|Function[]}\n *        The function or array of functions to attach.\n */\n\n\nvideojs$1.hookOnce = function (type, fn) {\n  videojs$1.hooks(type, [].concat(fn).map(function (original) {\n    var wrapper = function wrapper() {\n      videojs$1.removeHook(type, wrapper);\n      return original.apply(void 0, arguments);\n    };\n\n    return wrapper;\n  }));\n};\n/**\n * Remove a hook from a specific videojs lifecycle.\n *\n * @param  {string} type\n *         the lifecycle that the function hooked to\n *\n * @param  {Function} fn\n *         The hooked function to remove\n *\n * @return {boolean}\n *         The function that was removed or undef\n */\n\n\nvideojs$1.removeHook = function (type, fn) {\n  var index = videojs$1.hooks(type).indexOf(fn);\n\n  if (index <= -1) {\n    return false;\n  }\n\n  videojs$1.hooks_[type] = videojs$1.hooks_[type].slice();\n  videojs$1.hooks_[type].splice(index, 1);\n  return true;\n}; // Add default styles\n\n\nif (window$1.VIDEOJS_NO_DYNAMIC_STYLE !== true && isReal()) {\n  var style = $('.vjs-styles-defaults');\n\n  if (!style) {\n    style = createStyleElement('vjs-styles-defaults');\n    var head = $('head');\n\n    if (head) {\n      head.insertBefore(style, head.firstChild);\n    }\n\n    setTextContent(style, \"\\n      .video-js {\\n        width: 300px;\\n        height: 150px;\\n      }\\n\\n      .vjs-fluid {\\n        padding-top: 56.25%\\n      }\\n    \");\n  }\n} // Run Auto-load players\n// You have to wait at least once in case this script is loaded after your\n// video in the DOM (weird behavior only with minified version)\n\n\nautoSetupTimeout(1, videojs$1);\n/**\n * Current Video.js version. Follows [semantic versioning](https://semver.org/).\n *\n * @type {string}\n */\n\nvideojs$1.VERSION = version;\n/**\n * The global options object. These are the settings that take effect\n * if no overrides are specified when the player is created.\n *\n * @type {Object}\n */\n\nvideojs$1.options = Player.prototype.options_;\n/**\n * Get an object with the currently created players, keyed by player ID\n *\n * @return {Object}\n *         The created players\n */\n\nvideojs$1.getPlayers = function () {\n  return Player.players;\n};\n/**\n * Get a single player based on an ID or DOM element.\n *\n * This is useful if you want to check if an element or ID has an associated\n * Video.js player, but not create one if it doesn't.\n *\n * @param   {string|Element} id\n *          An HTML element - `<video>`, `<audio>`, or `<video-js>` -\n *          or a string matching the `id` of such an element.\n *\n * @return {Player|undefined}\n *          A player instance or `undefined` if there is no player instance\n *          matching the argument.\n */\n\n\nvideojs$1.getPlayer = function (id) {\n  var players = Player.players;\n  var tag;\n\n  if (typeof id === 'string') {\n    var nId = normalizeId(id);\n    var player = players[nId];\n\n    if (player) {\n      return player;\n    }\n\n    tag = $('#' + nId);\n  } else {\n    tag = id;\n  }\n\n  if (isEl(tag)) {\n    var _tag = tag,\n        _player = _tag.player,\n        playerId = _tag.playerId; // Element may have a `player` property referring to an already created\n    // player instance. If so, return that.\n\n    if (_player || players[playerId]) {\n      return _player || players[playerId];\n    }\n  }\n};\n/**\n * Returns an array of all current players.\n *\n * @return {Array}\n *         An array of all players. The array will be in the order that\n *         `Object.keys` provides, which could potentially vary between\n *         JavaScript engines.\n *\n */\n\n\nvideojs$1.getAllPlayers = function () {\n  return (// Disposed players leave a key with a `null` value, so we need to make sure\n    // we filter those out.\n    Object.keys(Player.players).map(function (k) {\n      return Player.players[k];\n    }).filter(Boolean)\n  );\n};\n\nvideojs$1.players = Player.players;\nvideojs$1.getComponent = Component.getComponent;\n/**\n * Register a component so it can referred to by name. Used when adding to other\n * components, either through addChild `component.addChild('myComponent')` or through\n * default children options  `{ children: ['myComponent'] }`.\n *\n * > NOTE: You could also just initialize the component before adding.\n * `component.addChild(new MyComponent());`\n *\n * @param {string} name\n *        The class name of the component\n *\n * @param {Component} comp\n *        The component class\n *\n * @return {Component}\n *         The newly registered component\n */\n\nvideojs$1.registerComponent = function (name, comp) {\n  if (Tech.isTech(comp)) {\n    log.warn(\"The \" + name + \" tech was registered as a component. It should instead be registered using videojs.registerTech(name, tech)\");\n  }\n\n  Component.registerComponent.call(Component, name, comp);\n};\n\nvideojs$1.getTech = Tech.getTech;\nvideojs$1.registerTech = Tech.registerTech;\nvideojs$1.use = use;\n/**\n * An object that can be returned by a middleware to signify\n * that the middleware is being terminated.\n *\n * @type {object}\n * @property {object} middleware.TERMINATOR\n */\n\nObject.defineProperty(videojs$1, 'middleware', {\n  value: {},\n  writeable: false,\n  enumerable: true\n});\nObject.defineProperty(videojs$1.middleware, 'TERMINATOR', {\n  value: TERMINATOR,\n  writeable: false,\n  enumerable: true\n});\n/**\n * A reference to the {@link module:browser|browser utility module} as an object.\n *\n * @type {Object}\n * @see  {@link module:browser|browser}\n */\n\nvideojs$1.browser = browser;\n/**\n * Use {@link module:browser.TOUCH_ENABLED|browser.TOUCH_ENABLED} instead; only\n * included for backward-compatibility with 4.x.\n *\n * @deprecated Since version 5.0, use {@link module:browser.TOUCH_ENABLED|browser.TOUCH_ENABLED instead.\n * @type {boolean}\n */\n\nvideojs$1.TOUCH_ENABLED = TOUCH_ENABLED;\nvideojs$1.extend = extend;\nvideojs$1.mergeOptions = mergeOptions;\nvideojs$1.bind = bind;\nvideojs$1.registerPlugin = Plugin.registerPlugin;\nvideojs$1.deregisterPlugin = Plugin.deregisterPlugin;\n/**\n * Deprecated method to register a plugin with Video.js\n *\n * @deprecated videojs.plugin() is deprecated; use videojs.registerPlugin() instead\n *\n * @param {string} name\n *        The plugin name\n *\n * @param {Plugin|Function} plugin\n *         The plugin sub-class or function\n */\n\nvideojs$1.plugin = function (name, plugin) {\n  log.warn('videojs.plugin() is deprecated; use videojs.registerPlugin() instead');\n  return Plugin.registerPlugin(name, plugin);\n};\n\nvideojs$1.getPlugins = Plugin.getPlugins;\nvideojs$1.getPlugin = Plugin.getPlugin;\nvideojs$1.getPluginVersion = Plugin.getPluginVersion;\n/**\n * Adding languages so that they're available to all players.\n * Example: `videojs.addLanguage('es', { 'Hello': 'Hola' });`\n *\n * @param {string} code\n *        The language code or dictionary property\n *\n * @param {Object} data\n *        The data values to be translated\n *\n * @return {Object}\n *         The resulting language dictionary object\n */\n\nvideojs$1.addLanguage = function (code, data) {\n  var _mergeOptions;\n\n  code = ('' + code).toLowerCase();\n  videojs$1.options.languages = mergeOptions(videojs$1.options.languages, (_mergeOptions = {}, _mergeOptions[code] = data, _mergeOptions));\n  return videojs$1.options.languages[code];\n};\n/**\n * A reference to the {@link module:log|log utility module} as an object.\n *\n * @type {Function}\n * @see  {@link module:log|log}\n */\n\n\nvideojs$1.log = log;\nvideojs$1.createLogger = createLogger$1;\nvideojs$1.createTimeRange = videojs$1.createTimeRanges = createTimeRanges;\nvideojs$1.formatTime = formatTime;\nvideojs$1.setFormatTime = setFormatTime;\nvideojs$1.resetFormatTime = resetFormatTime;\nvideojs$1.parseUrl = parseUrl;\nvideojs$1.isCrossOrigin = isCrossOrigin;\nvideojs$1.EventTarget = EventTarget;\nvideojs$1.on = on;\nvideojs$1.one = one;\nvideojs$1.off = off;\nvideojs$1.trigger = trigger;\n/**\n * A cross-browser XMLHttpRequest wrapper.\n *\n * @function\n * @param    {Object} options\n *           Settings for the request.\n *\n * @return   {XMLHttpRequest|XDomainRequest}\n *           The request object.\n *\n * @see      https://github.com/Raynos/xhr\n */\n\nvideojs$1.xhr = XHR;\nvideojs$1.TextTrack = TextTrack;\nvideojs$1.AudioTrack = AudioTrack;\nvideojs$1.VideoTrack = VideoTrack;\n['isEl', 'isTextNode', 'createEl', 'hasClass', 'addClass', 'removeClass', 'toggleClass', 'setAttributes', 'getAttributes', 'emptyEl', 'appendContent', 'insertContent'].forEach(function (k) {\n  videojs$1[k] = function () {\n    log.warn(\"videojs.\" + k + \"() is deprecated; use videojs.dom.\" + k + \"() instead\");\n    return Dom[k].apply(null, arguments);\n  };\n});\nvideojs$1.computedStyle = computedStyle;\n/**\n * A reference to the {@link module:dom|DOM utility module} as an object.\n *\n * @type {Object}\n * @see  {@link module:dom|dom}\n */\n\nvideojs$1.dom = Dom;\n/**\n * A reference to the {@link module:url|URL utility module} as an object.\n *\n * @type {Object}\n * @see  {@link module:url|url}\n */\n\nvideojs$1.url = Url;\n\n/**\n * @videojs/http-streaming\n * @version 1.10.3\n * @copyright 2019 Brightcove, Inc\n * @license Apache-2.0\n */\n/**\n * @file resolve-url.js - Handling how URLs are resolved and manipulated\n */\n\nvar resolveUrl = function resolveUrl(baseURL, relativeURL) {\n  // return early if we don't need to resolve\n  if (/^[a-z]+:/i.test(relativeURL)) {\n    return relativeURL;\n  } // if the base URL is relative then combine with the current location\n\n\n  if (!/\\/\\//i.test(baseURL)) {\n    baseURL = URLToolkit.buildAbsoluteURL(window$1.location.href, baseURL);\n  }\n\n  return URLToolkit.buildAbsoluteURL(baseURL, relativeURL);\n};\n/**\n * Checks whether xhr request was redirected and returns correct url depending\n * on `handleManifestRedirects` option\n *\n * @api private\n *\n * @param  {String} url - an url being requested\n * @param  {XMLHttpRequest} req - xhr request result\n *\n * @return {String}\n */\n\n\nvar resolveManifestRedirect = function resolveManifestRedirect(handleManifestRedirect, url, req) {\n  // To understand how the responseURL below is set and generated:\n  // - https://fetch.spec.whatwg.org/#concept-response-url\n  // - https://fetch.spec.whatwg.org/#atomic-http-redirect-handling\n  if (handleManifestRedirect && req.responseURL && url !== req.responseURL) {\n    return req.responseURL;\n  }\n\n  return url;\n};\n\nvar classCallCheck = function classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar get$1 = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};\n\nvar inherits = function inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar possibleConstructorReturn = function possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n/**\n * @file playlist-loader.js\n *\n * A state machine that manages the loading, caching, and updating of\n * M3U8 playlists.\n *\n */\n\n\nvar mergeOptions$1 = videojs$1.mergeOptions,\n    EventTarget$1 = videojs$1.EventTarget,\n    log$1 = videojs$1.log;\n/**\n * Loops through all supported media groups in master and calls the provided\n * callback for each group\n *\n * @param {Object} master\n *        The parsed master manifest object\n * @param {Function} callback\n *        Callback to call for each media group\n */\n\nvar forEachMediaGroup = function forEachMediaGroup(master, callback) {\n  ['AUDIO', 'SUBTITLES'].forEach(function (mediaType) {\n    for (var groupKey in master.mediaGroups[mediaType]) {\n      for (var labelKey in master.mediaGroups[mediaType][groupKey]) {\n        var mediaProperties = master.mediaGroups[mediaType][groupKey][labelKey];\n        callback(mediaProperties, mediaType, groupKey, labelKey);\n      }\n    }\n  });\n};\n/**\n  * Returns a new array of segments that is the result of merging\n  * properties from an older list of segments onto an updated\n  * list. No properties on the updated playlist will be overridden.\n  *\n  * @param {Array} original the outdated list of segments\n  * @param {Array} update the updated list of segments\n  * @param {Number=} offset the index of the first update\n  * segment in the original segment list. For non-live playlists,\n  * this should always be zero and does not need to be\n  * specified. For live playlists, it should be the difference\n  * between the media sequence numbers in the original and updated\n  * playlists.\n  * @return a list of merged segment objects\n  */\n\n\nvar updateSegments = function updateSegments(original, update, offset) {\n  var result = update.slice();\n  offset = offset || 0;\n  var length = Math.min(original.length, update.length + offset);\n\n  for (var i = offset; i < length; i++) {\n    result[i - offset] = mergeOptions$1(original[i], result[i - offset]);\n  }\n\n  return result;\n};\n\nvar resolveSegmentUris = function resolveSegmentUris(segment, baseUri) {\n  if (!segment.resolvedUri) {\n    segment.resolvedUri = resolveUrl(baseUri, segment.uri);\n  }\n\n  if (segment.key && !segment.key.resolvedUri) {\n    segment.key.resolvedUri = resolveUrl(baseUri, segment.key.uri);\n  }\n\n  if (segment.map && !segment.map.resolvedUri) {\n    segment.map.resolvedUri = resolveUrl(baseUri, segment.map.uri);\n  }\n};\n/**\n  * Returns a new master playlist that is the result of merging an\n  * updated media playlist into the original version. If the\n  * updated media playlist does not match any of the playlist\n  * entries in the original master playlist, null is returned.\n  *\n  * @param {Object} master a parsed master M3U8 object\n  * @param {Object} media a parsed media M3U8 object\n  * @return {Object} a new object that represents the original\n  * master playlist with the updated media playlist merged in, or\n  * null if the merge produced no change.\n  */\n\n\nvar updateMaster = function updateMaster(master, media) {\n  var result = mergeOptions$1(master, {});\n  var playlist = result.playlists[media.uri];\n\n  if (!playlist) {\n    return null;\n  } // consider the playlist unchanged if the number of segments is equal, the media\n  // sequence number is unchanged, and this playlist hasn't become the end of the playlist\n\n\n  if (playlist.segments && media.segments && playlist.segments.length === media.segments.length && playlist.endList === media.endList && playlist.mediaSequence === media.mediaSequence) {\n    return null;\n  }\n\n  var mergedPlaylist = mergeOptions$1(playlist, media); // if the update could overlap existing segment information, merge the two segment lists\n\n  if (playlist.segments) {\n    mergedPlaylist.segments = updateSegments(playlist.segments, media.segments, media.mediaSequence - playlist.mediaSequence);\n  } // resolve any segment URIs to prevent us from having to do it later\n\n\n  mergedPlaylist.segments.forEach(function (segment) {\n    resolveSegmentUris(segment, mergedPlaylist.resolvedUri);\n  }); // TODO Right now in the playlists array there are two references to each playlist, one\n  // that is referenced by index, and one by URI. The index reference may no longer be\n  // necessary.\n\n  for (var i = 0; i < result.playlists.length; i++) {\n    if (result.playlists[i].uri === media.uri) {\n      result.playlists[i] = mergedPlaylist;\n    }\n  }\n\n  result.playlists[media.uri] = mergedPlaylist;\n  return result;\n};\n\nvar setupMediaPlaylists = function setupMediaPlaylists(master) {\n  // setup by-URI lookups and resolve media playlist URIs\n  var i = master.playlists.length;\n\n  while (i--) {\n    var playlist = master.playlists[i];\n    master.playlists[playlist.uri] = playlist;\n    playlist.resolvedUri = resolveUrl(master.uri, playlist.uri);\n    playlist.id = i;\n\n    if (!playlist.attributes) {\n      // Although the spec states an #EXT-X-STREAM-INF tag MUST have a\n      // BANDWIDTH attribute, we can play the stream without it. This means a poorly\n      // formatted master playlist may not have an attribute list. An attributes\n      // property is added here to prevent undefined references when we encounter\n      // this scenario.\n      playlist.attributes = {};\n      log$1.warn('Invalid playlist STREAM-INF detected. Missing BANDWIDTH attribute.');\n    }\n  }\n};\n\nvar resolveMediaGroupUris = function resolveMediaGroupUris(master) {\n  forEachMediaGroup(master, function (properties) {\n    if (properties.uri) {\n      properties.resolvedUri = resolveUrl(master.uri, properties.uri);\n    }\n  });\n};\n/**\n * Calculates the time to wait before refreshing a live playlist\n *\n * @param {Object} media\n *        The current media\n * @param {Boolean} update\n *        True if there were any updates from the last refresh, false otherwise\n * @return {Number}\n *         The time in ms to wait before refreshing the live playlist\n */\n\n\nvar refreshDelay = function refreshDelay(media, update) {\n  var lastSegment = media.segments[media.segments.length - 1];\n  var delay = void 0;\n\n  if (update && lastSegment && lastSegment.duration) {\n    delay = lastSegment.duration * 1000;\n  } else {\n    // if the playlist is unchanged since the last reload or last segment duration\n    // cannot be determined, try again after half the target duration\n    delay = (media.targetDuration || 10) * 500;\n  }\n\n  return delay;\n};\n/**\n * Load a playlist from a remote location\n *\n * @class PlaylistLoader\n * @extends Stream\n * @param {String} srcUrl the url to start with\n * @param {Boolean} withCredentials the withCredentials xhr option\n * @constructor\n */\n\n\nvar PlaylistLoader = function (_EventTarget) {\n  inherits(PlaylistLoader, _EventTarget);\n\n  function PlaylistLoader(srcUrl, hls) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    classCallCheck(this, PlaylistLoader);\n\n    var _this = possibleConstructorReturn(this, (PlaylistLoader.__proto__ || Object.getPrototypeOf(PlaylistLoader)).call(this));\n\n    var _options$withCredenti = options.withCredentials,\n        withCredentials = _options$withCredenti === undefined ? false : _options$withCredenti,\n        _options$handleManife = options.handleManifestRedirects,\n        handleManifestRedirects = _options$handleManife === undefined ? false : _options$handleManife;\n    _this.srcUrl = srcUrl;\n    _this.hls_ = hls;\n    _this.withCredentials = withCredentials;\n    _this.handleManifestRedirects = handleManifestRedirects;\n    var hlsOptions = hls.options_;\n    _this.customTagParsers = hlsOptions && hlsOptions.customTagParsers || [];\n    _this.customTagMappers = hlsOptions && hlsOptions.customTagMappers || [];\n\n    if (!_this.srcUrl) {\n      throw new Error('A non-empty playlist URL is required');\n    } // initialize the loader state\n\n\n    _this.state = 'HAVE_NOTHING'; // live playlist staleness timeout\n\n    _this.on('mediaupdatetimeout', function () {\n      if (_this.state !== 'HAVE_METADATA') {\n        // only refresh the media playlist if no other activity is going on\n        return;\n      }\n\n      _this.state = 'HAVE_CURRENT_METADATA';\n      _this.request = _this.hls_.xhr({\n        uri: resolveUrl(_this.master.uri, _this.media().uri),\n        withCredentials: _this.withCredentials\n      }, function (error, req) {\n        // disposed\n        if (!_this.request) {\n          return;\n        }\n\n        if (error) {\n          return _this.playlistRequestError(_this.request, _this.media().uri, 'HAVE_METADATA');\n        }\n\n        _this.haveMetadata(_this.request, _this.media().uri);\n      });\n    });\n\n    return _this;\n  }\n\n  createClass(PlaylistLoader, [{\n    key: 'playlistRequestError',\n    value: function playlistRequestError(xhr, url, startingState) {\n      // any in-flight request is now finished\n      this.request = null;\n\n      if (startingState) {\n        this.state = startingState;\n      }\n\n      this.error = {\n        playlist: this.master.playlists[url],\n        status: xhr.status,\n        message: 'HLS playlist request error at URL: ' + url + '.',\n        responseText: xhr.responseText,\n        code: xhr.status >= 500 ? 4 : 2\n      };\n      this.trigger('error');\n    } // update the playlist loader's state in response to a new or\n    // updated playlist.\n\n  }, {\n    key: 'haveMetadata',\n    value: function haveMetadata(xhr, url) {\n      var _this2 = this; // any in-flight request is now finished\n\n\n      this.request = null;\n      this.state = 'HAVE_METADATA';\n      var parser = new Parser(); // adding custom tag parsers\n\n      this.customTagParsers.forEach(function (customParser) {\n        return parser.addParser(customParser);\n      }); // adding custom tag mappers\n\n      this.customTagMappers.forEach(function (mapper) {\n        return parser.addTagMapper(mapper);\n      });\n      parser.push(xhr.responseText);\n      parser.end();\n      parser.manifest.uri = url; // m3u8-parser does not attach an attributes property to media playlists so make\n      // sure that the property is attached to avoid undefined reference errors\n\n      parser.manifest.attributes = parser.manifest.attributes || {}; // merge this playlist into the master\n\n      var update = updateMaster(this.master, parser.manifest);\n      this.targetDuration = parser.manifest.targetDuration;\n\n      if (update) {\n        this.master = update;\n        this.media_ = this.master.playlists[parser.manifest.uri];\n      } else {\n        this.trigger('playlistunchanged');\n      } // refresh live playlists after a target duration passes\n\n\n      if (!this.media().endList) {\n        window$1.clearTimeout(this.mediaUpdateTimeout);\n        this.mediaUpdateTimeout = window$1.setTimeout(function () {\n          _this2.trigger('mediaupdatetimeout');\n        }, refreshDelay(this.media(), !!update));\n      }\n\n      this.trigger('loadedplaylist');\n    }\n    /**\n     * Abort any outstanding work and clean up.\n     */\n\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      this.stopRequest();\n      window$1.clearTimeout(this.mediaUpdateTimeout);\n      window$1.clearTimeout(this.finalRenditionTimeout);\n    }\n  }, {\n    key: 'stopRequest',\n    value: function stopRequest() {\n      if (this.request) {\n        var oldRequest = this.request;\n        this.request = null;\n        oldRequest.onreadystatechange = null;\n        oldRequest.abort();\n      }\n    }\n    /**\n     * When called without any arguments, returns the currently\n     * active media playlist. When called with a single argument,\n     * triggers the playlist loader to asynchronously switch to the\n     * specified media playlist. Calling this method while the\n     * loader is in the HAVE_NOTHING causes an error to be emitted\n     * but otherwise has no effect.\n     *\n     * @param {Object=} playlist the parsed media playlist\n     * object to switch to\n     * @param {Boolean=} is this the last available playlist\n     *\n     * @return {Playlist} the current loaded media\n     */\n\n  }, {\n    key: 'media',\n    value: function media(playlist, isFinalRendition) {\n      var _this3 = this; // getter\n\n\n      if (!playlist) {\n        return this.media_;\n      } // setter\n\n\n      if (this.state === 'HAVE_NOTHING') {\n        throw new Error('Cannot switch media playlist from ' + this.state);\n      } // find the playlist object if the target playlist has been\n      // specified by URI\n\n\n      if (typeof playlist === 'string') {\n        if (!this.master.playlists[playlist]) {\n          throw new Error('Unknown playlist URI: ' + playlist);\n        }\n\n        playlist = this.master.playlists[playlist];\n      }\n\n      window$1.clearTimeout(this.finalRenditionTimeout);\n\n      if (isFinalRendition) {\n        var delay = playlist.targetDuration / 2 * 1000 || 5 * 1000;\n        this.finalRenditionTimeout = window$1.setTimeout(this.media.bind(this, playlist, false), delay);\n        return;\n      }\n\n      var startingState = this.state;\n      var mediaChange = !this.media_ || playlist.uri !== this.media_.uri; // switch to fully loaded playlists immediately\n\n      if (this.master.playlists[playlist.uri].endList) {\n        // abort outstanding playlist requests\n        if (this.request) {\n          this.request.onreadystatechange = null;\n          this.request.abort();\n          this.request = null;\n        }\n\n        this.state = 'HAVE_METADATA';\n        this.media_ = playlist; // trigger media change if the active media has been updated\n\n        if (mediaChange) {\n          this.trigger('mediachanging');\n          this.trigger('mediachange');\n        }\n\n        return;\n      } // switching to the active playlist is a no-op\n\n\n      if (!mediaChange) {\n        return;\n      }\n\n      this.state = 'SWITCHING_MEDIA'; // there is already an outstanding playlist request\n\n      if (this.request) {\n        if (playlist.resolvedUri === this.request.url) {\n          // requesting to switch to the same playlist multiple times\n          // has no effect after the first\n          return;\n        }\n\n        this.request.onreadystatechange = null;\n        this.request.abort();\n        this.request = null;\n      } // request the new playlist\n\n\n      if (this.media_) {\n        this.trigger('mediachanging');\n      }\n\n      this.request = this.hls_.xhr({\n        uri: playlist.resolvedUri,\n        withCredentials: this.withCredentials\n      }, function (error, req) {\n        // disposed\n        if (!_this3.request) {\n          return;\n        }\n\n        playlist.resolvedUri = resolveManifestRedirect(_this3.handleManifestRedirects, playlist.resolvedUri, req);\n\n        if (error) {\n          return _this3.playlistRequestError(_this3.request, playlist.uri, startingState);\n        }\n\n        _this3.haveMetadata(req, playlist.uri); // fire loadedmetadata the first time a media playlist is loaded\n\n\n        if (startingState === 'HAVE_MASTER') {\n          _this3.trigger('loadedmetadata');\n        } else {\n          _this3.trigger('mediachange');\n        }\n      });\n    }\n    /**\n     * pause loading of the playlist\n     */\n\n  }, {\n    key: 'pause',\n    value: function pause() {\n      this.stopRequest();\n      window$1.clearTimeout(this.mediaUpdateTimeout);\n\n      if (this.state === 'HAVE_NOTHING') {\n        // If we pause the loader before any data has been retrieved, its as if we never\n        // started, so reset to an unstarted state.\n        this.started = false;\n      } // Need to restore state now that no activity is happening\n\n\n      if (this.state === 'SWITCHING_MEDIA') {\n        // if the loader was in the process of switching media, it should either return to\n        // HAVE_MASTER or HAVE_METADATA depending on if the loader has loaded a media\n        // playlist yet. This is determined by the existence of loader.media_\n        if (this.media_) {\n          this.state = 'HAVE_METADATA';\n        } else {\n          this.state = 'HAVE_MASTER';\n        }\n      } else if (this.state === 'HAVE_CURRENT_METADATA') {\n        this.state = 'HAVE_METADATA';\n      }\n    }\n    /**\n     * start loading of the playlist\n     */\n\n  }, {\n    key: 'load',\n    value: function load(isFinalRendition) {\n      var _this4 = this;\n\n      window$1.clearTimeout(this.mediaUpdateTimeout);\n      var media = this.media();\n\n      if (isFinalRendition) {\n        var delay = media ? media.targetDuration / 2 * 1000 : 5 * 1000;\n        this.mediaUpdateTimeout = window$1.setTimeout(function () {\n          return _this4.load();\n        }, delay);\n        return;\n      }\n\n      if (!this.started) {\n        this.start();\n        return;\n      }\n\n      if (media && !media.endList) {\n        this.trigger('mediaupdatetimeout');\n      } else {\n        this.trigger('loadedplaylist');\n      }\n    }\n    /**\n     * start loading of the playlist\n     */\n\n  }, {\n    key: 'start',\n    value: function start() {\n      var _this5 = this;\n\n      this.started = true; // request the specified URL\n\n      this.request = this.hls_.xhr({\n        uri: this.srcUrl,\n        withCredentials: this.withCredentials\n      }, function (error, req) {\n        // disposed\n        if (!_this5.request) {\n          return;\n        } // clear the loader's request reference\n\n\n        _this5.request = null;\n\n        if (error) {\n          _this5.error = {\n            status: req.status,\n            message: 'HLS playlist request error at URL: ' + _this5.srcUrl + '.',\n            responseText: req.responseText,\n            // MEDIA_ERR_NETWORK\n            code: 2\n          };\n\n          if (_this5.state === 'HAVE_NOTHING') {\n            _this5.started = false;\n          }\n\n          return _this5.trigger('error');\n        }\n\n        var parser = new Parser(); // adding custom tag parsers\n\n        _this5.customTagParsers.forEach(function (customParser) {\n          return parser.addParser(customParser);\n        }); // adding custom tag mappers\n\n\n        _this5.customTagMappers.forEach(function (mapper) {\n          return parser.addTagMapper(mapper);\n        });\n\n        parser.push(req.responseText);\n        parser.end();\n        _this5.state = 'HAVE_MASTER';\n        _this5.srcUrl = resolveManifestRedirect(_this5.handleManifestRedirects, _this5.srcUrl, req);\n        parser.manifest.uri = _this5.srcUrl; // loaded a master playlist\n\n        if (parser.manifest.playlists) {\n          _this5.master = parser.manifest;\n          setupMediaPlaylists(_this5.master);\n          resolveMediaGroupUris(_this5.master);\n\n          _this5.trigger('loadedplaylist');\n\n          if (!_this5.request) {\n            // no media playlist was specifically selected so start\n            // from the first listed one\n            _this5.media(parser.manifest.playlists[0]);\n          }\n\n          return;\n        } // loaded a media playlist\n        // infer a master playlist if none was previously requested\n\n\n        _this5.master = {\n          mediaGroups: {\n            'AUDIO': {},\n            'VIDEO': {},\n            'CLOSED-CAPTIONS': {},\n            'SUBTITLES': {}\n          },\n          uri: window$1.location.href,\n          playlists: [{\n            uri: _this5.srcUrl,\n            id: 0,\n            resolvedUri: _this5.srcUrl,\n            // m3u8-parser does not attach an attributes property to media playlists so make\n            // sure that the property is attached to avoid undefined reference errors\n            attributes: {}\n          }]\n        };\n        _this5.master.playlists[_this5.srcUrl] = _this5.master.playlists[0];\n\n        _this5.haveMetadata(req, _this5.srcUrl);\n\n        return _this5.trigger('loadedmetadata');\n      });\n    }\n  }]);\n  return PlaylistLoader;\n}(EventTarget$1);\n/**\n * @file playlist.js\n *\n * Playlist related utilities.\n */\n\n\nvar createTimeRange = videojs$1.createTimeRange;\n/**\n * walk backward until we find a duration we can use\n * or return a failure\n *\n * @param {Playlist} playlist the playlist to walk through\n * @param {Number} endSequence the mediaSequence to stop walking on\n */\n\nvar backwardDuration = function backwardDuration(playlist, endSequence) {\n  var result = 0;\n  var i = endSequence - playlist.mediaSequence; // if a start time is available for segment immediately following\n  // the interval, use it\n\n  var segment = playlist.segments[i]; // Walk backward until we find the latest segment with timeline\n  // information that is earlier than endSequence\n\n  if (segment) {\n    if (typeof segment.start !== 'undefined') {\n      return {\n        result: segment.start,\n        precise: true\n      };\n    }\n\n    if (typeof segment.end !== 'undefined') {\n      return {\n        result: segment.end - segment.duration,\n        precise: true\n      };\n    }\n  }\n\n  while (i--) {\n    segment = playlist.segments[i];\n\n    if (typeof segment.end !== 'undefined') {\n      return {\n        result: result + segment.end,\n        precise: true\n      };\n    }\n\n    result += segment.duration;\n\n    if (typeof segment.start !== 'undefined') {\n      return {\n        result: result + segment.start,\n        precise: true\n      };\n    }\n  }\n\n  return {\n    result: result,\n    precise: false\n  };\n};\n/**\n * walk forward until we find a duration we can use\n * or return a failure\n *\n * @param {Playlist} playlist the playlist to walk through\n * @param {Number} endSequence the mediaSequence to stop walking on\n */\n\n\nvar forwardDuration = function forwardDuration(playlist, endSequence) {\n  var result = 0;\n  var segment = void 0;\n  var i = endSequence - playlist.mediaSequence; // Walk forward until we find the earliest segment with timeline\n  // information\n\n  for (; i < playlist.segments.length; i++) {\n    segment = playlist.segments[i];\n\n    if (typeof segment.start !== 'undefined') {\n      return {\n        result: segment.start - result,\n        precise: true\n      };\n    }\n\n    result += segment.duration;\n\n    if (typeof segment.end !== 'undefined') {\n      return {\n        result: segment.end - result,\n        precise: true\n      };\n    }\n  } // indicate we didn't find a useful duration estimate\n\n\n  return {\n    result: -1,\n    precise: false\n  };\n};\n/**\n  * Calculate the media duration from the segments associated with a\n  * playlist. The duration of a subinterval of the available segments\n  * may be calculated by specifying an end index.\n  *\n  * @param {Object} playlist a media playlist object\n  * @param {Number=} endSequence an exclusive upper boundary\n  * for the playlist.  Defaults to playlist length.\n  * @param {Number} expired the amount of time that has dropped\n  * off the front of the playlist in a live scenario\n  * @return {Number} the duration between the first available segment\n  * and end index.\n  */\n\n\nvar intervalDuration = function intervalDuration(playlist, endSequence, expired) {\n  var backward = void 0;\n  var forward = void 0;\n\n  if (typeof endSequence === 'undefined') {\n    endSequence = playlist.mediaSequence + playlist.segments.length;\n  }\n\n  if (endSequence < playlist.mediaSequence) {\n    return 0;\n  } // do a backward walk to estimate the duration\n\n\n  backward = backwardDuration(playlist, endSequence);\n\n  if (backward.precise) {\n    // if we were able to base our duration estimate on timing\n    // information provided directly from the Media Source, return\n    // it\n    return backward.result;\n  } // walk forward to see if a precise duration estimate can be made\n  // that way\n\n\n  forward = forwardDuration(playlist, endSequence);\n\n  if (forward.precise) {\n    // we found a segment that has been buffered and so it's\n    // position is known precisely\n    return forward.result;\n  } // return the less-precise, playlist-based duration estimate\n\n\n  return backward.result + expired;\n};\n/**\n  * Calculates the duration of a playlist. If a start and end index\n  * are specified, the duration will be for the subset of the media\n  * timeline between those two indices. The total duration for live\n  * playlists is always Infinity.\n  *\n  * @param {Object} playlist a media playlist object\n  * @param {Number=} endSequence an exclusive upper\n  * boundary for the playlist. Defaults to the playlist media\n  * sequence number plus its length.\n  * @param {Number=} expired the amount of time that has\n  * dropped off the front of the playlist in a live scenario\n  * @return {Number} the duration between the start index and end\n  * index.\n  */\n\n\nvar duration = function duration(playlist, endSequence, expired) {\n  if (!playlist) {\n    return 0;\n  }\n\n  if (typeof expired !== 'number') {\n    expired = 0;\n  } // if a slice of the total duration is not requested, use\n  // playlist-level duration indicators when they're present\n\n\n  if (typeof endSequence === 'undefined') {\n    // if present, use the duration specified in the playlist\n    if (playlist.totalDuration) {\n      return playlist.totalDuration;\n    } // duration should be Infinity for live playlists\n\n\n    if (!playlist.endList) {\n      return window$1.Infinity;\n    }\n  } // calculate the total duration based on the segment durations\n\n\n  return intervalDuration(playlist, endSequence, expired);\n};\n/**\n  * Calculate the time between two indexes in the current playlist\n  * neight the start- nor the end-index need to be within the current\n  * playlist in which case, the targetDuration of the playlist is used\n  * to approximate the durations of the segments\n  *\n  * @param {Object} playlist a media playlist object\n  * @param {Number} startIndex\n  * @param {Number} endIndex\n  * @return {Number} the number of seconds between startIndex and endIndex\n  */\n\n\nvar sumDurations = function sumDurations(playlist, startIndex, endIndex) {\n  var durations = 0;\n\n  if (startIndex > endIndex) {\n    var _ref = [endIndex, startIndex];\n    startIndex = _ref[0];\n    endIndex = _ref[1];\n  }\n\n  if (startIndex < 0) {\n    for (var i = startIndex; i < Math.min(0, endIndex); i++) {\n      durations += playlist.targetDuration;\n    }\n\n    startIndex = 0;\n  }\n\n  for (var _i = startIndex; _i < endIndex; _i++) {\n    durations += playlist.segments[_i].duration;\n  }\n\n  return durations;\n};\n/**\n * Determines the media index of the segment corresponding to the safe edge of the live\n * window which is the duration of the last segment plus 2 target durations from the end\n * of the playlist.\n *\n * @param {Object} playlist\n *        a media playlist object\n * @return {Number}\n *         The media index of the segment at the safe live point. 0 if there is no \"safe\"\n *         point.\n * @function safeLiveIndex\n */\n\n\nvar safeLiveIndex = function safeLiveIndex(playlist) {\n  if (!playlist.segments.length) {\n    return 0;\n  }\n\n  var i = playlist.segments.length - 1;\n  var distanceFromEnd = playlist.segments[i].duration || playlist.targetDuration;\n  var safeDistance = distanceFromEnd + playlist.targetDuration * 2;\n\n  while (i--) {\n    distanceFromEnd += playlist.segments[i].duration;\n\n    if (distanceFromEnd >= safeDistance) {\n      break;\n    }\n  }\n\n  return Math.max(0, i);\n};\n/**\n * Calculates the playlist end time\n *\n * @param {Object} playlist a media playlist object\n * @param {Number=} expired the amount of time that has\n *                  dropped off the front of the playlist in a live scenario\n * @param {Boolean|false} useSafeLiveEnd a boolean value indicating whether or not the\n *                        playlist end calculation should consider the safe live end\n *                        (truncate the playlist end by three segments). This is normally\n *                        used for calculating the end of the playlist's seekable range.\n * @returns {Number} the end time of playlist\n * @function playlistEnd\n */\n\n\nvar playlistEnd = function playlistEnd(playlist, expired, useSafeLiveEnd) {\n  if (!playlist || !playlist.segments) {\n    return null;\n  }\n\n  if (playlist.endList) {\n    return duration(playlist);\n  }\n\n  if (expired === null) {\n    return null;\n  }\n\n  expired = expired || 0;\n  var endSequence = useSafeLiveEnd ? safeLiveIndex(playlist) : playlist.segments.length;\n  return intervalDuration(playlist, playlist.mediaSequence + endSequence, expired);\n};\n/**\n  * Calculates the interval of time that is currently seekable in a\n  * playlist. The returned time ranges are relative to the earliest\n  * moment in the specified playlist that is still available. A full\n  * seekable implementation for live streams would need to offset\n  * these values by the duration of content that has expired from the\n  * stream.\n  *\n  * @param {Object} playlist a media playlist object\n  * dropped off the front of the playlist in a live scenario\n  * @param {Number=} expired the amount of time that has\n  * dropped off the front of the playlist in a live scenario\n  * @return {TimeRanges} the periods of time that are valid targets\n  * for seeking\n  */\n\n\nvar seekable = function seekable(playlist, expired) {\n  var useSafeLiveEnd = true;\n  var seekableStart = expired || 0;\n  var seekableEnd = playlistEnd(playlist, expired, useSafeLiveEnd);\n\n  if (seekableEnd === null) {\n    return createTimeRange();\n  }\n\n  return createTimeRange(seekableStart, seekableEnd);\n};\n\nvar isWholeNumber = function isWholeNumber(num) {\n  return num - Math.floor(num) === 0;\n};\n\nvar roundSignificantDigit = function roundSignificantDigit(increment, num) {\n  // If we have a whole number, just add 1 to it\n  if (isWholeNumber(num)) {\n    return num + increment * 0.1;\n  }\n\n  var numDecimalDigits = num.toString().split('.')[1].length;\n\n  for (var i = 1; i <= numDecimalDigits; i++) {\n    var scale = Math.pow(10, i);\n    var temp = num * scale;\n\n    if (isWholeNumber(temp) || i === numDecimalDigits) {\n      return (temp + increment) / scale;\n    }\n  }\n};\n\nvar ceilLeastSignificantDigit = roundSignificantDigit.bind(null, 1);\nvar floorLeastSignificantDigit = roundSignificantDigit.bind(null, -1);\n/**\n * Determine the index and estimated starting time of the segment that\n * contains a specified playback position in a media playlist.\n *\n * @param {Object} playlist the media playlist to query\n * @param {Number} currentTime The number of seconds since the earliest\n * possible position to determine the containing segment for\n * @param {Number} startIndex\n * @param {Number} startTime\n * @return {Object}\n */\n\nvar getMediaInfoForTime = function getMediaInfoForTime(playlist, currentTime, startIndex, startTime) {\n  var i = void 0;\n  var segment = void 0;\n  var numSegments = playlist.segments.length;\n  var time = currentTime - startTime;\n\n  if (time < 0) {\n    // Walk backward from startIndex in the playlist, adding durations\n    // until we find a segment that contains `time` and return it\n    if (startIndex > 0) {\n      for (i = startIndex - 1; i >= 0; i--) {\n        segment = playlist.segments[i];\n        time += floorLeastSignificantDigit(segment.duration);\n\n        if (time > 0) {\n          return {\n            mediaIndex: i,\n            startTime: startTime - sumDurations(playlist, startIndex, i)\n          };\n        }\n      }\n    } // We were unable to find a good segment within the playlist\n    // so select the first segment\n\n\n    return {\n      mediaIndex: 0,\n      startTime: currentTime\n    };\n  } // When startIndex is negative, we first walk forward to first segment\n  // adding target durations. If we \"run out of time\" before getting to\n  // the first segment, return the first segment\n\n\n  if (startIndex < 0) {\n    for (i = startIndex; i < 0; i++) {\n      time -= playlist.targetDuration;\n\n      if (time < 0) {\n        return {\n          mediaIndex: 0,\n          startTime: currentTime\n        };\n      }\n    }\n\n    startIndex = 0;\n  } // Walk forward from startIndex in the playlist, subtracting durations\n  // until we find a segment that contains `time` and return it\n\n\n  for (i = startIndex; i < numSegments; i++) {\n    segment = playlist.segments[i];\n    time -= ceilLeastSignificantDigit(segment.duration);\n\n    if (time < 0) {\n      return {\n        mediaIndex: i,\n        startTime: startTime + sumDurations(playlist, startIndex, i)\n      };\n    }\n  } // We are out of possible candidates so load the last one...\n\n\n  return {\n    mediaIndex: numSegments - 1,\n    startTime: currentTime\n  };\n};\n/**\n * Check whether the playlist is blacklisted or not.\n *\n * @param {Object} playlist the media playlist object\n * @return {boolean} whether the playlist is blacklisted or not\n * @function isBlacklisted\n */\n\n\nvar isBlacklisted = function isBlacklisted(playlist) {\n  return playlist.excludeUntil && playlist.excludeUntil > Date.now();\n};\n/**\n * Check whether the playlist is compatible with current playback configuration or has\n * been blacklisted permanently for being incompatible.\n *\n * @param {Object} playlist the media playlist object\n * @return {boolean} whether the playlist is incompatible or not\n * @function isIncompatible\n */\n\n\nvar isIncompatible = function isIncompatible(playlist) {\n  return playlist.excludeUntil && playlist.excludeUntil === Infinity;\n};\n/**\n * Check whether the playlist is enabled or not.\n *\n * @param {Object} playlist the media playlist object\n * @return {boolean} whether the playlist is enabled or not\n * @function isEnabled\n */\n\n\nvar isEnabled = function isEnabled(playlist) {\n  var blacklisted = isBlacklisted(playlist);\n  return !playlist.disabled && !blacklisted;\n};\n/**\n * Check whether the playlist has been manually disabled through the representations api.\n *\n * @param {Object} playlist the media playlist object\n * @return {boolean} whether the playlist is disabled manually or not\n * @function isDisabled\n */\n\n\nvar isDisabled = function isDisabled(playlist) {\n  return playlist.disabled;\n};\n/**\n * Returns whether the current playlist is an AES encrypted HLS stream\n *\n * @return {Boolean} true if it's an AES encrypted HLS stream\n */\n\n\nvar isAes = function isAes(media) {\n  for (var i = 0; i < media.segments.length; i++) {\n    if (media.segments[i].key) {\n      return true;\n    }\n  }\n\n  return false;\n};\n/**\n * Returns whether the current playlist contains fMP4\n *\n * @return {Boolean} true if the playlist contains fMP4\n */\n\n\nvar isFmp4 = function isFmp4(media) {\n  for (var i = 0; i < media.segments.length; i++) {\n    if (media.segments[i].map) {\n      return true;\n    }\n  }\n\n  return false;\n};\n/**\n * Checks if the playlist has a value for the specified attribute\n *\n * @param {String} attr\n *        Attribute to check for\n * @param {Object} playlist\n *        The media playlist object\n * @return {Boolean}\n *         Whether the playlist contains a value for the attribute or not\n * @function hasAttribute\n */\n\n\nvar hasAttribute = function hasAttribute(attr, playlist) {\n  return playlist.attributes && playlist.attributes[attr];\n};\n/**\n * Estimates the time required to complete a segment download from the specified playlist\n *\n * @param {Number} segmentDuration\n *        Duration of requested segment\n * @param {Number} bandwidth\n *        Current measured bandwidth of the player\n * @param {Object} playlist\n *        The media playlist object\n * @param {Number=} bytesReceived\n *        Number of bytes already received for the request. Defaults to 0\n * @return {Number|NaN}\n *         The estimated time to request the segment. NaN if bandwidth information for\n *         the given playlist is unavailable\n * @function estimateSegmentRequestTime\n */\n\n\nvar estimateSegmentRequestTime = function estimateSegmentRequestTime(segmentDuration, bandwidth, playlist) {\n  var bytesReceived = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n  if (!hasAttribute('BANDWIDTH', playlist)) {\n    return NaN;\n  }\n\n  var size = segmentDuration * playlist.attributes.BANDWIDTH;\n  return (size - bytesReceived * 8) / bandwidth;\n};\n/*\n * Returns whether the current playlist is the lowest rendition\n *\n * @return {Boolean} true if on lowest rendition\n */\n\n\nvar isLowestEnabledRendition = function isLowestEnabledRendition(master, media) {\n  if (master.playlists.length === 1) {\n    return true;\n  }\n\n  var currentBandwidth = media.attributes.BANDWIDTH || Number.MAX_VALUE;\n  return master.playlists.filter(function (playlist) {\n    if (!isEnabled(playlist)) {\n      return false;\n    }\n\n    return (playlist.attributes.BANDWIDTH || 0) < currentBandwidth;\n  }).length === 0;\n}; // exports\n\n\nvar Playlist = {\n  duration: duration,\n  seekable: seekable,\n  safeLiveIndex: safeLiveIndex,\n  getMediaInfoForTime: getMediaInfoForTime,\n  isEnabled: isEnabled,\n  isDisabled: isDisabled,\n  isBlacklisted: isBlacklisted,\n  isIncompatible: isIncompatible,\n  playlistEnd: playlistEnd,\n  isAes: isAes,\n  isFmp4: isFmp4,\n  hasAttribute: hasAttribute,\n  estimateSegmentRequestTime: estimateSegmentRequestTime,\n  isLowestEnabledRendition: isLowestEnabledRendition\n};\n/**\n * @file xhr.js\n */\n\nvar videojsXHR = videojs$1.xhr,\n    mergeOptions$1$1 = videojs$1.mergeOptions;\n\nvar xhrFactory = function xhrFactory() {\n  var xhr = function XhrFunction(options, callback) {\n    // Add a default timeout for all hls requests\n    options = mergeOptions$1$1({\n      timeout: 45e3\n    }, options); // Allow an optional user-specified function to modify the option\n    // object before we construct the xhr request\n\n    var beforeRequest = XhrFunction.beforeRequest || videojs$1.Hls.xhr.beforeRequest;\n\n    if (beforeRequest && typeof beforeRequest === 'function') {\n      var newOptions = beforeRequest(options);\n\n      if (newOptions) {\n        options = newOptions;\n      }\n    }\n\n    var request = videojsXHR(options, function (error, response) {\n      var reqResponse = request.response;\n\n      if (!error && reqResponse) {\n        request.responseTime = Date.now();\n        request.roundTripTime = request.responseTime - request.requestTime;\n        request.bytesReceived = reqResponse.byteLength || reqResponse.length;\n\n        if (!request.bandwidth) {\n          request.bandwidth = Math.floor(request.bytesReceived / request.roundTripTime * 8 * 1000);\n        }\n      }\n\n      if (response.headers) {\n        request.responseHeaders = response.headers;\n      } // videojs.xhr now uses a specific code on the error\n      // object to signal that a request has timed out instead\n      // of setting a boolean on the request object\n\n\n      if (error && error.code === 'ETIMEDOUT') {\n        request.timedout = true;\n      } // videojs.xhr no longer considers status codes outside of 200 and 0\n      // (for file uris) to be errors, but the old XHR did, so emulate that\n      // behavior. Status 206 may be used in response to byterange requests.\n\n\n      if (!error && !request.aborted && response.statusCode !== 200 && response.statusCode !== 206 && response.statusCode !== 0) {\n        error = new Error('XHR Failed with a response of: ' + (request && (reqResponse || request.responseText)));\n      }\n\n      callback(error, request);\n    });\n    var originalAbort = request.abort;\n\n    request.abort = function () {\n      request.aborted = true;\n      return originalAbort.apply(request, arguments);\n    };\n\n    request.uri = options.uri;\n    request.requestTime = Date.now();\n    return request;\n  };\n\n  return xhr;\n};\n/**\n * Turns segment byterange into a string suitable for use in\n * HTTP Range requests\n *\n * @param {Object} byterange - an object with two values defining the start and end\n *                             of a byte-range\n */\n\n\nvar byterangeStr = function byterangeStr(byterange) {\n  var byterangeStart = void 0;\n  var byterangeEnd = void 0; // `byterangeEnd` is one less than `offset + length` because the HTTP range\n  // header uses inclusive ranges\n\n  byterangeEnd = byterange.offset + byterange.length - 1;\n  byterangeStart = byterange.offset;\n  return 'bytes=' + byterangeStart + '-' + byterangeEnd;\n};\n/**\n * Defines headers for use in the xhr request for a particular segment.\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n */\n\n\nvar segmentXhrHeaders = function segmentXhrHeaders(segment) {\n  var headers = {};\n\n  if (segment.byterange) {\n    headers.Range = byterangeStr(segment.byterange);\n  }\n\n  return headers;\n};\n/**\n * @file bin-utils.js\n */\n\n/**\n * convert a TimeRange to text\n *\n * @param {TimeRange} range the timerange to use for conversion\n * @param {Number} i the iterator on the range to convert\n */\n\n\nvar textRange = function textRange(range, i) {\n  return range.start(i) + '-' + range.end(i);\n};\n/**\n * format a number as hex string\n *\n * @param {Number} e The number\n * @param {Number} i the iterator\n */\n\n\nvar formatHexString = function formatHexString(e, i) {\n  var value = e.toString(16);\n  return '00'.substring(0, 2 - value.length) + value + (i % 2 ? ' ' : '');\n};\n\nvar formatAsciiString = function formatAsciiString(e) {\n  if (e >= 0x20 && e < 0x7e) {\n    return String.fromCharCode(e);\n  }\n\n  return '.';\n};\n/**\n * Creates an object for sending to a web worker modifying properties that are TypedArrays\n * into a new object with seperated properties for the buffer, byteOffset, and byteLength.\n *\n * @param {Object} message\n *        Object of properties and values to send to the web worker\n * @return {Object}\n *         Modified message with TypedArray values expanded\n * @function createTransferableMessage\n */\n\n\nvar createTransferableMessage = function createTransferableMessage(message) {\n  var transferable = {};\n  Object.keys(message).forEach(function (key) {\n    var value = message[key];\n\n    if (ArrayBuffer.isView(value)) {\n      transferable[key] = {\n        bytes: value.buffer,\n        byteOffset: value.byteOffset,\n        byteLength: value.byteLength\n      };\n    } else {\n      transferable[key] = value;\n    }\n  });\n  return transferable;\n};\n/**\n * Returns a unique string identifier for a media initialization\n * segment.\n */\n\n\nvar initSegmentId = function initSegmentId(initSegment) {\n  var byterange = initSegment.byterange || {\n    length: Infinity,\n    offset: 0\n  };\n  return [byterange.length, byterange.offset, initSegment.resolvedUri].join(',');\n};\n/**\n * Returns a unique string identifier for a media segment key.\n */\n\n\nvar segmentKeyId = function segmentKeyId(key) {\n  return key.resolvedUri;\n};\n/**\n * utils to help dump binary data to the console\n */\n\n\nvar hexDump = function hexDump(data) {\n  var bytes = Array.prototype.slice.call(data);\n  var step = 16;\n  var result = '';\n  var hex = void 0;\n  var ascii = void 0;\n\n  for (var j = 0; j < bytes.length / step; j++) {\n    hex = bytes.slice(j * step, j * step + step).map(formatHexString).join('');\n    ascii = bytes.slice(j * step, j * step + step).map(formatAsciiString).join('');\n    result += hex + ' ' + ascii + '\\n';\n  }\n\n  return result;\n};\n\nvar tagDump = function tagDump(_ref) {\n  var bytes = _ref.bytes;\n  return hexDump(bytes);\n};\n\nvar textRanges = function textRanges(ranges) {\n  var result = '';\n  var i = void 0;\n\n  for (i = 0; i < ranges.length; i++) {\n    result += textRange(ranges, i) + ' ';\n  }\n\n  return result;\n};\n\nvar utils =\n/*#__PURE__*/\nObject.freeze({\n  createTransferableMessage: createTransferableMessage,\n  initSegmentId: initSegmentId,\n  segmentKeyId: segmentKeyId,\n  hexDump: hexDump,\n  tagDump: tagDump,\n  textRanges: textRanges\n}); // TODO handle fmp4 case where the timing info is accurate and doesn't involve transmux\n// Add 25% to the segment duration to account for small discrepencies in segment timing.\n// 25% was arbitrarily chosen, and may need to be refined over time.\n\nvar SEGMENT_END_FUDGE_PERCENT = 0.25;\n/**\n * Converts a player time (any time that can be gotten/set from player.currentTime(),\n * e.g., any time within player.seekable().start(0) to player.seekable().end(0)) to a\n * program time (any time referencing the real world (e.g., EXT-X-PROGRAM-DATE-TIME)).\n *\n * The containing segment is required as the EXT-X-PROGRAM-DATE-TIME serves as an \"anchor\n * point\" (a point where we have a mapping from program time to player time, with player\n * time being the post transmux start of the segment).\n *\n * For more details, see [this doc](../../docs/program-time-from-player-time.md).\n *\n * @param {Number} playerTime the player time\n * @param {Object} segment the segment which contains the player time\n * @return {Date} program time\n */\n\nvar playerTimeToProgramTime = function playerTimeToProgramTime(playerTime, segment) {\n  if (!segment.dateTimeObject) {\n    // Can't convert without an \"anchor point\" for the program time (i.e., a time that can\n    // be used to map the start of a segment with a real world time).\n    return null;\n  }\n\n  var transmuxerPrependedSeconds = segment.videoTimingInfo.transmuxerPrependedSeconds;\n  var transmuxedStart = segment.videoTimingInfo.transmuxedPresentationStart; // get the start of the content from before old content is prepended\n\n  var startOfSegment = transmuxedStart + transmuxerPrependedSeconds;\n  var offsetFromSegmentStart = playerTime - startOfSegment;\n  return new Date(segment.dateTimeObject.getTime() + offsetFromSegmentStart * 1000);\n};\n\nvar originalSegmentVideoDuration = function originalSegmentVideoDuration(videoTimingInfo) {\n  return videoTimingInfo.transmuxedPresentationEnd - videoTimingInfo.transmuxedPresentationStart - videoTimingInfo.transmuxerPrependedSeconds;\n};\n/**\n * Finds a segment that contains the time requested given as an ISO-8601 string. The\n * returned segment might be an estimate or an accurate match.\n *\n * @param {String} programTime The ISO-8601 programTime to find a match for\n * @param {Object} playlist A playlist object to search within\n */\n\n\nvar findSegmentForProgramTime = function findSegmentForProgramTime(programTime, playlist) {\n  // Assumptions:\n  //  - verifyProgramDateTimeTags has already been run\n  //  - live streams have been started\n  var dateTimeObject = void 0;\n\n  try {\n    dateTimeObject = new Date(programTime);\n  } catch (e) {\n    return null;\n  }\n\n  if (!playlist || !playlist.segments || playlist.segments.length === 0) {\n    return null;\n  }\n\n  var segment = playlist.segments[0];\n\n  if (dateTimeObject < segment.dateTimeObject) {\n    // Requested time is before stream start.\n    return null;\n  }\n\n  for (var i = 0; i < playlist.segments.length - 1; i++) {\n    segment = playlist.segments[i];\n    var nextSegmentStart = playlist.segments[i + 1].dateTimeObject;\n\n    if (dateTimeObject < nextSegmentStart) {\n      break;\n    }\n  }\n\n  var lastSegment = playlist.segments[playlist.segments.length - 1];\n  var lastSegmentStart = lastSegment.dateTimeObject;\n  var lastSegmentDuration = lastSegment.videoTimingInfo ? originalSegmentVideoDuration(lastSegment.videoTimingInfo) : lastSegment.duration + lastSegment.duration * SEGMENT_END_FUDGE_PERCENT;\n  var lastSegmentEnd = new Date(lastSegmentStart.getTime() + lastSegmentDuration * 1000);\n\n  if (dateTimeObject > lastSegmentEnd) {\n    // Beyond the end of the stream, or our best guess of the end of the stream.\n    return null;\n  }\n\n  if (dateTimeObject > lastSegmentStart) {\n    segment = lastSegment;\n  }\n\n  return {\n    segment: segment,\n    estimatedStart: segment.videoTimingInfo ? segment.videoTimingInfo.transmuxedPresentationStart : Playlist.duration(playlist, playlist.mediaSequence + playlist.segments.indexOf(segment)),\n    // Although, given that all segments have accurate date time objects, the segment\n    // selected should be accurate, unless the video has been transmuxed at some point\n    // (determined by the presence of the videoTimingInfo object), the segment's \"player\n    // time\" (the start time in the player) can't be considered accurate.\n    type: segment.videoTimingInfo ? 'accurate' : 'estimate'\n  };\n};\n/**\n * Finds a segment that contains the given player time(in seconds).\n *\n * @param {Number} time The player time to find a match for\n * @param {Object} playlist A playlist object to search within\n */\n\n\nvar findSegmentForPlayerTime = function findSegmentForPlayerTime(time, playlist) {\n  // Assumptions:\n  // - there will always be a segment.duration\n  // - we can start from zero\n  // - segments are in time order\n  if (!playlist || !playlist.segments || playlist.segments.length === 0) {\n    return null;\n  }\n\n  var segmentEnd = 0;\n  var segment = void 0;\n\n  for (var i = 0; i < playlist.segments.length; i++) {\n    segment = playlist.segments[i]; // videoTimingInfo is set after the segment is downloaded and transmuxed, and\n    // should contain the most accurate values we have for the segment's player times.\n    //\n    // Use the accurate transmuxedPresentationEnd value if it is available, otherwise fall\n    // back to an estimate based on the manifest derived (inaccurate) segment.duration, to\n    // calculate an end value.\n\n    segmentEnd = segment.videoTimingInfo ? segment.videoTimingInfo.transmuxedPresentationEnd : segmentEnd + segment.duration;\n\n    if (time <= segmentEnd) {\n      break;\n    }\n  }\n\n  var lastSegment = playlist.segments[playlist.segments.length - 1];\n\n  if (lastSegment.videoTimingInfo && lastSegment.videoTimingInfo.transmuxedPresentationEnd < time) {\n    // The time requested is beyond the stream end.\n    return null;\n  }\n\n  if (time > segmentEnd) {\n    // The time is within or beyond the last segment.\n    //\n    // Check to see if the time is beyond a reasonable guess of the end of the stream.\n    if (time > segmentEnd + lastSegment.duration * SEGMENT_END_FUDGE_PERCENT) {\n      // Technically, because the duration value is only an estimate, the time may still\n      // exist in the last segment, however, there isn't enough information to make even\n      // a reasonable estimate.\n      return null;\n    }\n\n    segment = lastSegment;\n  }\n\n  return {\n    segment: segment,\n    estimatedStart: segment.videoTimingInfo ? segment.videoTimingInfo.transmuxedPresentationStart : segmentEnd - segment.duration,\n    // Because videoTimingInfo is only set after transmux, it is the only way to get\n    // accurate timing values.\n    type: segment.videoTimingInfo ? 'accurate' : 'estimate'\n  };\n};\n/**\n * Gives the offset of the comparisonTimestamp from the programTime timestamp in seconds.\n * If the offset returned is positive, the programTime occurs after the\n * comparisonTimestamp.\n * If the offset is negative, the programTime occurs before the comparisonTimestamp.\n *\n * @param {String} comparisonTimeStamp An ISO-8601 timestamp to compare against\n * @param {String} programTime The programTime as an ISO-8601 string\n * @return {Number} offset\n */\n\n\nvar getOffsetFromTimestamp = function getOffsetFromTimestamp(comparisonTimeStamp, programTime) {\n  var segmentDateTime = void 0;\n  var programDateTime = void 0;\n\n  try {\n    segmentDateTime = new Date(comparisonTimeStamp);\n    programDateTime = new Date(programTime);\n  } catch (e) {// TODO handle error\n  }\n\n  var segmentTimeEpoch = segmentDateTime.getTime();\n  var programTimeEpoch = programDateTime.getTime();\n  return (programTimeEpoch - segmentTimeEpoch) / 1000;\n};\n/**\n * Checks that all segments in this playlist have programDateTime tags.\n *\n * @param {Object} playlist A playlist object\n */\n\n\nvar verifyProgramDateTimeTags = function verifyProgramDateTimeTags(playlist) {\n  if (!playlist.segments || playlist.segments.length === 0) {\n    return false;\n  }\n\n  for (var i = 0; i < playlist.segments.length; i++) {\n    var segment = playlist.segments[i];\n\n    if (!segment.dateTimeObject) {\n      return false;\n    }\n  }\n\n  return true;\n};\n/**\n * Returns the programTime of the media given a playlist and a playerTime.\n * The playlist must have programDateTime tags for a programDateTime tag to be returned.\n * If the segments containing the time requested have not been buffered yet, an estimate\n * may be returned to the callback.\n *\n * @param {Object} args\n * @param {Object} args.playlist A playlist object to search within\n * @param {Number} time A playerTime in seconds\n * @param {Function} callback(err, programTime)\n * @returns {String} err.message A detailed error message\n * @returns {Object} programTime\n * @returns {Number} programTime.mediaSeconds The streamTime in seconds\n * @returns {String} programTime.programDateTime The programTime as an ISO-8601 String\n */\n\n\nvar getProgramTime = function getProgramTime(_ref) {\n  var playlist = _ref.playlist,\n      _ref$time = _ref.time,\n      time = _ref$time === undefined ? undefined : _ref$time,\n      callback = _ref.callback;\n\n  if (!callback) {\n    throw new Error('getProgramTime: callback must be provided');\n  }\n\n  if (!playlist || time === undefined) {\n    return callback({\n      message: 'getProgramTime: playlist and time must be provided'\n    });\n  }\n\n  var matchedSegment = findSegmentForPlayerTime(time, playlist);\n\n  if (!matchedSegment) {\n    return callback({\n      message: 'valid programTime was not found'\n    });\n  }\n\n  if (matchedSegment.type === 'estimate') {\n    return callback({\n      message: 'Accurate programTime could not be determined.' + ' Please seek to e.seekTime and try again',\n      seekTime: matchedSegment.estimatedStart\n    });\n  }\n\n  var programTimeObject = {\n    mediaSeconds: time\n  };\n  var programTime = playerTimeToProgramTime(time, matchedSegment.segment);\n\n  if (programTime) {\n    programTimeObject.programDateTime = programTime.toISOString();\n  }\n\n  return callback(null, programTimeObject);\n};\n/**\n * Seeks in the player to a time that matches the given programTime ISO-8601 string.\n *\n * @param {Object} args\n * @param {String} args.programTime A programTime to seek to as an ISO-8601 String\n * @param {Object} args.playlist A playlist to look within\n * @param {Number} args.retryCount The number of times to try for an accurate seek. Default is 2.\n * @param {Function} args.seekTo A method to perform a seek\n * @param {Boolean} args.pauseAfterSeek Whether to end in a paused state after seeking. Default is true.\n * @param {Object} args.tech The tech to seek on\n * @param {Function} args.callback(err, newTime) A callback to return the new time to\n * @returns {String} err.message A detailed error message\n * @returns {Number} newTime The exact time that was seeked to in seconds\n */\n\n\nvar seekToProgramTime = function seekToProgramTime(_ref2) {\n  var programTime = _ref2.programTime,\n      playlist = _ref2.playlist,\n      _ref2$retryCount = _ref2.retryCount,\n      retryCount = _ref2$retryCount === undefined ? 2 : _ref2$retryCount,\n      seekTo = _ref2.seekTo,\n      _ref2$pauseAfterSeek = _ref2.pauseAfterSeek,\n      pauseAfterSeek = _ref2$pauseAfterSeek === undefined ? true : _ref2$pauseAfterSeek,\n      tech = _ref2.tech,\n      callback = _ref2.callback;\n\n  if (!callback) {\n    throw new Error('seekToProgramTime: callback must be provided');\n  }\n\n  if (typeof programTime === 'undefined' || !playlist || !seekTo) {\n    return callback({\n      message: 'seekToProgramTime: programTime, seekTo and playlist must be provided'\n    });\n  }\n\n  if (!playlist.endList && !tech.hasStarted_) {\n    return callback({\n      message: 'player must be playing a live stream to start buffering'\n    });\n  }\n\n  if (!verifyProgramDateTimeTags(playlist)) {\n    return callback({\n      message: 'programDateTime tags must be provided in the manifest ' + playlist.resolvedUri\n    });\n  }\n\n  var matchedSegment = findSegmentForProgramTime(programTime, playlist); // no match\n\n  if (!matchedSegment) {\n    return callback({\n      message: programTime + ' was not found in the stream'\n    });\n  }\n\n  var segment = matchedSegment.segment;\n  var mediaOffset = getOffsetFromTimestamp(segment.dateTimeObject, programTime);\n\n  if (matchedSegment.type === 'estimate') {\n    // we've run out of retries\n    if (retryCount === 0) {\n      return callback({\n        message: programTime + ' is not buffered yet. Try again'\n      });\n    }\n\n    seekTo(matchedSegment.estimatedStart + mediaOffset);\n    tech.one('seeked', function () {\n      seekToProgramTime({\n        programTime: programTime,\n        playlist: playlist,\n        retryCount: retryCount - 1,\n        seekTo: seekTo,\n        pauseAfterSeek: pauseAfterSeek,\n        tech: tech,\n        callback: callback\n      });\n    });\n    return;\n  } // Since the segment.start value is determined from the buffered end or ending time\n  // of the prior segment, the seekToTime doesn't need to account for any transmuxer\n  // modifications.\n\n\n  var seekToTime = segment.start + mediaOffset;\n\n  var seekedCallback = function seekedCallback() {\n    return callback(null, tech.currentTime());\n  }; // listen for seeked event\n\n\n  tech.one('seeked', seekedCallback); // pause before seeking as video.js will restore this state\n\n  if (pauseAfterSeek) {\n    tech.pause();\n  }\n\n  seekTo(seekToTime);\n};\n/**\n * ranges\n *\n * Utilities for working with TimeRanges.\n *\n */\n// Fudge factor to account for TimeRanges rounding\n\n\nvar TIME_FUDGE_FACTOR = 1 / 30; // Comparisons between time values such as current time and the end of the buffered range\n// can be misleading because of precision differences or when the current media has poorly\n// aligned audio and video, which can cause values to be slightly off from what you would\n// expect. This value is what we consider to be safe to use in such comparisons to account\n// for these scenarios.\n\nvar SAFE_TIME_DELTA = TIME_FUDGE_FACTOR * 3;\n\nvar filterRanges = function filterRanges(timeRanges, predicate) {\n  var results = [];\n  var i = void 0;\n\n  if (timeRanges && timeRanges.length) {\n    // Search for ranges that match the predicate\n    for (i = 0; i < timeRanges.length; i++) {\n      if (predicate(timeRanges.start(i), timeRanges.end(i))) {\n        results.push([timeRanges.start(i), timeRanges.end(i)]);\n      }\n    }\n  }\n\n  return videojs$1.createTimeRanges(results);\n};\n/**\n * Attempts to find the buffered TimeRange that contains the specified\n * time.\n * @param {TimeRanges} buffered - the TimeRanges object to query\n * @param {number} time  - the time to filter on.\n * @returns {TimeRanges} a new TimeRanges object\n */\n\n\nvar findRange = function findRange(buffered, time) {\n  return filterRanges(buffered, function (start, end) {\n    return start - TIME_FUDGE_FACTOR <= time && end + TIME_FUDGE_FACTOR >= time;\n  });\n};\n/**\n * Returns the TimeRanges that begin later than the specified time.\n * @param {TimeRanges} timeRanges - the TimeRanges object to query\n * @param {number} time - the time to filter on.\n * @returns {TimeRanges} a new TimeRanges object.\n */\n\n\nvar findNextRange = function findNextRange(timeRanges, time) {\n  return filterRanges(timeRanges, function (start) {\n    return start - TIME_FUDGE_FACTOR >= time;\n  });\n};\n/**\n * Returns gaps within a list of TimeRanges\n * @param {TimeRanges} buffered - the TimeRanges object\n * @return {TimeRanges} a TimeRanges object of gaps\n */\n\n\nvar findGaps = function findGaps(buffered) {\n  if (buffered.length < 2) {\n    return videojs$1.createTimeRanges();\n  }\n\n  var ranges = [];\n\n  for (var i = 1; i < buffered.length; i++) {\n    var start = buffered.end(i - 1);\n    var end = buffered.start(i);\n    ranges.push([start, end]);\n  }\n\n  return videojs$1.createTimeRanges(ranges);\n};\n/**\n * Gets a human readable string for a TimeRange\n *\n * @param {TimeRange} range\n * @returns {String} a human readable string\n */\n\n\nvar printableRange = function printableRange(range) {\n  var strArr = [];\n\n  if (!range || !range.length) {\n    return '';\n  }\n\n  for (var i = 0; i < range.length; i++) {\n    strArr.push(range.start(i) + ' => ' + range.end(i));\n  }\n\n  return strArr.join(', ');\n};\n/**\n * Calculates the amount of time left in seconds until the player hits the end of the\n * buffer and causes a rebuffer\n *\n * @param {TimeRange} buffered\n *        The state of the buffer\n * @param {Numnber} currentTime\n *        The current time of the player\n * @param {Number} playbackRate\n *        The current playback rate of the player. Defaults to 1.\n * @return {Number}\n *         Time until the player has to start rebuffering in seconds.\n * @function timeUntilRebuffer\n */\n\n\nvar timeUntilRebuffer = function timeUntilRebuffer(buffered, currentTime) {\n  var playbackRate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var bufferedEnd = buffered.length ? buffered.end(buffered.length - 1) : 0;\n  return (bufferedEnd - currentTime) / playbackRate;\n};\n/**\n * Converts a TimeRanges object into an array representation\n * @param {TimeRanges} timeRanges\n * @returns {Array}\n */\n\n\nvar timeRangesToArray = function timeRangesToArray(timeRanges) {\n  var timeRangesList = [];\n\n  for (var i = 0; i < timeRanges.length; i++) {\n    timeRangesList.push({\n      start: timeRanges.start(i),\n      end: timeRanges.end(i)\n    });\n  }\n\n  return timeRangesList;\n};\n/**\n * @file create-text-tracks-if-necessary.js\n */\n\n/**\n * Create text tracks on video.js if they exist on a segment.\n *\n * @param {Object} sourceBuffer the VSB or FSB\n * @param {Object} mediaSource the HTML media source\n * @param {Object} segment the segment that may contain the text track\n * @private\n */\n\n\nvar createTextTracksIfNecessary = function createTextTracksIfNecessary(sourceBuffer, mediaSource, segment) {\n  var player = mediaSource.player_; // create an in-band caption track if one is present in the segment\n\n  if (segment.captions && segment.captions.length) {\n    if (!sourceBuffer.inbandTextTracks_) {\n      sourceBuffer.inbandTextTracks_ = {};\n    }\n\n    for (var trackId in segment.captionStreams) {\n      if (!sourceBuffer.inbandTextTracks_[trackId]) {\n        player.tech_.trigger({\n          type: 'usage',\n          name: 'hls-608'\n        });\n        var track = player.textTracks().getTrackById(trackId);\n\n        if (track) {\n          // Resuse an existing track with a CC# id because this was\n          // very likely created by videojs-contrib-hls from information\n          // in the m3u8 for us to use\n          sourceBuffer.inbandTextTracks_[trackId] = track;\n        } else {\n          // Otherwise, create a track with the default `CC#` label and\n          // without a language\n          sourceBuffer.inbandTextTracks_[trackId] = player.addRemoteTextTrack({\n            kind: 'captions',\n            id: trackId,\n            label: trackId\n          }, false).track;\n        }\n      }\n    }\n  }\n\n  if (segment.metadata && segment.metadata.length && !sourceBuffer.metadataTrack_) {\n    sourceBuffer.metadataTrack_ = player.addRemoteTextTrack({\n      kind: 'metadata',\n      label: 'Timed Metadata'\n    }, false).track;\n    sourceBuffer.metadataTrack_.inBandMetadataTrackDispatchType = segment.metadata.dispatchType;\n  }\n};\n/**\n * @file remove-cues-from-track.js\n */\n\n/**\n * Remove cues from a track on video.js.\n *\n * @param {Double} start start of where we should remove the cue\n * @param {Double} end end of where the we should remove the cue\n * @param {Object} track the text track to remove the cues from\n * @private\n */\n\n\nvar removeCuesFromTrack = function removeCuesFromTrack(start, end, track) {\n  var i = void 0;\n  var cue = void 0;\n\n  if (!track) {\n    return;\n  }\n\n  if (!track.cues) {\n    return;\n  }\n\n  i = track.cues.length;\n\n  while (i--) {\n    cue = track.cues[i]; // Remove any overlapping cue\n\n    if (cue.startTime <= end && cue.endTime >= start) {\n      track.removeCue(cue);\n    }\n  }\n};\n/**\n * @file add-text-track-data.js\n */\n\n/**\n * Define properties on a cue for backwards compatability,\n * but warn the user that the way that they are using it\n * is depricated and will be removed at a later date.\n *\n * @param {Cue} cue the cue to add the properties on\n * @private\n */\n\n\nvar deprecateOldCue = function deprecateOldCue(cue) {\n  Object.defineProperties(cue.frame, {\n    id: {\n      get: function get() {\n        videojs$1.log.warn('cue.frame.id is deprecated. Use cue.value.key instead.');\n        return cue.value.key;\n      }\n    },\n    value: {\n      get: function get() {\n        videojs$1.log.warn('cue.frame.value is deprecated. Use cue.value.data instead.');\n        return cue.value.data;\n      }\n    },\n    privateData: {\n      get: function get() {\n        videojs$1.log.warn('cue.frame.privateData is deprecated. Use cue.value.data instead.');\n        return cue.value.data;\n      }\n    }\n  });\n};\n\nvar durationOfVideo = function durationOfVideo(duration) {\n  var dur = void 0;\n\n  if (isNaN(duration) || Math.abs(duration) === Infinity) {\n    dur = Number.MAX_VALUE;\n  } else {\n    dur = duration;\n  }\n\n  return dur;\n};\n/**\n * Add text track data to a source handler given the captions and\n * metadata from the buffer.\n *\n * @param {Object} sourceHandler the virtual source buffer\n * @param {Array} captionArray an array of caption data\n * @param {Array} metadataArray an array of meta data\n * @private\n */\n\n\nvar addTextTrackData = function addTextTrackData(sourceHandler, captionArray, metadataArray) {\n  var Cue = window$1.WebKitDataCue || window$1.VTTCue;\n\n  if (captionArray) {\n    captionArray.forEach(function (caption) {\n      var track = caption.stream;\n      this.inbandTextTracks_[track].addCue(new Cue(caption.startTime + this.timestampOffset, caption.endTime + this.timestampOffset, caption.text));\n    }, sourceHandler);\n  }\n\n  if (metadataArray) {\n    var videoDuration = durationOfVideo(sourceHandler.mediaSource_.duration);\n    metadataArray.forEach(function (metadata) {\n      var time = metadata.cueTime + this.timestampOffset; // if time isn't a finite number between 0 and Infinity, like NaN,\n      // ignore this bit of metadata.\n      // This likely occurs when you have an non-timed ID3 tag like TIT2,\n      // which is the \"Title/Songname/Content description\" frame\n\n      if (typeof time !== 'number' || window$1.isNaN(time) || time < 0 || !(time < Infinity)) {\n        return;\n      }\n\n      metadata.frames.forEach(function (frame) {\n        var cue = new Cue(time, time, frame.value || frame.url || frame.data || '');\n        cue.frame = frame;\n        cue.value = frame;\n        deprecateOldCue(cue);\n        this.metadataTrack_.addCue(cue);\n      }, this);\n    }, sourceHandler); // Updating the metadeta cues so that\n    // the endTime of each cue is the startTime of the next cue\n    // the endTime of last cue is the duration of the video\n\n    if (sourceHandler.metadataTrack_ && sourceHandler.metadataTrack_.cues && sourceHandler.metadataTrack_.cues.length) {\n      var cues = sourceHandler.metadataTrack_.cues;\n      var cuesArray = []; // Create a copy of the TextTrackCueList...\n      // ...disregarding cues with a falsey value\n\n      for (var i = 0; i < cues.length; i++) {\n        if (cues[i]) {\n          cuesArray.push(cues[i]);\n        }\n      } // Group cues by their startTime value\n\n\n      var cuesGroupedByStartTime = cuesArray.reduce(function (obj, cue) {\n        var timeSlot = obj[cue.startTime] || [];\n        timeSlot.push(cue);\n        obj[cue.startTime] = timeSlot;\n        return obj;\n      }, {}); // Sort startTimes by ascending order\n\n      var sortedStartTimes = Object.keys(cuesGroupedByStartTime).sort(function (a, b) {\n        return Number(a) - Number(b);\n      }); // Map each cue group's endTime to the next group's startTime\n\n      sortedStartTimes.forEach(function (startTime, idx) {\n        var cueGroup = cuesGroupedByStartTime[startTime];\n        var nextTime = Number(sortedStartTimes[idx + 1]) || videoDuration; // Map each cue's endTime the next group's startTime\n\n        cueGroup.forEach(function (cue) {\n          cue.endTime = nextTime;\n        });\n      });\n    }\n  }\n};\n\nvar win = typeof window !== 'undefined' ? window : {},\n    TARGET = typeof Symbol === 'undefined' ? '__target' : Symbol(),\n    SCRIPT_TYPE = 'application/javascript',\n    BlobBuilder = win.BlobBuilder || win.WebKitBlobBuilder || win.MozBlobBuilder || win.MSBlobBuilder,\n    URL = win.URL || win.webkitURL || URL && URL.msURL,\n    Worker = win.Worker;\n/**\n * Returns a wrapper around Web Worker code that is constructible.\n *\n * @function shimWorker\n *\n * @param { String }    filename    The name of the file\n * @param { Function }  fn          Function wrapping the code of the worker\n */\n\nfunction shimWorker(filename, fn) {\n  return function ShimWorker(forceFallback) {\n    var o = this;\n\n    if (!fn) {\n      return new Worker(filename);\n    } else if (Worker && !forceFallback) {\n      // Convert the function's inner code to a string to construct the worker\n      var source = fn.toString().replace(/^function.+?{/, '').slice(0, -1),\n          objURL = createSourceObject(source);\n      this[TARGET] = new Worker(objURL);\n      wrapTerminate(this[TARGET], objURL);\n      return this[TARGET];\n    } else {\n      var selfShim = {\n        postMessage: function postMessage(m) {\n          if (o.onmessage) {\n            setTimeout(function () {\n              o.onmessage({\n                data: m,\n                target: selfShim\n              });\n            });\n          }\n        }\n      };\n      fn.call(selfShim);\n\n      this.postMessage = function (m) {\n        setTimeout(function () {\n          selfShim.onmessage({\n            data: m,\n            target: o\n          });\n        });\n      };\n\n      this.isThisThread = true;\n    }\n  };\n} // Test Worker capabilities\n\n\nif (Worker) {\n  var testWorker,\n      objURL = createSourceObject('self.onmessage = function () {}'),\n      testArray = new Uint8Array(1);\n\n  try {\n    testWorker = new Worker(objURL); // Native browser on some Samsung devices throws for transferables, let's detect it\n\n    testWorker.postMessage(testArray, [testArray.buffer]);\n  } catch (e) {\n    Worker = null;\n  } finally {\n    URL.revokeObjectURL(objURL);\n\n    if (testWorker) {\n      testWorker.terminate();\n    }\n  }\n}\n\nfunction createSourceObject(str) {\n  try {\n    return URL.createObjectURL(new Blob([str], {\n      type: SCRIPT_TYPE\n    }));\n  } catch (e) {\n    var blob = new BlobBuilder();\n    blob.append(str);\n    return URL.createObjectURL(blob.getBlob(type));\n  }\n}\n\nfunction wrapTerminate(worker, objURL) {\n  if (!worker || !objURL) return;\n  var term = worker.terminate;\n  worker.objURL = objURL;\n\n  worker.terminate = function () {\n    if (worker.objURL) URL.revokeObjectURL(worker.objURL);\n    term.call(worker);\n  };\n}\n\nvar TransmuxWorker = new shimWorker(\"./transmuxer-worker.worker.js\", function (window, document$$1) {\n  var self = this;\n\n  var transmuxerWorker = function () {\n    /**\n     * mux.js\n     *\n     * Copyright (c) Brightcove\n     * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n     *\n     * Functions that generate fragmented MP4s suitable for use with Media\n     * Source Extensions.\n     */\n    var UINT32_MAX = Math.pow(2, 32) - 1;\n    var box, dinf, esds, ftyp, mdat, mfhd, minf, moof, moov, mvex, mvhd, trak, tkhd, mdia, mdhd, hdlr, sdtp, stbl, stsd, traf, trex, trun, types, MAJOR_BRAND, MINOR_VERSION, AVC1_BRAND, VIDEO_HDLR, AUDIO_HDLR, HDLR_TYPES, VMHD, SMHD, DREF, STCO, STSC, STSZ, STTS; // pre-calculate constants\n\n    (function () {\n      var i;\n      types = {\n        avc1: [],\n        // codingname\n        avcC: [],\n        btrt: [],\n        dinf: [],\n        dref: [],\n        esds: [],\n        ftyp: [],\n        hdlr: [],\n        mdat: [],\n        mdhd: [],\n        mdia: [],\n        mfhd: [],\n        minf: [],\n        moof: [],\n        moov: [],\n        mp4a: [],\n        // codingname\n        mvex: [],\n        mvhd: [],\n        sdtp: [],\n        smhd: [],\n        stbl: [],\n        stco: [],\n        stsc: [],\n        stsd: [],\n        stsz: [],\n        stts: [],\n        styp: [],\n        tfdt: [],\n        tfhd: [],\n        traf: [],\n        trak: [],\n        trun: [],\n        trex: [],\n        tkhd: [],\n        vmhd: []\n      }; // In environments where Uint8Array is undefined (e.g., IE8), skip set up so that we\n      // don't throw an error\n\n      if (typeof Uint8Array === 'undefined') {\n        return;\n      }\n\n      for (i in types) {\n        if (types.hasOwnProperty(i)) {\n          types[i] = [i.charCodeAt(0), i.charCodeAt(1), i.charCodeAt(2), i.charCodeAt(3)];\n        }\n      }\n\n      MAJOR_BRAND = new Uint8Array(['i'.charCodeAt(0), 's'.charCodeAt(0), 'o'.charCodeAt(0), 'm'.charCodeAt(0)]);\n      AVC1_BRAND = new Uint8Array(['a'.charCodeAt(0), 'v'.charCodeAt(0), 'c'.charCodeAt(0), '1'.charCodeAt(0)]);\n      MINOR_VERSION = new Uint8Array([0, 0, 0, 1]);\n      VIDEO_HDLR = new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x00, // pre_defined\n      0x76, 0x69, 0x64, 0x65, // handler_type: 'vide'\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x56, 0x69, 0x64, 0x65, 0x6f, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'VideoHandler'\n      ]);\n      AUDIO_HDLR = new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x00, // pre_defined\n      0x73, 0x6f, 0x75, 0x6e, // handler_type: 'soun'\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x53, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'SoundHandler'\n      ]);\n      HDLR_TYPES = {\n        video: VIDEO_HDLR,\n        audio: AUDIO_HDLR\n      };\n      DREF = new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x01, // entry_count\n      0x00, 0x00, 0x00, 0x0c, // entry_size\n      0x75, 0x72, 0x6c, 0x20, // 'url' type\n      0x00, // version 0\n      0x00, 0x00, 0x01 // entry_flags\n      ]);\n      SMHD = new Uint8Array([0x00, // version\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, // balance, 0 means centered\n      0x00, 0x00 // reserved\n      ]);\n      STCO = new Uint8Array([0x00, // version\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x00 // entry_count\n      ]);\n      STSC = STCO;\n      STSZ = new Uint8Array([0x00, // version\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x00, // sample_size\n      0x00, 0x00, 0x00, 0x00 // sample_count\n      ]);\n      STTS = STCO;\n      VMHD = new Uint8Array([0x00, // version\n      0x00, 0x00, 0x01, // flags\n      0x00, 0x00, // graphicsmode\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // opcolor\n      ]);\n    })();\n\n    box = function box(type) {\n      var payload = [],\n          size = 0,\n          i,\n          result,\n          view;\n\n      for (i = 1; i < arguments.length; i++) {\n        payload.push(arguments[i]);\n      }\n\n      i = payload.length; // calculate the total size we need to allocate\n\n      while (i--) {\n        size += payload[i].byteLength;\n      }\n\n      result = new Uint8Array(size + 8);\n      view = new DataView(result.buffer, result.byteOffset, result.byteLength);\n      view.setUint32(0, result.byteLength);\n      result.set(type, 4); // copy the payload into the result\n\n      for (i = 0, size = 8; i < payload.length; i++) {\n        result.set(payload[i], size);\n        size += payload[i].byteLength;\n      }\n\n      return result;\n    };\n\n    dinf = function dinf() {\n      return box(types.dinf, box(types.dref, DREF));\n    };\n\n    esds = function esds(track) {\n      return box(types.esds, new Uint8Array([0x00, // version\n      0x00, 0x00, 0x00, // flags\n      // ES_Descriptor\n      0x03, // tag, ES_DescrTag\n      0x19, // length\n      0x00, 0x00, // ES_ID\n      0x00, // streamDependenceFlag, URL_flag, reserved, streamPriority\n      // DecoderConfigDescriptor\n      0x04, // tag, DecoderConfigDescrTag\n      0x11, // length\n      0x40, // object type\n      0x15, // streamType\n      0x00, 0x06, 0x00, // bufferSizeDB\n      0x00, 0x00, 0xda, 0xc0, // maxBitrate\n      0x00, 0x00, 0xda, 0xc0, // avgBitrate\n      // DecoderSpecificInfo\n      0x05, // tag, DecoderSpecificInfoTag\n      0x02, // length\n      // ISO/IEC 14496-3, AudioSpecificConfig\n      // for samplingFrequencyIndex see ISO/IEC 13818-7:2006, 8.1.3.2.2, Table 35\n      track.audioobjecttype << 3 | track.samplingfrequencyindex >>> 1, track.samplingfrequencyindex << 7 | track.channelcount << 3, 0x06, 0x01, 0x02 // GASpecificConfig\n      ]));\n    };\n\n    ftyp = function ftyp() {\n      return box(types.ftyp, MAJOR_BRAND, MINOR_VERSION, MAJOR_BRAND, AVC1_BRAND);\n    };\n\n    hdlr = function hdlr(type) {\n      return box(types.hdlr, HDLR_TYPES[type]);\n    };\n\n    mdat = function mdat(data) {\n      return box(types.mdat, data);\n    };\n\n    mdhd = function mdhd(track) {\n      var result = new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x02, // creation_time\n      0x00, 0x00, 0x00, 0x03, // modification_time\n      0x00, 0x01, 0x5f, 0x90, // timescale, 90,000 \"ticks\" per second\n      track.duration >>> 24 & 0xFF, track.duration >>> 16 & 0xFF, track.duration >>> 8 & 0xFF, track.duration & 0xFF, // duration\n      0x55, 0xc4, // 'und' language (undetermined)\n      0x00, 0x00]); // Use the sample rate from the track metadata, when it is\n      // defined. The sample rate can be parsed out of an ADTS header, for\n      // instance.\n\n      if (track.samplerate) {\n        result[12] = track.samplerate >>> 24 & 0xFF;\n        result[13] = track.samplerate >>> 16 & 0xFF;\n        result[14] = track.samplerate >>> 8 & 0xFF;\n        result[15] = track.samplerate & 0xFF;\n      }\n\n      return box(types.mdhd, result);\n    };\n\n    mdia = function mdia(track) {\n      return box(types.mdia, mdhd(track), hdlr(track.type), minf(track));\n    };\n\n    mfhd = function mfhd(sequenceNumber) {\n      return box(types.mfhd, new Uint8Array([0x00, 0x00, 0x00, 0x00, // flags\n      (sequenceNumber & 0xFF000000) >> 24, (sequenceNumber & 0xFF0000) >> 16, (sequenceNumber & 0xFF00) >> 8, sequenceNumber & 0xFF // sequence_number\n      ]));\n    };\n\n    minf = function minf(track) {\n      return box(types.minf, track.type === 'video' ? box(types.vmhd, VMHD) : box(types.smhd, SMHD), dinf(), stbl(track));\n    };\n\n    moof = function moof(sequenceNumber, tracks) {\n      var trackFragments = [],\n          i = tracks.length; // build traf boxes for each track fragment\n\n      while (i--) {\n        trackFragments[i] = traf(tracks[i]);\n      }\n\n      return box.apply(null, [types.moof, mfhd(sequenceNumber)].concat(trackFragments));\n    };\n    /**\n     * Returns a movie box.\n     * @param tracks {array} the tracks associated with this movie\n     * @see ISO/IEC 14496-12:2012(E), section 8.2.1\n     */\n\n\n    moov = function moov(tracks) {\n      var i = tracks.length,\n          boxes = [];\n\n      while (i--) {\n        boxes[i] = trak(tracks[i]);\n      }\n\n      return box.apply(null, [types.moov, mvhd(0xffffffff)].concat(boxes).concat(mvex(tracks)));\n    };\n\n    mvex = function mvex(tracks) {\n      var i = tracks.length,\n          boxes = [];\n\n      while (i--) {\n        boxes[i] = trex(tracks[i]);\n      }\n\n      return box.apply(null, [types.mvex].concat(boxes));\n    };\n\n    mvhd = function mvhd(duration) {\n      var bytes = new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x01, // creation_time\n      0x00, 0x00, 0x00, 0x02, // modification_time\n      0x00, 0x01, 0x5f, 0x90, // timescale, 90,000 \"ticks\" per second\n      (duration & 0xFF000000) >> 24, (duration & 0xFF0000) >> 16, (duration & 0xFF00) >> 8, duration & 0xFF, // duration\n      0x00, 0x01, 0x00, 0x00, // 1.0 rate\n      0x01, 0x00, // 1.0 volume\n      0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // transformation: unity matrix\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // pre_defined\n      0xff, 0xff, 0xff, 0xff // next_track_ID\n      ]);\n      return box(types.mvhd, bytes);\n    };\n\n    sdtp = function sdtp(track) {\n      var samples = track.samples || [],\n          bytes = new Uint8Array(4 + samples.length),\n          flags,\n          i; // leave the full box header (4 bytes) all zero\n      // write the sample table\n\n      for (i = 0; i < samples.length; i++) {\n        flags = samples[i].flags;\n        bytes[i + 4] = flags.dependsOn << 4 | flags.isDependedOn << 2 | flags.hasRedundancy;\n      }\n\n      return box(types.sdtp, bytes);\n    };\n\n    stbl = function stbl(track) {\n      return box(types.stbl, stsd(track), box(types.stts, STTS), box(types.stsc, STSC), box(types.stsz, STSZ), box(types.stco, STCO));\n    };\n\n    (function () {\n      var videoSample, audioSample;\n\n      stsd = function stsd(track) {\n        return box(types.stsd, new Uint8Array([0x00, // version 0\n        0x00, 0x00, 0x00, // flags\n        0x00, 0x00, 0x00, 0x01]), track.type === 'video' ? videoSample(track) : audioSample(track));\n      };\n\n      videoSample = function videoSample(track) {\n        var sps = track.sps || [],\n            pps = track.pps || [],\n            sequenceParameterSets = [],\n            pictureParameterSets = [],\n            i; // assemble the SPSs\n\n        for (i = 0; i < sps.length; i++) {\n          sequenceParameterSets.push((sps[i].byteLength & 0xFF00) >>> 8);\n          sequenceParameterSets.push(sps[i].byteLength & 0xFF); // sequenceParameterSetLength\n\n          sequenceParameterSets = sequenceParameterSets.concat(Array.prototype.slice.call(sps[i])); // SPS\n        } // assemble the PPSs\n\n\n        for (i = 0; i < pps.length; i++) {\n          pictureParameterSets.push((pps[i].byteLength & 0xFF00) >>> 8);\n          pictureParameterSets.push(pps[i].byteLength & 0xFF);\n          pictureParameterSets = pictureParameterSets.concat(Array.prototype.slice.call(pps[i]));\n        }\n\n        return box(types.avc1, new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved\n        0x00, 0x01, // data_reference_index\n        0x00, 0x00, // pre_defined\n        0x00, 0x00, // reserved\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // pre_defined\n        (track.width & 0xff00) >> 8, track.width & 0xff, // width\n        (track.height & 0xff00) >> 8, track.height & 0xff, // height\n        0x00, 0x48, 0x00, 0x00, // horizresolution\n        0x00, 0x48, 0x00, 0x00, // vertresolution\n        0x00, 0x00, 0x00, 0x00, // reserved\n        0x00, 0x01, // frame_count\n        0x13, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x6a, 0x73, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x2d, 0x68, 0x6c, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // compressorname\n        0x00, 0x18, // depth = 24\n        0x11, 0x11 // pre_defined = -1\n        ]), box(types.avcC, new Uint8Array([0x01, // configurationVersion\n        track.profileIdc, // AVCProfileIndication\n        track.profileCompatibility, // profile_compatibility\n        track.levelIdc, // AVCLevelIndication\n        0xff // lengthSizeMinusOne, hard-coded to 4 bytes\n        ].concat([sps.length // numOfSequenceParameterSets\n        ]).concat(sequenceParameterSets).concat([pps.length // numOfPictureParameterSets\n        ]).concat(pictureParameterSets))), // \"PPS\"\n        box(types.btrt, new Uint8Array([0x00, 0x1c, 0x9c, 0x80, // bufferSizeDB\n        0x00, 0x2d, 0xc6, 0xc0, // maxBitrate\n        0x00, 0x2d, 0xc6, 0xc0])) // avgBitrate\n        );\n      };\n\n      audioSample = function audioSample(track) {\n        return box(types.mp4a, new Uint8Array([// SampleEntry, ISO/IEC 14496-12\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved\n        0x00, 0x01, // data_reference_index\n        // AudioSampleEntry, ISO/IEC 14496-12\n        0x00, 0x00, 0x00, 0x00, // reserved\n        0x00, 0x00, 0x00, 0x00, // reserved\n        (track.channelcount & 0xff00) >> 8, track.channelcount & 0xff, // channelcount\n        (track.samplesize & 0xff00) >> 8, track.samplesize & 0xff, // samplesize\n        0x00, 0x00, // pre_defined\n        0x00, 0x00, // reserved\n        (track.samplerate & 0xff00) >> 8, track.samplerate & 0xff, 0x00, 0x00 // samplerate, 16.16\n        // MP4AudioSampleEntry, ISO/IEC 14496-14\n        ]), esds(track));\n      };\n    })();\n\n    tkhd = function tkhd(track) {\n      var result = new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x07, // flags\n      0x00, 0x00, 0x00, 0x00, // creation_time\n      0x00, 0x00, 0x00, 0x00, // modification_time\n      (track.id & 0xFF000000) >> 24, (track.id & 0xFF0000) >> 16, (track.id & 0xFF00) >> 8, track.id & 0xFF, // track_ID\n      0x00, 0x00, 0x00, 0x00, // reserved\n      (track.duration & 0xFF000000) >> 24, (track.duration & 0xFF0000) >> 16, (track.duration & 0xFF00) >> 8, track.duration & 0xFF, // duration\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, // layer\n      0x00, 0x00, // alternate_group\n      0x01, 0x00, // non-audio track volume\n      0x00, 0x00, // reserved\n      0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // transformation: unity matrix\n      (track.width & 0xFF00) >> 8, track.width & 0xFF, 0x00, 0x00, // width\n      (track.height & 0xFF00) >> 8, track.height & 0xFF, 0x00, 0x00 // height\n      ]);\n      return box(types.tkhd, result);\n    };\n    /**\n     * Generate a track fragment (traf) box. A traf box collects metadata\n     * about tracks in a movie fragment (moof) box.\n     */\n\n\n    traf = function traf(track) {\n      var trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun, sampleDependencyTable, dataOffset, upperWordBaseMediaDecodeTime, lowerWordBaseMediaDecodeTime;\n      trackFragmentHeader = box(types.tfhd, new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x3a, // flags\n      (track.id & 0xFF000000) >> 24, (track.id & 0xFF0000) >> 16, (track.id & 0xFF00) >> 8, track.id & 0xFF, // track_ID\n      0x00, 0x00, 0x00, 0x01, // sample_description_index\n      0x00, 0x00, 0x00, 0x00, // default_sample_duration\n      0x00, 0x00, 0x00, 0x00, // default_sample_size\n      0x00, 0x00, 0x00, 0x00 // default_sample_flags\n      ]));\n      upperWordBaseMediaDecodeTime = Math.floor(track.baseMediaDecodeTime / (UINT32_MAX + 1));\n      lowerWordBaseMediaDecodeTime = Math.floor(track.baseMediaDecodeTime % (UINT32_MAX + 1));\n      trackFragmentDecodeTime = box(types.tfdt, new Uint8Array([0x01, // version 1\n      0x00, 0x00, 0x00, // flags\n      // baseMediaDecodeTime\n      upperWordBaseMediaDecodeTime >>> 24 & 0xFF, upperWordBaseMediaDecodeTime >>> 16 & 0xFF, upperWordBaseMediaDecodeTime >>> 8 & 0xFF, upperWordBaseMediaDecodeTime & 0xFF, lowerWordBaseMediaDecodeTime >>> 24 & 0xFF, lowerWordBaseMediaDecodeTime >>> 16 & 0xFF, lowerWordBaseMediaDecodeTime >>> 8 & 0xFF, lowerWordBaseMediaDecodeTime & 0xFF])); // the data offset specifies the number of bytes from the start of\n      // the containing moof to the first payload byte of the associated\n      // mdat\n\n      dataOffset = 32 + // tfhd\n      20 + // tfdt\n      8 + // traf header\n      16 + // mfhd\n      8 + // moof header\n      8; // mdat header\n      // audio tracks require less metadata\n\n      if (track.type === 'audio') {\n        trackFragmentRun = trun(track, dataOffset);\n        return box(types.traf, trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun);\n      } // video tracks should contain an independent and disposable samples\n      // box (sdtp)\n      // generate one and adjust offsets to match\n\n\n      sampleDependencyTable = sdtp(track);\n      trackFragmentRun = trun(track, sampleDependencyTable.length + dataOffset);\n      return box(types.traf, trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun, sampleDependencyTable);\n    };\n    /**\n     * Generate a track box.\n     * @param track {object} a track definition\n     * @return {Uint8Array} the track box\n     */\n\n\n    trak = function trak(track) {\n      track.duration = track.duration || 0xffffffff;\n      return box(types.trak, tkhd(track), mdia(track));\n    };\n\n    trex = function trex(track) {\n      var result = new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      (track.id & 0xFF000000) >> 24, (track.id & 0xFF0000) >> 16, (track.id & 0xFF00) >> 8, track.id & 0xFF, // track_ID\n      0x00, 0x00, 0x00, 0x01, // default_sample_description_index\n      0x00, 0x00, 0x00, 0x00, // default_sample_duration\n      0x00, 0x00, 0x00, 0x00, // default_sample_size\n      0x00, 0x01, 0x00, 0x01 // default_sample_flags\n      ]); // the last two bytes of default_sample_flags is the sample\n      // degradation priority, a hint about the importance of this sample\n      // relative to others. Lower the degradation priority for all sample\n      // types other than video.\n\n      if (track.type !== 'video') {\n        result[result.length - 1] = 0x00;\n      }\n\n      return box(types.trex, result);\n    };\n\n    (function () {\n      var audioTrun, videoTrun, trunHeader; // This method assumes all samples are uniform. That is, if a\n      // duration is present for the first sample, it will be present for\n      // all subsequent samples.\n      // see ISO/IEC 14496-12:2012, Section 8.8.8.1\n\n      trunHeader = function trunHeader(samples, offset) {\n        var durationPresent = 0,\n            sizePresent = 0,\n            flagsPresent = 0,\n            compositionTimeOffset = 0; // trun flag constants\n\n        if (samples.length) {\n          if (samples[0].duration !== undefined) {\n            durationPresent = 0x1;\n          }\n\n          if (samples[0].size !== undefined) {\n            sizePresent = 0x2;\n          }\n\n          if (samples[0].flags !== undefined) {\n            flagsPresent = 0x4;\n          }\n\n          if (samples[0].compositionTimeOffset !== undefined) {\n            compositionTimeOffset = 0x8;\n          }\n        }\n\n        return [0x00, // version 0\n        0x00, durationPresent | sizePresent | flagsPresent | compositionTimeOffset, 0x01, // flags\n        (samples.length & 0xFF000000) >>> 24, (samples.length & 0xFF0000) >>> 16, (samples.length & 0xFF00) >>> 8, samples.length & 0xFF, // sample_count\n        (offset & 0xFF000000) >>> 24, (offset & 0xFF0000) >>> 16, (offset & 0xFF00) >>> 8, offset & 0xFF // data_offset\n        ];\n      };\n\n      videoTrun = function videoTrun(track, offset) {\n        var bytes, samples, sample, i;\n        samples = track.samples || [];\n        offset += 8 + 12 + 16 * samples.length;\n        bytes = trunHeader(samples, offset);\n\n        for (i = 0; i < samples.length; i++) {\n          sample = samples[i];\n          bytes = bytes.concat([(sample.duration & 0xFF000000) >>> 24, (sample.duration & 0xFF0000) >>> 16, (sample.duration & 0xFF00) >>> 8, sample.duration & 0xFF, // sample_duration\n          (sample.size & 0xFF000000) >>> 24, (sample.size & 0xFF0000) >>> 16, (sample.size & 0xFF00) >>> 8, sample.size & 0xFF, // sample_size\n          sample.flags.isLeading << 2 | sample.flags.dependsOn, sample.flags.isDependedOn << 6 | sample.flags.hasRedundancy << 4 | sample.flags.paddingValue << 1 | sample.flags.isNonSyncSample, sample.flags.degradationPriority & 0xF0 << 8, sample.flags.degradationPriority & 0x0F, // sample_flags\n          (sample.compositionTimeOffset & 0xFF000000) >>> 24, (sample.compositionTimeOffset & 0xFF0000) >>> 16, (sample.compositionTimeOffset & 0xFF00) >>> 8, sample.compositionTimeOffset & 0xFF // sample_composition_time_offset\n          ]);\n        }\n\n        return box(types.trun, new Uint8Array(bytes));\n      };\n\n      audioTrun = function audioTrun(track, offset) {\n        var bytes, samples, sample, i;\n        samples = track.samples || [];\n        offset += 8 + 12 + 8 * samples.length;\n        bytes = trunHeader(samples, offset);\n\n        for (i = 0; i < samples.length; i++) {\n          sample = samples[i];\n          bytes = bytes.concat([(sample.duration & 0xFF000000) >>> 24, (sample.duration & 0xFF0000) >>> 16, (sample.duration & 0xFF00) >>> 8, sample.duration & 0xFF, // sample_duration\n          (sample.size & 0xFF000000) >>> 24, (sample.size & 0xFF0000) >>> 16, (sample.size & 0xFF00) >>> 8, sample.size & 0xFF]); // sample_size\n        }\n\n        return box(types.trun, new Uint8Array(bytes));\n      };\n\n      trun = function trun(track, offset) {\n        if (track.type === 'audio') {\n          return audioTrun(track, offset);\n        }\n\n        return videoTrun(track, offset);\n      };\n    })();\n\n    var mp4Generator = {\n      ftyp: ftyp,\n      mdat: mdat,\n      moof: moof,\n      moov: moov,\n      initSegment: function initSegment(tracks) {\n        var fileType = ftyp(),\n            movie = moov(tracks),\n            result;\n        result = new Uint8Array(fileType.byteLength + movie.byteLength);\n        result.set(fileType);\n        result.set(movie, fileType.byteLength);\n        return result;\n      }\n    };\n    /**\n     * mux.js\n     *\n     * Copyright (c) Brightcove\n     * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n     */\n\n    var toUnsigned = function toUnsigned(value) {\n      return value >>> 0;\n    };\n\n    var bin = {\n      toUnsigned: toUnsigned\n    };\n    var toUnsigned$1 = bin.toUnsigned;\n\n    var _findBox, parseType, timescale, startTime, getVideoTrackIds; // Find the data for a box specified by its path\n\n\n    _findBox = function findBox(data, path) {\n      var results = [],\n          i,\n          size,\n          type,\n          end,\n          subresults;\n\n      if (!path.length) {\n        // short-circuit the search for empty paths\n        return null;\n      }\n\n      for (i = 0; i < data.byteLength;) {\n        size = toUnsigned$1(data[i] << 24 | data[i + 1] << 16 | data[i + 2] << 8 | data[i + 3]);\n        type = parseType(data.subarray(i + 4, i + 8));\n        end = size > 1 ? i + size : data.byteLength;\n\n        if (type === path[0]) {\n          if (path.length === 1) {\n            // this is the end of the path and we've found the box we were\n            // looking for\n            results.push(data.subarray(i + 8, end));\n          } else {\n            // recursively search for the next box along the path\n            subresults = _findBox(data.subarray(i + 8, end), path.slice(1));\n\n            if (subresults.length) {\n              results = results.concat(subresults);\n            }\n          }\n        }\n\n        i = end;\n      } // we've finished searching all of data\n\n\n      return results;\n    };\n    /**\n     * Returns the string representation of an ASCII encoded four byte buffer.\n     * @param buffer {Uint8Array} a four-byte buffer to translate\n     * @return {string} the corresponding string\n     */\n\n\n    parseType = function parseType(buffer) {\n      var result = '';\n      result += String.fromCharCode(buffer[0]);\n      result += String.fromCharCode(buffer[1]);\n      result += String.fromCharCode(buffer[2]);\n      result += String.fromCharCode(buffer[3]);\n      return result;\n    };\n    /**\n     * Parses an MP4 initialization segment and extracts the timescale\n     * values for any declared tracks. Timescale values indicate the\n     * number of clock ticks per second to assume for time-based values\n     * elsewhere in the MP4.\n     *\n     * To determine the start time of an MP4, you need two pieces of\n     * information: the timescale unit and the earliest base media decode\n     * time. Multiple timescales can be specified within an MP4 but the\n     * base media decode time is always expressed in the timescale from\n     * the media header box for the track:\n     * ```\n     * moov > trak > mdia > mdhd.timescale\n     * ```\n     * @param init {Uint8Array} the bytes of the init segment\n     * @return {object} a hash of track ids to timescale values or null if\n     * the init segment is malformed.\n     */\n\n\n    timescale = function timescale(init) {\n      var result = {},\n          traks = _findBox(init, ['moov', 'trak']); // mdhd timescale\n\n\n      return traks.reduce(function (result, trak) {\n        var tkhd, version, index, id, mdhd;\n        tkhd = _findBox(trak, ['tkhd'])[0];\n\n        if (!tkhd) {\n          return null;\n        }\n\n        version = tkhd[0];\n        index = version === 0 ? 12 : 20;\n        id = toUnsigned$1(tkhd[index] << 24 | tkhd[index + 1] << 16 | tkhd[index + 2] << 8 | tkhd[index + 3]);\n        mdhd = _findBox(trak, ['mdia', 'mdhd'])[0];\n\n        if (!mdhd) {\n          return null;\n        }\n\n        version = mdhd[0];\n        index = version === 0 ? 12 : 20;\n        result[id] = toUnsigned$1(mdhd[index] << 24 | mdhd[index + 1] << 16 | mdhd[index + 2] << 8 | mdhd[index + 3]);\n        return result;\n      }, result);\n    };\n    /**\n     * Determine the base media decode start time, in seconds, for an MP4\n     * fragment. If multiple fragments are specified, the earliest time is\n     * returned.\n     *\n     * The base media decode time can be parsed from track fragment\n     * metadata:\n     * ```\n     * moof > traf > tfdt.baseMediaDecodeTime\n     * ```\n     * It requires the timescale value from the mdhd to interpret.\n     *\n     * @param timescale {object} a hash of track ids to timescale values.\n     * @return {number} the earliest base media decode start time for the\n     * fragment, in seconds\n     */\n\n\n    startTime = function startTime(timescale, fragment) {\n      var trafs, baseTimes, result; // we need info from two childrend of each track fragment box\n\n      trafs = _findBox(fragment, ['moof', 'traf']); // determine the start times for each track\n\n      baseTimes = [].concat.apply([], trafs.map(function (traf) {\n        return _findBox(traf, ['tfhd']).map(function (tfhd) {\n          var id, scale, baseTime; // get the track id from the tfhd\n\n          id = toUnsigned$1(tfhd[4] << 24 | tfhd[5] << 16 | tfhd[6] << 8 | tfhd[7]); // assume a 90kHz clock if no timescale was specified\n\n          scale = timescale[id] || 90e3; // get the base media decode time from the tfdt\n\n          baseTime = _findBox(traf, ['tfdt']).map(function (tfdt) {\n            var version, result;\n            version = tfdt[0];\n            result = toUnsigned$1(tfdt[4] << 24 | tfdt[5] << 16 | tfdt[6] << 8 | tfdt[7]);\n\n            if (version === 1) {\n              result *= Math.pow(2, 32);\n              result += toUnsigned$1(tfdt[8] << 24 | tfdt[9] << 16 | tfdt[10] << 8 | tfdt[11]);\n            }\n\n            return result;\n          })[0];\n          baseTime = baseTime || Infinity; // convert base time to seconds\n\n          return baseTime / scale;\n        });\n      })); // return the minimum\n\n      result = Math.min.apply(null, baseTimes);\n      return isFinite(result) ? result : 0;\n    };\n    /**\n      * Find the trackIds of the video tracks in this source.\n      * Found by parsing the Handler Reference and Track Header Boxes:\n      *   moov > trak > mdia > hdlr\n      *   moov > trak > tkhd\n      *\n      * @param {Uint8Array} init - The bytes of the init segment for this source\n      * @return {Number[]} A list of trackIds\n      *\n      * @see ISO-BMFF-12/2015, Section 8.4.3\n     **/\n\n\n    getVideoTrackIds = function getVideoTrackIds(init) {\n      var traks = _findBox(init, ['moov', 'trak']);\n\n      var videoTrackIds = [];\n      traks.forEach(function (trak) {\n        var hdlrs = _findBox(trak, ['mdia', 'hdlr']);\n\n        var tkhds = _findBox(trak, ['tkhd']);\n\n        hdlrs.forEach(function (hdlr, index) {\n          var handlerType = parseType(hdlr.subarray(8, 12));\n          var tkhd = tkhds[index];\n          var view;\n          var version;\n          var trackId;\n\n          if (handlerType === 'vide') {\n            view = new DataView(tkhd.buffer, tkhd.byteOffset, tkhd.byteLength);\n            version = view.getUint8(0);\n            trackId = version === 0 ? view.getUint32(12) : view.getUint32(20);\n            videoTrackIds.push(trackId);\n          }\n        });\n      });\n      return videoTrackIds;\n    };\n\n    var probe = {\n      findBox: _findBox,\n      parseType: parseType,\n      timescale: timescale,\n      startTime: startTime,\n      videoTrackIds: getVideoTrackIds\n    };\n    /**\n     * mux.js\n     *\n     * Copyright (c) Brightcove\n     * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n     *\n     * A lightweight readable stream implemention that handles event dispatching.\n     * Objects that inherit from streams should call init in their constructors.\n     */\n\n    var Stream = function Stream() {\n      this.init = function () {\n        var listeners = {};\n        /**\n         * Add a listener for a specified event type.\n         * @param type {string} the event name\n         * @param listener {function} the callback to be invoked when an event of\n         * the specified type occurs\n         */\n\n        this.on = function (type, listener) {\n          if (!listeners[type]) {\n            listeners[type] = [];\n          }\n\n          listeners[type] = listeners[type].concat(listener);\n        };\n        /**\n         * Remove a listener for a specified event type.\n         * @param type {string} the event name\n         * @param listener {function} a function previously registered for this\n         * type of event through `on`\n         */\n\n\n        this.off = function (type, listener) {\n          var index;\n\n          if (!listeners[type]) {\n            return false;\n          }\n\n          index = listeners[type].indexOf(listener);\n          listeners[type] = listeners[type].slice();\n          listeners[type].splice(index, 1);\n          return index > -1;\n        };\n        /**\n         * Trigger an event of the specified type on this stream. Any additional\n         * arguments to this function are passed as parameters to event listeners.\n         * @param type {string} the event name\n         */\n\n\n        this.trigger = function (type) {\n          var callbacks, i, length, args;\n          callbacks = listeners[type];\n\n          if (!callbacks) {\n            return;\n          } // Slicing the arguments on every invocation of this method\n          // can add a significant amount of overhead. Avoid the\n          // intermediate object creation for the common case of a\n          // single callback argument\n\n\n          if (arguments.length === 2) {\n            length = callbacks.length;\n\n            for (i = 0; i < length; ++i) {\n              callbacks[i].call(this, arguments[1]);\n            }\n          } else {\n            args = [];\n            i = arguments.length;\n\n            for (i = 1; i < arguments.length; ++i) {\n              args.push(arguments[i]);\n            }\n\n            length = callbacks.length;\n\n            for (i = 0; i < length; ++i) {\n              callbacks[i].apply(this, args);\n            }\n          }\n        };\n        /**\n         * Destroys the stream and cleans up.\n         */\n\n\n        this.dispose = function () {\n          listeners = {};\n        };\n      };\n    };\n    /**\n     * Forwards all `data` events on this stream to the destination stream. The\n     * destination stream should provide a method `push` to receive the data\n     * events as they arrive.\n     * @param destination {stream} the stream that will receive all `data` events\n     * @param autoFlush {boolean} if false, we will not call `flush` on the destination\n     *                            when the current stream emits a 'done' event\n     * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\n     */\n\n\n    Stream.prototype.pipe = function (destination) {\n      this.on('data', function (data) {\n        destination.push(data);\n      });\n      this.on('done', function (flushSource) {\n        destination.flush(flushSource);\n      });\n      return destination;\n    }; // Default stream functions that are expected to be overridden to perform\n    // actual work. These are provided by the prototype as a sort of no-op\n    // implementation so that we don't have to check for their existence in the\n    // `pipe` function above.\n\n\n    Stream.prototype.push = function (data) {\n      this.trigger('data', data);\n    };\n\n    Stream.prototype.flush = function (flushSource) {\n      this.trigger('done', flushSource);\n    };\n\n    var stream = Stream;\n    /**\n     * mux.js\n     *\n     * Copyright (c) Brightcove\n     * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n     */\n    // Convert an array of nal units into an array of frames with each frame being\n    // composed of the nal units that make up that frame\n    // Also keep track of cummulative data about the frame from the nal units such\n    // as the frame duration, starting pts, etc.\n\n    var groupNalsIntoFrames = function groupNalsIntoFrames(nalUnits) {\n      var i,\n          currentNal,\n          currentFrame = [],\n          frames = [];\n      currentFrame.byteLength = 0;\n\n      for (i = 0; i < nalUnits.length; i++) {\n        currentNal = nalUnits[i]; // Split on 'aud'-type nal units\n\n        if (currentNal.nalUnitType === 'access_unit_delimiter_rbsp') {\n          // Since the very first nal unit is expected to be an AUD\n          // only push to the frames array when currentFrame is not empty\n          if (currentFrame.length) {\n            currentFrame.duration = currentNal.dts - currentFrame.dts;\n            frames.push(currentFrame);\n          }\n\n          currentFrame = [currentNal];\n          currentFrame.byteLength = currentNal.data.byteLength;\n          currentFrame.pts = currentNal.pts;\n          currentFrame.dts = currentNal.dts;\n        } else {\n          // Specifically flag key frames for ease of use later\n          if (currentNal.nalUnitType === 'slice_layer_without_partitioning_rbsp_idr') {\n            currentFrame.keyFrame = true;\n          }\n\n          currentFrame.duration = currentNal.dts - currentFrame.dts;\n          currentFrame.byteLength += currentNal.data.byteLength;\n          currentFrame.push(currentNal);\n        }\n      } // For the last frame, use the duration of the previous frame if we\n      // have nothing better to go on\n\n\n      if (frames.length && (!currentFrame.duration || currentFrame.duration <= 0)) {\n        currentFrame.duration = frames[frames.length - 1].duration;\n      } // Push the final frame\n\n\n      frames.push(currentFrame);\n      return frames;\n    }; // Convert an array of frames into an array of Gop with each Gop being composed\n    // of the frames that make up that Gop\n    // Also keep track of cummulative data about the Gop from the frames such as the\n    // Gop duration, starting pts, etc.\n\n\n    var groupFramesIntoGops = function groupFramesIntoGops(frames) {\n      var i,\n          currentFrame,\n          currentGop = [],\n          gops = []; // We must pre-set some of the values on the Gop since we\n      // keep running totals of these values\n\n      currentGop.byteLength = 0;\n      currentGop.nalCount = 0;\n      currentGop.duration = 0;\n      currentGop.pts = frames[0].pts;\n      currentGop.dts = frames[0].dts; // store some metadata about all the Gops\n\n      gops.byteLength = 0;\n      gops.nalCount = 0;\n      gops.duration = 0;\n      gops.pts = frames[0].pts;\n      gops.dts = frames[0].dts;\n\n      for (i = 0; i < frames.length; i++) {\n        currentFrame = frames[i];\n\n        if (currentFrame.keyFrame) {\n          // Since the very first frame is expected to be an keyframe\n          // only push to the gops array when currentGop is not empty\n          if (currentGop.length) {\n            gops.push(currentGop);\n            gops.byteLength += currentGop.byteLength;\n            gops.nalCount += currentGop.nalCount;\n            gops.duration += currentGop.duration;\n          }\n\n          currentGop = [currentFrame];\n          currentGop.nalCount = currentFrame.length;\n          currentGop.byteLength = currentFrame.byteLength;\n          currentGop.pts = currentFrame.pts;\n          currentGop.dts = currentFrame.dts;\n          currentGop.duration = currentFrame.duration;\n        } else {\n          currentGop.duration += currentFrame.duration;\n          currentGop.nalCount += currentFrame.length;\n          currentGop.byteLength += currentFrame.byteLength;\n          currentGop.push(currentFrame);\n        }\n      }\n\n      if (gops.length && currentGop.duration <= 0) {\n        currentGop.duration = gops[gops.length - 1].duration;\n      }\n\n      gops.byteLength += currentGop.byteLength;\n      gops.nalCount += currentGop.nalCount;\n      gops.duration += currentGop.duration; // push the final Gop\n\n      gops.push(currentGop);\n      return gops;\n    };\n    /*\n     * Search for the first keyframe in the GOPs and throw away all frames\n     * until that keyframe. Then extend the duration of the pulled keyframe\n     * and pull the PTS and DTS of the keyframe so that it covers the time\n     * range of the frames that were disposed.\n     *\n     * @param {Array} gops video GOPs\n     * @returns {Array} modified video GOPs\n     */\n\n\n    var extendFirstKeyFrame = function extendFirstKeyFrame(gops) {\n      var currentGop;\n\n      if (!gops[0][0].keyFrame && gops.length > 1) {\n        // Remove the first GOP\n        currentGop = gops.shift();\n        gops.byteLength -= currentGop.byteLength;\n        gops.nalCount -= currentGop.nalCount; // Extend the first frame of what is now the\n        // first gop to cover the time period of the\n        // frames we just removed\n\n        gops[0][0].dts = currentGop.dts;\n        gops[0][0].pts = currentGop.pts;\n        gops[0][0].duration += currentGop.duration;\n      }\n\n      return gops;\n    };\n    /**\n     * Default sample object\n     * see ISO/IEC 14496-12:2012, section 8.6.4.3\n     */\n\n\n    var createDefaultSample = function createDefaultSample() {\n      return {\n        size: 0,\n        flags: {\n          isLeading: 0,\n          dependsOn: 1,\n          isDependedOn: 0,\n          hasRedundancy: 0,\n          degradationPriority: 0,\n          isNonSyncSample: 1\n        }\n      };\n    };\n    /*\n     * Collates information from a video frame into an object for eventual\n     * entry into an MP4 sample table.\n     *\n     * @param {Object} frame the video frame\n     * @param {Number} dataOffset the byte offset to position the sample\n     * @return {Object} object containing sample table info for a frame\n     */\n\n\n    var sampleForFrame = function sampleForFrame(frame, dataOffset) {\n      var sample = createDefaultSample();\n      sample.dataOffset = dataOffset;\n      sample.compositionTimeOffset = frame.pts - frame.dts;\n      sample.duration = frame.duration;\n      sample.size = 4 * frame.length; // Space for nal unit size\n\n      sample.size += frame.byteLength;\n\n      if (frame.keyFrame) {\n        sample.flags.dependsOn = 2;\n        sample.flags.isNonSyncSample = 0;\n      }\n\n      return sample;\n    }; // generate the track's sample table from an array of gops\n\n\n    var generateSampleTable = function generateSampleTable(gops, baseDataOffset) {\n      var h,\n          i,\n          sample,\n          currentGop,\n          currentFrame,\n          dataOffset = baseDataOffset || 0,\n          samples = [];\n\n      for (h = 0; h < gops.length; h++) {\n        currentGop = gops[h];\n\n        for (i = 0; i < currentGop.length; i++) {\n          currentFrame = currentGop[i];\n          sample = sampleForFrame(currentFrame, dataOffset);\n          dataOffset += sample.size;\n          samples.push(sample);\n        }\n      }\n\n      return samples;\n    }; // generate the track's raw mdat data from an array of gops\n\n\n    var concatenateNalData = function concatenateNalData(gops) {\n      var h,\n          i,\n          j,\n          currentGop,\n          currentFrame,\n          currentNal,\n          dataOffset = 0,\n          nalsByteLength = gops.byteLength,\n          numberOfNals = gops.nalCount,\n          totalByteLength = nalsByteLength + 4 * numberOfNals,\n          data = new Uint8Array(totalByteLength),\n          view = new DataView(data.buffer); // For each Gop..\n\n      for (h = 0; h < gops.length; h++) {\n        currentGop = gops[h]; // For each Frame..\n\n        for (i = 0; i < currentGop.length; i++) {\n          currentFrame = currentGop[i]; // For each NAL..\n\n          for (j = 0; j < currentFrame.length; j++) {\n            currentNal = currentFrame[j];\n            view.setUint32(dataOffset, currentNal.data.byteLength);\n            dataOffset += 4;\n            data.set(currentNal.data, dataOffset);\n            dataOffset += currentNal.data.byteLength;\n          }\n        }\n      }\n\n      return data;\n    };\n\n    var frameUtils = {\n      groupNalsIntoFrames: groupNalsIntoFrames,\n      groupFramesIntoGops: groupFramesIntoGops,\n      extendFirstKeyFrame: extendFirstKeyFrame,\n      generateSampleTable: generateSampleTable,\n      concatenateNalData: concatenateNalData\n    };\n    /**\n     * mux.js\n     *\n     * Copyright (c) Brightcove\n     * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n     */\n\n    var highPrefix = [33, 16, 5, 32, 164, 27];\n    var lowPrefix = [33, 65, 108, 84, 1, 2, 4, 8, 168, 2, 4, 8, 17, 191, 252];\n\n    var zeroFill = function zeroFill(count) {\n      var a = [];\n\n      while (count--) {\n        a.push(0);\n      }\n\n      return a;\n    };\n\n    var makeTable = function makeTable(metaTable) {\n      return Object.keys(metaTable).reduce(function (obj, key) {\n        obj[key] = new Uint8Array(metaTable[key].reduce(function (arr, part) {\n          return arr.concat(part);\n        }, []));\n        return obj;\n      }, {});\n    }; // Frames-of-silence to use for filling in missing AAC frames\n\n\n    var coneOfSilence = {\n      96000: [highPrefix, [227, 64], zeroFill(154), [56]],\n      88200: [highPrefix, [231], zeroFill(170), [56]],\n      64000: [highPrefix, [248, 192], zeroFill(240), [56]],\n      48000: [highPrefix, [255, 192], zeroFill(268), [55, 148, 128], zeroFill(54), [112]],\n      44100: [highPrefix, [255, 192], zeroFill(268), [55, 163, 128], zeroFill(84), [112]],\n      32000: [highPrefix, [255, 192], zeroFill(268), [55, 234], zeroFill(226), [112]],\n      24000: [highPrefix, [255, 192], zeroFill(268), [55, 255, 128], zeroFill(268), [111, 112], zeroFill(126), [224]],\n      16000: [highPrefix, [255, 192], zeroFill(268), [55, 255, 128], zeroFill(268), [111, 255], zeroFill(269), [223, 108], zeroFill(195), [1, 192]],\n      12000: [lowPrefix, zeroFill(268), [3, 127, 248], zeroFill(268), [6, 255, 240], zeroFill(268), [13, 255, 224], zeroFill(268), [27, 253, 128], zeroFill(259), [56]],\n      11025: [lowPrefix, zeroFill(268), [3, 127, 248], zeroFill(268), [6, 255, 240], zeroFill(268), [13, 255, 224], zeroFill(268), [27, 255, 192], zeroFill(268), [55, 175, 128], zeroFill(108), [112]],\n      8000: [lowPrefix, zeroFill(268), [3, 121, 16], zeroFill(47), [7]]\n    };\n    var silence = makeTable(coneOfSilence);\n    /**\n     * mux.js\n     *\n     * Copyright (c) Brightcove\n     * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n     */\n\n    var ONE_SECOND_IN_TS = 90000,\n        // 90kHz clock\n    secondsToVideoTs,\n        secondsToAudioTs,\n        videoTsToSeconds,\n        audioTsToSeconds,\n        audioTsToVideoTs,\n        videoTsToAudioTs;\n\n    secondsToVideoTs = function secondsToVideoTs(seconds) {\n      return seconds * ONE_SECOND_IN_TS;\n    };\n\n    secondsToAudioTs = function secondsToAudioTs(seconds, sampleRate) {\n      return seconds * sampleRate;\n    };\n\n    videoTsToSeconds = function videoTsToSeconds(timestamp) {\n      return timestamp / ONE_SECOND_IN_TS;\n    };\n\n    audioTsToSeconds = function audioTsToSeconds(timestamp, sampleRate) {\n      return timestamp / sampleRate;\n    };\n\n    audioTsToVideoTs = function audioTsToVideoTs(timestamp, sampleRate) {\n      return secondsToVideoTs(audioTsToSeconds(timestamp, sampleRate));\n    };\n\n    videoTsToAudioTs = function videoTsToAudioTs(timestamp, sampleRate) {\n      return secondsToAudioTs(videoTsToSeconds(timestamp), sampleRate);\n    };\n\n    var clock = {\n      secondsToVideoTs: secondsToVideoTs,\n      secondsToAudioTs: secondsToAudioTs,\n      videoTsToSeconds: videoTsToSeconds,\n      audioTsToSeconds: audioTsToSeconds,\n      audioTsToVideoTs: audioTsToVideoTs,\n      videoTsToAudioTs: videoTsToAudioTs\n    };\n    /**\n     * mux.js\n     *\n     * Copyright (c) Brightcove\n     * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n     */\n\n    var ONE_SECOND_IN_TS$1 = 90000; // 90kHz clock\n\n    /**\n     * Sum the `byteLength` properties of the data in each AAC frame\n     */\n\n    var sumFrameByteLengths = function sumFrameByteLengths(array) {\n      var i,\n          currentObj,\n          sum = 0; // sum the byteLength's all each nal unit in the frame\n\n      for (i = 0; i < array.length; i++) {\n        currentObj = array[i];\n        sum += currentObj.data.byteLength;\n      }\n\n      return sum;\n    }; // Possibly pad (prefix) the audio track with silence if appending this track\n    // would lead to the introduction of a gap in the audio buffer\n\n\n    var prefixWithSilence = function prefixWithSilence(track, frames, audioAppendStartTs, videoBaseMediaDecodeTime) {\n      var baseMediaDecodeTimeTs,\n          frameDuration = 0,\n          audioGapDuration = 0,\n          audioFillFrameCount = 0,\n          audioFillDuration = 0,\n          silentFrame,\n          i;\n\n      if (!frames.length) {\n        return;\n      }\n\n      baseMediaDecodeTimeTs = clock.audioTsToVideoTs(track.baseMediaDecodeTime, track.samplerate); // determine frame clock duration based on sample rate, round up to avoid overfills\n\n      frameDuration = Math.ceil(ONE_SECOND_IN_TS$1 / (track.samplerate / 1024));\n\n      if (audioAppendStartTs && videoBaseMediaDecodeTime) {\n        // insert the shortest possible amount (audio gap or audio to video gap)\n        audioGapDuration = baseMediaDecodeTimeTs - Math.max(audioAppendStartTs, videoBaseMediaDecodeTime); // number of full frames in the audio gap\n\n        audioFillFrameCount = Math.floor(audioGapDuration / frameDuration);\n        audioFillDuration = audioFillFrameCount * frameDuration;\n      } // don't attempt to fill gaps smaller than a single frame or larger\n      // than a half second\n\n\n      if (audioFillFrameCount < 1 || audioFillDuration > ONE_SECOND_IN_TS$1 / 2) {\n        return;\n      }\n\n      silentFrame = silence[track.samplerate];\n\n      if (!silentFrame) {\n        // we don't have a silent frame pregenerated for the sample rate, so use a frame\n        // from the content instead\n        silentFrame = frames[0].data;\n      }\n\n      for (i = 0; i < audioFillFrameCount; i++) {\n        frames.splice(i, 0, {\n          data: silentFrame\n        });\n      }\n\n      track.baseMediaDecodeTime -= Math.floor(clock.videoTsToAudioTs(audioFillDuration, track.samplerate));\n    }; // If the audio segment extends before the earliest allowed dts\n    // value, remove AAC frames until starts at or after the earliest\n    // allowed DTS so that we don't end up with a negative baseMedia-\n    // DecodeTime for the audio track\n\n\n    var trimAdtsFramesByEarliestDts = function trimAdtsFramesByEarliestDts(adtsFrames, track, earliestAllowedDts) {\n      if (track.minSegmentDts >= earliestAllowedDts) {\n        return adtsFrames;\n      } // We will need to recalculate the earliest segment Dts\n\n\n      track.minSegmentDts = Infinity;\n      return adtsFrames.filter(function (currentFrame) {\n        // If this is an allowed frame, keep it and record it's Dts\n        if (currentFrame.dts >= earliestAllowedDts) {\n          track.minSegmentDts = Math.min(track.minSegmentDts, currentFrame.dts);\n          track.minSegmentPts = track.minSegmentDts;\n          return true;\n        } // Otherwise, discard it\n\n\n        return false;\n      });\n    }; // generate the track's raw mdat data from an array of frames\n\n\n    var generateSampleTable$1 = function generateSampleTable(frames) {\n      var i,\n          currentFrame,\n          samples = [];\n\n      for (i = 0; i < frames.length; i++) {\n        currentFrame = frames[i];\n        samples.push({\n          size: currentFrame.data.byteLength,\n          duration: 1024 // For AAC audio, all samples contain 1024 samples\n\n        });\n      }\n\n      return samples;\n    }; // generate the track's sample table from an array of frames\n\n\n    var concatenateFrameData = function concatenateFrameData(frames) {\n      var i,\n          currentFrame,\n          dataOffset = 0,\n          data = new Uint8Array(sumFrameByteLengths(frames));\n\n      for (i = 0; i < frames.length; i++) {\n        currentFrame = frames[i];\n        data.set(currentFrame.data, dataOffset);\n        dataOffset += currentFrame.data.byteLength;\n      }\n\n      return data;\n    };\n\n    var audioFrameUtils = {\n      prefixWithSilence: prefixWithSilence,\n      trimAdtsFramesByEarliestDts: trimAdtsFramesByEarliestDts,\n      generateSampleTable: generateSampleTable$1,\n      concatenateFrameData: concatenateFrameData\n    };\n    /**\n     * mux.js\n     *\n     * Copyright (c) Brightcove\n     * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n     */\n\n    var ONE_SECOND_IN_TS$2 = 90000; // 90kHz clock\n\n    /**\n     * Store information about the start and end of the track and the\n     * duration for each frame/sample we process in order to calculate\n     * the baseMediaDecodeTime\n     */\n\n    var collectDtsInfo = function collectDtsInfo(track, data) {\n      if (typeof data.pts === 'number') {\n        if (track.timelineStartInfo.pts === undefined) {\n          track.timelineStartInfo.pts = data.pts;\n        }\n\n        if (track.minSegmentPts === undefined) {\n          track.minSegmentPts = data.pts;\n        } else {\n          track.minSegmentPts = Math.min(track.minSegmentPts, data.pts);\n        }\n\n        if (track.maxSegmentPts === undefined) {\n          track.maxSegmentPts = data.pts;\n        } else {\n          track.maxSegmentPts = Math.max(track.maxSegmentPts, data.pts);\n        }\n      }\n\n      if (typeof data.dts === 'number') {\n        if (track.timelineStartInfo.dts === undefined) {\n          track.timelineStartInfo.dts = data.dts;\n        }\n\n        if (track.minSegmentDts === undefined) {\n          track.minSegmentDts = data.dts;\n        } else {\n          track.minSegmentDts = Math.min(track.minSegmentDts, data.dts);\n        }\n\n        if (track.maxSegmentDts === undefined) {\n          track.maxSegmentDts = data.dts;\n        } else {\n          track.maxSegmentDts = Math.max(track.maxSegmentDts, data.dts);\n        }\n      }\n    };\n    /**\n     * Clear values used to calculate the baseMediaDecodeTime between\n     * tracks\n     */\n\n\n    var clearDtsInfo = function clearDtsInfo(track) {\n      delete track.minSegmentDts;\n      delete track.maxSegmentDts;\n      delete track.minSegmentPts;\n      delete track.maxSegmentPts;\n    };\n    /**\n     * Calculate the track's baseMediaDecodeTime based on the earliest\n     * DTS the transmuxer has ever seen and the minimum DTS for the\n     * current track\n     * @param track {object} track metadata configuration\n     * @param keepOriginalTimestamps {boolean} If true, keep the timestamps\n     *        in the source; false to adjust the first segment to start at 0.\n     */\n\n\n    var calculateTrackBaseMediaDecodeTime = function calculateTrackBaseMediaDecodeTime(track, keepOriginalTimestamps) {\n      var baseMediaDecodeTime,\n          scale,\n          minSegmentDts = track.minSegmentDts; // Optionally adjust the time so the first segment starts at zero.\n\n      if (!keepOriginalTimestamps) {\n        minSegmentDts -= track.timelineStartInfo.dts;\n      } // track.timelineStartInfo.baseMediaDecodeTime is the location, in time, where\n      // we want the start of the first segment to be placed\n\n\n      baseMediaDecodeTime = track.timelineStartInfo.baseMediaDecodeTime; // Add to that the distance this segment is from the very first\n\n      baseMediaDecodeTime += minSegmentDts; // baseMediaDecodeTime must not become negative\n\n      baseMediaDecodeTime = Math.max(0, baseMediaDecodeTime);\n\n      if (track.type === 'audio') {\n        // Audio has a different clock equal to the sampling_rate so we need to\n        // scale the PTS values into the clock rate of the track\n        scale = track.samplerate / ONE_SECOND_IN_TS$2;\n        baseMediaDecodeTime *= scale;\n        baseMediaDecodeTime = Math.floor(baseMediaDecodeTime);\n      }\n\n      return baseMediaDecodeTime;\n    };\n\n    var trackDecodeInfo = {\n      clearDtsInfo: clearDtsInfo,\n      calculateTrackBaseMediaDecodeTime: calculateTrackBaseMediaDecodeTime,\n      collectDtsInfo: collectDtsInfo\n    };\n    /**\n     * mux.js\n     *\n     * Copyright (c) Brightcove\n     * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n     *\n     * Reads in-band caption information from a video elementary\n     * stream. Captions must follow the CEA-708 standard for injection\n     * into an MPEG-2 transport streams.\n     * @see https://en.wikipedia.org/wiki/CEA-708\n     * @see https://www.gpo.gov/fdsys/pkg/CFR-2007-title47-vol1/pdf/CFR-2007-title47-vol1-sec15-119.pdf\n     */\n    // Supplemental enhancement information (SEI) NAL units have a\n    // payload type field to indicate how they are to be\n    // interpreted. CEAS-708 caption content is always transmitted with\n    // payload type 0x04.\n\n    var USER_DATA_REGISTERED_ITU_T_T35 = 4,\n        RBSP_TRAILING_BITS = 128;\n    /**\n      * Parse a supplemental enhancement information (SEI) NAL unit.\n      * Stops parsing once a message of type ITU T T35 has been found.\n      *\n      * @param bytes {Uint8Array} the bytes of a SEI NAL unit\n      * @return {object} the parsed SEI payload\n      * @see Rec. ITU-T H.264, 7.3.2.3.1\n      */\n\n    var parseSei = function parseSei(bytes) {\n      var i = 0,\n          result = {\n        payloadType: -1,\n        payloadSize: 0\n      },\n          payloadType = 0,\n          payloadSize = 0; // go through the sei_rbsp parsing each each individual sei_message\n\n      while (i < bytes.byteLength) {\n        // stop once we have hit the end of the sei_rbsp\n        if (bytes[i] === RBSP_TRAILING_BITS) {\n          break;\n        } // Parse payload type\n\n\n        while (bytes[i] === 0xFF) {\n          payloadType += 255;\n          i++;\n        }\n\n        payloadType += bytes[i++]; // Parse payload size\n\n        while (bytes[i] === 0xFF) {\n          payloadSize += 255;\n          i++;\n        }\n\n        payloadSize += bytes[i++]; // this sei_message is a 608/708 caption so save it and break\n        // there can only ever be one caption message in a frame's sei\n\n        if (!result.payload && payloadType === USER_DATA_REGISTERED_ITU_T_T35) {\n          result.payloadType = payloadType;\n          result.payloadSize = payloadSize;\n          result.payload = bytes.subarray(i, i + payloadSize);\n          break;\n        } // skip the payload and parse the next message\n\n\n        i += payloadSize;\n        payloadType = 0;\n        payloadSize = 0;\n      }\n\n      return result;\n    }; // see ANSI/SCTE 128-1 (2013), section 8.1\n\n\n    var parseUserData = function parseUserData(sei) {\n      // itu_t_t35_contry_code must be 181 (United States) for\n      // captions\n      if (sei.payload[0] !== 181) {\n        return null;\n      } // itu_t_t35_provider_code should be 49 (ATSC) for captions\n\n\n      if ((sei.payload[1] << 8 | sei.payload[2]) !== 49) {\n        return null;\n      } // the user_identifier should be \"GA94\" to indicate ATSC1 data\n\n\n      if (String.fromCharCode(sei.payload[3], sei.payload[4], sei.payload[5], sei.payload[6]) !== 'GA94') {\n        return null;\n      } // finally, user_data_type_code should be 0x03 for caption data\n\n\n      if (sei.payload[7] !== 0x03) {\n        return null;\n      } // return the user_data_type_structure and strip the trailing\n      // marker bits\n\n\n      return sei.payload.subarray(8, sei.payload.length - 1);\n    }; // see CEA-708-D, section 4.4\n\n\n    var parseCaptionPackets = function parseCaptionPackets(pts, userData) {\n      var results = [],\n          i,\n          count,\n          offset,\n          data; // if this is just filler, return immediately\n\n      if (!(userData[0] & 0x40)) {\n        return results;\n      } // parse out the cc_data_1 and cc_data_2 fields\n\n\n      count = userData[0] & 0x1f;\n\n      for (i = 0; i < count; i++) {\n        offset = i * 3;\n        data = {\n          type: userData[offset + 2] & 0x03,\n          pts: pts\n        }; // capture cc data when cc_valid is 1\n\n        if (userData[offset + 2] & 0x04) {\n          data.ccData = userData[offset + 3] << 8 | userData[offset + 4];\n          results.push(data);\n        }\n      }\n\n      return results;\n    };\n\n    var discardEmulationPreventionBytes = function discardEmulationPreventionBytes(data) {\n      var length = data.byteLength,\n          emulationPreventionBytesPositions = [],\n          i = 1,\n          newLength,\n          newData; // Find all `Emulation Prevention Bytes`\n\n      while (i < length - 2) {\n        if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {\n          emulationPreventionBytesPositions.push(i + 2);\n          i += 2;\n        } else {\n          i++;\n        }\n      } // If no Emulation Prevention Bytes were found just return the original\n      // array\n\n\n      if (emulationPreventionBytesPositions.length === 0) {\n        return data;\n      } // Create a new array to hold the NAL unit data\n\n\n      newLength = length - emulationPreventionBytesPositions.length;\n      newData = new Uint8Array(newLength);\n      var sourceIndex = 0;\n\n      for (i = 0; i < newLength; sourceIndex++, i++) {\n        if (sourceIndex === emulationPreventionBytesPositions[0]) {\n          // Skip this byte\n          sourceIndex++; // Remove this position index\n\n          emulationPreventionBytesPositions.shift();\n        }\n\n        newData[i] = data[sourceIndex];\n      }\n\n      return newData;\n    }; // exports\n\n\n    var captionPacketParser = {\n      parseSei: parseSei,\n      parseUserData: parseUserData,\n      parseCaptionPackets: parseCaptionPackets,\n      discardEmulationPreventionBytes: discardEmulationPreventionBytes,\n      USER_DATA_REGISTERED_ITU_T_T35: USER_DATA_REGISTERED_ITU_T_T35\n    }; // -----------------\n    // Link To Transport\n    // -----------------\n\n    var CaptionStream = function CaptionStream() {\n      CaptionStream.prototype.init.call(this);\n      this.captionPackets_ = [];\n      this.ccStreams_ = [new Cea608Stream(0, 0), // eslint-disable-line no-use-before-define\n      new Cea608Stream(0, 1), // eslint-disable-line no-use-before-define\n      new Cea608Stream(1, 0), // eslint-disable-line no-use-before-define\n      new Cea608Stream(1, 1) // eslint-disable-line no-use-before-define\n      ];\n      this.reset(); // forward data and done events from CCs to this CaptionStream\n\n      this.ccStreams_.forEach(function (cc) {\n        cc.on('data', this.trigger.bind(this, 'data'));\n        cc.on('done', this.trigger.bind(this, 'done'));\n      }, this);\n    };\n\n    CaptionStream.prototype = new stream();\n\n    CaptionStream.prototype.push = function (event) {\n      var sei, userData, newCaptionPackets; // only examine SEI NALs\n\n      if (event.nalUnitType !== 'sei_rbsp') {\n        return;\n      } // parse the sei\n\n\n      sei = captionPacketParser.parseSei(event.escapedRBSP); // ignore everything but user_data_registered_itu_t_t35\n\n      if (sei.payloadType !== captionPacketParser.USER_DATA_REGISTERED_ITU_T_T35) {\n        return;\n      } // parse out the user data payload\n\n\n      userData = captionPacketParser.parseUserData(sei); // ignore unrecognized userData\n\n      if (!userData) {\n        return;\n      } // Sometimes, the same segment # will be downloaded twice. To stop the\n      // caption data from being processed twice, we track the latest dts we've\n      // received and ignore everything with a dts before that. However, since\n      // data for a specific dts can be split across packets on either side of\n      // a segment boundary, we need to make sure we *don't* ignore the packets\n      // from the *next* segment that have dts === this.latestDts_. By constantly\n      // tracking the number of packets received with dts === this.latestDts_, we\n      // know how many should be ignored once we start receiving duplicates.\n\n\n      if (event.dts < this.latestDts_) {\n        // We've started getting older data, so set the flag.\n        this.ignoreNextEqualDts_ = true;\n        return;\n      } else if (event.dts === this.latestDts_ && this.ignoreNextEqualDts_) {\n        this.numSameDts_--;\n\n        if (!this.numSameDts_) {\n          // We've received the last duplicate packet, time to start processing again\n          this.ignoreNextEqualDts_ = false;\n        }\n\n        return;\n      } // parse out CC data packets and save them for later\n\n\n      newCaptionPackets = captionPacketParser.parseCaptionPackets(event.pts, userData);\n      this.captionPackets_ = this.captionPackets_.concat(newCaptionPackets);\n\n      if (this.latestDts_ !== event.dts) {\n        this.numSameDts_ = 0;\n      }\n\n      this.numSameDts_++;\n      this.latestDts_ = event.dts;\n    };\n\n    CaptionStream.prototype.flush = function () {\n      // make sure we actually parsed captions before proceeding\n      if (!this.captionPackets_.length) {\n        this.ccStreams_.forEach(function (cc) {\n          cc.flush();\n        }, this);\n        return;\n      } // In Chrome, the Array#sort function is not stable so add a\n      // presortIndex that we can use to ensure we get a stable-sort\n\n\n      this.captionPackets_.forEach(function (elem, idx) {\n        elem.presortIndex = idx;\n      }); // sort caption byte-pairs based on their PTS values\n\n      this.captionPackets_.sort(function (a, b) {\n        if (a.pts === b.pts) {\n          return a.presortIndex - b.presortIndex;\n        }\n\n        return a.pts - b.pts;\n      });\n      this.captionPackets_.forEach(function (packet) {\n        if (packet.type < 2) {\n          // Dispatch packet to the right Cea608Stream\n          this.dispatchCea608Packet(packet);\n        } // this is where an 'else' would go for a dispatching packets\n        // to a theoretical Cea708Stream that handles SERVICEn data\n\n      }, this);\n      this.captionPackets_.length = 0;\n      this.ccStreams_.forEach(function (cc) {\n        cc.flush();\n      }, this);\n      return;\n    };\n\n    CaptionStream.prototype.reset = function () {\n      this.latestDts_ = null;\n      this.ignoreNextEqualDts_ = false;\n      this.numSameDts_ = 0;\n      this.activeCea608Channel_ = [null, null];\n      this.ccStreams_.forEach(function (ccStream) {\n        ccStream.reset();\n      });\n    }; // From the CEA-608 spec:\n\n    /*\n     * When XDS sub-packets are interleaved with other services, the end of each sub-packet shall be followed\n     * by a control pair to change to a different service. When any of the control codes from 0x10 to 0x1F is\n     * used to begin a control code pair, it indicates the return to captioning or Text data. The control code pair\n     * and subsequent data should then be processed according to the FCC rules. It may be necessary for the\n     * line 21 data encoder to automatically insert a control code pair (i.e. RCL, RU2, RU3, RU4, RDC, or RTD)\n     * to switch to captioning or Text.\n    */\n    // With that in mind, we ignore any data between an XDS control code and a\n    // subsequent closed-captioning control code.\n\n\n    CaptionStream.prototype.dispatchCea608Packet = function (packet) {\n      // NOTE: packet.type is the CEA608 field\n      if (this.setsTextOrXDSActive(packet)) {\n        this.activeCea608Channel_[packet.type] = null;\n      } else if (this.setsChannel1Active(packet)) {\n        this.activeCea608Channel_[packet.type] = 0;\n      } else if (this.setsChannel2Active(packet)) {\n        this.activeCea608Channel_[packet.type] = 1;\n      }\n\n      if (this.activeCea608Channel_[packet.type] === null) {\n        // If we haven't received anything to set the active channel, or the\n        // packets are Text/XDS data, discard the data; we don't want jumbled\n        // captions\n        return;\n      }\n\n      this.ccStreams_[(packet.type << 1) + this.activeCea608Channel_[packet.type]].push(packet);\n    };\n\n    CaptionStream.prototype.setsChannel1Active = function (packet) {\n      return (packet.ccData & 0x7800) === 0x1000;\n    };\n\n    CaptionStream.prototype.setsChannel2Active = function (packet) {\n      return (packet.ccData & 0x7800) === 0x1800;\n    };\n\n    CaptionStream.prototype.setsTextOrXDSActive = function (packet) {\n      return (packet.ccData & 0x7100) === 0x0100 || (packet.ccData & 0x78fe) === 0x102a || (packet.ccData & 0x78fe) === 0x182a;\n    }; // ----------------------\n    // Session to Application\n    // ----------------------\n    // This hash maps non-ASCII, special, and extended character codes to their\n    // proper Unicode equivalent. The first keys that are only a single byte\n    // are the non-standard ASCII characters, which simply map the CEA608 byte\n    // to the standard ASCII/Unicode. The two-byte keys that follow are the CEA608\n    // character codes, but have their MSB bitmasked with 0x03 so that a lookup\n    // can be performed regardless of the field and data channel on which the\n    // character code was received.\n\n\n    var CHARACTER_TRANSLATION = {\n      0x2a: 0xe1,\n      // á\n      0x5c: 0xe9,\n      // é\n      0x5e: 0xed,\n      // í\n      0x5f: 0xf3,\n      // ó\n      0x60: 0xfa,\n      // ú\n      0x7b: 0xe7,\n      // ç\n      0x7c: 0xf7,\n      // ÷\n      0x7d: 0xd1,\n      // Ñ\n      0x7e: 0xf1,\n      // ñ\n      0x7f: 0x2588,\n      // █\n      0x0130: 0xae,\n      // ®\n      0x0131: 0xb0,\n      // °\n      0x0132: 0xbd,\n      // ½\n      0x0133: 0xbf,\n      // ¿\n      0x0134: 0x2122,\n      // ™\n      0x0135: 0xa2,\n      // ¢\n      0x0136: 0xa3,\n      // £\n      0x0137: 0x266a,\n      // ♪\n      0x0138: 0xe0,\n      // à\n      0x0139: 0xa0,\n      //\n      0x013a: 0xe8,\n      // è\n      0x013b: 0xe2,\n      // â\n      0x013c: 0xea,\n      // ê\n      0x013d: 0xee,\n      // î\n      0x013e: 0xf4,\n      // ô\n      0x013f: 0xfb,\n      // û\n      0x0220: 0xc1,\n      // Á\n      0x0221: 0xc9,\n      // É\n      0x0222: 0xd3,\n      // Ó\n      0x0223: 0xda,\n      // Ú\n      0x0224: 0xdc,\n      // Ü\n      0x0225: 0xfc,\n      // ü\n      0x0226: 0x2018,\n      // ‘\n      0x0227: 0xa1,\n      // ¡\n      0x0228: 0x2a,\n      // *\n      0x0229: 0x27,\n      // '\n      0x022a: 0x2014,\n      // —\n      0x022b: 0xa9,\n      // ©\n      0x022c: 0x2120,\n      // ℠\n      0x022d: 0x2022,\n      // •\n      0x022e: 0x201c,\n      // “\n      0x022f: 0x201d,\n      // ”\n      0x0230: 0xc0,\n      // À\n      0x0231: 0xc2,\n      // Â\n      0x0232: 0xc7,\n      // Ç\n      0x0233: 0xc8,\n      // È\n      0x0234: 0xca,\n      // Ê\n      0x0235: 0xcb,\n      // Ë\n      0x0236: 0xeb,\n      // ë\n      0x0237: 0xce,\n      // Î\n      0x0238: 0xcf,\n      // Ï\n      0x0239: 0xef,\n      // ï\n      0x023a: 0xd4,\n      // Ô\n      0x023b: 0xd9,\n      // Ù\n      0x023c: 0xf9,\n      // ù\n      0x023d: 0xdb,\n      // Û\n      0x023e: 0xab,\n      // «\n      0x023f: 0xbb,\n      // »\n      0x0320: 0xc3,\n      // Ã\n      0x0321: 0xe3,\n      // ã\n      0x0322: 0xcd,\n      // Í\n      0x0323: 0xcc,\n      // Ì\n      0x0324: 0xec,\n      // ì\n      0x0325: 0xd2,\n      // Ò\n      0x0326: 0xf2,\n      // ò\n      0x0327: 0xd5,\n      // Õ\n      0x0328: 0xf5,\n      // õ\n      0x0329: 0x7b,\n      // {\n      0x032a: 0x7d,\n      // }\n      0x032b: 0x5c,\n      // \\\n      0x032c: 0x5e,\n      // ^\n      0x032d: 0x5f,\n      // _\n      0x032e: 0x7c,\n      // |\n      0x032f: 0x7e,\n      // ~\n      0x0330: 0xc4,\n      // Ä\n      0x0331: 0xe4,\n      // ä\n      0x0332: 0xd6,\n      // Ö\n      0x0333: 0xf6,\n      // ö\n      0x0334: 0xdf,\n      // ß\n      0x0335: 0xa5,\n      // ¥\n      0x0336: 0xa4,\n      // ¤\n      0x0337: 0x2502,\n      // │\n      0x0338: 0xc5,\n      // Å\n      0x0339: 0xe5,\n      // å\n      0x033a: 0xd8,\n      // Ø\n      0x033b: 0xf8,\n      // ø\n      0x033c: 0x250c,\n      // ┌\n      0x033d: 0x2510,\n      // ┐\n      0x033e: 0x2514,\n      // └\n      0x033f: 0x2518 // ┘\n\n    };\n\n    var getCharFromCode = function getCharFromCode(code) {\n      if (code === null) {\n        return '';\n      }\n\n      code = CHARACTER_TRANSLATION[code] || code;\n      return String.fromCharCode(code);\n    }; // the index of the last row in a CEA-608 display buffer\n\n\n    var BOTTOM_ROW = 14; // This array is used for mapping PACs -> row #, since there's no way of\n    // getting it through bit logic.\n\n    var ROWS = [0x1100, 0x1120, 0x1200, 0x1220, 0x1500, 0x1520, 0x1600, 0x1620, 0x1700, 0x1720, 0x1000, 0x1300, 0x1320, 0x1400, 0x1420]; // CEA-608 captions are rendered onto a 34x15 matrix of character\n    // cells. The \"bottom\" row is the last element in the outer array.\n\n    var createDisplayBuffer = function createDisplayBuffer() {\n      var result = [],\n          i = BOTTOM_ROW + 1;\n\n      while (i--) {\n        result.push('');\n      }\n\n      return result;\n    };\n\n    var Cea608Stream = function Cea608Stream(field, dataChannel) {\n      Cea608Stream.prototype.init.call(this);\n      this.field_ = field || 0;\n      this.dataChannel_ = dataChannel || 0;\n      this.name_ = 'CC' + ((this.field_ << 1 | this.dataChannel_) + 1);\n      this.setConstants();\n      this.reset();\n\n      this.push = function (packet) {\n        var data, swap, char0, char1, text; // remove the parity bits\n\n        data = packet.ccData & 0x7f7f; // ignore duplicate control codes; the spec demands they're sent twice\n\n        if (data === this.lastControlCode_) {\n          this.lastControlCode_ = null;\n          return;\n        } // Store control codes\n\n\n        if ((data & 0xf000) === 0x1000) {\n          this.lastControlCode_ = data;\n        } else if (data !== this.PADDING_) {\n          this.lastControlCode_ = null;\n        }\n\n        char0 = data >>> 8;\n        char1 = data & 0xff;\n\n        if (data === this.PADDING_) {\n          return;\n        } else if (data === this.RESUME_CAPTION_LOADING_) {\n          this.mode_ = 'popOn';\n        } else if (data === this.END_OF_CAPTION_) {\n          // If an EOC is received while in paint-on mode, the displayed caption\n          // text should be swapped to non-displayed memory as if it was a pop-on\n          // caption. Because of that, we should explicitly switch back to pop-on\n          // mode\n          this.mode_ = 'popOn';\n          this.clearFormatting(packet.pts); // if a caption was being displayed, it's gone now\n\n          this.flushDisplayed(packet.pts); // flip memory\n\n          swap = this.displayed_;\n          this.displayed_ = this.nonDisplayed_;\n          this.nonDisplayed_ = swap; // start measuring the time to display the caption\n\n          this.startPts_ = packet.pts;\n        } else if (data === this.ROLL_UP_2_ROWS_) {\n          this.rollUpRows_ = 2;\n          this.setRollUp(packet.pts);\n        } else if (data === this.ROLL_UP_3_ROWS_) {\n          this.rollUpRows_ = 3;\n          this.setRollUp(packet.pts);\n        } else if (data === this.ROLL_UP_4_ROWS_) {\n          this.rollUpRows_ = 4;\n          this.setRollUp(packet.pts);\n        } else if (data === this.CARRIAGE_RETURN_) {\n          this.clearFormatting(packet.pts);\n          this.flushDisplayed(packet.pts);\n          this.shiftRowsUp_();\n          this.startPts_ = packet.pts;\n        } else if (data === this.BACKSPACE_) {\n          if (this.mode_ === 'popOn') {\n            this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1);\n          } else {\n            this.displayed_[this.row_] = this.displayed_[this.row_].slice(0, -1);\n          }\n        } else if (data === this.ERASE_DISPLAYED_MEMORY_) {\n          this.flushDisplayed(packet.pts);\n          this.displayed_ = createDisplayBuffer();\n        } else if (data === this.ERASE_NON_DISPLAYED_MEMORY_) {\n          this.nonDisplayed_ = createDisplayBuffer();\n        } else if (data === this.RESUME_DIRECT_CAPTIONING_) {\n          if (this.mode_ !== 'paintOn') {\n            // NOTE: This should be removed when proper caption positioning is\n            // implemented\n            this.flushDisplayed(packet.pts);\n            this.displayed_ = createDisplayBuffer();\n          }\n\n          this.mode_ = 'paintOn';\n          this.startPts_ = packet.pts; // Append special characters to caption text\n        } else if (this.isSpecialCharacter(char0, char1)) {\n          // Bitmask char0 so that we can apply character transformations\n          // regardless of field and data channel.\n          // Then byte-shift to the left and OR with char1 so we can pass the\n          // entire character code to `getCharFromCode`.\n          char0 = (char0 & 0x03) << 8;\n          text = getCharFromCode(char0 | char1);\n          this[this.mode_](packet.pts, text);\n          this.column_++; // Append extended characters to caption text\n        } else if (this.isExtCharacter(char0, char1)) {\n          // Extended characters always follow their \"non-extended\" equivalents.\n          // IE if a \"è\" is desired, you'll always receive \"eè\"; non-compliant\n          // decoders are supposed to drop the \"è\", while compliant decoders\n          // backspace the \"e\" and insert \"è\".\n          // Delete the previous character\n          if (this.mode_ === 'popOn') {\n            this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1);\n          } else {\n            this.displayed_[this.row_] = this.displayed_[this.row_].slice(0, -1);\n          } // Bitmask char0 so that we can apply character transformations\n          // regardless of field and data channel.\n          // Then byte-shift to the left and OR with char1 so we can pass the\n          // entire character code to `getCharFromCode`.\n\n\n          char0 = (char0 & 0x03) << 8;\n          text = getCharFromCode(char0 | char1);\n          this[this.mode_](packet.pts, text);\n          this.column_++; // Process mid-row codes\n        } else if (this.isMidRowCode(char0, char1)) {\n          // Attributes are not additive, so clear all formatting\n          this.clearFormatting(packet.pts); // According to the standard, mid-row codes\n          // should be replaced with spaces, so add one now\n\n          this[this.mode_](packet.pts, ' ');\n          this.column_++;\n\n          if ((char1 & 0xe) === 0xe) {\n            this.addFormatting(packet.pts, ['i']);\n          }\n\n          if ((char1 & 0x1) === 0x1) {\n            this.addFormatting(packet.pts, ['u']);\n          } // Detect offset control codes and adjust cursor\n\n        } else if (this.isOffsetControlCode(char0, char1)) {\n          // Cursor position is set by indent PAC (see below) in 4-column\n          // increments, with an additional offset code of 1-3 to reach any\n          // of the 32 columns specified by CEA-608. So all we need to do\n          // here is increment the column cursor by the given offset.\n          this.column_ += char1 & 0x03; // Detect PACs (Preamble Address Codes)\n        } else if (this.isPAC(char0, char1)) {\n          // There's no logic for PAC -> row mapping, so we have to just\n          // find the row code in an array and use its index :(\n          var row = ROWS.indexOf(data & 0x1f20); // Configure the caption window if we're in roll-up mode\n\n          if (this.mode_ === 'rollUp') {\n            // This implies that the base row is incorrectly set.\n            // As per the recommendation in CEA-608(Base Row Implementation), defer to the number\n            // of roll-up rows set.\n            if (row - this.rollUpRows_ + 1 < 0) {\n              row = this.rollUpRows_ - 1;\n            }\n\n            this.setRollUp(packet.pts, row);\n          }\n\n          if (row !== this.row_) {\n            // formatting is only persistent for current row\n            this.clearFormatting(packet.pts);\n            this.row_ = row;\n          } // All PACs can apply underline, so detect and apply\n          // (All odd-numbered second bytes set underline)\n\n\n          if (char1 & 0x1 && this.formatting_.indexOf('u') === -1) {\n            this.addFormatting(packet.pts, ['u']);\n          }\n\n          if ((data & 0x10) === 0x10) {\n            // We've got an indent level code. Each successive even number\n            // increments the column cursor by 4, so we can get the desired\n            // column position by bit-shifting to the right (to get n/2)\n            // and multiplying by 4.\n            this.column_ = ((data & 0xe) >> 1) * 4;\n          }\n\n          if (this.isColorPAC(char1)) {\n            // it's a color code, though we only support white, which\n            // can be either normal or italicized. white italics can be\n            // either 0x4e or 0x6e depending on the row, so we just\n            // bitwise-and with 0xe to see if italics should be turned on\n            if ((char1 & 0xe) === 0xe) {\n              this.addFormatting(packet.pts, ['i']);\n            }\n          } // We have a normal character in char0, and possibly one in char1\n\n        } else if (this.isNormalChar(char0)) {\n          if (char1 === 0x00) {\n            char1 = null;\n          }\n\n          text = getCharFromCode(char0);\n          text += getCharFromCode(char1);\n          this[this.mode_](packet.pts, text);\n          this.column_ += text.length;\n        } // finish data processing\n\n      };\n    };\n\n    Cea608Stream.prototype = new stream(); // Trigger a cue point that captures the current state of the\n    // display buffer\n\n    Cea608Stream.prototype.flushDisplayed = function (pts) {\n      var content = this.displayed_ // remove spaces from the start and end of the string\n      .map(function (row) {\n        try {\n          return row.trim();\n        } catch (e) {\n          // Ordinarily, this shouldn't happen. However, caption\n          // parsing errors should not throw exceptions and\n          // break playback.\n          // eslint-disable-next-line no-console\n          console.error('Skipping malformed caption.');\n          return '';\n        }\n      }) // combine all text rows to display in one cue\n      .join('\\n') // and remove blank rows from the start and end, but not the middle\n      .replace(/^\\n+|\\n+$/g, '');\n\n      if (content.length) {\n        this.trigger('data', {\n          startPts: this.startPts_,\n          endPts: pts,\n          text: content,\n          stream: this.name_\n        });\n      }\n    };\n    /**\n     * Zero out the data, used for startup and on seek\n     */\n\n\n    Cea608Stream.prototype.reset = function () {\n      this.mode_ = 'popOn'; // When in roll-up mode, the index of the last row that will\n      // actually display captions. If a caption is shifted to a row\n      // with a lower index than this, it is cleared from the display\n      // buffer\n\n      this.topRow_ = 0;\n      this.startPts_ = 0;\n      this.displayed_ = createDisplayBuffer();\n      this.nonDisplayed_ = createDisplayBuffer();\n      this.lastControlCode_ = null; // Track row and column for proper line-breaking and spacing\n\n      this.column_ = 0;\n      this.row_ = BOTTOM_ROW;\n      this.rollUpRows_ = 2; // This variable holds currently-applied formatting\n\n      this.formatting_ = [];\n    };\n    /**\n     * Sets up control code and related constants for this instance\n     */\n\n\n    Cea608Stream.prototype.setConstants = function () {\n      // The following attributes have these uses:\n      // ext_ :    char0 for mid-row codes, and the base for extended\n      //           chars (ext_+0, ext_+1, and ext_+2 are char0s for\n      //           extended codes)\n      // control_: char0 for control codes, except byte-shifted to the\n      //           left so that we can do this.control_ | CONTROL_CODE\n      // offset_:  char0 for tab offset codes\n      //\n      // It's also worth noting that control codes, and _only_ control codes,\n      // differ between field 1 and field2. Field 2 control codes are always\n      // their field 1 value plus 1. That's why there's the \"| field\" on the\n      // control value.\n      if (this.dataChannel_ === 0) {\n        this.BASE_ = 0x10;\n        this.EXT_ = 0x11;\n        this.CONTROL_ = (0x14 | this.field_) << 8;\n        this.OFFSET_ = 0x17;\n      } else if (this.dataChannel_ === 1) {\n        this.BASE_ = 0x18;\n        this.EXT_ = 0x19;\n        this.CONTROL_ = (0x1c | this.field_) << 8;\n        this.OFFSET_ = 0x1f;\n      } // Constants for the LSByte command codes recognized by Cea608Stream. This\n      // list is not exhaustive. For a more comprehensive listing and semantics see\n      // http://www.gpo.gov/fdsys/pkg/CFR-2010-title47-vol1/pdf/CFR-2010-title47-vol1-sec15-119.pdf\n      // Padding\n\n\n      this.PADDING_ = 0x0000; // Pop-on Mode\n\n      this.RESUME_CAPTION_LOADING_ = this.CONTROL_ | 0x20;\n      this.END_OF_CAPTION_ = this.CONTROL_ | 0x2f; // Roll-up Mode\n\n      this.ROLL_UP_2_ROWS_ = this.CONTROL_ | 0x25;\n      this.ROLL_UP_3_ROWS_ = this.CONTROL_ | 0x26;\n      this.ROLL_UP_4_ROWS_ = this.CONTROL_ | 0x27;\n      this.CARRIAGE_RETURN_ = this.CONTROL_ | 0x2d; // paint-on mode\n\n      this.RESUME_DIRECT_CAPTIONING_ = this.CONTROL_ | 0x29; // Erasure\n\n      this.BACKSPACE_ = this.CONTROL_ | 0x21;\n      this.ERASE_DISPLAYED_MEMORY_ = this.CONTROL_ | 0x2c;\n      this.ERASE_NON_DISPLAYED_MEMORY_ = this.CONTROL_ | 0x2e;\n    };\n    /**\n     * Detects if the 2-byte packet data is a special character\n     *\n     * Special characters have a second byte in the range 0x30 to 0x3f,\n     * with the first byte being 0x11 (for data channel 1) or 0x19 (for\n     * data channel 2).\n     *\n     * @param  {Integer} char0 The first byte\n     * @param  {Integer} char1 The second byte\n     * @return {Boolean}       Whether the 2 bytes are an special character\n     */\n\n\n    Cea608Stream.prototype.isSpecialCharacter = function (char0, char1) {\n      return char0 === this.EXT_ && char1 >= 0x30 && char1 <= 0x3f;\n    };\n    /**\n     * Detects if the 2-byte packet data is an extended character\n     *\n     * Extended characters have a second byte in the range 0x20 to 0x3f,\n     * with the first byte being 0x12 or 0x13 (for data channel 1) or\n     * 0x1a or 0x1b (for data channel 2).\n     *\n     * @param  {Integer} char0 The first byte\n     * @param  {Integer} char1 The second byte\n     * @return {Boolean}       Whether the 2 bytes are an extended character\n     */\n\n\n    Cea608Stream.prototype.isExtCharacter = function (char0, char1) {\n      return (char0 === this.EXT_ + 1 || char0 === this.EXT_ + 2) && char1 >= 0x20 && char1 <= 0x3f;\n    };\n    /**\n     * Detects if the 2-byte packet is a mid-row code\n     *\n     * Mid-row codes have a second byte in the range 0x20 to 0x2f, with\n     * the first byte being 0x11 (for data channel 1) or 0x19 (for data\n     * channel 2).\n     *\n     * @param  {Integer} char0 The first byte\n     * @param  {Integer} char1 The second byte\n     * @return {Boolean}       Whether the 2 bytes are a mid-row code\n     */\n\n\n    Cea608Stream.prototype.isMidRowCode = function (char0, char1) {\n      return char0 === this.EXT_ && char1 >= 0x20 && char1 <= 0x2f;\n    };\n    /**\n     * Detects if the 2-byte packet is an offset control code\n     *\n     * Offset control codes have a second byte in the range 0x21 to 0x23,\n     * with the first byte being 0x17 (for data channel 1) or 0x1f (for\n     * data channel 2).\n     *\n     * @param  {Integer} char0 The first byte\n     * @param  {Integer} char1 The second byte\n     * @return {Boolean}       Whether the 2 bytes are an offset control code\n     */\n\n\n    Cea608Stream.prototype.isOffsetControlCode = function (char0, char1) {\n      return char0 === this.OFFSET_ && char1 >= 0x21 && char1 <= 0x23;\n    };\n    /**\n     * Detects if the 2-byte packet is a Preamble Address Code\n     *\n     * PACs have a first byte in the range 0x10 to 0x17 (for data channel 1)\n     * or 0x18 to 0x1f (for data channel 2), with the second byte in the\n     * range 0x40 to 0x7f.\n     *\n     * @param  {Integer} char0 The first byte\n     * @param  {Integer} char1 The second byte\n     * @return {Boolean}       Whether the 2 bytes are a PAC\n     */\n\n\n    Cea608Stream.prototype.isPAC = function (char0, char1) {\n      return char0 >= this.BASE_ && char0 < this.BASE_ + 8 && char1 >= 0x40 && char1 <= 0x7f;\n    };\n    /**\n     * Detects if a packet's second byte is in the range of a PAC color code\n     *\n     * PAC color codes have the second byte be in the range 0x40 to 0x4f, or\n     * 0x60 to 0x6f.\n     *\n     * @param  {Integer} char1 The second byte\n     * @return {Boolean}       Whether the byte is a color PAC\n     */\n\n\n    Cea608Stream.prototype.isColorPAC = function (char1) {\n      return char1 >= 0x40 && char1 <= 0x4f || char1 >= 0x60 && char1 <= 0x7f;\n    };\n    /**\n     * Detects if a single byte is in the range of a normal character\n     *\n     * Normal text bytes are in the range 0x20 to 0x7f.\n     *\n     * @param  {Integer} char  The byte\n     * @return {Boolean}       Whether the byte is a normal character\n     */\n\n\n    Cea608Stream.prototype.isNormalChar = function (_char) {\n      return _char >= 0x20 && _char <= 0x7f;\n    };\n    /**\n     * Configures roll-up\n     *\n     * @param  {Integer} pts         Current PTS\n     * @param  {Integer} newBaseRow  Used by PACs to slide the current window to\n     *                               a new position\n     */\n\n\n    Cea608Stream.prototype.setRollUp = function (pts, newBaseRow) {\n      // Reset the base row to the bottom row when switching modes\n      if (this.mode_ !== 'rollUp') {\n        this.row_ = BOTTOM_ROW;\n        this.mode_ = 'rollUp'; // Spec says to wipe memories when switching to roll-up\n\n        this.flushDisplayed(pts);\n        this.nonDisplayed_ = createDisplayBuffer();\n        this.displayed_ = createDisplayBuffer();\n      }\n\n      if (newBaseRow !== undefined && newBaseRow !== this.row_) {\n        // move currently displayed captions (up or down) to the new base row\n        for (var i = 0; i < this.rollUpRows_; i++) {\n          this.displayed_[newBaseRow - i] = this.displayed_[this.row_ - i];\n          this.displayed_[this.row_ - i] = '';\n        }\n      }\n\n      if (newBaseRow === undefined) {\n        newBaseRow = this.row_;\n      }\n\n      this.topRow_ = newBaseRow - this.rollUpRows_ + 1;\n    }; // Adds the opening HTML tag for the passed character to the caption text,\n    // and keeps track of it for later closing\n\n\n    Cea608Stream.prototype.addFormatting = function (pts, format) {\n      this.formatting_ = this.formatting_.concat(format);\n      var text = format.reduce(function (text, format) {\n        return text + '<' + format + '>';\n      }, '');\n      this[this.mode_](pts, text);\n    }; // Adds HTML closing tags for current formatting to caption text and\n    // clears remembered formatting\n\n\n    Cea608Stream.prototype.clearFormatting = function (pts) {\n      if (!this.formatting_.length) {\n        return;\n      }\n\n      var text = this.formatting_.reverse().reduce(function (text, format) {\n        return text + '</' + format + '>';\n      }, '');\n      this.formatting_ = [];\n      this[this.mode_](pts, text);\n    }; // Mode Implementations\n\n\n    Cea608Stream.prototype.popOn = function (pts, text) {\n      var baseRow = this.nonDisplayed_[this.row_]; // buffer characters\n\n      baseRow += text;\n      this.nonDisplayed_[this.row_] = baseRow;\n    };\n\n    Cea608Stream.prototype.rollUp = function (pts, text) {\n      var baseRow = this.displayed_[this.row_];\n      baseRow += text;\n      this.displayed_[this.row_] = baseRow;\n    };\n\n    Cea608Stream.prototype.shiftRowsUp_ = function () {\n      var i; // clear out inactive rows\n\n      for (i = 0; i < this.topRow_; i++) {\n        this.displayed_[i] = '';\n      }\n\n      for (i = this.row_ + 1; i < BOTTOM_ROW + 1; i++) {\n        this.displayed_[i] = '';\n      } // shift displayed rows up\n\n\n      for (i = this.topRow_; i < this.row_; i++) {\n        this.displayed_[i] = this.displayed_[i + 1];\n      } // clear out the bottom row\n\n\n      this.displayed_[this.row_] = '';\n    };\n\n    Cea608Stream.prototype.paintOn = function (pts, text) {\n      var baseRow = this.displayed_[this.row_];\n      baseRow += text;\n      this.displayed_[this.row_] = baseRow;\n    }; // exports\n\n\n    var captionStream = {\n      CaptionStream: CaptionStream,\n      Cea608Stream: Cea608Stream\n    };\n    /**\n     * mux.js\n     *\n     * Copyright (c) Brightcove\n     * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n     */\n\n    var streamTypes = {\n      H264_STREAM_TYPE: 0x1B,\n      ADTS_STREAM_TYPE: 0x0F,\n      METADATA_STREAM_TYPE: 0x15\n    };\n    var MAX_TS = 8589934592;\n    var RO_THRESH = 4294967296;\n\n    var handleRollover = function handleRollover(value, reference) {\n      var direction = 1;\n\n      if (value > reference) {\n        // If the current timestamp value is greater than our reference timestamp and we detect a\n        // timestamp rollover, this means the roll over is happening in the opposite direction.\n        // Example scenario: Enter a long stream/video just after a rollover occurred. The reference\n        // point will be set to a small number, e.g. 1. The user then seeks backwards over the\n        // rollover point. In loading this segment, the timestamp values will be very large,\n        // e.g. 2^33 - 1. Since this comes before the data we loaded previously, we want to adjust\n        // the time stamp to be `value - 2^33`.\n        direction = -1;\n      } // Note: A seek forwards or back that is greater than the RO_THRESH (2^32, ~13 hours) will\n      // cause an incorrect adjustment.\n\n\n      while (Math.abs(reference - value) > RO_THRESH) {\n        value += direction * MAX_TS;\n      }\n\n      return value;\n    };\n\n    var TimestampRolloverStream = function TimestampRolloverStream(type) {\n      var lastDTS, referenceDTS;\n      TimestampRolloverStream.prototype.init.call(this);\n      this.type_ = type;\n\n      this.push = function (data) {\n        if (data.type !== this.type_) {\n          return;\n        }\n\n        if (referenceDTS === undefined) {\n          referenceDTS = data.dts;\n        }\n\n        data.dts = handleRollover(data.dts, referenceDTS);\n        data.pts = handleRollover(data.pts, referenceDTS);\n        lastDTS = data.dts;\n        this.trigger('data', data);\n      };\n\n      this.flush = function () {\n        referenceDTS = lastDTS;\n        this.trigger('done');\n      };\n\n      this.discontinuity = function () {\n        referenceDTS = void 0;\n        lastDTS = void 0;\n      };\n    };\n\n    TimestampRolloverStream.prototype = new stream();\n    var timestampRolloverStream = {\n      TimestampRolloverStream: TimestampRolloverStream,\n      handleRollover: handleRollover\n    };\n\n    var percentEncode = function percentEncode(bytes, start, end) {\n      var i,\n          result = '';\n\n      for (i = start; i < end; i++) {\n        result += '%' + ('00' + bytes[i].toString(16)).slice(-2);\n      }\n\n      return result;\n    },\n        // return the string representation of the specified byte range,\n    // interpreted as UTf-8.\n    parseUtf8 = function parseUtf8(bytes, start, end) {\n      return decodeURIComponent(percentEncode(bytes, start, end));\n    },\n        // return the string representation of the specified byte range,\n    // interpreted as ISO-8859-1.\n    parseIso88591 = function parseIso88591(bytes, start, end) {\n      return unescape(percentEncode(bytes, start, end)); // jshint ignore:line\n    },\n        parseSyncSafeInteger = function parseSyncSafeInteger(data) {\n      return data[0] << 21 | data[1] << 14 | data[2] << 7 | data[3];\n    },\n        tagParsers = {\n      TXXX: function TXXX(tag) {\n        var i;\n\n        if (tag.data[0] !== 3) {\n          // ignore frames with unrecognized character encodings\n          return;\n        }\n\n        for (i = 1; i < tag.data.length; i++) {\n          if (tag.data[i] === 0) {\n            // parse the text fields\n            tag.description = parseUtf8(tag.data, 1, i); // do not include the null terminator in the tag value\n\n            tag.value = parseUtf8(tag.data, i + 1, tag.data.length).replace(/\\0*$/, '');\n            break;\n          }\n        }\n\n        tag.data = tag.value;\n      },\n      WXXX: function WXXX(tag) {\n        var i;\n\n        if (tag.data[0] !== 3) {\n          // ignore frames with unrecognized character encodings\n          return;\n        }\n\n        for (i = 1; i < tag.data.length; i++) {\n          if (tag.data[i] === 0) {\n            // parse the description and URL fields\n            tag.description = parseUtf8(tag.data, 1, i);\n            tag.url = parseUtf8(tag.data, i + 1, tag.data.length);\n            break;\n          }\n        }\n      },\n      PRIV: function PRIV(tag) {\n        var i;\n\n        for (i = 0; i < tag.data.length; i++) {\n          if (tag.data[i] === 0) {\n            // parse the description and URL fields\n            tag.owner = parseIso88591(tag.data, 0, i);\n            break;\n          }\n        }\n\n        tag.privateData = tag.data.subarray(i + 1);\n        tag.data = tag.privateData;\n      }\n    },\n        _MetadataStream;\n\n    _MetadataStream = function MetadataStream(options) {\n      var settings = {\n        debug: !!(options && options.debug),\n        // the bytes of the program-level descriptor field in MP2T\n        // see ISO/IEC 13818-1:2013 (E), section 2.6 \"Program and\n        // program element descriptors\"\n        descriptor: options && options.descriptor\n      },\n          // the total size in bytes of the ID3 tag being parsed\n      tagSize = 0,\n          // tag data that is not complete enough to be parsed\n      buffer = [],\n          // the total number of bytes currently in the buffer\n      bufferSize = 0,\n          i;\n\n      _MetadataStream.prototype.init.call(this); // calculate the text track in-band metadata track dispatch type\n      // https://html.spec.whatwg.org/multipage/embedded-content.html#steps-to-expose-a-media-resource-specific-text-track\n\n\n      this.dispatchType = streamTypes.METADATA_STREAM_TYPE.toString(16);\n\n      if (settings.descriptor) {\n        for (i = 0; i < settings.descriptor.length; i++) {\n          this.dispatchType += ('00' + settings.descriptor[i].toString(16)).slice(-2);\n        }\n      }\n\n      this.push = function (chunk) {\n        var tag, frameStart, frameSize, frame, i, frameHeader;\n\n        if (chunk.type !== 'timed-metadata') {\n          return;\n        } // if data_alignment_indicator is set in the PES header,\n        // we must have the start of a new ID3 tag. Assume anything\n        // remaining in the buffer was malformed and throw it out\n\n\n        if (chunk.dataAlignmentIndicator) {\n          bufferSize = 0;\n          buffer.length = 0;\n        } // ignore events that don't look like ID3 data\n\n\n        if (buffer.length === 0 && (chunk.data.length < 10 || chunk.data[0] !== 'I'.charCodeAt(0) || chunk.data[1] !== 'D'.charCodeAt(0) || chunk.data[2] !== '3'.charCodeAt(0))) {\n          if (settings.debug) {\n            // eslint-disable-next-line no-console\n            console.log('Skipping unrecognized metadata packet');\n          }\n\n          return;\n        } // add this chunk to the data we've collected so far\n\n\n        buffer.push(chunk);\n        bufferSize += chunk.data.byteLength; // grab the size of the entire frame from the ID3 header\n\n        if (buffer.length === 1) {\n          // the frame size is transmitted as a 28-bit integer in the\n          // last four bytes of the ID3 header.\n          // The most significant bit of each byte is dropped and the\n          // results concatenated to recover the actual value.\n          tagSize = parseSyncSafeInteger(chunk.data.subarray(6, 10)); // ID3 reports the tag size excluding the header but it's more\n          // convenient for our comparisons to include it\n\n          tagSize += 10;\n        } // if the entire frame has not arrived, wait for more data\n\n\n        if (bufferSize < tagSize) {\n          return;\n        } // collect the entire frame so it can be parsed\n\n\n        tag = {\n          data: new Uint8Array(tagSize),\n          frames: [],\n          pts: buffer[0].pts,\n          dts: buffer[0].dts\n        };\n\n        for (i = 0; i < tagSize;) {\n          tag.data.set(buffer[0].data.subarray(0, tagSize - i), i);\n          i += buffer[0].data.byteLength;\n          bufferSize -= buffer[0].data.byteLength;\n          buffer.shift();\n        } // find the start of the first frame and the end of the tag\n\n\n        frameStart = 10;\n\n        if (tag.data[5] & 0x40) {\n          // advance the frame start past the extended header\n          frameStart += 4; // header size field\n\n          frameStart += parseSyncSafeInteger(tag.data.subarray(10, 14)); // clip any padding off the end\n\n          tagSize -= parseSyncSafeInteger(tag.data.subarray(16, 20));\n        } // parse one or more ID3 frames\n        // http://id3.org/id3v2.3.0#ID3v2_frame_overview\n\n\n        do {\n          // determine the number of bytes in this frame\n          frameSize = parseSyncSafeInteger(tag.data.subarray(frameStart + 4, frameStart + 8));\n\n          if (frameSize < 1) {\n            // eslint-disable-next-line no-console\n            return console.log('Malformed ID3 frame encountered. Skipping metadata parsing.');\n          }\n\n          frameHeader = String.fromCharCode(tag.data[frameStart], tag.data[frameStart + 1], tag.data[frameStart + 2], tag.data[frameStart + 3]);\n          frame = {\n            id: frameHeader,\n            data: tag.data.subarray(frameStart + 10, frameStart + frameSize + 10)\n          };\n          frame.key = frame.id;\n\n          if (tagParsers[frame.id]) {\n            tagParsers[frame.id](frame); // handle the special PRIV frame used to indicate the start\n            // time for raw AAC data\n\n            if (frame.owner === 'com.apple.streaming.transportStreamTimestamp') {\n              var d = frame.data,\n                  size = (d[3] & 0x01) << 30 | d[4] << 22 | d[5] << 14 | d[6] << 6 | d[7] >>> 2;\n              size *= 4;\n              size += d[7] & 0x03;\n              frame.timeStamp = size; // in raw AAC, all subsequent data will be timestamped based\n              // on the value of this frame\n              // we couldn't have known the appropriate pts and dts before\n              // parsing this ID3 tag so set those values now\n\n              if (tag.pts === undefined && tag.dts === undefined) {\n                tag.pts = frame.timeStamp;\n                tag.dts = frame.timeStamp;\n              }\n\n              this.trigger('timestamp', frame);\n            }\n          }\n\n          tag.frames.push(frame);\n          frameStart += 10; // advance past the frame header\n\n          frameStart += frameSize; // advance past the frame body\n        } while (frameStart < tagSize);\n\n        this.trigger('data', tag);\n      };\n    };\n\n    _MetadataStream.prototype = new stream();\n    var metadataStream = _MetadataStream;\n    var TimestampRolloverStream$1 = timestampRolloverStream.TimestampRolloverStream; // object types\n\n    var _TransportPacketStream, _TransportParseStream, _ElementaryStream; // constants\n\n\n    var MP2T_PACKET_LENGTH = 188,\n        // bytes\n    SYNC_BYTE = 0x47;\n    /**\n     * Splits an incoming stream of binary data into MPEG-2 Transport\n     * Stream packets.\n     */\n\n    _TransportPacketStream = function TransportPacketStream() {\n      var buffer = new Uint8Array(MP2T_PACKET_LENGTH),\n          bytesInBuffer = 0;\n\n      _TransportPacketStream.prototype.init.call(this); // Deliver new bytes to the stream.\n\n      /**\n       * Split a stream of data into M2TS packets\n      **/\n\n\n      this.push = function (bytes) {\n        var startIndex = 0,\n            endIndex = MP2T_PACKET_LENGTH,\n            everything; // If there are bytes remaining from the last segment, prepend them to the\n        // bytes that were pushed in\n\n        if (bytesInBuffer) {\n          everything = new Uint8Array(bytes.byteLength + bytesInBuffer);\n          everything.set(buffer.subarray(0, bytesInBuffer));\n          everything.set(bytes, bytesInBuffer);\n          bytesInBuffer = 0;\n        } else {\n          everything = bytes;\n        } // While we have enough data for a packet\n\n\n        while (endIndex < everything.byteLength) {\n          // Look for a pair of start and end sync bytes in the data..\n          if (everything[startIndex] === SYNC_BYTE && everything[endIndex] === SYNC_BYTE) {\n            // We found a packet so emit it and jump one whole packet forward in\n            // the stream\n            this.trigger('data', everything.subarray(startIndex, endIndex));\n            startIndex += MP2T_PACKET_LENGTH;\n            endIndex += MP2T_PACKET_LENGTH;\n            continue;\n          } // If we get here, we have somehow become de-synchronized and we need to step\n          // forward one byte at a time until we find a pair of sync bytes that denote\n          // a packet\n\n\n          startIndex++;\n          endIndex++;\n        } // If there was some data left over at the end of the segment that couldn't\n        // possibly be a whole packet, keep it because it might be the start of a packet\n        // that continues in the next segment\n\n\n        if (startIndex < everything.byteLength) {\n          buffer.set(everything.subarray(startIndex), 0);\n          bytesInBuffer = everything.byteLength - startIndex;\n        }\n      };\n      /**\n       * Passes identified M2TS packets to the TransportParseStream to be parsed\n      **/\n\n\n      this.flush = function () {\n        // If the buffer contains a whole packet when we are being flushed, emit it\n        // and empty the buffer. Otherwise hold onto the data because it may be\n        // important for decoding the next segment\n        if (bytesInBuffer === MP2T_PACKET_LENGTH && buffer[0] === SYNC_BYTE) {\n          this.trigger('data', buffer);\n          bytesInBuffer = 0;\n        }\n\n        this.trigger('done');\n      };\n    };\n\n    _TransportPacketStream.prototype = new stream();\n    /**\n     * Accepts an MP2T TransportPacketStream and emits data events with parsed\n     * forms of the individual transport stream packets.\n     */\n\n    _TransportParseStream = function TransportParseStream() {\n      var parsePsi, parsePat, parsePmt, self;\n\n      _TransportParseStream.prototype.init.call(this);\n\n      self = this;\n      this.packetsWaitingForPmt = [];\n      this.programMapTable = undefined;\n\n      parsePsi = function parsePsi(payload, psi) {\n        var offset = 0; // PSI packets may be split into multiple sections and those\n        // sections may be split into multiple packets. If a PSI\n        // section starts in this packet, the payload_unit_start_indicator\n        // will be true and the first byte of the payload will indicate\n        // the offset from the current position to the start of the\n        // section.\n\n        if (psi.payloadUnitStartIndicator) {\n          offset += payload[offset] + 1;\n        }\n\n        if (psi.type === 'pat') {\n          parsePat(payload.subarray(offset), psi);\n        } else {\n          parsePmt(payload.subarray(offset), psi);\n        }\n      };\n\n      parsePat = function parsePat(payload, pat) {\n        pat.section_number = payload[7]; // eslint-disable-line camelcase\n\n        pat.last_section_number = payload[8]; // eslint-disable-line camelcase\n        // skip the PSI header and parse the first PMT entry\n\n        self.pmtPid = (payload[10] & 0x1F) << 8 | payload[11];\n        pat.pmtPid = self.pmtPid;\n      };\n      /**\n       * Parse out the relevant fields of a Program Map Table (PMT).\n       * @param payload {Uint8Array} the PMT-specific portion of an MP2T\n       * packet. The first byte in this array should be the table_id\n       * field.\n       * @param pmt {object} the object that should be decorated with\n       * fields parsed from the PMT.\n       */\n\n\n      parsePmt = function parsePmt(payload, pmt) {\n        var sectionLength, tableEnd, programInfoLength, offset; // PMTs can be sent ahead of the time when they should actually\n        // take effect. We don't believe this should ever be the case\n        // for HLS but we'll ignore \"forward\" PMT declarations if we see\n        // them. Future PMT declarations have the current_next_indicator\n        // set to zero.\n\n        if (!(payload[5] & 0x01)) {\n          return;\n        } // overwrite any existing program map table\n\n\n        self.programMapTable = {\n          video: null,\n          audio: null,\n          'timed-metadata': {}\n        }; // the mapping table ends at the end of the current section\n\n        sectionLength = (payload[1] & 0x0f) << 8 | payload[2];\n        tableEnd = 3 + sectionLength - 4; // to determine where the table is, we have to figure out how\n        // long the program info descriptors are\n\n        programInfoLength = (payload[10] & 0x0f) << 8 | payload[11]; // advance the offset to the first entry in the mapping table\n\n        offset = 12 + programInfoLength;\n\n        while (offset < tableEnd) {\n          var streamType = payload[offset];\n          var pid = (payload[offset + 1] & 0x1F) << 8 | payload[offset + 2]; // only map a single elementary_pid for audio and video stream types\n          // TODO: should this be done for metadata too? for now maintain behavior of\n          //       multiple metadata streams\n\n          if (streamType === streamTypes.H264_STREAM_TYPE && self.programMapTable.video === null) {\n            self.programMapTable.video = pid;\n          } else if (streamType === streamTypes.ADTS_STREAM_TYPE && self.programMapTable.audio === null) {\n            self.programMapTable.audio = pid;\n          } else if (streamType === streamTypes.METADATA_STREAM_TYPE) {\n            // map pid to stream type for metadata streams\n            self.programMapTable['timed-metadata'][pid] = streamType;\n          } // move to the next table entry\n          // skip past the elementary stream descriptors, if present\n\n\n          offset += ((payload[offset + 3] & 0x0F) << 8 | payload[offset + 4]) + 5;\n        } // record the map on the packet as well\n\n\n        pmt.programMapTable = self.programMapTable;\n      };\n      /**\n       * Deliver a new MP2T packet to the next stream in the pipeline.\n       */\n\n\n      this.push = function (packet) {\n        var result = {},\n            offset = 4;\n        result.payloadUnitStartIndicator = !!(packet[1] & 0x40); // pid is a 13-bit field starting at the last bit of packet[1]\n\n        result.pid = packet[1] & 0x1f;\n        result.pid <<= 8;\n        result.pid |= packet[2]; // if an adaption field is present, its length is specified by the\n        // fifth byte of the TS packet header. The adaptation field is\n        // used to add stuffing to PES packets that don't fill a complete\n        // TS packet, and to specify some forms of timing and control data\n        // that we do not currently use.\n\n        if ((packet[3] & 0x30) >>> 4 > 0x01) {\n          offset += packet[offset] + 1;\n        } // parse the rest of the packet based on the type\n\n\n        if (result.pid === 0) {\n          result.type = 'pat';\n          parsePsi(packet.subarray(offset), result);\n          this.trigger('data', result);\n        } else if (result.pid === this.pmtPid) {\n          result.type = 'pmt';\n          parsePsi(packet.subarray(offset), result);\n          this.trigger('data', result); // if there are any packets waiting for a PMT to be found, process them now\n\n          while (this.packetsWaitingForPmt.length) {\n            this.processPes_.apply(this, this.packetsWaitingForPmt.shift());\n          }\n        } else if (this.programMapTable === undefined) {\n          // When we have not seen a PMT yet, defer further processing of\n          // PES packets until one has been parsed\n          this.packetsWaitingForPmt.push([packet, offset, result]);\n        } else {\n          this.processPes_(packet, offset, result);\n        }\n      };\n\n      this.processPes_ = function (packet, offset, result) {\n        // set the appropriate stream type\n        if (result.pid === this.programMapTable.video) {\n          result.streamType = streamTypes.H264_STREAM_TYPE;\n        } else if (result.pid === this.programMapTable.audio) {\n          result.streamType = streamTypes.ADTS_STREAM_TYPE;\n        } else {\n          // if not video or audio, it is timed-metadata or unknown\n          // if unknown, streamType will be undefined\n          result.streamType = this.programMapTable['timed-metadata'][result.pid];\n        }\n\n        result.type = 'pes';\n        result.data = packet.subarray(offset);\n        this.trigger('data', result);\n      };\n    };\n\n    _TransportParseStream.prototype = new stream();\n    _TransportParseStream.STREAM_TYPES = {\n      h264: 0x1b,\n      adts: 0x0f\n    };\n    /**\n     * Reconsistutes program elementary stream (PES) packets from parsed\n     * transport stream packets. That is, if you pipe an\n     * mp2t.TransportParseStream into a mp2t.ElementaryStream, the output\n     * events will be events which capture the bytes for individual PES\n     * packets plus relevant metadata that has been extracted from the\n     * container.\n     */\n\n    _ElementaryStream = function ElementaryStream() {\n      var self = this,\n          // PES packet fragments\n      video = {\n        data: [],\n        size: 0\n      },\n          audio = {\n        data: [],\n        size: 0\n      },\n          timedMetadata = {\n        data: [],\n        size: 0\n      },\n          parsePes = function parsePes(payload, pes) {\n        var ptsDtsFlags; // get the packet length, this will be 0 for video\n\n        pes.packetLength = 6 + (payload[4] << 8 | payload[5]); // find out if this packets starts a new keyframe\n\n        pes.dataAlignmentIndicator = (payload[6] & 0x04) !== 0; // PES packets may be annotated with a PTS value, or a PTS value\n        // and a DTS value. Determine what combination of values is\n        // available to work with.\n\n        ptsDtsFlags = payload[7]; // PTS and DTS are normally stored as a 33-bit number.  Javascript\n        // performs all bitwise operations on 32-bit integers but javascript\n        // supports a much greater range (52-bits) of integer using standard\n        // mathematical operations.\n        // We construct a 31-bit value using bitwise operators over the 31\n        // most significant bits and then multiply by 4 (equal to a left-shift\n        // of 2) before we add the final 2 least significant bits of the\n        // timestamp (equal to an OR.)\n\n        if (ptsDtsFlags & 0xC0) {\n          // the PTS and DTS are not written out directly. For information\n          // on how they are encoded, see\n          // http://dvd.sourceforge.net/dvdinfo/pes-hdr.html\n          pes.pts = (payload[9] & 0x0E) << 27 | (payload[10] & 0xFF) << 20 | (payload[11] & 0xFE) << 12 | (payload[12] & 0xFF) << 5 | (payload[13] & 0xFE) >>> 3;\n          pes.pts *= 4; // Left shift by 2\n\n          pes.pts += (payload[13] & 0x06) >>> 1; // OR by the two LSBs\n\n          pes.dts = pes.pts;\n\n          if (ptsDtsFlags & 0x40) {\n            pes.dts = (payload[14] & 0x0E) << 27 | (payload[15] & 0xFF) << 20 | (payload[16] & 0xFE) << 12 | (payload[17] & 0xFF) << 5 | (payload[18] & 0xFE) >>> 3;\n            pes.dts *= 4; // Left shift by 2\n\n            pes.dts += (payload[18] & 0x06) >>> 1; // OR by the two LSBs\n          }\n        } // the data section starts immediately after the PES header.\n        // pes_header_data_length specifies the number of header bytes\n        // that follow the last byte of the field.\n\n\n        pes.data = payload.subarray(9 + payload[8]);\n      },\n\n      /**\n        * Pass completely parsed PES packets to the next stream in the pipeline\n       **/\n      flushStream = function flushStream(stream$$1, type, forceFlush) {\n        var packetData = new Uint8Array(stream$$1.size),\n            event = {\n          type: type\n        },\n            i = 0,\n            offset = 0,\n            packetFlushable = false,\n            fragment; // do nothing if there is not enough buffered data for a complete\n        // PES header\n\n        if (!stream$$1.data.length || stream$$1.size < 9) {\n          return;\n        }\n\n        event.trackId = stream$$1.data[0].pid; // reassemble the packet\n\n        for (i = 0; i < stream$$1.data.length; i++) {\n          fragment = stream$$1.data[i];\n          packetData.set(fragment.data, offset);\n          offset += fragment.data.byteLength;\n        } // parse assembled packet's PES header\n\n\n        parsePes(packetData, event); // non-video PES packets MUST have a non-zero PES_packet_length\n        // check that there is enough stream data to fill the packet\n\n        packetFlushable = type === 'video' || event.packetLength <= stream$$1.size; // flush pending packets if the conditions are right\n\n        if (forceFlush || packetFlushable) {\n          stream$$1.size = 0;\n          stream$$1.data.length = 0;\n        } // only emit packets that are complete. this is to avoid assembling\n        // incomplete PES packets due to poor segmentation\n\n\n        if (packetFlushable) {\n          self.trigger('data', event);\n        }\n      };\n\n      _ElementaryStream.prototype.init.call(this);\n      /**\n       * Identifies M2TS packet types and parses PES packets using metadata\n       * parsed from the PMT\n       **/\n\n\n      this.push = function (data) {\n        ({\n          pat: function pat() {// we have to wait for the PMT to arrive as well before we\n            // have any meaningful metadata\n          },\n          pes: function pes() {\n            var stream$$1, streamType;\n\n            switch (data.streamType) {\n              case streamTypes.H264_STREAM_TYPE:\n              case streamTypes.H264_STREAM_TYPE:\n                stream$$1 = video;\n                streamType = 'video';\n                break;\n\n              case streamTypes.ADTS_STREAM_TYPE:\n                stream$$1 = audio;\n                streamType = 'audio';\n                break;\n\n              case streamTypes.METADATA_STREAM_TYPE:\n                stream$$1 = timedMetadata;\n                streamType = 'timed-metadata';\n                break;\n\n              default:\n                // ignore unknown stream types\n                return;\n            } // if a new packet is starting, we can flush the completed\n            // packet\n\n\n            if (data.payloadUnitStartIndicator) {\n              flushStream(stream$$1, streamType, true);\n            } // buffer this fragment until we are sure we've received the\n            // complete payload\n\n\n            stream$$1.data.push(data);\n            stream$$1.size += data.data.byteLength;\n          },\n          pmt: function pmt() {\n            var event = {\n              type: 'metadata',\n              tracks: []\n            },\n                programMapTable = data.programMapTable; // translate audio and video streams to tracks\n\n            if (programMapTable.video !== null) {\n              event.tracks.push({\n                timelineStartInfo: {\n                  baseMediaDecodeTime: 0\n                },\n                id: +programMapTable.video,\n                codec: 'avc',\n                type: 'video'\n              });\n            }\n\n            if (programMapTable.audio !== null) {\n              event.tracks.push({\n                timelineStartInfo: {\n                  baseMediaDecodeTime: 0\n                },\n                id: +programMapTable.audio,\n                codec: 'adts',\n                type: 'audio'\n              });\n            }\n\n            self.trigger('data', event);\n          }\n        })[data.type]();\n      };\n      /**\n       * Flush any remaining input. Video PES packets may be of variable\n       * length. Normally, the start of a new video packet can trigger the\n       * finalization of the previous packet. That is not possible if no\n       * more video is forthcoming, however. In that case, some other\n       * mechanism (like the end of the file) has to be employed. When it is\n       * clear that no additional data is forthcoming, calling this method\n       * will flush the buffered packets.\n       */\n\n\n      this.flush = function () {\n        // !!THIS ORDER IS IMPORTANT!!\n        // video first then audio\n        flushStream(video, 'video');\n        flushStream(audio, 'audio');\n        flushStream(timedMetadata, 'timed-metadata');\n        this.trigger('done');\n      };\n    };\n\n    _ElementaryStream.prototype = new stream();\n    var m2ts = {\n      PAT_PID: 0x0000,\n      MP2T_PACKET_LENGTH: MP2T_PACKET_LENGTH,\n      TransportPacketStream: _TransportPacketStream,\n      TransportParseStream: _TransportParseStream,\n      ElementaryStream: _ElementaryStream,\n      TimestampRolloverStream: TimestampRolloverStream$1,\n      CaptionStream: captionStream.CaptionStream,\n      Cea608Stream: captionStream.Cea608Stream,\n      MetadataStream: metadataStream\n    };\n\n    for (var type in streamTypes) {\n      if (streamTypes.hasOwnProperty(type)) {\n        m2ts[type] = streamTypes[type];\n      }\n    }\n\n    var m2ts_1 = m2ts;\n\n    var _AdtsStream;\n\n    var ADTS_SAMPLING_FREQUENCIES = [96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350];\n    /*\n     * Accepts a ElementaryStream and emits data events with parsed\n     * AAC Audio Frames of the individual packets. Input audio in ADTS\n     * format is unpacked and re-emitted as AAC frames.\n     *\n     * @see http://wiki.multimedia.cx/index.php?title=ADTS\n     * @see http://wiki.multimedia.cx/?title=Understanding_AAC\n     */\n\n    _AdtsStream = function AdtsStream() {\n      var buffer;\n\n      _AdtsStream.prototype.init.call(this);\n\n      this.push = function (packet) {\n        var i = 0,\n            frameNum = 0,\n            frameLength,\n            protectionSkipBytes,\n            frameEnd,\n            oldBuffer,\n            sampleCount,\n            adtsFrameDuration;\n\n        if (packet.type !== 'audio') {\n          // ignore non-audio data\n          return;\n        } // Prepend any data in the buffer to the input data so that we can parse\n        // aac frames the cross a PES packet boundary\n\n\n        if (buffer) {\n          oldBuffer = buffer;\n          buffer = new Uint8Array(oldBuffer.byteLength + packet.data.byteLength);\n          buffer.set(oldBuffer);\n          buffer.set(packet.data, oldBuffer.byteLength);\n        } else {\n          buffer = packet.data;\n        } // unpack any ADTS frames which have been fully received\n        // for details on the ADTS header, see http://wiki.multimedia.cx/index.php?title=ADTS\n\n\n        while (i + 5 < buffer.length) {\n          // Loook for the start of an ADTS header..\n          if (buffer[i] !== 0xFF || (buffer[i + 1] & 0xF6) !== 0xF0) {\n            // If a valid header was not found,  jump one forward and attempt to\n            // find a valid ADTS header starting at the next byte\n            i++;\n            continue;\n          } // The protection skip bit tells us if we have 2 bytes of CRC data at the\n          // end of the ADTS header\n\n\n          protectionSkipBytes = (~buffer[i + 1] & 0x01) * 2; // Frame length is a 13 bit integer starting 16 bits from the\n          // end of the sync sequence\n\n          frameLength = (buffer[i + 3] & 0x03) << 11 | buffer[i + 4] << 3 | (buffer[i + 5] & 0xe0) >> 5;\n          sampleCount = ((buffer[i + 6] & 0x03) + 1) * 1024;\n          adtsFrameDuration = sampleCount * 90000 / ADTS_SAMPLING_FREQUENCIES[(buffer[i + 2] & 0x3c) >>> 2];\n          frameEnd = i + frameLength; // If we don't have enough data to actually finish this ADTS frame, return\n          // and wait for more data\n\n          if (buffer.byteLength < frameEnd) {\n            return;\n          } // Otherwise, deliver the complete AAC frame\n\n\n          this.trigger('data', {\n            pts: packet.pts + frameNum * adtsFrameDuration,\n            dts: packet.dts + frameNum * adtsFrameDuration,\n            sampleCount: sampleCount,\n            audioobjecttype: (buffer[i + 2] >>> 6 & 0x03) + 1,\n            channelcount: (buffer[i + 2] & 1) << 2 | (buffer[i + 3] & 0xc0) >>> 6,\n            samplerate: ADTS_SAMPLING_FREQUENCIES[(buffer[i + 2] & 0x3c) >>> 2],\n            samplingfrequencyindex: (buffer[i + 2] & 0x3c) >>> 2,\n            // assume ISO/IEC 14496-12 AudioSampleEntry default of 16\n            samplesize: 16,\n            data: buffer.subarray(i + 7 + protectionSkipBytes, frameEnd)\n          }); // If the buffer is empty, clear it and return\n\n          if (buffer.byteLength === frameEnd) {\n            buffer = undefined;\n            return;\n          }\n\n          frameNum++; // Remove the finished frame from the buffer and start the process again\n\n          buffer = buffer.subarray(frameEnd);\n        }\n      };\n\n      this.flush = function () {\n        this.trigger('done');\n      };\n    };\n\n    _AdtsStream.prototype = new stream();\n    var adts = _AdtsStream;\n    /**\n     * mux.js\n     *\n     * Copyright (c) Brightcove\n     * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n     */\n\n    var ExpGolomb;\n    /**\n     * Parser for exponential Golomb codes, a variable-bitwidth number encoding\n     * scheme used by h264.\n     */\n\n    ExpGolomb = function ExpGolomb(workingData) {\n      var // the number of bytes left to examine in workingData\n      workingBytesAvailable = workingData.byteLength,\n          // the current word being examined\n      workingWord = 0,\n          // :uint\n      // the number of bits left to examine in the current word\n      workingBitsAvailable = 0; // :uint;\n      // ():uint\n\n      this.length = function () {\n        return 8 * workingBytesAvailable;\n      }; // ():uint\n\n\n      this.bitsAvailable = function () {\n        return 8 * workingBytesAvailable + workingBitsAvailable;\n      }; // ():void\n\n\n      this.loadWord = function () {\n        var position = workingData.byteLength - workingBytesAvailable,\n            workingBytes = new Uint8Array(4),\n            availableBytes = Math.min(4, workingBytesAvailable);\n\n        if (availableBytes === 0) {\n          throw new Error('no bytes available');\n        }\n\n        workingBytes.set(workingData.subarray(position, position + availableBytes));\n        workingWord = new DataView(workingBytes.buffer).getUint32(0); // track the amount of workingData that has been processed\n\n        workingBitsAvailable = availableBytes * 8;\n        workingBytesAvailable -= availableBytes;\n      }; // (count:int):void\n\n\n      this.skipBits = function (count) {\n        var skipBytes; // :int\n\n        if (workingBitsAvailable > count) {\n          workingWord <<= count;\n          workingBitsAvailable -= count;\n        } else {\n          count -= workingBitsAvailable;\n          skipBytes = Math.floor(count / 8);\n          count -= skipBytes * 8;\n          workingBytesAvailable -= skipBytes;\n          this.loadWord();\n          workingWord <<= count;\n          workingBitsAvailable -= count;\n        }\n      }; // (size:int):uint\n\n\n      this.readBits = function (size) {\n        var bits = Math.min(workingBitsAvailable, size),\n            // :uint\n        valu = workingWord >>> 32 - bits; // :uint\n        // if size > 31, handle error\n\n        workingBitsAvailable -= bits;\n\n        if (workingBitsAvailable > 0) {\n          workingWord <<= bits;\n        } else if (workingBytesAvailable > 0) {\n          this.loadWord();\n        }\n\n        bits = size - bits;\n\n        if (bits > 0) {\n          return valu << bits | this.readBits(bits);\n        }\n\n        return valu;\n      }; // ():uint\n\n\n      this.skipLeadingZeros = function () {\n        var leadingZeroCount; // :uint\n\n        for (leadingZeroCount = 0; leadingZeroCount < workingBitsAvailable; ++leadingZeroCount) {\n          if ((workingWord & 0x80000000 >>> leadingZeroCount) !== 0) {\n            // the first bit of working word is 1\n            workingWord <<= leadingZeroCount;\n            workingBitsAvailable -= leadingZeroCount;\n            return leadingZeroCount;\n          }\n        } // we exhausted workingWord and still have not found a 1\n\n\n        this.loadWord();\n        return leadingZeroCount + this.skipLeadingZeros();\n      }; // ():void\n\n\n      this.skipUnsignedExpGolomb = function () {\n        this.skipBits(1 + this.skipLeadingZeros());\n      }; // ():void\n\n\n      this.skipExpGolomb = function () {\n        this.skipBits(1 + this.skipLeadingZeros());\n      }; // ():uint\n\n\n      this.readUnsignedExpGolomb = function () {\n        var clz = this.skipLeadingZeros(); // :uint\n\n        return this.readBits(clz + 1) - 1;\n      }; // ():int\n\n\n      this.readExpGolomb = function () {\n        var valu = this.readUnsignedExpGolomb(); // :int\n\n        if (0x01 & valu) {\n          // the number is odd if the low order bit is set\n          return 1 + valu >>> 1; // add 1 to make it even, and divide by 2\n        }\n\n        return -1 * (valu >>> 1); // divide by two then make it negative\n      }; // Some convenience functions\n      // :Boolean\n\n\n      this.readBoolean = function () {\n        return this.readBits(1) === 1;\n      }; // ():int\n\n\n      this.readUnsignedByte = function () {\n        return this.readBits(8);\n      };\n\n      this.loadWord();\n    };\n\n    var expGolomb = ExpGolomb;\n\n    var _H264Stream, _NalByteStream;\n\n    var PROFILES_WITH_OPTIONAL_SPS_DATA;\n    /**\n     * Accepts a NAL unit byte stream and unpacks the embedded NAL units.\n     */\n\n    _NalByteStream = function NalByteStream() {\n      var syncPoint = 0,\n          i,\n          buffer;\n\n      _NalByteStream.prototype.init.call(this);\n      /*\n       * Scans a byte stream and triggers a data event with the NAL units found.\n       * @param {Object} data Event received from H264Stream\n       * @param {Uint8Array} data.data The h264 byte stream to be scanned\n       *\n       * @see H264Stream.push\n       */\n\n\n      this.push = function (data) {\n        var swapBuffer;\n\n        if (!buffer) {\n          buffer = data.data;\n        } else {\n          swapBuffer = new Uint8Array(buffer.byteLength + data.data.byteLength);\n          swapBuffer.set(buffer);\n          swapBuffer.set(data.data, buffer.byteLength);\n          buffer = swapBuffer;\n        } // Rec. ITU-T H.264, Annex B\n        // scan for NAL unit boundaries\n        // a match looks like this:\n        // 0 0 1 .. NAL .. 0 0 1\n        // ^ sync point        ^ i\n        // or this:\n        // 0 0 1 .. NAL .. 0 0 0\n        // ^ sync point        ^ i\n        // advance the sync point to a NAL start, if necessary\n\n\n        for (; syncPoint < buffer.byteLength - 3; syncPoint++) {\n          if (buffer[syncPoint + 2] === 1) {\n            // the sync point is properly aligned\n            i = syncPoint + 5;\n            break;\n          }\n        }\n\n        while (i < buffer.byteLength) {\n          // look at the current byte to determine if we've hit the end of\n          // a NAL unit boundary\n          switch (buffer[i]) {\n            case 0:\n              // skip past non-sync sequences\n              if (buffer[i - 1] !== 0) {\n                i += 2;\n                break;\n              } else if (buffer[i - 2] !== 0) {\n                i++;\n                break;\n              } // deliver the NAL unit if it isn't empty\n\n\n              if (syncPoint + 3 !== i - 2) {\n                this.trigger('data', buffer.subarray(syncPoint + 3, i - 2));\n              } // drop trailing zeroes\n\n\n              do {\n                i++;\n              } while (buffer[i] !== 1 && i < buffer.length);\n\n              syncPoint = i - 2;\n              i += 3;\n              break;\n\n            case 1:\n              // skip past non-sync sequences\n              if (buffer[i - 1] !== 0 || buffer[i - 2] !== 0) {\n                i += 3;\n                break;\n              } // deliver the NAL unit\n\n\n              this.trigger('data', buffer.subarray(syncPoint + 3, i - 2));\n              syncPoint = i - 2;\n              i += 3;\n              break;\n\n            default:\n              // the current byte isn't a one or zero, so it cannot be part\n              // of a sync sequence\n              i += 3;\n              break;\n          }\n        } // filter out the NAL units that were delivered\n\n\n        buffer = buffer.subarray(syncPoint);\n        i -= syncPoint;\n        syncPoint = 0;\n      };\n\n      this.flush = function () {\n        // deliver the last buffered NAL unit\n        if (buffer && buffer.byteLength > 3) {\n          this.trigger('data', buffer.subarray(syncPoint + 3));\n        } // reset the stream state\n\n\n        buffer = null;\n        syncPoint = 0;\n        this.trigger('done');\n      };\n    };\n\n    _NalByteStream.prototype = new stream(); // values of profile_idc that indicate additional fields are included in the SPS\n    // see Recommendation ITU-T H.264 (4/2013),\n    // 7.3.2.1.1 Sequence parameter set data syntax\n\n    PROFILES_WITH_OPTIONAL_SPS_DATA = {\n      100: true,\n      110: true,\n      122: true,\n      244: true,\n      44: true,\n      83: true,\n      86: true,\n      118: true,\n      128: true,\n      138: true,\n      139: true,\n      134: true\n    };\n    /**\n     * Accepts input from a ElementaryStream and produces H.264 NAL unit data\n     * events.\n     */\n\n    _H264Stream = function H264Stream() {\n      var nalByteStream = new _NalByteStream(),\n          self,\n          trackId,\n          currentPts,\n          currentDts,\n          discardEmulationPreventionBytes,\n          readSequenceParameterSet,\n          skipScalingList;\n\n      _H264Stream.prototype.init.call(this);\n\n      self = this;\n      /*\n       * Pushes a packet from a stream onto the NalByteStream\n       *\n       * @param {Object} packet - A packet received from a stream\n       * @param {Uint8Array} packet.data - The raw bytes of the packet\n       * @param {Number} packet.dts - Decode timestamp of the packet\n       * @param {Number} packet.pts - Presentation timestamp of the packet\n       * @param {Number} packet.trackId - The id of the h264 track this packet came from\n       * @param {('video'|'audio')} packet.type - The type of packet\n       *\n       */\n\n      this.push = function (packet) {\n        if (packet.type !== 'video') {\n          return;\n        }\n\n        trackId = packet.trackId;\n        currentPts = packet.pts;\n        currentDts = packet.dts;\n        nalByteStream.push(packet);\n      };\n      /*\n       * Identify NAL unit types and pass on the NALU, trackId, presentation and decode timestamps\n       * for the NALUs to the next stream component.\n       * Also, preprocess caption and sequence parameter NALUs.\n       *\n       * @param {Uint8Array} data - A NAL unit identified by `NalByteStream.push`\n       * @see NalByteStream.push\n       */\n\n\n      nalByteStream.on('data', function (data) {\n        var event = {\n          trackId: trackId,\n          pts: currentPts,\n          dts: currentDts,\n          data: data\n        };\n\n        switch (data[0] & 0x1f) {\n          case 0x05:\n            event.nalUnitType = 'slice_layer_without_partitioning_rbsp_idr';\n            break;\n\n          case 0x06:\n            event.nalUnitType = 'sei_rbsp';\n            event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));\n            break;\n\n          case 0x07:\n            event.nalUnitType = 'seq_parameter_set_rbsp';\n            event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));\n            event.config = readSequenceParameterSet(event.escapedRBSP);\n            break;\n\n          case 0x08:\n            event.nalUnitType = 'pic_parameter_set_rbsp';\n            break;\n\n          case 0x09:\n            event.nalUnitType = 'access_unit_delimiter_rbsp';\n            break;\n\n          default:\n            break;\n        } // This triggers data on the H264Stream\n\n\n        self.trigger('data', event);\n      });\n      nalByteStream.on('done', function () {\n        self.trigger('done');\n      });\n\n      this.flush = function () {\n        nalByteStream.flush();\n      };\n      /**\n       * Advance the ExpGolomb decoder past a scaling list. The scaling\n       * list is optionally transmitted as part of a sequence parameter\n       * set and is not relevant to transmuxing.\n       * @param count {number} the number of entries in this scaling list\n       * @param expGolombDecoder {object} an ExpGolomb pointed to the\n       * start of a scaling list\n       * @see Recommendation ITU-T H.264, Section 7.3.2.1.1.1\n       */\n\n\n      skipScalingList = function skipScalingList(count, expGolombDecoder) {\n        var lastScale = 8,\n            nextScale = 8,\n            j,\n            deltaScale;\n\n        for (j = 0; j < count; j++) {\n          if (nextScale !== 0) {\n            deltaScale = expGolombDecoder.readExpGolomb();\n            nextScale = (lastScale + deltaScale + 256) % 256;\n          }\n\n          lastScale = nextScale === 0 ? lastScale : nextScale;\n        }\n      };\n      /**\n       * Expunge any \"Emulation Prevention\" bytes from a \"Raw Byte\n       * Sequence Payload\"\n       * @param data {Uint8Array} the bytes of a RBSP from a NAL\n       * unit\n       * @return {Uint8Array} the RBSP without any Emulation\n       * Prevention Bytes\n       */\n\n\n      discardEmulationPreventionBytes = function discardEmulationPreventionBytes(data) {\n        var length = data.byteLength,\n            emulationPreventionBytesPositions = [],\n            i = 1,\n            newLength,\n            newData; // Find all `Emulation Prevention Bytes`\n\n        while (i < length - 2) {\n          if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {\n            emulationPreventionBytesPositions.push(i + 2);\n            i += 2;\n          } else {\n            i++;\n          }\n        } // If no Emulation Prevention Bytes were found just return the original\n        // array\n\n\n        if (emulationPreventionBytesPositions.length === 0) {\n          return data;\n        } // Create a new array to hold the NAL unit data\n\n\n        newLength = length - emulationPreventionBytesPositions.length;\n        newData = new Uint8Array(newLength);\n        var sourceIndex = 0;\n\n        for (i = 0; i < newLength; sourceIndex++, i++) {\n          if (sourceIndex === emulationPreventionBytesPositions[0]) {\n            // Skip this byte\n            sourceIndex++; // Remove this position index\n\n            emulationPreventionBytesPositions.shift();\n          }\n\n          newData[i] = data[sourceIndex];\n        }\n\n        return newData;\n      };\n      /**\n       * Read a sequence parameter set and return some interesting video\n       * properties. A sequence parameter set is the H264 metadata that\n       * describes the properties of upcoming video frames.\n       * @param data {Uint8Array} the bytes of a sequence parameter set\n       * @return {object} an object with configuration parsed from the\n       * sequence parameter set, including the dimensions of the\n       * associated video frames.\n       */\n\n\n      readSequenceParameterSet = function readSequenceParameterSet(data) {\n        var frameCropLeftOffset = 0,\n            frameCropRightOffset = 0,\n            frameCropTopOffset = 0,\n            frameCropBottomOffset = 0,\n            sarScale = 1,\n            expGolombDecoder,\n            profileIdc,\n            levelIdc,\n            profileCompatibility,\n            chromaFormatIdc,\n            picOrderCntType,\n            numRefFramesInPicOrderCntCycle,\n            picWidthInMbsMinus1,\n            picHeightInMapUnitsMinus1,\n            frameMbsOnlyFlag,\n            scalingListCount,\n            sarRatio,\n            aspectRatioIdc,\n            i;\n        expGolombDecoder = new expGolomb(data);\n        profileIdc = expGolombDecoder.readUnsignedByte(); // profile_idc\n\n        profileCompatibility = expGolombDecoder.readUnsignedByte(); // constraint_set[0-5]_flag\n\n        levelIdc = expGolombDecoder.readUnsignedByte(); // level_idc u(8)\n\n        expGolombDecoder.skipUnsignedExpGolomb(); // seq_parameter_set_id\n        // some profiles have more optional data we don't need\n\n        if (PROFILES_WITH_OPTIONAL_SPS_DATA[profileIdc]) {\n          chromaFormatIdc = expGolombDecoder.readUnsignedExpGolomb();\n\n          if (chromaFormatIdc === 3) {\n            expGolombDecoder.skipBits(1); // separate_colour_plane_flag\n          }\n\n          expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_luma_minus8\n\n          expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_chroma_minus8\n\n          expGolombDecoder.skipBits(1); // qpprime_y_zero_transform_bypass_flag\n\n          if (expGolombDecoder.readBoolean()) {\n            // seq_scaling_matrix_present_flag\n            scalingListCount = chromaFormatIdc !== 3 ? 8 : 12;\n\n            for (i = 0; i < scalingListCount; i++) {\n              if (expGolombDecoder.readBoolean()) {\n                // seq_scaling_list_present_flag[ i ]\n                if (i < 6) {\n                  skipScalingList(16, expGolombDecoder);\n                } else {\n                  skipScalingList(64, expGolombDecoder);\n                }\n              }\n            }\n          }\n        }\n\n        expGolombDecoder.skipUnsignedExpGolomb(); // log2_max_frame_num_minus4\n\n        picOrderCntType = expGolombDecoder.readUnsignedExpGolomb();\n\n        if (picOrderCntType === 0) {\n          expGolombDecoder.readUnsignedExpGolomb(); // log2_max_pic_order_cnt_lsb_minus4\n        } else if (picOrderCntType === 1) {\n          expGolombDecoder.skipBits(1); // delta_pic_order_always_zero_flag\n\n          expGolombDecoder.skipExpGolomb(); // offset_for_non_ref_pic\n\n          expGolombDecoder.skipExpGolomb(); // offset_for_top_to_bottom_field\n\n          numRefFramesInPicOrderCntCycle = expGolombDecoder.readUnsignedExpGolomb();\n\n          for (i = 0; i < numRefFramesInPicOrderCntCycle; i++) {\n            expGolombDecoder.skipExpGolomb(); // offset_for_ref_frame[ i ]\n          }\n        }\n\n        expGolombDecoder.skipUnsignedExpGolomb(); // max_num_ref_frames\n\n        expGolombDecoder.skipBits(1); // gaps_in_frame_num_value_allowed_flag\n\n        picWidthInMbsMinus1 = expGolombDecoder.readUnsignedExpGolomb();\n        picHeightInMapUnitsMinus1 = expGolombDecoder.readUnsignedExpGolomb();\n        frameMbsOnlyFlag = expGolombDecoder.readBits(1);\n\n        if (frameMbsOnlyFlag === 0) {\n          expGolombDecoder.skipBits(1); // mb_adaptive_frame_field_flag\n        }\n\n        expGolombDecoder.skipBits(1); // direct_8x8_inference_flag\n\n        if (expGolombDecoder.readBoolean()) {\n          // frame_cropping_flag\n          frameCropLeftOffset = expGolombDecoder.readUnsignedExpGolomb();\n          frameCropRightOffset = expGolombDecoder.readUnsignedExpGolomb();\n          frameCropTopOffset = expGolombDecoder.readUnsignedExpGolomb();\n          frameCropBottomOffset = expGolombDecoder.readUnsignedExpGolomb();\n        }\n\n        if (expGolombDecoder.readBoolean()) {\n          // vui_parameters_present_flag\n          if (expGolombDecoder.readBoolean()) {\n            // aspect_ratio_info_present_flag\n            aspectRatioIdc = expGolombDecoder.readUnsignedByte();\n\n            switch (aspectRatioIdc) {\n              case 1:\n                sarRatio = [1, 1];\n                break;\n\n              case 2:\n                sarRatio = [12, 11];\n                break;\n\n              case 3:\n                sarRatio = [10, 11];\n                break;\n\n              case 4:\n                sarRatio = [16, 11];\n                break;\n\n              case 5:\n                sarRatio = [40, 33];\n                break;\n\n              case 6:\n                sarRatio = [24, 11];\n                break;\n\n              case 7:\n                sarRatio = [20, 11];\n                break;\n\n              case 8:\n                sarRatio = [32, 11];\n                break;\n\n              case 9:\n                sarRatio = [80, 33];\n                break;\n\n              case 10:\n                sarRatio = [18, 11];\n                break;\n\n              case 11:\n                sarRatio = [15, 11];\n                break;\n\n              case 12:\n                sarRatio = [64, 33];\n                break;\n\n              case 13:\n                sarRatio = [160, 99];\n                break;\n\n              case 14:\n                sarRatio = [4, 3];\n                break;\n\n              case 15:\n                sarRatio = [3, 2];\n                break;\n\n              case 16:\n                sarRatio = [2, 1];\n                break;\n\n              case 255:\n                {\n                  sarRatio = [expGolombDecoder.readUnsignedByte() << 8 | expGolombDecoder.readUnsignedByte(), expGolombDecoder.readUnsignedByte() << 8 | expGolombDecoder.readUnsignedByte()];\n                  break;\n                }\n            }\n\n            if (sarRatio) {\n              sarScale = sarRatio[0] / sarRatio[1];\n            }\n          }\n        }\n\n        return {\n          profileIdc: profileIdc,\n          levelIdc: levelIdc,\n          profileCompatibility: profileCompatibility,\n          width: Math.ceil(((picWidthInMbsMinus1 + 1) * 16 - frameCropLeftOffset * 2 - frameCropRightOffset * 2) * sarScale),\n          height: (2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16 - frameCropTopOffset * 2 - frameCropBottomOffset * 2\n        };\n      };\n    };\n\n    _H264Stream.prototype = new stream();\n    var h264 = {\n      H264Stream: _H264Stream,\n      NalByteStream: _NalByteStream\n    };\n    /**\n     * mux.js\n     *\n     * Copyright (c) Brightcove\n     * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n     *\n     * Utilities to detect basic properties and metadata about Aac data.\n     */\n\n    var ADTS_SAMPLING_FREQUENCIES$1 = [96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350];\n\n    var isLikelyAacData = function isLikelyAacData(data) {\n      if (data[0] === 'I'.charCodeAt(0) && data[1] === 'D'.charCodeAt(0) && data[2] === '3'.charCodeAt(0)) {\n        return true;\n      }\n\n      return false;\n    };\n\n    var parseSyncSafeInteger$1 = function parseSyncSafeInteger(data) {\n      return data[0] << 21 | data[1] << 14 | data[2] << 7 | data[3];\n    }; // return a percent-encoded representation of the specified byte range\n    // @see http://en.wikipedia.org/wiki/Percent-encoding\n\n\n    var percentEncode$1 = function percentEncode(bytes, start, end) {\n      var i,\n          result = '';\n\n      for (i = start; i < end; i++) {\n        result += '%' + ('00' + bytes[i].toString(16)).slice(-2);\n      }\n\n      return result;\n    }; // return the string representation of the specified byte range,\n    // interpreted as ISO-8859-1.\n\n\n    var parseIso88591$1 = function parseIso88591(bytes, start, end) {\n      return unescape(percentEncode$1(bytes, start, end)); // jshint ignore:line\n    };\n\n    var parseId3TagSize = function parseId3TagSize(header, byteIndex) {\n      var returnSize = header[byteIndex + 6] << 21 | header[byteIndex + 7] << 14 | header[byteIndex + 8] << 7 | header[byteIndex + 9],\n          flags = header[byteIndex + 5],\n          footerPresent = (flags & 16) >> 4;\n\n      if (footerPresent) {\n        return returnSize + 20;\n      }\n\n      return returnSize + 10;\n    };\n\n    var parseAdtsSize = function parseAdtsSize(header, byteIndex) {\n      var lowThree = (header[byteIndex + 5] & 0xE0) >> 5,\n          middle = header[byteIndex + 4] << 3,\n          highTwo = header[byteIndex + 3] & 0x3 << 11;\n      return highTwo | middle | lowThree;\n    };\n\n    var parseType$1 = function parseType(header, byteIndex) {\n      if (header[byteIndex] === 'I'.charCodeAt(0) && header[byteIndex + 1] === 'D'.charCodeAt(0) && header[byteIndex + 2] === '3'.charCodeAt(0)) {\n        return 'timed-metadata';\n      } else if (header[byteIndex] & 0xff === 0xff && (header[byteIndex + 1] & 0xf0) === 0xf0) {\n        return 'audio';\n      }\n\n      return null;\n    };\n\n    var parseSampleRate = function parseSampleRate(packet) {\n      var i = 0;\n\n      while (i + 5 < packet.length) {\n        if (packet[i] !== 0xFF || (packet[i + 1] & 0xF6) !== 0xF0) {\n          // If a valid header was not found,  jump one forward and attempt to\n          // find a valid ADTS header starting at the next byte\n          i++;\n          continue;\n        }\n\n        return ADTS_SAMPLING_FREQUENCIES$1[(packet[i + 2] & 0x3c) >>> 2];\n      }\n\n      return null;\n    };\n\n    var parseAacTimestamp = function parseAacTimestamp(packet) {\n      var frameStart, frameSize, frame, frameHeader; // find the start of the first frame and the end of the tag\n\n      frameStart = 10;\n\n      if (packet[5] & 0x40) {\n        // advance the frame start past the extended header\n        frameStart += 4; // header size field\n\n        frameStart += parseSyncSafeInteger$1(packet.subarray(10, 14));\n      } // parse one or more ID3 frames\n      // http://id3.org/id3v2.3.0#ID3v2_frame_overview\n\n\n      do {\n        // determine the number of bytes in this frame\n        frameSize = parseSyncSafeInteger$1(packet.subarray(frameStart + 4, frameStart + 8));\n\n        if (frameSize < 1) {\n          return null;\n        }\n\n        frameHeader = String.fromCharCode(packet[frameStart], packet[frameStart + 1], packet[frameStart + 2], packet[frameStart + 3]);\n\n        if (frameHeader === 'PRIV') {\n          frame = packet.subarray(frameStart + 10, frameStart + frameSize + 10);\n\n          for (var i = 0; i < frame.byteLength; i++) {\n            if (frame[i] === 0) {\n              var owner = parseIso88591$1(frame, 0, i);\n\n              if (owner === 'com.apple.streaming.transportStreamTimestamp') {\n                var d = frame.subarray(i + 1);\n                var size = (d[3] & 0x01) << 30 | d[4] << 22 | d[5] << 14 | d[6] << 6 | d[7] >>> 2;\n                size *= 4;\n                size += d[7] & 0x03;\n                return size;\n              }\n\n              break;\n            }\n          }\n        }\n\n        frameStart += 10; // advance past the frame header\n\n        frameStart += frameSize; // advance past the frame body\n      } while (frameStart < packet.byteLength);\n\n      return null;\n    };\n\n    var utils = {\n      isLikelyAacData: isLikelyAacData,\n      parseId3TagSize: parseId3TagSize,\n      parseAdtsSize: parseAdtsSize,\n      parseType: parseType$1,\n      parseSampleRate: parseSampleRate,\n      parseAacTimestamp: parseAacTimestamp\n    }; // Constants\n\n    var _AacStream;\n    /**\n     * Splits an incoming stream of binary data into ADTS and ID3 Frames.\n     */\n\n\n    _AacStream = function AacStream() {\n      var everything = new Uint8Array(),\n          timeStamp = 0;\n\n      _AacStream.prototype.init.call(this);\n\n      this.setTimestamp = function (timestamp) {\n        timeStamp = timestamp;\n      };\n\n      this.push = function (bytes) {\n        var frameSize = 0,\n            byteIndex = 0,\n            bytesLeft,\n            chunk,\n            packet,\n            tempLength; // If there are bytes remaining from the last segment, prepend them to the\n        // bytes that were pushed in\n\n        if (everything.length) {\n          tempLength = everything.length;\n          everything = new Uint8Array(bytes.byteLength + tempLength);\n          everything.set(everything.subarray(0, tempLength));\n          everything.set(bytes, tempLength);\n        } else {\n          everything = bytes;\n        }\n\n        while (everything.length - byteIndex >= 3) {\n          if (everything[byteIndex] === 'I'.charCodeAt(0) && everything[byteIndex + 1] === 'D'.charCodeAt(0) && everything[byteIndex + 2] === '3'.charCodeAt(0)) {\n            // Exit early because we don't have enough to parse\n            // the ID3 tag header\n            if (everything.length - byteIndex < 10) {\n              break;\n            } // check framesize\n\n\n            frameSize = utils.parseId3TagSize(everything, byteIndex); // Exit early if we don't have enough in the buffer\n            // to emit a full packet\n            // Add to byteIndex to support multiple ID3 tags in sequence\n\n            if (byteIndex + frameSize > everything.length) {\n              break;\n            }\n\n            chunk = {\n              type: 'timed-metadata',\n              data: everything.subarray(byteIndex, byteIndex + frameSize)\n            };\n            this.trigger('data', chunk);\n            byteIndex += frameSize;\n            continue;\n          } else if ((everything[byteIndex] & 0xff) === 0xff && (everything[byteIndex + 1] & 0xf0) === 0xf0) {\n            // Exit early because we don't have enough to parse\n            // the ADTS frame header\n            if (everything.length - byteIndex < 7) {\n              break;\n            }\n\n            frameSize = utils.parseAdtsSize(everything, byteIndex); // Exit early if we don't have enough in the buffer\n            // to emit a full packet\n\n            if (byteIndex + frameSize > everything.length) {\n              break;\n            }\n\n            packet = {\n              type: 'audio',\n              data: everything.subarray(byteIndex, byteIndex + frameSize),\n              pts: timeStamp,\n              dts: timeStamp\n            };\n            this.trigger('data', packet);\n            byteIndex += frameSize;\n            continue;\n          }\n\n          byteIndex++;\n        }\n\n        bytesLeft = everything.length - byteIndex;\n\n        if (bytesLeft > 0) {\n          everything = everything.subarray(byteIndex);\n        } else {\n          everything = new Uint8Array();\n        }\n      };\n    };\n\n    _AacStream.prototype = new stream();\n    var aac = _AacStream;\n    var H264Stream = h264.H264Stream;\n    var isLikelyAacData$1 = utils.isLikelyAacData; // constants\n\n    var AUDIO_PROPERTIES = ['audioobjecttype', 'channelcount', 'samplerate', 'samplingfrequencyindex', 'samplesize'];\n    var VIDEO_PROPERTIES = ['width', 'height', 'profileIdc', 'levelIdc', 'profileCompatibility']; // object types\n\n    var _VideoSegmentStream, _AudioSegmentStream, _Transmuxer, _CoalesceStream;\n    /**\n     * Compare two arrays (even typed) for same-ness\n     */\n\n\n    var arrayEquals = function arrayEquals(a, b) {\n      var i;\n\n      if (a.length !== b.length) {\n        return false;\n      } // compare the value of each element in the array\n\n\n      for (i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    var generateVideoSegmentTimingInfo = function generateVideoSegmentTimingInfo(baseMediaDecodeTime, startDts, startPts, endDts, endPts, prependedContentDuration) {\n      var ptsOffsetFromDts = startPts - startDts,\n          decodeDuration = endDts - startDts,\n          presentationDuration = endPts - startPts; // The PTS and DTS values are based on the actual stream times from the segment,\n      // however, the player time values will reflect a start from the baseMediaDecodeTime.\n      // In order to provide relevant values for the player times, base timing info on the\n      // baseMediaDecodeTime and the DTS and PTS durations of the segment.\n\n      return {\n        start: {\n          dts: baseMediaDecodeTime,\n          pts: baseMediaDecodeTime + ptsOffsetFromDts\n        },\n        end: {\n          dts: baseMediaDecodeTime + decodeDuration,\n          pts: baseMediaDecodeTime + presentationDuration\n        },\n        prependedContentDuration: prependedContentDuration,\n        baseMediaDecodeTime: baseMediaDecodeTime\n      };\n    };\n    /**\n     * Constructs a single-track, ISO BMFF media segment from AAC data\n     * events. The output of this stream can be fed to a SourceBuffer\n     * configured with a suitable initialization segment.\n     * @param track {object} track metadata configuration\n     * @param options {object} transmuxer options object\n     * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps\n     *        in the source; false to adjust the first segment to start at 0.\n     */\n\n\n    _AudioSegmentStream = function AudioSegmentStream(track, options) {\n      var adtsFrames = [],\n          sequenceNumber = 0,\n          earliestAllowedDts = 0,\n          audioAppendStartTs = 0,\n          videoBaseMediaDecodeTime = Infinity;\n      options = options || {};\n\n      _AudioSegmentStream.prototype.init.call(this);\n\n      this.push = function (data) {\n        trackDecodeInfo.collectDtsInfo(track, data);\n\n        if (track) {\n          AUDIO_PROPERTIES.forEach(function (prop) {\n            track[prop] = data[prop];\n          });\n        } // buffer audio data until end() is called\n\n\n        adtsFrames.push(data);\n      };\n\n      this.setEarliestDts = function (earliestDts) {\n        earliestAllowedDts = earliestDts - track.timelineStartInfo.baseMediaDecodeTime;\n      };\n\n      this.setVideoBaseMediaDecodeTime = function (baseMediaDecodeTime) {\n        videoBaseMediaDecodeTime = baseMediaDecodeTime;\n      };\n\n      this.setAudioAppendStart = function (timestamp) {\n        audioAppendStartTs = timestamp;\n      };\n\n      this.flush = function () {\n        var frames, moof, mdat, boxes; // return early if no audio data has been observed\n\n        if (adtsFrames.length === 0) {\n          this.trigger('done', 'AudioSegmentStream');\n          return;\n        }\n\n        frames = audioFrameUtils.trimAdtsFramesByEarliestDts(adtsFrames, track, earliestAllowedDts);\n        track.baseMediaDecodeTime = trackDecodeInfo.calculateTrackBaseMediaDecodeTime(track, options.keepOriginalTimestamps);\n        audioFrameUtils.prefixWithSilence(track, frames, audioAppendStartTs, videoBaseMediaDecodeTime); // we have to build the index from byte locations to\n        // samples (that is, adts frames) in the audio data\n\n        track.samples = audioFrameUtils.generateSampleTable(frames); // concatenate the audio data to constuct the mdat\n\n        mdat = mp4Generator.mdat(audioFrameUtils.concatenateFrameData(frames));\n        adtsFrames = [];\n        moof = mp4Generator.moof(sequenceNumber, [track]);\n        boxes = new Uint8Array(moof.byteLength + mdat.byteLength); // bump the sequence number for next time\n\n        sequenceNumber++;\n        boxes.set(moof);\n        boxes.set(mdat, moof.byteLength);\n        trackDecodeInfo.clearDtsInfo(track);\n        this.trigger('data', {\n          track: track,\n          boxes: boxes\n        });\n        this.trigger('done', 'AudioSegmentStream');\n      };\n    };\n\n    _AudioSegmentStream.prototype = new stream();\n    /**\n     * Constructs a single-track, ISO BMFF media segment from H264 data\n     * events. The output of this stream can be fed to a SourceBuffer\n     * configured with a suitable initialization segment.\n     * @param track {object} track metadata configuration\n     * @param options {object} transmuxer options object\n     * @param options.alignGopsAtEnd {boolean} If true, start from the end of the\n     *        gopsToAlignWith list when attempting to align gop pts\n     * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps\n     *        in the source; false to adjust the first segment to start at 0.\n     */\n\n    _VideoSegmentStream = function VideoSegmentStream(track, options) {\n      var sequenceNumber = 0,\n          nalUnits = [],\n          gopsToAlignWith = [],\n          config,\n          pps;\n      options = options || {};\n\n      _VideoSegmentStream.prototype.init.call(this);\n\n      delete track.minPTS;\n      this.gopCache_ = [];\n      /**\n        * Constructs a ISO BMFF segment given H264 nalUnits\n        * @param {Object} nalUnit A data event representing a nalUnit\n        * @param {String} nalUnit.nalUnitType\n        * @param {Object} nalUnit.config Properties for a mp4 track\n        * @param {Uint8Array} nalUnit.data The nalUnit bytes\n        * @see lib/codecs/h264.js\n       **/\n\n      this.push = function (nalUnit) {\n        trackDecodeInfo.collectDtsInfo(track, nalUnit); // record the track config\n\n        if (nalUnit.nalUnitType === 'seq_parameter_set_rbsp' && !config) {\n          config = nalUnit.config;\n          track.sps = [nalUnit.data];\n          VIDEO_PROPERTIES.forEach(function (prop) {\n            track[prop] = config[prop];\n          }, this);\n        }\n\n        if (nalUnit.nalUnitType === 'pic_parameter_set_rbsp' && !pps) {\n          pps = nalUnit.data;\n          track.pps = [nalUnit.data];\n        } // buffer video until flush() is called\n\n\n        nalUnits.push(nalUnit);\n      };\n      /**\n        * Pass constructed ISO BMFF track and boxes on to the\n        * next stream in the pipeline\n       **/\n\n\n      this.flush = function () {\n        var frames,\n            gopForFusion,\n            gops,\n            moof,\n            mdat,\n            boxes,\n            prependedContentDuration = 0,\n            firstGop,\n            lastGop; // Throw away nalUnits at the start of the byte stream until\n        // we find the first AUD\n\n        while (nalUnits.length) {\n          if (nalUnits[0].nalUnitType === 'access_unit_delimiter_rbsp') {\n            break;\n          }\n\n          nalUnits.shift();\n        } // Return early if no video data has been observed\n\n\n        if (nalUnits.length === 0) {\n          this.resetStream_();\n          this.trigger('done', 'VideoSegmentStream');\n          return;\n        } // Organize the raw nal-units into arrays that represent\n        // higher-level constructs such as frames and gops\n        // (group-of-pictures)\n\n\n        frames = frameUtils.groupNalsIntoFrames(nalUnits);\n        gops = frameUtils.groupFramesIntoGops(frames); // If the first frame of this fragment is not a keyframe we have\n        // a problem since MSE (on Chrome) requires a leading keyframe.\n        //\n        // We have two approaches to repairing this situation:\n        // 1) GOP-FUSION:\n        //    This is where we keep track of the GOPS (group-of-pictures)\n        //    from previous fragments and attempt to find one that we can\n        //    prepend to the current fragment in order to create a valid\n        //    fragment.\n        // 2) KEYFRAME-PULLING:\n        //    Here we search for the first keyframe in the fragment and\n        //    throw away all the frames between the start of the fragment\n        //    and that keyframe. We then extend the duration and pull the\n        //    PTS of the keyframe forward so that it covers the time range\n        //    of the frames that were disposed of.\n        //\n        // #1 is far prefereable over #2 which can cause \"stuttering\" but\n        // requires more things to be just right.\n\n        if (!gops[0][0].keyFrame) {\n          // Search for a gop for fusion from our gopCache\n          gopForFusion = this.getGopForFusion_(nalUnits[0], track);\n\n          if (gopForFusion) {\n            // in order to provide more accurate timing information about the segment, save\n            // the number of seconds prepended to the original segment due to GOP fusion\n            prependedContentDuration = gopForFusion.duration;\n            gops.unshift(gopForFusion); // Adjust Gops' metadata to account for the inclusion of the\n            // new gop at the beginning\n\n            gops.byteLength += gopForFusion.byteLength;\n            gops.nalCount += gopForFusion.nalCount;\n            gops.pts = gopForFusion.pts;\n            gops.dts = gopForFusion.dts;\n            gops.duration += gopForFusion.duration;\n          } else {\n            // If we didn't find a candidate gop fall back to keyframe-pulling\n            gops = frameUtils.extendFirstKeyFrame(gops);\n          }\n        } // Trim gops to align with gopsToAlignWith\n\n\n        if (gopsToAlignWith.length) {\n          var alignedGops;\n\n          if (options.alignGopsAtEnd) {\n            alignedGops = this.alignGopsAtEnd_(gops);\n          } else {\n            alignedGops = this.alignGopsAtStart_(gops);\n          }\n\n          if (!alignedGops) {\n            // save all the nals in the last GOP into the gop cache\n            this.gopCache_.unshift({\n              gop: gops.pop(),\n              pps: track.pps,\n              sps: track.sps\n            }); // Keep a maximum of 6 GOPs in the cache\n\n            this.gopCache_.length = Math.min(6, this.gopCache_.length); // Clear nalUnits\n\n            nalUnits = []; // return early no gops can be aligned with desired gopsToAlignWith\n\n            this.resetStream_();\n            this.trigger('done', 'VideoSegmentStream');\n            return;\n          } // Some gops were trimmed. clear dts info so minSegmentDts and pts are correct\n          // when recalculated before sending off to CoalesceStream\n\n\n          trackDecodeInfo.clearDtsInfo(track);\n          gops = alignedGops;\n        }\n\n        trackDecodeInfo.collectDtsInfo(track, gops); // First, we have to build the index from byte locations to\n        // samples (that is, frames) in the video data\n\n        track.samples = frameUtils.generateSampleTable(gops); // Concatenate the video data and construct the mdat\n\n        mdat = mp4Generator.mdat(frameUtils.concatenateNalData(gops));\n        track.baseMediaDecodeTime = trackDecodeInfo.calculateTrackBaseMediaDecodeTime(track, options.keepOriginalTimestamps);\n        this.trigger('processedGopsInfo', gops.map(function (gop) {\n          return {\n            pts: gop.pts,\n            dts: gop.dts,\n            byteLength: gop.byteLength\n          };\n        }));\n        firstGop = gops[0];\n        lastGop = gops[gops.length - 1];\n        this.trigger('segmentTimingInfo', generateVideoSegmentTimingInfo(track.baseMediaDecodeTime, firstGop.dts, firstGop.pts, lastGop.dts + lastGop.duration, lastGop.pts + lastGop.duration, prependedContentDuration)); // save all the nals in the last GOP into the gop cache\n\n        this.gopCache_.unshift({\n          gop: gops.pop(),\n          pps: track.pps,\n          sps: track.sps\n        }); // Keep a maximum of 6 GOPs in the cache\n\n        this.gopCache_.length = Math.min(6, this.gopCache_.length); // Clear nalUnits\n\n        nalUnits = [];\n        this.trigger('baseMediaDecodeTime', track.baseMediaDecodeTime);\n        this.trigger('timelineStartInfo', track.timelineStartInfo);\n        moof = mp4Generator.moof(sequenceNumber, [track]); // it would be great to allocate this array up front instead of\n        // throwing away hundreds of media segment fragments\n\n        boxes = new Uint8Array(moof.byteLength + mdat.byteLength); // Bump the sequence number for next time\n\n        sequenceNumber++;\n        boxes.set(moof);\n        boxes.set(mdat, moof.byteLength);\n        this.trigger('data', {\n          track: track,\n          boxes: boxes\n        });\n        this.resetStream_(); // Continue with the flush process now\n\n        this.trigger('done', 'VideoSegmentStream');\n      };\n\n      this.resetStream_ = function () {\n        trackDecodeInfo.clearDtsInfo(track); // reset config and pps because they may differ across segments\n        // for instance, when we are rendition switching\n\n        config = undefined;\n        pps = undefined;\n      }; // Search for a candidate Gop for gop-fusion from the gop cache and\n      // return it or return null if no good candidate was found\n\n\n      this.getGopForFusion_ = function (nalUnit) {\n        var halfSecond = 45000,\n            // Half-a-second in a 90khz clock\n        allowableOverlap = 10000,\n            // About 3 frames @ 30fps\n        nearestDistance = Infinity,\n            dtsDistance,\n            nearestGopObj,\n            currentGop,\n            currentGopObj,\n            i; // Search for the GOP nearest to the beginning of this nal unit\n\n        for (i = 0; i < this.gopCache_.length; i++) {\n          currentGopObj = this.gopCache_[i];\n          currentGop = currentGopObj.gop; // Reject Gops with different SPS or PPS\n\n          if (!(track.pps && arrayEquals(track.pps[0], currentGopObj.pps[0])) || !(track.sps && arrayEquals(track.sps[0], currentGopObj.sps[0]))) {\n            continue;\n          } // Reject Gops that would require a negative baseMediaDecodeTime\n\n\n          if (currentGop.dts < track.timelineStartInfo.dts) {\n            continue;\n          } // The distance between the end of the gop and the start of the nalUnit\n\n\n          dtsDistance = nalUnit.dts - currentGop.dts - currentGop.duration; // Only consider GOPS that start before the nal unit and end within\n          // a half-second of the nal unit\n\n          if (dtsDistance >= -allowableOverlap && dtsDistance <= halfSecond) {\n            // Always use the closest GOP we found if there is more than\n            // one candidate\n            if (!nearestGopObj || nearestDistance > dtsDistance) {\n              nearestGopObj = currentGopObj;\n              nearestDistance = dtsDistance;\n            }\n          }\n        }\n\n        if (nearestGopObj) {\n          return nearestGopObj.gop;\n        }\n\n        return null;\n      }; // trim gop list to the first gop found that has a matching pts with a gop in the list\n      // of gopsToAlignWith starting from the START of the list\n\n\n      this.alignGopsAtStart_ = function (gops) {\n        var alignIndex, gopIndex, align, gop, byteLength, nalCount, duration, alignedGops;\n        byteLength = gops.byteLength;\n        nalCount = gops.nalCount;\n        duration = gops.duration;\n        alignIndex = gopIndex = 0;\n\n        while (alignIndex < gopsToAlignWith.length && gopIndex < gops.length) {\n          align = gopsToAlignWith[alignIndex];\n          gop = gops[gopIndex];\n\n          if (align.pts === gop.pts) {\n            break;\n          }\n\n          if (gop.pts > align.pts) {\n            // this current gop starts after the current gop we want to align on, so increment\n            // align index\n            alignIndex++;\n            continue;\n          } // current gop starts before the current gop we want to align on. so increment gop\n          // index\n\n\n          gopIndex++;\n          byteLength -= gop.byteLength;\n          nalCount -= gop.nalCount;\n          duration -= gop.duration;\n        }\n\n        if (gopIndex === 0) {\n          // no gops to trim\n          return gops;\n        }\n\n        if (gopIndex === gops.length) {\n          // all gops trimmed, skip appending all gops\n          return null;\n        }\n\n        alignedGops = gops.slice(gopIndex);\n        alignedGops.byteLength = byteLength;\n        alignedGops.duration = duration;\n        alignedGops.nalCount = nalCount;\n        alignedGops.pts = alignedGops[0].pts;\n        alignedGops.dts = alignedGops[0].dts;\n        return alignedGops;\n      }; // trim gop list to the first gop found that has a matching pts with a gop in the list\n      // of gopsToAlignWith starting from the END of the list\n\n\n      this.alignGopsAtEnd_ = function (gops) {\n        var alignIndex, gopIndex, align, gop, alignEndIndex, matchFound;\n        alignIndex = gopsToAlignWith.length - 1;\n        gopIndex = gops.length - 1;\n        alignEndIndex = null;\n        matchFound = false;\n\n        while (alignIndex >= 0 && gopIndex >= 0) {\n          align = gopsToAlignWith[alignIndex];\n          gop = gops[gopIndex];\n\n          if (align.pts === gop.pts) {\n            matchFound = true;\n            break;\n          }\n\n          if (align.pts > gop.pts) {\n            alignIndex--;\n            continue;\n          }\n\n          if (alignIndex === gopsToAlignWith.length - 1) {\n            // gop.pts is greater than the last alignment candidate. If no match is found\n            // by the end of this loop, we still want to append gops that come after this\n            // point\n            alignEndIndex = gopIndex;\n          }\n\n          gopIndex--;\n        }\n\n        if (!matchFound && alignEndIndex === null) {\n          return null;\n        }\n\n        var trimIndex;\n\n        if (matchFound) {\n          trimIndex = gopIndex;\n        } else {\n          trimIndex = alignEndIndex;\n        }\n\n        if (trimIndex === 0) {\n          return gops;\n        }\n\n        var alignedGops = gops.slice(trimIndex);\n        var metadata = alignedGops.reduce(function (total, gop) {\n          total.byteLength += gop.byteLength;\n          total.duration += gop.duration;\n          total.nalCount += gop.nalCount;\n          return total;\n        }, {\n          byteLength: 0,\n          duration: 0,\n          nalCount: 0\n        });\n        alignedGops.byteLength = metadata.byteLength;\n        alignedGops.duration = metadata.duration;\n        alignedGops.nalCount = metadata.nalCount;\n        alignedGops.pts = alignedGops[0].pts;\n        alignedGops.dts = alignedGops[0].dts;\n        return alignedGops;\n      };\n\n      this.alignGopsWith = function (newGopsToAlignWith) {\n        gopsToAlignWith = newGopsToAlignWith;\n      };\n    };\n\n    _VideoSegmentStream.prototype = new stream();\n    /**\n     * A Stream that can combine multiple streams (ie. audio & video)\n     * into a single output segment for MSE. Also supports audio-only\n     * and video-only streams.\n     * @param options {object} transmuxer options object\n     * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps\n     *        in the source; false to adjust the first segment to start at media timeline start.\n     */\n\n    _CoalesceStream = function CoalesceStream(options, metadataStream) {\n      // Number of Tracks per output segment\n      // If greater than 1, we combine multiple\n      // tracks into a single segment\n      this.numberOfTracks = 0;\n      this.metadataStream = metadataStream;\n      options = options || {};\n\n      if (typeof options.remux !== 'undefined') {\n        this.remuxTracks = !!options.remux;\n      } else {\n        this.remuxTracks = true;\n      }\n\n      if (typeof options.keepOriginalTimestamps === 'boolean') {\n        this.keepOriginalTimestamps = options.keepOriginalTimestamps;\n      }\n\n      this.pendingTracks = [];\n      this.videoTrack = null;\n      this.pendingBoxes = [];\n      this.pendingCaptions = [];\n      this.pendingMetadata = [];\n      this.pendingBytes = 0;\n      this.emittedTracks = 0;\n\n      _CoalesceStream.prototype.init.call(this); // Take output from multiple\n\n\n      this.push = function (output) {\n        // buffer incoming captions until the associated video segment\n        // finishes\n        if (output.text) {\n          return this.pendingCaptions.push(output);\n        } // buffer incoming id3 tags until the final flush\n\n\n        if (output.frames) {\n          return this.pendingMetadata.push(output);\n        } // Add this track to the list of pending tracks and store\n        // important information required for the construction of\n        // the final segment\n\n\n        this.pendingTracks.push(output.track);\n        this.pendingBoxes.push(output.boxes);\n        this.pendingBytes += output.boxes.byteLength;\n\n        if (output.track.type === 'video') {\n          this.videoTrack = output.track;\n        }\n\n        if (output.track.type === 'audio') {\n          this.audioTrack = output.track;\n        }\n      };\n    };\n\n    _CoalesceStream.prototype = new stream();\n\n    _CoalesceStream.prototype.flush = function (flushSource) {\n      var offset = 0,\n          event = {\n        captions: [],\n        captionStreams: {},\n        metadata: [],\n        info: {}\n      },\n          caption,\n          id3,\n          initSegment,\n          timelineStartPts = 0,\n          i;\n\n      if (this.pendingTracks.length < this.numberOfTracks) {\n        if (flushSource !== 'VideoSegmentStream' && flushSource !== 'AudioSegmentStream') {\n          // Return because we haven't received a flush from a data-generating\n          // portion of the segment (meaning that we have only recieved meta-data\n          // or captions.)\n          return;\n        } else if (this.remuxTracks) {\n          // Return until we have enough tracks from the pipeline to remux (if we\n          // are remuxing audio and video into a single MP4)\n          return;\n        } else if (this.pendingTracks.length === 0) {\n          // In the case where we receive a flush without any data having been\n          // received we consider it an emitted track for the purposes of coalescing\n          // `done` events.\n          // We do this for the case where there is an audio and video track in the\n          // segment but no audio data. (seen in several playlists with alternate\n          // audio tracks and no audio present in the main TS segments.)\n          this.emittedTracks++;\n\n          if (this.emittedTracks >= this.numberOfTracks) {\n            this.trigger('done');\n            this.emittedTracks = 0;\n          }\n\n          return;\n        }\n      }\n\n      if (this.videoTrack) {\n        timelineStartPts = this.videoTrack.timelineStartInfo.pts;\n        VIDEO_PROPERTIES.forEach(function (prop) {\n          event.info[prop] = this.videoTrack[prop];\n        }, this);\n      } else if (this.audioTrack) {\n        timelineStartPts = this.audioTrack.timelineStartInfo.pts;\n        AUDIO_PROPERTIES.forEach(function (prop) {\n          event.info[prop] = this.audioTrack[prop];\n        }, this);\n      }\n\n      if (this.pendingTracks.length === 1) {\n        event.type = this.pendingTracks[0].type;\n      } else {\n        event.type = 'combined';\n      }\n\n      this.emittedTracks += this.pendingTracks.length;\n      initSegment = mp4Generator.initSegment(this.pendingTracks); // Create a new typed array to hold the init segment\n\n      event.initSegment = new Uint8Array(initSegment.byteLength); // Create an init segment containing a moov\n      // and track definitions\n\n      event.initSegment.set(initSegment); // Create a new typed array to hold the moof+mdats\n\n      event.data = new Uint8Array(this.pendingBytes); // Append each moof+mdat (one per track) together\n\n      for (i = 0; i < this.pendingBoxes.length; i++) {\n        event.data.set(this.pendingBoxes[i], offset);\n        offset += this.pendingBoxes[i].byteLength;\n      } // Translate caption PTS times into second offsets to match the\n      // video timeline for the segment, and add track info\n\n\n      for (i = 0; i < this.pendingCaptions.length; i++) {\n        caption = this.pendingCaptions[i];\n        caption.startTime = caption.startPts;\n\n        if (!this.keepOriginalTimestamps) {\n          caption.startTime -= timelineStartPts;\n        }\n\n        caption.startTime /= 90e3;\n        caption.endTime = caption.endPts;\n\n        if (!this.keepOriginalTimestamps) {\n          caption.endTime -= timelineStartPts;\n        }\n\n        caption.endTime /= 90e3;\n        event.captionStreams[caption.stream] = true;\n        event.captions.push(caption);\n      } // Translate ID3 frame PTS times into second offsets to match the\n      // video timeline for the segment\n\n\n      for (i = 0; i < this.pendingMetadata.length; i++) {\n        id3 = this.pendingMetadata[i];\n        id3.cueTime = id3.pts;\n\n        if (!this.keepOriginalTimestamps) {\n          id3.cueTime -= timelineStartPts;\n        }\n\n        id3.cueTime /= 90e3;\n        event.metadata.push(id3);\n      } // We add this to every single emitted segment even though we only need\n      // it for the first\n\n\n      event.metadata.dispatchType = this.metadataStream.dispatchType; // Reset stream state\n\n      this.pendingTracks.length = 0;\n      this.videoTrack = null;\n      this.pendingBoxes.length = 0;\n      this.pendingCaptions.length = 0;\n      this.pendingBytes = 0;\n      this.pendingMetadata.length = 0; // Emit the built segment\n\n      this.trigger('data', event); // Only emit `done` if all tracks have been flushed and emitted\n\n      if (this.emittedTracks >= this.numberOfTracks) {\n        this.trigger('done');\n        this.emittedTracks = 0;\n      }\n    };\n    /**\n     * A Stream that expects MP2T binary data as input and produces\n     * corresponding media segments, suitable for use with Media Source\n     * Extension (MSE) implementations that support the ISO BMFF byte\n     * stream format, like Chrome.\n     */\n\n\n    _Transmuxer = function Transmuxer(options) {\n      var self = this,\n          hasFlushed = true,\n          videoTrack,\n          audioTrack;\n\n      _Transmuxer.prototype.init.call(this);\n\n      options = options || {};\n      this.baseMediaDecodeTime = options.baseMediaDecodeTime || 0;\n      this.transmuxPipeline_ = {};\n\n      this.setupAacPipeline = function () {\n        var pipeline = {};\n        this.transmuxPipeline_ = pipeline;\n        pipeline.type = 'aac';\n        pipeline.metadataStream = new m2ts_1.MetadataStream(); // set up the parsing pipeline\n\n        pipeline.aacStream = new aac();\n        pipeline.audioTimestampRolloverStream = new m2ts_1.TimestampRolloverStream('audio');\n        pipeline.timedMetadataTimestampRolloverStream = new m2ts_1.TimestampRolloverStream('timed-metadata');\n        pipeline.adtsStream = new adts();\n        pipeline.coalesceStream = new _CoalesceStream(options, pipeline.metadataStream);\n        pipeline.headOfPipeline = pipeline.aacStream;\n        pipeline.aacStream.pipe(pipeline.audioTimestampRolloverStream).pipe(pipeline.adtsStream);\n        pipeline.aacStream.pipe(pipeline.timedMetadataTimestampRolloverStream).pipe(pipeline.metadataStream).pipe(pipeline.coalesceStream);\n        pipeline.metadataStream.on('timestamp', function (frame) {\n          pipeline.aacStream.setTimestamp(frame.timeStamp);\n        });\n        pipeline.aacStream.on('data', function (data) {\n          if (data.type === 'timed-metadata' && !pipeline.audioSegmentStream) {\n            audioTrack = audioTrack || {\n              timelineStartInfo: {\n                baseMediaDecodeTime: self.baseMediaDecodeTime\n              },\n              codec: 'adts',\n              type: 'audio'\n            }; // hook up the audio segment stream to the first track with aac data\n\n            pipeline.coalesceStream.numberOfTracks++;\n            pipeline.audioSegmentStream = new _AudioSegmentStream(audioTrack, options); // Set up the final part of the audio pipeline\n\n            pipeline.adtsStream.pipe(pipeline.audioSegmentStream).pipe(pipeline.coalesceStream);\n          }\n        }); // Re-emit any data coming from the coalesce stream to the outside world\n\n        pipeline.coalesceStream.on('data', this.trigger.bind(this, 'data')); // Let the consumer know we have finished flushing the entire pipeline\n\n        pipeline.coalesceStream.on('done', this.trigger.bind(this, 'done'));\n      };\n\n      this.setupTsPipeline = function () {\n        var pipeline = {};\n        this.transmuxPipeline_ = pipeline;\n        pipeline.type = 'ts';\n        pipeline.metadataStream = new m2ts_1.MetadataStream(); // set up the parsing pipeline\n\n        pipeline.packetStream = new m2ts_1.TransportPacketStream();\n        pipeline.parseStream = new m2ts_1.TransportParseStream();\n        pipeline.elementaryStream = new m2ts_1.ElementaryStream();\n        pipeline.videoTimestampRolloverStream = new m2ts_1.TimestampRolloverStream('video');\n        pipeline.audioTimestampRolloverStream = new m2ts_1.TimestampRolloverStream('audio');\n        pipeline.timedMetadataTimestampRolloverStream = new m2ts_1.TimestampRolloverStream('timed-metadata');\n        pipeline.adtsStream = new adts();\n        pipeline.h264Stream = new H264Stream();\n        pipeline.captionStream = new m2ts_1.CaptionStream();\n        pipeline.coalesceStream = new _CoalesceStream(options, pipeline.metadataStream);\n        pipeline.headOfPipeline = pipeline.packetStream; // disassemble MPEG2-TS packets into elementary streams\n\n        pipeline.packetStream.pipe(pipeline.parseStream).pipe(pipeline.elementaryStream); // !!THIS ORDER IS IMPORTANT!!\n        // demux the streams\n\n        pipeline.elementaryStream.pipe(pipeline.videoTimestampRolloverStream).pipe(pipeline.h264Stream);\n        pipeline.elementaryStream.pipe(pipeline.audioTimestampRolloverStream).pipe(pipeline.adtsStream);\n        pipeline.elementaryStream.pipe(pipeline.timedMetadataTimestampRolloverStream).pipe(pipeline.metadataStream).pipe(pipeline.coalesceStream); // Hook up CEA-608/708 caption stream\n\n        pipeline.h264Stream.pipe(pipeline.captionStream).pipe(pipeline.coalesceStream);\n        pipeline.elementaryStream.on('data', function (data) {\n          var i;\n\n          if (data.type === 'metadata') {\n            i = data.tracks.length; // scan the tracks listed in the metadata\n\n            while (i--) {\n              if (!videoTrack && data.tracks[i].type === 'video') {\n                videoTrack = data.tracks[i];\n                videoTrack.timelineStartInfo.baseMediaDecodeTime = self.baseMediaDecodeTime;\n              } else if (!audioTrack && data.tracks[i].type === 'audio') {\n                audioTrack = data.tracks[i];\n                audioTrack.timelineStartInfo.baseMediaDecodeTime = self.baseMediaDecodeTime;\n              }\n            } // hook up the video segment stream to the first track with h264 data\n\n\n            if (videoTrack && !pipeline.videoSegmentStream) {\n              pipeline.coalesceStream.numberOfTracks++;\n              pipeline.videoSegmentStream = new _VideoSegmentStream(videoTrack, options);\n              pipeline.videoSegmentStream.on('timelineStartInfo', function (timelineStartInfo) {\n                // When video emits timelineStartInfo data after a flush, we forward that\n                // info to the AudioSegmentStream, if it exists, because video timeline\n                // data takes precedence.\n                if (audioTrack) {\n                  audioTrack.timelineStartInfo = timelineStartInfo; // On the first segment we trim AAC frames that exist before the\n                  // very earliest DTS we have seen in video because Chrome will\n                  // interpret any video track with a baseMediaDecodeTime that is\n                  // non-zero as a gap.\n\n                  pipeline.audioSegmentStream.setEarliestDts(timelineStartInfo.dts);\n                }\n              });\n              pipeline.videoSegmentStream.on('processedGopsInfo', self.trigger.bind(self, 'gopInfo'));\n              pipeline.videoSegmentStream.on('segmentTimingInfo', self.trigger.bind(self, 'videoSegmentTimingInfo'));\n              pipeline.videoSegmentStream.on('baseMediaDecodeTime', function (baseMediaDecodeTime) {\n                if (audioTrack) {\n                  pipeline.audioSegmentStream.setVideoBaseMediaDecodeTime(baseMediaDecodeTime);\n                }\n              }); // Set up the final part of the video pipeline\n\n              pipeline.h264Stream.pipe(pipeline.videoSegmentStream).pipe(pipeline.coalesceStream);\n            }\n\n            if (audioTrack && !pipeline.audioSegmentStream) {\n              // hook up the audio segment stream to the first track with aac data\n              pipeline.coalesceStream.numberOfTracks++;\n              pipeline.audioSegmentStream = new _AudioSegmentStream(audioTrack, options); // Set up the final part of the audio pipeline\n\n              pipeline.adtsStream.pipe(pipeline.audioSegmentStream).pipe(pipeline.coalesceStream);\n            }\n          }\n        }); // Re-emit any data coming from the coalesce stream to the outside world\n\n        pipeline.coalesceStream.on('data', this.trigger.bind(this, 'data')); // Let the consumer know we have finished flushing the entire pipeline\n\n        pipeline.coalesceStream.on('done', this.trigger.bind(this, 'done'));\n      }; // hook up the segment streams once track metadata is delivered\n\n\n      this.setBaseMediaDecodeTime = function (baseMediaDecodeTime) {\n        var pipeline = this.transmuxPipeline_;\n\n        if (!options.keepOriginalTimestamps) {\n          this.baseMediaDecodeTime = baseMediaDecodeTime;\n        }\n\n        if (audioTrack) {\n          audioTrack.timelineStartInfo.dts = undefined;\n          audioTrack.timelineStartInfo.pts = undefined;\n          trackDecodeInfo.clearDtsInfo(audioTrack);\n\n          if (!options.keepOriginalTimestamps) {\n            audioTrack.timelineStartInfo.baseMediaDecodeTime = baseMediaDecodeTime;\n          }\n\n          if (pipeline.audioTimestampRolloverStream) {\n            pipeline.audioTimestampRolloverStream.discontinuity();\n          }\n        }\n\n        if (videoTrack) {\n          if (pipeline.videoSegmentStream) {\n            pipeline.videoSegmentStream.gopCache_ = [];\n            pipeline.videoTimestampRolloverStream.discontinuity();\n          }\n\n          videoTrack.timelineStartInfo.dts = undefined;\n          videoTrack.timelineStartInfo.pts = undefined;\n          trackDecodeInfo.clearDtsInfo(videoTrack);\n          pipeline.captionStream.reset();\n\n          if (!options.keepOriginalTimestamps) {\n            videoTrack.timelineStartInfo.baseMediaDecodeTime = baseMediaDecodeTime;\n          }\n        }\n\n        if (pipeline.timedMetadataTimestampRolloverStream) {\n          pipeline.timedMetadataTimestampRolloverStream.discontinuity();\n        }\n      };\n\n      this.setAudioAppendStart = function (timestamp) {\n        if (audioTrack) {\n          this.transmuxPipeline_.audioSegmentStream.setAudioAppendStart(timestamp);\n        }\n      };\n\n      this.alignGopsWith = function (gopsToAlignWith) {\n        if (videoTrack && this.transmuxPipeline_.videoSegmentStream) {\n          this.transmuxPipeline_.videoSegmentStream.alignGopsWith(gopsToAlignWith);\n        }\n      }; // feed incoming data to the front of the parsing pipeline\n\n\n      this.push = function (data) {\n        if (hasFlushed) {\n          var isAac = isLikelyAacData$1(data);\n\n          if (isAac && this.transmuxPipeline_.type !== 'aac') {\n            this.setupAacPipeline();\n          } else if (!isAac && this.transmuxPipeline_.type !== 'ts') {\n            this.setupTsPipeline();\n          }\n\n          hasFlushed = false;\n        }\n\n        this.transmuxPipeline_.headOfPipeline.push(data);\n      }; // flush any buffered data\n\n\n      this.flush = function () {\n        hasFlushed = true; // Start at the top of the pipeline and flush all pending work\n\n        this.transmuxPipeline_.headOfPipeline.flush();\n      }; // Caption data has to be reset when seeking outside buffered range\n\n\n      this.resetCaptions = function () {\n        if (this.transmuxPipeline_.captionStream) {\n          this.transmuxPipeline_.captionStream.reset();\n        }\n      };\n    };\n\n    _Transmuxer.prototype = new stream();\n    var transmuxer = {\n      Transmuxer: _Transmuxer,\n      VideoSegmentStream: _VideoSegmentStream,\n      AudioSegmentStream: _AudioSegmentStream,\n      AUDIO_PROPERTIES: AUDIO_PROPERTIES,\n      VIDEO_PROPERTIES: VIDEO_PROPERTIES,\n      // exported for testing\n      generateVideoSegmentTimingInfo: generateVideoSegmentTimingInfo\n    };\n\n    var inspectMp4,\n        _textifyMp,\n        parseType$2 = probe.parseType,\n        parseMp4Date = function parseMp4Date(seconds) {\n      return new Date(seconds * 1000 - 2082844800000);\n    },\n        parseSampleFlags = function parseSampleFlags(flags) {\n      return {\n        isLeading: (flags[0] & 0x0c) >>> 2,\n        dependsOn: flags[0] & 0x03,\n        isDependedOn: (flags[1] & 0xc0) >>> 6,\n        hasRedundancy: (flags[1] & 0x30) >>> 4,\n        paddingValue: (flags[1] & 0x0e) >>> 1,\n        isNonSyncSample: flags[1] & 0x01,\n        degradationPriority: flags[2] << 8 | flags[3]\n      };\n    },\n        nalParse = function nalParse(avcStream) {\n      var avcView = new DataView(avcStream.buffer, avcStream.byteOffset, avcStream.byteLength),\n          result = [],\n          i,\n          length;\n\n      for (i = 0; i + 4 < avcStream.length; i += length) {\n        length = avcView.getUint32(i);\n        i += 4; // bail if this doesn't appear to be an H264 stream\n\n        if (length <= 0) {\n          result.push('<span style=\\'color:red;\\'>MALFORMED DATA</span>');\n          continue;\n        }\n\n        switch (avcStream[i] & 0x1F) {\n          case 0x01:\n            result.push('slice_layer_without_partitioning_rbsp');\n            break;\n\n          case 0x05:\n            result.push('slice_layer_without_partitioning_rbsp_idr');\n            break;\n\n          case 0x06:\n            result.push('sei_rbsp');\n            break;\n\n          case 0x07:\n            result.push('seq_parameter_set_rbsp');\n            break;\n\n          case 0x08:\n            result.push('pic_parameter_set_rbsp');\n            break;\n\n          case 0x09:\n            result.push('access_unit_delimiter_rbsp');\n            break;\n\n          default:\n            result.push('UNKNOWN NAL - ' + avcStream[i] & 0x1F);\n            break;\n        }\n      }\n\n      return result;\n    },\n        // registry of handlers for individual mp4 box types\n    parse$$1 = {\n      // codingname, not a first-class box type. stsd entries share the\n      // same format as real boxes so the parsing infrastructure can be\n      // shared\n      avc1: function avc1(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n        return {\n          dataReferenceIndex: view.getUint16(6),\n          width: view.getUint16(24),\n          height: view.getUint16(26),\n          horizresolution: view.getUint16(28) + view.getUint16(30) / 16,\n          vertresolution: view.getUint16(32) + view.getUint16(34) / 16,\n          frameCount: view.getUint16(40),\n          depth: view.getUint16(74),\n          config: inspectMp4(data.subarray(78, data.byteLength))\n        };\n      },\n      avcC: function avcC(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            result = {\n          configurationVersion: data[0],\n          avcProfileIndication: data[1],\n          profileCompatibility: data[2],\n          avcLevelIndication: data[3],\n          lengthSizeMinusOne: data[4] & 0x03,\n          sps: [],\n          pps: []\n        },\n            numOfSequenceParameterSets = data[5] & 0x1f,\n            numOfPictureParameterSets,\n            nalSize,\n            offset,\n            i; // iterate past any SPSs\n\n        offset = 6;\n\n        for (i = 0; i < numOfSequenceParameterSets; i++) {\n          nalSize = view.getUint16(offset);\n          offset += 2;\n          result.sps.push(new Uint8Array(data.subarray(offset, offset + nalSize)));\n          offset += nalSize;\n        } // iterate past any PPSs\n\n\n        numOfPictureParameterSets = data[offset];\n        offset++;\n\n        for (i = 0; i < numOfPictureParameterSets; i++) {\n          nalSize = view.getUint16(offset);\n          offset += 2;\n          result.pps.push(new Uint8Array(data.subarray(offset, offset + nalSize)));\n          offset += nalSize;\n        }\n\n        return result;\n      },\n      btrt: function btrt(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n        return {\n          bufferSizeDB: view.getUint32(0),\n          maxBitrate: view.getUint32(4),\n          avgBitrate: view.getUint32(8)\n        };\n      },\n      esds: function esds(data) {\n        return {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          esId: data[6] << 8 | data[7],\n          streamPriority: data[8] & 0x1f,\n          decoderConfig: {\n            objectProfileIndication: data[11],\n            streamType: data[12] >>> 2 & 0x3f,\n            bufferSize: data[13] << 16 | data[14] << 8 | data[15],\n            maxBitrate: data[16] << 24 | data[17] << 16 | data[18] << 8 | data[19],\n            avgBitrate: data[20] << 24 | data[21] << 16 | data[22] << 8 | data[23],\n            decoderConfigDescriptor: {\n              tag: data[24],\n              length: data[25],\n              audioObjectType: data[26] >>> 3 & 0x1f,\n              samplingFrequencyIndex: (data[26] & 0x07) << 1 | data[27] >>> 7 & 0x01,\n              channelConfiguration: data[27] >>> 3 & 0x0f\n            }\n          }\n        };\n      },\n      ftyp: function ftyp(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            result = {\n          majorBrand: parseType$2(data.subarray(0, 4)),\n          minorVersion: view.getUint32(4),\n          compatibleBrands: []\n        },\n            i = 8;\n\n        while (i < data.byteLength) {\n          result.compatibleBrands.push(parseType$2(data.subarray(i, i + 4)));\n          i += 4;\n        }\n\n        return result;\n      },\n      dinf: function dinf(data) {\n        return {\n          boxes: inspectMp4(data)\n        };\n      },\n      dref: function dref(data) {\n        return {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          dataReferences: inspectMp4(data.subarray(8))\n        };\n      },\n      hdlr: function hdlr(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            result = {\n          version: view.getUint8(0),\n          flags: new Uint8Array(data.subarray(1, 4)),\n          handlerType: parseType$2(data.subarray(8, 12)),\n          name: ''\n        },\n            i = 8; // parse out the name field\n\n        for (i = 24; i < data.byteLength; i++) {\n          if (data[i] === 0x00) {\n            // the name field is null-terminated\n            i++;\n            break;\n          }\n\n          result.name += String.fromCharCode(data[i]);\n        } // decode UTF-8 to javascript's internal representation\n        // see http://ecmanaut.blogspot.com/2006/07/encoding-decoding-utf8-in-javascript.html\n\n\n        result.name = decodeURIComponent(escape(result.name));\n        return result;\n      },\n      mdat: function mdat(data) {\n        return {\n          byteLength: data.byteLength,\n          nals: nalParse(data)\n        };\n      },\n      mdhd: function mdhd(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            i = 4,\n            language,\n            result = {\n          version: view.getUint8(0),\n          flags: new Uint8Array(data.subarray(1, 4)),\n          language: ''\n        };\n\n        if (result.version === 1) {\n          i += 4;\n          result.creationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n\n          i += 8;\n          result.modificationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n\n          i += 4;\n          result.timescale = view.getUint32(i);\n          i += 8;\n          result.duration = view.getUint32(i); // truncating top 4 bytes\n        } else {\n          result.creationTime = parseMp4Date(view.getUint32(i));\n          i += 4;\n          result.modificationTime = parseMp4Date(view.getUint32(i));\n          i += 4;\n          result.timescale = view.getUint32(i);\n          i += 4;\n          result.duration = view.getUint32(i);\n        }\n\n        i += 4; // language is stored as an ISO-639-2/T code in an array of three 5-bit fields\n        // each field is the packed difference between its ASCII value and 0x60\n\n        language = view.getUint16(i);\n        result.language += String.fromCharCode((language >> 10) + 0x60);\n        result.language += String.fromCharCode(((language & 0x03e0) >> 5) + 0x60);\n        result.language += String.fromCharCode((language & 0x1f) + 0x60);\n        return result;\n      },\n      mdia: function mdia(data) {\n        return {\n          boxes: inspectMp4(data)\n        };\n      },\n      mfhd: function mfhd(data) {\n        return {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          sequenceNumber: data[4] << 24 | data[5] << 16 | data[6] << 8 | data[7]\n        };\n      },\n      minf: function minf(data) {\n        return {\n          boxes: inspectMp4(data)\n        };\n      },\n      // codingname, not a first-class box type. stsd entries share the\n      // same format as real boxes so the parsing infrastructure can be\n      // shared\n      mp4a: function mp4a(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            result = {\n          // 6 bytes reserved\n          dataReferenceIndex: view.getUint16(6),\n          // 4 + 4 bytes reserved\n          channelcount: view.getUint16(16),\n          samplesize: view.getUint16(18),\n          // 2 bytes pre_defined\n          // 2 bytes reserved\n          samplerate: view.getUint16(24) + view.getUint16(26) / 65536\n        }; // if there are more bytes to process, assume this is an ISO/IEC\n        // 14496-14 MP4AudioSampleEntry and parse the ESDBox\n\n        if (data.byteLength > 28) {\n          result.streamDescriptor = inspectMp4(data.subarray(28))[0];\n        }\n\n        return result;\n      },\n      moof: function moof(data) {\n        return {\n          boxes: inspectMp4(data)\n        };\n      },\n      moov: function moov(data) {\n        return {\n          boxes: inspectMp4(data)\n        };\n      },\n      mvex: function mvex(data) {\n        return {\n          boxes: inspectMp4(data)\n        };\n      },\n      mvhd: function mvhd(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            i = 4,\n            result = {\n          version: view.getUint8(0),\n          flags: new Uint8Array(data.subarray(1, 4))\n        };\n\n        if (result.version === 1) {\n          i += 4;\n          result.creationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n\n          i += 8;\n          result.modificationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n\n          i += 4;\n          result.timescale = view.getUint32(i);\n          i += 8;\n          result.duration = view.getUint32(i); // truncating top 4 bytes\n        } else {\n          result.creationTime = parseMp4Date(view.getUint32(i));\n          i += 4;\n          result.modificationTime = parseMp4Date(view.getUint32(i));\n          i += 4;\n          result.timescale = view.getUint32(i);\n          i += 4;\n          result.duration = view.getUint32(i);\n        }\n\n        i += 4; // convert fixed-point, base 16 back to a number\n\n        result.rate = view.getUint16(i) + view.getUint16(i + 2) / 16;\n        i += 4;\n        result.volume = view.getUint8(i) + view.getUint8(i + 1) / 8;\n        i += 2;\n        i += 2;\n        i += 2 * 4;\n        result.matrix = new Uint32Array(data.subarray(i, i + 9 * 4));\n        i += 9 * 4;\n        i += 6 * 4;\n        result.nextTrackId = view.getUint32(i);\n        return result;\n      },\n      pdin: function pdin(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n        return {\n          version: view.getUint8(0),\n          flags: new Uint8Array(data.subarray(1, 4)),\n          rate: view.getUint32(4),\n          initialDelay: view.getUint32(8)\n        };\n      },\n      sdtp: function sdtp(data) {\n        var result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          samples: []\n        },\n            i;\n\n        for (i = 4; i < data.byteLength; i++) {\n          result.samples.push({\n            dependsOn: (data[i] & 0x30) >> 4,\n            isDependedOn: (data[i] & 0x0c) >> 2,\n            hasRedundancy: data[i] & 0x03\n          });\n        }\n\n        return result;\n      },\n      sidx: function sidx(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          references: [],\n          referenceId: view.getUint32(4),\n          timescale: view.getUint32(8),\n          earliestPresentationTime: view.getUint32(12),\n          firstOffset: view.getUint32(16)\n        },\n            referenceCount = view.getUint16(22),\n            i;\n\n        for (i = 24; referenceCount; i += 12, referenceCount--) {\n          result.references.push({\n            referenceType: (data[i] & 0x80) >>> 7,\n            referencedSize: view.getUint32(i) & 0x7FFFFFFF,\n            subsegmentDuration: view.getUint32(i + 4),\n            startsWithSap: !!(data[i + 8] & 0x80),\n            sapType: (data[i + 8] & 0x70) >>> 4,\n            sapDeltaTime: view.getUint32(i + 8) & 0x0FFFFFFF\n          });\n        }\n\n        return result;\n      },\n      smhd: function smhd(data) {\n        return {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          balance: data[4] + data[5] / 256\n        };\n      },\n      stbl: function stbl(data) {\n        return {\n          boxes: inspectMp4(data)\n        };\n      },\n      stco: function stco(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          chunkOffsets: []\n        },\n            entryCount = view.getUint32(4),\n            i;\n\n        for (i = 8; entryCount; i += 4, entryCount--) {\n          result.chunkOffsets.push(view.getUint32(i));\n        }\n\n        return result;\n      },\n      stsc: function stsc(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            entryCount = view.getUint32(4),\n            result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          sampleToChunks: []\n        },\n            i;\n\n        for (i = 8; entryCount; i += 12, entryCount--) {\n          result.sampleToChunks.push({\n            firstChunk: view.getUint32(i),\n            samplesPerChunk: view.getUint32(i + 4),\n            sampleDescriptionIndex: view.getUint32(i + 8)\n          });\n        }\n\n        return result;\n      },\n      stsd: function stsd(data) {\n        return {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          sampleDescriptions: inspectMp4(data.subarray(8))\n        };\n      },\n      stsz: function stsz(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          sampleSize: view.getUint32(4),\n          entries: []\n        },\n            i;\n\n        for (i = 12; i < data.byteLength; i += 4) {\n          result.entries.push(view.getUint32(i));\n        }\n\n        return result;\n      },\n      stts: function stts(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          timeToSamples: []\n        },\n            entryCount = view.getUint32(4),\n            i;\n\n        for (i = 8; entryCount; i += 8, entryCount--) {\n          result.timeToSamples.push({\n            sampleCount: view.getUint32(i),\n            sampleDelta: view.getUint32(i + 4)\n          });\n        }\n\n        return result;\n      },\n      styp: function styp(data) {\n        return parse$$1.ftyp(data);\n      },\n      tfdt: function tfdt(data) {\n        var result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          baseMediaDecodeTime: data[4] << 24 | data[5] << 16 | data[6] << 8 | data[7]\n        };\n\n        if (result.version === 1) {\n          result.baseMediaDecodeTime *= Math.pow(2, 32);\n          result.baseMediaDecodeTime += data[8] << 24 | data[9] << 16 | data[10] << 8 | data[11];\n        }\n\n        return result;\n      },\n      tfhd: function tfhd(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          trackId: view.getUint32(4)\n        },\n            baseDataOffsetPresent = result.flags[2] & 0x01,\n            sampleDescriptionIndexPresent = result.flags[2] & 0x02,\n            defaultSampleDurationPresent = result.flags[2] & 0x08,\n            defaultSampleSizePresent = result.flags[2] & 0x10,\n            defaultSampleFlagsPresent = result.flags[2] & 0x20,\n            durationIsEmpty = result.flags[0] & 0x010000,\n            defaultBaseIsMoof = result.flags[0] & 0x020000,\n            i;\n        i = 8;\n\n        if (baseDataOffsetPresent) {\n          i += 4; // truncate top 4 bytes\n          // FIXME: should we read the full 64 bits?\n\n          result.baseDataOffset = view.getUint32(12);\n          i += 4;\n        }\n\n        if (sampleDescriptionIndexPresent) {\n          result.sampleDescriptionIndex = view.getUint32(i);\n          i += 4;\n        }\n\n        if (defaultSampleDurationPresent) {\n          result.defaultSampleDuration = view.getUint32(i);\n          i += 4;\n        }\n\n        if (defaultSampleSizePresent) {\n          result.defaultSampleSize = view.getUint32(i);\n          i += 4;\n        }\n\n        if (defaultSampleFlagsPresent) {\n          result.defaultSampleFlags = view.getUint32(i);\n        }\n\n        if (durationIsEmpty) {\n          result.durationIsEmpty = true;\n        }\n\n        if (!baseDataOffsetPresent && defaultBaseIsMoof) {\n          result.baseDataOffsetIsMoof = true;\n        }\n\n        return result;\n      },\n      tkhd: function tkhd(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            i = 4,\n            result = {\n          version: view.getUint8(0),\n          flags: new Uint8Array(data.subarray(1, 4))\n        };\n\n        if (result.version === 1) {\n          i += 4;\n          result.creationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n\n          i += 8;\n          result.modificationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n\n          i += 4;\n          result.trackId = view.getUint32(i);\n          i += 4;\n          i += 8;\n          result.duration = view.getUint32(i); // truncating top 4 bytes\n        } else {\n          result.creationTime = parseMp4Date(view.getUint32(i));\n          i += 4;\n          result.modificationTime = parseMp4Date(view.getUint32(i));\n          i += 4;\n          result.trackId = view.getUint32(i);\n          i += 4;\n          i += 4;\n          result.duration = view.getUint32(i);\n        }\n\n        i += 4;\n        i += 2 * 4;\n        result.layer = view.getUint16(i);\n        i += 2;\n        result.alternateGroup = view.getUint16(i);\n        i += 2; // convert fixed-point, base 16 back to a number\n\n        result.volume = view.getUint8(i) + view.getUint8(i + 1) / 8;\n        i += 2;\n        i += 2;\n        result.matrix = new Uint32Array(data.subarray(i, i + 9 * 4));\n        i += 9 * 4;\n        result.width = view.getUint16(i) + view.getUint16(i + 2) / 16;\n        i += 4;\n        result.height = view.getUint16(i) + view.getUint16(i + 2) / 16;\n        return result;\n      },\n      traf: function traf(data) {\n        return {\n          boxes: inspectMp4(data)\n        };\n      },\n      trak: function trak(data) {\n        return {\n          boxes: inspectMp4(data)\n        };\n      },\n      trex: function trex(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n        return {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          trackId: view.getUint32(4),\n          defaultSampleDescriptionIndex: view.getUint32(8),\n          defaultSampleDuration: view.getUint32(12),\n          defaultSampleSize: view.getUint32(16),\n          sampleDependsOn: data[20] & 0x03,\n          sampleIsDependedOn: (data[21] & 0xc0) >> 6,\n          sampleHasRedundancy: (data[21] & 0x30) >> 4,\n          samplePaddingValue: (data[21] & 0x0e) >> 1,\n          sampleIsDifferenceSample: !!(data[21] & 0x01),\n          sampleDegradationPriority: view.getUint16(22)\n        };\n      },\n      trun: function trun(data) {\n        var result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          samples: []\n        },\n            view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            // Flag interpretation\n        dataOffsetPresent = result.flags[2] & 0x01,\n            // compare with 2nd byte of 0x1\n        firstSampleFlagsPresent = result.flags[2] & 0x04,\n            // compare with 2nd byte of 0x4\n        sampleDurationPresent = result.flags[1] & 0x01,\n            // compare with 2nd byte of 0x100\n        sampleSizePresent = result.flags[1] & 0x02,\n            // compare with 2nd byte of 0x200\n        sampleFlagsPresent = result.flags[1] & 0x04,\n            // compare with 2nd byte of 0x400\n        sampleCompositionTimeOffsetPresent = result.flags[1] & 0x08,\n            // compare with 2nd byte of 0x800\n        sampleCount = view.getUint32(4),\n            offset = 8,\n            sample;\n\n        if (dataOffsetPresent) {\n          // 32 bit signed integer\n          result.dataOffset = view.getInt32(offset);\n          offset += 4;\n        } // Overrides the flags for the first sample only. The order of\n        // optional values will be: duration, size, compositionTimeOffset\n\n\n        if (firstSampleFlagsPresent && sampleCount) {\n          sample = {\n            flags: parseSampleFlags(data.subarray(offset, offset + 4))\n          };\n          offset += 4;\n\n          if (sampleDurationPresent) {\n            sample.duration = view.getUint32(offset);\n            offset += 4;\n          }\n\n          if (sampleSizePresent) {\n            sample.size = view.getUint32(offset);\n            offset += 4;\n          }\n\n          if (sampleCompositionTimeOffsetPresent) {\n            // Note: this should be a signed int if version is 1\n            sample.compositionTimeOffset = view.getUint32(offset);\n            offset += 4;\n          }\n\n          result.samples.push(sample);\n          sampleCount--;\n        }\n\n        while (sampleCount--) {\n          sample = {};\n\n          if (sampleDurationPresent) {\n            sample.duration = view.getUint32(offset);\n            offset += 4;\n          }\n\n          if (sampleSizePresent) {\n            sample.size = view.getUint32(offset);\n            offset += 4;\n          }\n\n          if (sampleFlagsPresent) {\n            sample.flags = parseSampleFlags(data.subarray(offset, offset + 4));\n            offset += 4;\n          }\n\n          if (sampleCompositionTimeOffsetPresent) {\n            // Note: this should be a signed int if version is 1\n            sample.compositionTimeOffset = view.getUint32(offset);\n            offset += 4;\n          }\n\n          result.samples.push(sample);\n        }\n\n        return result;\n      },\n      'url ': function url(data) {\n        return {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4))\n        };\n      },\n      vmhd: function vmhd(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n        return {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          graphicsmode: view.getUint16(4),\n          opcolor: new Uint16Array([view.getUint16(6), view.getUint16(8), view.getUint16(10)])\n        };\n      }\n    };\n    /**\n     * Return a javascript array of box objects parsed from an ISO base\n     * media file.\n     * @param data {Uint8Array} the binary data of the media to be inspected\n     * @return {array} a javascript array of potentially nested box objects\n     */\n\n\n    inspectMp4 = function inspectMp4(data) {\n      var i = 0,\n          result = [],\n          view,\n          size,\n          type,\n          end,\n          box; // Convert data from Uint8Array to ArrayBuffer, to follow Dataview API\n\n      var ab = new ArrayBuffer(data.length);\n      var v = new Uint8Array(ab);\n\n      for (var z = 0; z < data.length; ++z) {\n        v[z] = data[z];\n      }\n\n      view = new DataView(ab);\n\n      while (i < data.byteLength) {\n        // parse box data\n        size = view.getUint32(i);\n        type = parseType$2(data.subarray(i + 4, i + 8));\n        end = size > 1 ? i + size : data.byteLength; // parse type-specific data\n\n        box = (parse$$1[type] || function (data) {\n          return {\n            data: data\n          };\n        })(data.subarray(i + 8, end));\n\n        box.size = size;\n        box.type = type; // store this box and move to the next\n\n        result.push(box);\n        i = end;\n      }\n\n      return result;\n    };\n    /**\n     * Returns a textual representation of the javascript represtentation\n     * of an MP4 file. You can use it as an alternative to\n     * JSON.stringify() to compare inspected MP4s.\n     * @param inspectedMp4 {array} the parsed array of boxes in an MP4\n     * file\n     * @param depth {number} (optional) the number of ancestor boxes of\n     * the elements of inspectedMp4. Assumed to be zero if unspecified.\n     * @return {string} a text representation of the parsed MP4\n     */\n\n\n    _textifyMp = function textifyMp4(inspectedMp4, depth) {\n      var indent;\n      depth = depth || 0;\n      indent = new Array(depth * 2 + 1).join(' '); // iterate over all the boxes\n\n      return inspectedMp4.map(function (box, index) {\n        // list the box type first at the current indentation level\n        return indent + box.type + '\\n' + // the type is already included and handle child boxes separately\n        Object.keys(box).filter(function (key) {\n          return key !== 'type' && key !== 'boxes'; // output all the box properties\n        }).map(function (key) {\n          var prefix = indent + '  ' + key + ': ',\n              value = box[key]; // print out raw bytes as hexademical\n\n          if (value instanceof Uint8Array || value instanceof Uint32Array) {\n            var bytes = Array.prototype.slice.call(new Uint8Array(value.buffer, value.byteOffset, value.byteLength)).map(function (_byte) {\n              return ' ' + ('00' + _byte.toString(16)).slice(-2);\n            }).join('').match(/.{1,24}/g);\n\n            if (!bytes) {\n              return prefix + '<>';\n            }\n\n            if (bytes.length === 1) {\n              return prefix + '<' + bytes.join('').slice(1) + '>';\n            }\n\n            return prefix + '<\\n' + bytes.map(function (line) {\n              return indent + '  ' + line;\n            }).join('\\n') + '\\n' + indent + '  >';\n          } // stringify generic objects\n\n\n          return prefix + JSON.stringify(value, null, 2).split('\\n').map(function (line, index) {\n            if (index === 0) {\n              return line;\n            }\n\n            return indent + '  ' + line;\n          }).join('\\n');\n        }).join('\\n') + ( // recursively textify the child boxes\n        box.boxes ? '\\n' + _textifyMp(box.boxes, depth + 1) : '');\n      }).join('\\n');\n    };\n\n    var mp4Inspector$$1 = {\n      inspect: inspectMp4,\n      textify: _textifyMp,\n      parseTfdt: parse$$1.tfdt,\n      parseHdlr: parse$$1.hdlr,\n      parseTfhd: parse$$1.tfhd,\n      parseTrun: parse$$1.trun,\n      parseSidx: parse$$1.sidx\n    };\n    var discardEmulationPreventionBytes$1 = captionPacketParser.discardEmulationPreventionBytes;\n    var CaptionStream$1 = captionStream.CaptionStream;\n    /**\n      * Maps an offset in the mdat to a sample based on the the size of the samples.\n      * Assumes that `parseSamples` has been called first.\n      *\n      * @param {Number} offset - The offset into the mdat\n      * @param {Object[]} samples - An array of samples, parsed using `parseSamples`\n      * @return {?Object} The matching sample, or null if no match was found.\n      *\n      * @see ISO-BMFF-12/2015, Section 8.8.8\n     **/\n\n    var mapToSample = function mapToSample(offset, samples) {\n      var approximateOffset = offset;\n\n      for (var i = 0; i < samples.length; i++) {\n        var sample = samples[i];\n\n        if (approximateOffset < sample.size) {\n          return sample;\n        }\n\n        approximateOffset -= sample.size;\n      }\n\n      return null;\n    };\n    /**\n      * Finds SEI nal units contained in a Media Data Box.\n      * Assumes that `parseSamples` has been called first.\n      *\n      * @param {Uint8Array} avcStream - The bytes of the mdat\n      * @param {Object[]} samples - The samples parsed out by `parseSamples`\n      * @param {Number} trackId - The trackId of this video track\n      * @return {Object[]} seiNals - the parsed SEI NALUs found.\n      *   The contents of the seiNal should match what is expected by\n      *   CaptionStream.push (nalUnitType, size, data, escapedRBSP, pts, dts)\n      *\n      * @see ISO-BMFF-12/2015, Section 8.1.1\n      * @see Rec. ITU-T H.264, 7.3.2.3.1\n     **/\n\n\n    var findSeiNals = function findSeiNals(avcStream, samples, trackId) {\n      var avcView = new DataView(avcStream.buffer, avcStream.byteOffset, avcStream.byteLength),\n          result = [],\n          seiNal,\n          i,\n          length,\n          lastMatchedSample;\n\n      for (i = 0; i + 4 < avcStream.length; i += length) {\n        length = avcView.getUint32(i);\n        i += 4; // Bail if this doesn't appear to be an H264 stream\n\n        if (length <= 0) {\n          continue;\n        }\n\n        switch (avcStream[i] & 0x1F) {\n          case 0x06:\n            var data = avcStream.subarray(i + 1, i + 1 + length);\n            var matchingSample = mapToSample(i, samples);\n            seiNal = {\n              nalUnitType: 'sei_rbsp',\n              size: length,\n              data: data,\n              escapedRBSP: discardEmulationPreventionBytes$1(data),\n              trackId: trackId\n            };\n\n            if (matchingSample) {\n              seiNal.pts = matchingSample.pts;\n              seiNal.dts = matchingSample.dts;\n              lastMatchedSample = matchingSample;\n            } else {\n              // If a matching sample cannot be found, use the last\n              // sample's values as they should be as close as possible\n              seiNal.pts = lastMatchedSample.pts;\n              seiNal.dts = lastMatchedSample.dts;\n            }\n\n            result.push(seiNal);\n            break;\n\n          default:\n            break;\n        }\n      }\n\n      return result;\n    };\n    /**\n      * Parses sample information out of Track Run Boxes and calculates\n      * the absolute presentation and decode timestamps of each sample.\n      *\n      * @param {Array<Uint8Array>} truns - The Trun Run boxes to be parsed\n      * @param {Number} baseMediaDecodeTime - base media decode time from tfdt\n          @see ISO-BMFF-12/2015, Section 8.8.12\n      * @param {Object} tfhd - The parsed Track Fragment Header\n      *   @see inspect.parseTfhd\n      * @return {Object[]} the parsed samples\n      *\n      * @see ISO-BMFF-12/2015, Section 8.8.8\n     **/\n\n\n    var parseSamples = function parseSamples(truns, baseMediaDecodeTime, tfhd) {\n      var currentDts = baseMediaDecodeTime;\n      var defaultSampleDuration = tfhd.defaultSampleDuration || 0;\n      var defaultSampleSize = tfhd.defaultSampleSize || 0;\n      var trackId = tfhd.trackId;\n      var allSamples = [];\n      truns.forEach(function (trun) {\n        // Note: We currently do not parse the sample table as well\n        // as the trun. It's possible some sources will require this.\n        // moov > trak > mdia > minf > stbl\n        var trackRun = mp4Inspector$$1.parseTrun(trun);\n        var samples = trackRun.samples;\n        samples.forEach(function (sample) {\n          if (sample.duration === undefined) {\n            sample.duration = defaultSampleDuration;\n          }\n\n          if (sample.size === undefined) {\n            sample.size = defaultSampleSize;\n          }\n\n          sample.trackId = trackId;\n          sample.dts = currentDts;\n\n          if (sample.compositionTimeOffset === undefined) {\n            sample.compositionTimeOffset = 0;\n          }\n\n          sample.pts = currentDts + sample.compositionTimeOffset;\n          currentDts += sample.duration;\n        });\n        allSamples = allSamples.concat(samples);\n      });\n      return allSamples;\n    };\n    /**\n      * Parses out caption nals from an FMP4 segment's video tracks.\n      *\n      * @param {Uint8Array} segment - The bytes of a single segment\n      * @param {Number} videoTrackId - The trackId of a video track in the segment\n      * @return {Object.<Number, Object[]>} A mapping of video trackId to\n      *   a list of seiNals found in that track\n     **/\n\n\n    var parseCaptionNals = function parseCaptionNals(segment, videoTrackId) {\n      // To get the samples\n      var trafs = probe.findBox(segment, ['moof', 'traf']); // To get SEI NAL units\n\n      var mdats = probe.findBox(segment, ['mdat']);\n      var captionNals = {};\n      var mdatTrafPairs = []; // Pair up each traf with a mdat as moofs and mdats are in pairs\n\n      mdats.forEach(function (mdat, index) {\n        var matchingTraf = trafs[index];\n        mdatTrafPairs.push({\n          mdat: mdat,\n          traf: matchingTraf\n        });\n      });\n      mdatTrafPairs.forEach(function (pair) {\n        var mdat = pair.mdat;\n        var traf = pair.traf;\n        var tfhd = probe.findBox(traf, ['tfhd']); // Exactly 1 tfhd per traf\n\n        var headerInfo = mp4Inspector$$1.parseTfhd(tfhd[0]);\n        var trackId = headerInfo.trackId;\n        var tfdt = probe.findBox(traf, ['tfdt']); // Either 0 or 1 tfdt per traf\n\n        var baseMediaDecodeTime = tfdt.length > 0 ? mp4Inspector$$1.parseTfdt(tfdt[0]).baseMediaDecodeTime : 0;\n        var truns = probe.findBox(traf, ['trun']);\n        var samples;\n        var seiNals; // Only parse video data for the chosen video track\n\n        if (videoTrackId === trackId && truns.length > 0) {\n          samples = parseSamples(truns, baseMediaDecodeTime, headerInfo);\n          seiNals = findSeiNals(mdat, samples, trackId);\n\n          if (!captionNals[trackId]) {\n            captionNals[trackId] = [];\n          }\n\n          captionNals[trackId] = captionNals[trackId].concat(seiNals);\n        }\n      });\n      return captionNals;\n    };\n    /**\n      * Parses out inband captions from an MP4 container and returns\n      * caption objects that can be used by WebVTT and the TextTrack API.\n      * @see https://developer.mozilla.org/en-US/docs/Web/API/VTTCue\n      * @see https://developer.mozilla.org/en-US/docs/Web/API/TextTrack\n      * Assumes that `probe.getVideoTrackIds` and `probe.timescale` have been called first\n      *\n      * @param {Uint8Array} segment - The fmp4 segment containing embedded captions\n      * @param {Number} trackId - The id of the video track to parse\n      * @param {Number} timescale - The timescale for the video track from the init segment\n      *\n      * @return {?Object[]} parsedCaptions - A list of captions or null if no video tracks\n      * @return {Number} parsedCaptions[].startTime - The time to show the caption in seconds\n      * @return {Number} parsedCaptions[].endTime - The time to stop showing the caption in seconds\n      * @return {String} parsedCaptions[].text - The visible content of the caption\n     **/\n\n\n    var parseEmbeddedCaptions = function parseEmbeddedCaptions(segment, trackId, timescale) {\n      var seiNals;\n\n      if (!trackId) {\n        return null;\n      }\n\n      seiNals = parseCaptionNals(segment, trackId);\n      return {\n        seiNals: seiNals[trackId],\n        timescale: timescale\n      };\n    };\n    /**\n      * Converts SEI NALUs into captions that can be used by video.js\n     **/\n\n\n    var CaptionParser$$1 = function CaptionParser$$1() {\n      var isInitialized = false;\n      var captionStream$$1; // Stores segments seen before trackId and timescale are set\n\n      var segmentCache; // Stores video track ID of the track being parsed\n\n      var trackId; // Stores the timescale of the track being parsed\n\n      var timescale; // Stores captions parsed so far\n\n      var parsedCaptions;\n      /**\n        * A method to indicate whether a CaptionParser has been initalized\n        * @returns {Boolean}\n       **/\n\n      this.isInitialized = function () {\n        return isInitialized;\n      };\n      /**\n        * Initializes the underlying CaptionStream, SEI NAL parsing\n        * and management, and caption collection\n       **/\n\n\n      this.init = function () {\n        captionStream$$1 = new CaptionStream$1();\n        isInitialized = true; // Collect dispatched captions\n\n        captionStream$$1.on('data', function (event) {\n          // Convert to seconds in the source's timescale\n          event.startTime = event.startPts / timescale;\n          event.endTime = event.endPts / timescale;\n          parsedCaptions.captions.push(event);\n          parsedCaptions.captionStreams[event.stream] = true;\n        });\n      };\n      /**\n        * Determines if a new video track will be selected\n        * or if the timescale changed\n        * @return {Boolean}\n       **/\n\n\n      this.isNewInit = function (videoTrackIds, timescales) {\n        if (videoTrackIds && videoTrackIds.length === 0 || timescales && typeof timescales === 'object' && Object.keys(timescales).length === 0) {\n          return false;\n        }\n\n        return trackId !== videoTrackIds[0] || timescale !== timescales[trackId];\n      };\n      /**\n        * Parses out SEI captions and interacts with underlying\n        * CaptionStream to return dispatched captions\n        *\n        * @param {Uint8Array} segment - The fmp4 segment containing embedded captions\n        * @param {Number[]} videoTrackIds - A list of video tracks found in the init segment\n        * @param {Object.<Number, Number>} timescales - The timescales found in the init segment\n        * @see parseEmbeddedCaptions\n        * @see m2ts/caption-stream.js\n       **/\n\n\n      this.parse = function (segment, videoTrackIds, timescales) {\n        var parsedData;\n\n        if (!this.isInitialized()) {\n          return null; // This is not likely to be a video segment\n        } else if (!videoTrackIds || !timescales) {\n          return null;\n        } else if (this.isNewInit(videoTrackIds, timescales)) {\n          // Use the first video track only as there is no\n          // mechanism to switch to other video tracks\n          trackId = videoTrackIds[0];\n          timescale = timescales[trackId]; // If an init segment has not been seen yet, hold onto segment\n          // data until we have one\n        } else if (!trackId || !timescale) {\n          segmentCache.push(segment);\n          return null;\n        } // Now that a timescale and trackId is set, parse cached segments\n\n\n        while (segmentCache.length > 0) {\n          var cachedSegment = segmentCache.shift();\n          this.parse(cachedSegment, videoTrackIds, timescales);\n        }\n\n        parsedData = parseEmbeddedCaptions(segment, trackId, timescale);\n\n        if (parsedData === null || !parsedData.seiNals) {\n          return null;\n        }\n\n        this.pushNals(parsedData.seiNals); // Force the parsed captions to be dispatched\n\n        this.flushStream();\n        return parsedCaptions;\n      };\n      /**\n        * Pushes SEI NALUs onto CaptionStream\n        * @param {Object[]} nals - A list of SEI nals parsed using `parseCaptionNals`\n        * Assumes that `parseCaptionNals` has been called first\n        * @see m2ts/caption-stream.js\n        **/\n\n\n      this.pushNals = function (nals) {\n        if (!this.isInitialized() || !nals || nals.length === 0) {\n          return null;\n        }\n\n        nals.forEach(function (nal) {\n          captionStream$$1.push(nal);\n        });\n      };\n      /**\n        * Flushes underlying CaptionStream to dispatch processed, displayable captions\n        * @see m2ts/caption-stream.js\n       **/\n\n\n      this.flushStream = function () {\n        if (!this.isInitialized()) {\n          return null;\n        }\n\n        captionStream$$1.flush();\n      };\n      /**\n        * Reset caption buckets for new data\n       **/\n\n\n      this.clearParsedCaptions = function () {\n        parsedCaptions.captions = [];\n        parsedCaptions.captionStreams = {};\n      };\n      /**\n        * Resets underlying CaptionStream\n        * @see m2ts/caption-stream.js\n       **/\n\n\n      this.resetCaptionStream = function () {\n        if (!this.isInitialized()) {\n          return null;\n        }\n\n        captionStream$$1.reset();\n      };\n      /**\n        * Convenience method to clear all captions flushed from the\n        * CaptionStream and still being parsed\n        * @see m2ts/caption-stream.js\n       **/\n\n\n      this.clearAllCaptions = function () {\n        this.clearParsedCaptions();\n        this.resetCaptionStream();\n      };\n      /**\n        * Reset caption parser\n       **/\n\n\n      this.reset = function () {\n        segmentCache = [];\n        trackId = null;\n        timescale = null;\n\n        if (!parsedCaptions) {\n          parsedCaptions = {\n            captions: [],\n            // CC1, CC2, CC3, CC4\n            captionStreams: {}\n          };\n        } else {\n          this.clearParsedCaptions();\n        }\n\n        this.resetCaptionStream();\n      };\n\n      this.reset();\n    };\n\n    var captionParser = CaptionParser$$1;\n    /**\n     * mux.js\n     *\n     * Copyright (c) Brightcove\n     * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n     */\n\n    var mp4 = {\n      generator: mp4Generator,\n      probe: probe,\n      Transmuxer: transmuxer.Transmuxer,\n      AudioSegmentStream: transmuxer.AudioSegmentStream,\n      VideoSegmentStream: transmuxer.VideoSegmentStream,\n      CaptionParser: captionParser\n    };\n\n    var classCallCheck = function classCallCheck(instance, Constructor) {\n      if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n      }\n    };\n\n    var createClass = function () {\n      function defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n          var descriptor = props[i];\n          descriptor.enumerable = descriptor.enumerable || false;\n          descriptor.configurable = true;\n          if (\"value\" in descriptor) descriptor.writable = true;\n          Object.defineProperty(target, descriptor.key, descriptor);\n        }\n      }\n\n      return function (Constructor, protoProps, staticProps) {\n        if (protoProps) defineProperties(Constructor.prototype, protoProps);\n        if (staticProps) defineProperties(Constructor, staticProps);\n        return Constructor;\n      };\n    }();\n    /**\n     * @file transmuxer-worker.js\n     */\n\n    /**\n     * Re-emits transmuxer events by converting them into messages to the\n     * world outside the worker.\n     *\n     * @param {Object} transmuxer the transmuxer to wire events on\n     * @private\n     */\n\n\n    var wireTransmuxerEvents = function wireTransmuxerEvents(self, transmuxer) {\n      transmuxer.on('data', function (segment) {\n        // transfer ownership of the underlying ArrayBuffer\n        // instead of doing a copy to save memory\n        // ArrayBuffers are transferable but generic TypedArrays are not\n        // @link https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers#Passing_data_by_transferring_ownership_(transferable_objects)\n        var initArray = segment.initSegment;\n        segment.initSegment = {\n          data: initArray.buffer,\n          byteOffset: initArray.byteOffset,\n          byteLength: initArray.byteLength\n        };\n        var typedArray = segment.data;\n        segment.data = typedArray.buffer;\n        self.postMessage({\n          action: 'data',\n          segment: segment,\n          byteOffset: typedArray.byteOffset,\n          byteLength: typedArray.byteLength\n        }, [segment.data]);\n      });\n\n      if (transmuxer.captionStream) {\n        transmuxer.captionStream.on('data', function (caption) {\n          self.postMessage({\n            action: 'caption',\n            data: caption\n          });\n        });\n      }\n\n      transmuxer.on('done', function (data) {\n        self.postMessage({\n          action: 'done'\n        });\n      });\n      transmuxer.on('gopInfo', function (gopInfo) {\n        self.postMessage({\n          action: 'gopInfo',\n          gopInfo: gopInfo\n        });\n      });\n      transmuxer.on('videoSegmentTimingInfo', function (videoSegmentTimingInfo) {\n        self.postMessage({\n          action: 'videoSegmentTimingInfo',\n          videoSegmentTimingInfo: videoSegmentTimingInfo\n        });\n      });\n    };\n    /**\n     * All incoming messages route through this hash. If no function exists\n     * to handle an incoming message, then we ignore the message.\n     *\n     * @class MessageHandlers\n     * @param {Object} options the options to initialize with\n     */\n\n\n    var MessageHandlers = function () {\n      function MessageHandlers(self, options) {\n        classCallCheck(this, MessageHandlers);\n        this.options = options || {};\n        this.self = self;\n        this.init();\n      }\n      /**\n       * initialize our web worker and wire all the events.\n       */\n\n\n      createClass(MessageHandlers, [{\n        key: 'init',\n        value: function init() {\n          if (this.transmuxer) {\n            this.transmuxer.dispose();\n          }\n\n          this.transmuxer = new mp4.Transmuxer(this.options);\n          wireTransmuxerEvents(this.self, this.transmuxer);\n        }\n        /**\n         * Adds data (a ts segment) to the start of the transmuxer pipeline for\n         * processing.\n         *\n         * @param {ArrayBuffer} data data to push into the muxer\n         */\n\n      }, {\n        key: 'push',\n        value: function push(data) {\n          // Cast array buffer to correct type for transmuxer\n          var segment = new Uint8Array(data.data, data.byteOffset, data.byteLength);\n          this.transmuxer.push(segment);\n        }\n        /**\n         * Recreate the transmuxer so that the next segment added via `push`\n         * start with a fresh transmuxer.\n         */\n\n      }, {\n        key: 'reset',\n        value: function reset() {\n          this.init();\n        }\n        /**\n         * Set the value that will be used as the `baseMediaDecodeTime` time for the\n         * next segment pushed in. Subsequent segments will have their `baseMediaDecodeTime`\n         * set relative to the first based on the PTS values.\n         *\n         * @param {Object} data used to set the timestamp offset in the muxer\n         */\n\n      }, {\n        key: 'setTimestampOffset',\n        value: function setTimestampOffset(data) {\n          var timestampOffset = data.timestampOffset || 0;\n          this.transmuxer.setBaseMediaDecodeTime(Math.round(timestampOffset * 90000));\n        }\n      }, {\n        key: 'setAudioAppendStart',\n        value: function setAudioAppendStart(data) {\n          this.transmuxer.setAudioAppendStart(Math.ceil(data.appendStart * 90000));\n        }\n        /**\n         * Forces the pipeline to finish processing the last segment and emit it's\n         * results.\n         *\n         * @param {Object} data event data, not really used\n         */\n\n      }, {\n        key: 'flush',\n        value: function flush(data) {\n          this.transmuxer.flush();\n        }\n      }, {\n        key: 'resetCaptions',\n        value: function resetCaptions() {\n          this.transmuxer.resetCaptions();\n        }\n      }, {\n        key: 'alignGopsWith',\n        value: function alignGopsWith(data) {\n          this.transmuxer.alignGopsWith(data.gopsToAlignWith.slice());\n        }\n      }]);\n      return MessageHandlers;\n    }();\n    /**\n     * Our web wroker interface so that things can talk to mux.js\n     * that will be running in a web worker. the scope is passed to this by\n     * webworkify.\n     *\n     * @param {Object} self the scope for the web worker\n     */\n\n\n    var TransmuxerWorker = function TransmuxerWorker(self) {\n      self.onmessage = function (event) {\n        if (event.data.action === 'init' && event.data.options) {\n          this.messageHandlers = new MessageHandlers(self, event.data.options);\n          return;\n        }\n\n        if (!this.messageHandlers) {\n          this.messageHandlers = new MessageHandlers(self);\n        }\n\n        if (event.data && event.data.action && event.data.action !== 'init') {\n          if (this.messageHandlers[event.data.action]) {\n            this.messageHandlers[event.data.action](event.data);\n          }\n        }\n      };\n    };\n\n    var transmuxerWorker = new TransmuxerWorker(self);\n    return transmuxerWorker;\n  }();\n});\n/**\n * @file - codecs.js - Handles tasks regarding codec strings such as translating them to\n * codec strings, or translating codec strings into objects that can be examined.\n */\n// Default codec parameters if none were provided for video and/or audio\n\nvar defaultCodecs = {\n  videoCodec: 'avc1',\n  videoObjectTypeIndicator: '.4d400d',\n  // AAC-LC\n  audioProfile: '2'\n};\n/**\n * Replace the old apple-style `avc1.<dd>.<dd>` codec string with the standard\n * `avc1.<hhhhhh>`\n *\n * @param {Array} codecs an array of codec strings to fix\n * @return {Array} the translated codec array\n * @private\n */\n\nvar translateLegacyCodecs = function translateLegacyCodecs(codecs) {\n  return codecs.map(function (codec) {\n    return codec.replace(/avc1\\.(\\d+)\\.(\\d+)/i, function (orig, profile, avcLevel) {\n      var profileHex = ('00' + Number(profile).toString(16)).slice(-2);\n      var avcLevelHex = ('00' + Number(avcLevel).toString(16)).slice(-2);\n      return 'avc1.' + profileHex + '00' + avcLevelHex;\n    });\n  });\n};\n/**\n * Parses a codec string to retrieve the number of codecs specified,\n * the video codec and object type indicator, and the audio profile.\n */\n\n\nvar parseCodecs = function parseCodecs() {\n  var codecs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var result = {\n    codecCount: 0\n  };\n  var parsed = void 0;\n  result.codecCount = codecs.split(',').length;\n  result.codecCount = result.codecCount || 2; // parse the video codec\n\n  parsed = /(^|\\s|,)+(avc[13])([^ ,]*)/i.exec(codecs);\n\n  if (parsed) {\n    result.videoCodec = parsed[2];\n    result.videoObjectTypeIndicator = parsed[3];\n  } // parse the last field of the audio codec\n\n\n  result.audioProfile = /(^|\\s|,)+mp4a.[0-9A-Fa-f]+\\.([0-9A-Fa-f]+)/i.exec(codecs);\n  result.audioProfile = result.audioProfile && result.audioProfile[2];\n  return result;\n};\n/**\n * Replace codecs in the codec string with the old apple-style `avc1.<dd>.<dd>` to the\n * standard `avc1.<hhhhhh>`.\n *\n * @param codecString {String} the codec string\n * @return {String} the codec string with old apple-style codecs replaced\n *\n * @private\n */\n\n\nvar mapLegacyAvcCodecs = function mapLegacyAvcCodecs(codecString) {\n  return codecString.replace(/avc1\\.(\\d+)\\.(\\d+)/i, function (match) {\n    return translateLegacyCodecs([match])[0];\n  });\n};\n/**\n * Build a media mime-type string from a set of parameters\n * @param {String} type either 'audio' or 'video'\n * @param {String} container either 'mp2t' or 'mp4'\n * @param {Array} codecs an array of codec strings to add\n * @return {String} a valid media mime-type\n */\n\n\nvar makeMimeTypeString = function makeMimeTypeString(type, container, codecs) {\n  // The codecs array is filtered so that falsey values are\n  // dropped and don't cause Array#join to create spurious\n  // commas\n  return type + '/' + container + '; codecs=\"' + codecs.filter(function (c) {\n    return !!c;\n  }).join(', ') + '\"';\n};\n/**\n * Returns the type container based on information in the playlist\n * @param {Playlist} media the current media playlist\n * @return {String} a valid media container type\n */\n\n\nvar getContainerType = function getContainerType(media) {\n  // An initialization segment means the media playlist is an iframe\n  // playlist or is using the mp4 container. We don't currently\n  // support iframe playlists, so assume this is signalling mp4\n  // fragments.\n  if (media.segments && media.segments.length && media.segments[0].map) {\n    return 'mp4';\n  }\n\n  return 'mp2t';\n};\n/**\n * Returns a set of codec strings parsed from the playlist or the default\n * codec strings if no codecs were specified in the playlist\n * @param {Playlist} media the current media playlist\n * @return {Object} an object with the video and audio codecs\n */\n\n\nvar getCodecs = function getCodecs(media) {\n  // if the codecs were explicitly specified, use them instead of the\n  // defaults\n  var mediaAttributes = media.attributes || {};\n\n  if (mediaAttributes.CODECS) {\n    return parseCodecs(mediaAttributes.CODECS);\n  }\n\n  return defaultCodecs;\n};\n\nvar audioProfileFromDefault = function audioProfileFromDefault(master, audioGroupId) {\n  if (!master.mediaGroups.AUDIO || !audioGroupId) {\n    return null;\n  }\n\n  var audioGroup = master.mediaGroups.AUDIO[audioGroupId];\n\n  if (!audioGroup) {\n    return null;\n  }\n\n  for (var name in audioGroup) {\n    var audioType = audioGroup[name];\n\n    if (audioType[\"default\"] && audioType.playlists) {\n      // codec should be the same for all playlists within the audio type\n      return parseCodecs(audioType.playlists[0].attributes.CODECS).audioProfile;\n    }\n  }\n\n  return null;\n};\n/**\n * Calculates the MIME type strings for a working configuration of\n * SourceBuffers to play variant streams in a master playlist. If\n * there is no possible working configuration, an empty array will be\n * returned.\n *\n * @param master {Object} the m3u8 object for the master playlist\n * @param media {Object} the m3u8 object for the variant playlist\n * @return {Array} the MIME type strings. If the array has more than\n * one entry, the first element should be applied to the video\n * SourceBuffer and the second to the audio SourceBuffer.\n *\n * @private\n */\n\n\nvar mimeTypesForPlaylist = function mimeTypesForPlaylist(master, media) {\n  var containerType = getContainerType(media);\n  var codecInfo = getCodecs(media);\n  var mediaAttributes = media.attributes || {}; // Default condition for a traditional HLS (no demuxed audio/video)\n\n  var isMuxed = true;\n  var isMaat = false;\n\n  if (!media) {\n    // Not enough information\n    return [];\n  }\n\n  if (master.mediaGroups.AUDIO && mediaAttributes.AUDIO) {\n    var audioGroup = master.mediaGroups.AUDIO[mediaAttributes.AUDIO]; // Handle the case where we are in a multiple-audio track scenario\n\n    if (audioGroup) {\n      isMaat = true; // Start with the everything demuxed then...\n\n      isMuxed = false; // ...check to see if any audio group tracks are muxed (ie. lacking a uri)\n\n      for (var groupId in audioGroup) {\n        // either a uri is present (if the case of HLS and an external playlist), or\n        // playlists is present (in the case of DASH where we don't have external audio\n        // playlists)\n        if (!audioGroup[groupId].uri && !audioGroup[groupId].playlists) {\n          isMuxed = true;\n          break;\n        }\n      }\n    }\n  } // HLS with multiple-audio tracks must always get an audio codec.\n  // Put another way, there is no way to have a video-only multiple-audio HLS!\n\n\n  if (isMaat && !codecInfo.audioProfile) {\n    if (!isMuxed) {\n      // It is possible for codecs to be specified on the audio media group playlist but\n      // not on the rendition playlist. This is mostly the case for DASH, where audio and\n      // video are always separate (and separately specified).\n      codecInfo.audioProfile = audioProfileFromDefault(master, mediaAttributes.AUDIO);\n    }\n\n    if (!codecInfo.audioProfile) {\n      videojs$1.log.warn('Multiple audio tracks present but no audio codec string is specified. ' + 'Attempting to use the default audio codec (mp4a.40.2)');\n      codecInfo.audioProfile = defaultCodecs.audioProfile;\n    }\n  } // Generate the final codec strings from the codec object generated above\n\n\n  var codecStrings = {};\n\n  if (codecInfo.videoCodec) {\n    codecStrings.video = '' + codecInfo.videoCodec + codecInfo.videoObjectTypeIndicator;\n  }\n\n  if (codecInfo.audioProfile) {\n    codecStrings.audio = 'mp4a.40.' + codecInfo.audioProfile;\n  } // Finally, make and return an array with proper mime-types depending on\n  // the configuration\n\n\n  var justAudio = makeMimeTypeString('audio', containerType, [codecStrings.audio]);\n  var justVideo = makeMimeTypeString('video', containerType, [codecStrings.video]);\n  var bothVideoAudio = makeMimeTypeString('video', containerType, [codecStrings.video, codecStrings.audio]);\n\n  if (isMaat) {\n    if (!isMuxed && codecStrings.video) {\n      return [justVideo, justAudio];\n    }\n\n    if (!isMuxed && !codecStrings.video) {\n      // There is no muxed content and no video codec string, so this is an audio only\n      // stream with alternate audio.\n      return [justAudio, justAudio];\n    } // There exists the possiblity that this will return a `video/container`\n    // mime-type for the first entry in the array even when there is only audio.\n    // This doesn't appear to be a problem and simplifies the code.\n\n\n    return [bothVideoAudio, justAudio];\n  } // If there is no video codec at all, always just return a single\n  // audio/<container> mime-type\n\n\n  if (!codecStrings.video) {\n    return [justAudio];\n  } // When not using separate audio media groups, audio and video is\n  // *always* muxed\n\n\n  return [bothVideoAudio];\n};\n/**\n * Parse a content type header into a type and parameters\n * object\n *\n * @param {String} type the content type header\n * @return {Object} the parsed content-type\n * @private\n */\n\n\nvar parseContentType = function parseContentType(type) {\n  var object = {\n    type: '',\n    parameters: {}\n  };\n  var parameters = type.trim().split(';'); // first parameter should always be content-type\n\n  object.type = parameters.shift().trim();\n  parameters.forEach(function (parameter) {\n    var pair = parameter.trim().split('=');\n\n    if (pair.length > 1) {\n      var name = pair[0].replace(/\"/g, '').trim();\n      var value = pair[1].replace(/\"/g, '').trim();\n      object.parameters[name] = value;\n    }\n  });\n  return object;\n};\n/**\n * Check if a codec string refers to an audio codec.\n *\n * @param {String} codec codec string to check\n * @return {Boolean} if this is an audio codec\n * @private\n */\n\n\nvar isAudioCodec = function isAudioCodec(codec) {\n  return /mp4a\\.\\d+.\\d+/i.test(codec);\n};\n/**\n * Check if a codec string refers to a video codec.\n *\n * @param {String} codec codec string to check\n * @return {Boolean} if this is a video codec\n * @private\n */\n\n\nvar isVideoCodec = function isVideoCodec(codec) {\n  return /avc1\\.[\\da-f]+/i.test(codec);\n};\n/**\n * Returns a list of gops in the buffer that have a pts value of 3 seconds or more in\n * front of current time.\n *\n * @param {Array} buffer\n *        The current buffer of gop information\n * @param {Number} currentTime\n *        The current time\n * @param {Double} mapping\n *        Offset to map display time to stream presentation time\n * @return {Array}\n *         List of gops considered safe to append over\n */\n\n\nvar gopsSafeToAlignWith = function gopsSafeToAlignWith(buffer, currentTime, mapping) {\n  if (typeof currentTime === 'undefined' || currentTime === null || !buffer.length) {\n    return [];\n  } // pts value for current time + 3 seconds to give a bit more wiggle room\n\n\n  var currentTimePts = Math.ceil((currentTime - mapping + 3) * 90000);\n  var i = void 0;\n\n  for (i = 0; i < buffer.length; i++) {\n    if (buffer[i].pts > currentTimePts) {\n      break;\n    }\n  }\n\n  return buffer.slice(i);\n};\n/**\n * Appends gop information (timing and byteLength) received by the transmuxer for the\n * gops appended in the last call to appendBuffer\n *\n * @param {Array} buffer\n *        The current buffer of gop information\n * @param {Array} gops\n *        List of new gop information\n * @param {boolean} replace\n *        If true, replace the buffer with the new gop information. If false, append the\n *        new gop information to the buffer in the right location of time.\n * @return {Array}\n *         Updated list of gop information\n */\n\n\nvar updateGopBuffer = function updateGopBuffer(buffer, gops, replace) {\n  if (!gops.length) {\n    return buffer;\n  }\n\n  if (replace) {\n    // If we are in safe append mode, then completely overwrite the gop buffer\n    // with the most recent appeneded data. This will make sure that when appending\n    // future segments, we only try to align with gops that are both ahead of current\n    // time and in the last segment appended.\n    return gops.slice();\n  }\n\n  var start = gops[0].pts;\n  var i = 0;\n\n  for (i; i < buffer.length; i++) {\n    if (buffer[i].pts >= start) {\n      break;\n    }\n  }\n\n  return buffer.slice(0, i).concat(gops);\n};\n/**\n * Removes gop information in buffer that overlaps with provided start and end\n *\n * @param {Array} buffer\n *        The current buffer of gop information\n * @param {Double} start\n *        position to start the remove at\n * @param {Double} end\n *        position to end the remove at\n * @param {Double} mapping\n *        Offset to map display time to stream presentation time\n */\n\n\nvar removeGopBuffer = function removeGopBuffer(buffer, start, end, mapping) {\n  var startPts = Math.ceil((start - mapping) * 90000);\n  var endPts = Math.ceil((end - mapping) * 90000);\n  var updatedBuffer = buffer.slice();\n  var i = buffer.length;\n\n  while (i--) {\n    if (buffer[i].pts <= endPts) {\n      break;\n    }\n  }\n\n  if (i === -1) {\n    // no removal because end of remove range is before start of buffer\n    return updatedBuffer;\n  }\n\n  var j = i + 1;\n\n  while (j--) {\n    if (buffer[j].pts <= startPts) {\n      break;\n    }\n  } // clamp remove range start to 0 index\n\n\n  j = Math.max(j, 0);\n  updatedBuffer.splice(j, i - j + 1);\n  return updatedBuffer;\n};\n\nvar buffered = function buffered(videoBuffer, audioBuffer, audioDisabled) {\n  var start = null;\n  var end = null;\n  var arity = 0;\n  var extents = [];\n  var ranges = []; // neither buffer has been created yet\n\n  if (!videoBuffer && !audioBuffer) {\n    return videojs$1.createTimeRange();\n  } // only one buffer is configured\n\n\n  if (!videoBuffer) {\n    return audioBuffer.buffered;\n  }\n\n  if (!audioBuffer) {\n    return videoBuffer.buffered;\n  } // both buffers are configured\n\n\n  if (audioDisabled) {\n    return videoBuffer.buffered;\n  } // both buffers are empty\n\n\n  if (videoBuffer.buffered.length === 0 && audioBuffer.buffered.length === 0) {\n    return videojs$1.createTimeRange();\n  } // Handle the case where we have both buffers and create an\n  // intersection of the two\n\n\n  var videoBuffered = videoBuffer.buffered;\n  var audioBuffered = audioBuffer.buffered;\n  var count = videoBuffered.length; // A) Gather up all start and end times\n\n  while (count--) {\n    extents.push({\n      time: videoBuffered.start(count),\n      type: 'start'\n    });\n    extents.push({\n      time: videoBuffered.end(count),\n      type: 'end'\n    });\n  }\n\n  count = audioBuffered.length;\n\n  while (count--) {\n    extents.push({\n      time: audioBuffered.start(count),\n      type: 'start'\n    });\n    extents.push({\n      time: audioBuffered.end(count),\n      type: 'end'\n    });\n  } // B) Sort them by time\n\n\n  extents.sort(function (a, b) {\n    return a.time - b.time;\n  }); // C) Go along one by one incrementing arity for start and decrementing\n  //    arity for ends\n\n  for (count = 0; count < extents.length; count++) {\n    if (extents[count].type === 'start') {\n      arity++; // D) If arity is ever incremented to 2 we are entering an\n      //    overlapping range\n\n      if (arity === 2) {\n        start = extents[count].time;\n      }\n    } else if (extents[count].type === 'end') {\n      arity--; // E) If arity is ever decremented to 1 we leaving an\n      //    overlapping range\n\n      if (arity === 1) {\n        end = extents[count].time;\n      }\n    } // F) Record overlapping ranges\n\n\n    if (start !== null && end !== null) {\n      ranges.push([start, end]);\n      start = null;\n      end = null;\n    }\n  }\n\n  return videojs$1.createTimeRanges(ranges);\n};\n/**\n * @file virtual-source-buffer.js\n */\n\n\nvar ONE_SECOND_IN_TS = 90000; // We create a wrapper around the SourceBuffer so that we can manage the\n// state of the `updating` property manually. We have to do this because\n// Firefox changes `updating` to false long before triggering `updateend`\n// events and that was causing strange problems in videojs-contrib-hls\n\nvar makeWrappedSourceBuffer = function makeWrappedSourceBuffer(mediaSource, mimeType) {\n  var sourceBuffer = mediaSource.addSourceBuffer(mimeType);\n  var wrapper = Object.create(null);\n  wrapper.updating = false;\n  wrapper.realBuffer_ = sourceBuffer;\n\n  var _loop = function _loop(key) {\n    if (typeof sourceBuffer[key] === 'function') {\n      wrapper[key] = function () {\n        return sourceBuffer[key].apply(sourceBuffer, arguments);\n      };\n    } else if (typeof wrapper[key] === 'undefined') {\n      Object.defineProperty(wrapper, key, {\n        get: function get$$1() {\n          return sourceBuffer[key];\n        },\n        set: function set$$1(v) {\n          return sourceBuffer[key] = v;\n        }\n      });\n    }\n  };\n\n  for (var key in sourceBuffer) {\n    _loop(key);\n  }\n\n  return wrapper;\n};\n/**\n * VirtualSourceBuffers exist so that we can transmux non native formats\n * into a native format, but keep the same api as a native source buffer.\n * It creates a transmuxer, that works in its own thread (a web worker) and\n * that transmuxer muxes the data into a native format. VirtualSourceBuffer will\n * then send all of that data to the naive sourcebuffer so that it is\n * indestinguishable from a natively supported format.\n *\n * @param {HtmlMediaSource} mediaSource the parent mediaSource\n * @param {Array} codecs array of codecs that we will be dealing with\n * @class VirtualSourceBuffer\n * @extends video.js.EventTarget\n */\n\n\nvar VirtualSourceBuffer = function (_videojs$EventTarget) {\n  inherits(VirtualSourceBuffer, _videojs$EventTarget);\n\n  function VirtualSourceBuffer(mediaSource, codecs) {\n    classCallCheck(this, VirtualSourceBuffer);\n\n    var _this = possibleConstructorReturn(this, (VirtualSourceBuffer.__proto__ || Object.getPrototypeOf(VirtualSourceBuffer)).call(this, videojs$1.EventTarget));\n\n    _this.timestampOffset_ = 0;\n    _this.pendingBuffers_ = [];\n    _this.bufferUpdating_ = false;\n    _this.mediaSource_ = mediaSource;\n    _this.codecs_ = codecs;\n    _this.audioCodec_ = null;\n    _this.videoCodec_ = null;\n    _this.audioDisabled_ = false;\n    _this.appendAudioInitSegment_ = true;\n    _this.gopBuffer_ = [];\n    _this.timeMapping_ = 0;\n    _this.safeAppend_ = videojs$1.browser.IE_VERSION >= 11;\n    var options = {\n      remux: false,\n      alignGopsAtEnd: _this.safeAppend_\n    };\n\n    _this.codecs_.forEach(function (codec) {\n      if (isAudioCodec(codec)) {\n        _this.audioCodec_ = codec;\n      } else if (isVideoCodec(codec)) {\n        _this.videoCodec_ = codec;\n      }\n    }); // append muxed segments to their respective native buffers as\n    // soon as they are available\n\n\n    _this.transmuxer_ = new TransmuxWorker();\n\n    _this.transmuxer_.postMessage({\n      action: 'init',\n      options: options\n    });\n\n    _this.transmuxer_.onmessage = function (event) {\n      if (event.data.action === 'data') {\n        return _this.data_(event);\n      }\n\n      if (event.data.action === 'done') {\n        return _this.done_(event);\n      }\n\n      if (event.data.action === 'gopInfo') {\n        return _this.appendGopInfo_(event);\n      }\n\n      if (event.data.action === 'videoSegmentTimingInfo') {\n        return _this.videoSegmentTimingInfo_(event.data.videoSegmentTimingInfo);\n      }\n    }; // this timestampOffset is a property with the side-effect of resetting\n    // baseMediaDecodeTime in the transmuxer on the setter\n\n\n    Object.defineProperty(_this, 'timestampOffset', {\n      get: function get$$1() {\n        return this.timestampOffset_;\n      },\n      set: function set$$1(val) {\n        if (typeof val === 'number' && val >= 0) {\n          this.timestampOffset_ = val;\n          this.appendAudioInitSegment_ = true; // reset gop buffer on timestampoffset as this signals a change in timeline\n\n          this.gopBuffer_.length = 0;\n          this.timeMapping_ = 0; // We have to tell the transmuxer to set the baseMediaDecodeTime to\n          // the desired timestampOffset for the next segment\n\n          this.transmuxer_.postMessage({\n            action: 'setTimestampOffset',\n            timestampOffset: val\n          });\n        }\n      }\n    }); // setting the append window affects both source buffers\n\n    Object.defineProperty(_this, 'appendWindowStart', {\n      get: function get$$1() {\n        return (this.videoBuffer_ || this.audioBuffer_).appendWindowStart;\n      },\n      set: function set$$1(start) {\n        if (this.videoBuffer_) {\n          this.videoBuffer_.appendWindowStart = start;\n        }\n\n        if (this.audioBuffer_) {\n          this.audioBuffer_.appendWindowStart = start;\n        }\n      }\n    }); // this buffer is \"updating\" if either of its native buffers are\n\n    Object.defineProperty(_this, 'updating', {\n      get: function get$$1() {\n        return !!(this.bufferUpdating_ || !this.audioDisabled_ && this.audioBuffer_ && this.audioBuffer_.updating || this.videoBuffer_ && this.videoBuffer_.updating);\n      }\n    }); // the buffered property is the intersection of the buffered\n    // ranges of the native source buffers\n\n    Object.defineProperty(_this, 'buffered', {\n      get: function get$$1() {\n        return buffered(this.videoBuffer_, this.audioBuffer_, this.audioDisabled_);\n      }\n    });\n    return _this;\n  }\n  /**\n   * When we get a data event from the transmuxer\n   * we call this function and handle the data that\n   * was sent to us\n   *\n   * @private\n   * @param {Event} event the data event from the transmuxer\n   */\n\n\n  createClass(VirtualSourceBuffer, [{\n    key: 'data_',\n    value: function data_(event) {\n      var segment = event.data.segment; // Cast ArrayBuffer to TypedArray\n\n      segment.data = new Uint8Array(segment.data, event.data.byteOffset, event.data.byteLength);\n      segment.initSegment = new Uint8Array(segment.initSegment.data, segment.initSegment.byteOffset, segment.initSegment.byteLength);\n      createTextTracksIfNecessary(this, this.mediaSource_, segment); // Add the segments to the pendingBuffers array\n\n      this.pendingBuffers_.push(segment);\n      return;\n    }\n    /**\n     * When we get a done event from the transmuxer\n     * we call this function and we process all\n     * of the pending data that we have been saving in the\n     * data_ function\n     *\n     * @private\n     * @param {Event} event the done event from the transmuxer\n     */\n\n  }, {\n    key: 'done_',\n    value: function done_(event) {\n      // Don't process and append data if the mediaSource is closed\n      if (this.mediaSource_.readyState === 'closed') {\n        this.pendingBuffers_.length = 0;\n        return;\n      } // All buffers should have been flushed from the muxer\n      // start processing anything we have received\n\n\n      this.processPendingSegments_();\n      return;\n    }\n  }, {\n    key: 'videoSegmentTimingInfo_',\n    value: function videoSegmentTimingInfo_(timingInfo) {\n      var timingInfoInSeconds = {\n        start: {\n          decode: timingInfo.start.dts / ONE_SECOND_IN_TS,\n          presentation: timingInfo.start.pts / ONE_SECOND_IN_TS\n        },\n        end: {\n          decode: timingInfo.end.dts / ONE_SECOND_IN_TS,\n          presentation: timingInfo.end.pts / ONE_SECOND_IN_TS\n        },\n        baseMediaDecodeTime: timingInfo.baseMediaDecodeTime / ONE_SECOND_IN_TS\n      };\n\n      if (timingInfo.prependedContentDuration) {\n        timingInfoInSeconds.prependedContentDuration = timingInfo.prependedContentDuration / ONE_SECOND_IN_TS;\n      }\n\n      this.trigger({\n        type: 'videoSegmentTimingInfo',\n        videoSegmentTimingInfo: timingInfoInSeconds\n      });\n    }\n    /**\n     * Create our internal native audio/video source buffers and add\n     * event handlers to them with the following conditions:\n     * 1. they do not already exist on the mediaSource\n     * 2. this VSB has a codec for them\n     *\n     * @private\n     */\n\n  }, {\n    key: 'createRealSourceBuffers_',\n    value: function createRealSourceBuffers_() {\n      var _this2 = this;\n\n      var types = ['audio', 'video'];\n      types.forEach(function (type) {\n        // Don't create a SourceBuffer of this type if we don't have a\n        // codec for it\n        if (!_this2[type + 'Codec_']) {\n          return;\n        } // Do nothing if a SourceBuffer of this type already exists\n\n\n        if (_this2[type + 'Buffer_']) {\n          return;\n        }\n\n        var buffer = null; // If the mediasource already has a SourceBuffer for the codec\n        // use that\n\n        if (_this2.mediaSource_[type + 'Buffer_']) {\n          buffer = _this2.mediaSource_[type + 'Buffer_']; // In multiple audio track cases, the audio source buffer is disabled\n          // on the main VirtualSourceBuffer by the HTMLMediaSource much earlier\n          // than createRealSourceBuffers_ is called to create the second\n          // VirtualSourceBuffer because that happens as a side-effect of\n          // videojs-contrib-hls starting the audioSegmentLoader. As a result,\n          // the audioBuffer is essentially \"ownerless\" and no one will toggle\n          // the `updating` state back to false once the `updateend` event is received\n          //\n          // Setting `updating` to false manually will work around this\n          // situation and allow work to continue\n\n          buffer.updating = false;\n        } else {\n          var codecProperty = type + 'Codec_';\n          var mimeType = type + '/mp4;codecs=\"' + _this2[codecProperty] + '\"';\n          buffer = makeWrappedSourceBuffer(_this2.mediaSource_.nativeMediaSource_, mimeType);\n          _this2.mediaSource_[type + 'Buffer_'] = buffer;\n        }\n\n        _this2[type + 'Buffer_'] = buffer; // Wire up the events to the SourceBuffer\n\n        ['update', 'updatestart', 'updateend'].forEach(function (event) {\n          buffer.addEventListener(event, function () {\n            // if audio is disabled\n            if (type === 'audio' && _this2.audioDisabled_) {\n              return;\n            }\n\n            if (event === 'updateend') {\n              _this2[type + 'Buffer_'].updating = false;\n            }\n\n            var shouldTrigger = types.every(function (t) {\n              // skip checking audio's updating status if audio\n              // is not enabled\n              if (t === 'audio' && _this2.audioDisabled_) {\n                return true;\n              } // if the other type is updating we don't trigger\n\n\n              if (type !== t && _this2[t + 'Buffer_'] && _this2[t + 'Buffer_'].updating) {\n                return false;\n              }\n\n              return true;\n            });\n\n            if (shouldTrigger) {\n              return _this2.trigger(event);\n            }\n          });\n        });\n      });\n    }\n    /**\n     * Emulate the native mediasource function, but our function will\n     * send all of the proposed segments to the transmuxer so that we\n     * can transmux them before we append them to our internal\n     * native source buffers in the correct format.\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/appendBuffer\n     * @param {Uint8Array} segment the segment to append to the buffer\n     */\n\n  }, {\n    key: 'appendBuffer',\n    value: function appendBuffer(segment) {\n      // Start the internal \"updating\" state\n      this.bufferUpdating_ = true;\n\n      if (this.audioBuffer_ && this.audioBuffer_.buffered.length) {\n        var audioBuffered = this.audioBuffer_.buffered;\n        this.transmuxer_.postMessage({\n          action: 'setAudioAppendStart',\n          appendStart: audioBuffered.end(audioBuffered.length - 1)\n        });\n      }\n\n      if (this.videoBuffer_) {\n        this.transmuxer_.postMessage({\n          action: 'alignGopsWith',\n          gopsToAlignWith: gopsSafeToAlignWith(this.gopBuffer_, this.mediaSource_.player_ ? this.mediaSource_.player_.currentTime() : null, this.timeMapping_)\n        });\n      }\n\n      this.transmuxer_.postMessage({\n        action: 'push',\n        // Send the typed-array of data as an ArrayBuffer so that\n        // it can be sent as a \"Transferable\" and avoid the costly\n        // memory copy\n        data: segment.buffer,\n        // To recreate the original typed-array, we need information\n        // about what portion of the ArrayBuffer it was a view into\n        byteOffset: segment.byteOffset,\n        byteLength: segment.byteLength\n      }, [segment.buffer]);\n      this.transmuxer_.postMessage({\n        action: 'flush'\n      });\n    }\n    /**\n     * Appends gop information (timing and byteLength) received by the transmuxer for the\n     * gops appended in the last call to appendBuffer\n     *\n     * @param {Event} event\n     *        The gopInfo event from the transmuxer\n     * @param {Array} event.data.gopInfo\n     *        List of gop info to append\n     */\n\n  }, {\n    key: 'appendGopInfo_',\n    value: function appendGopInfo_(event) {\n      this.gopBuffer_ = updateGopBuffer(this.gopBuffer_, event.data.gopInfo, this.safeAppend_);\n    }\n    /**\n     * Emulate the native mediasource function and remove parts\n     * of the buffer from any of our internal buffers that exist\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/remove\n     * @param {Double} start position to start the remove at\n     * @param {Double} end position to end the remove at\n     */\n\n  }, {\n    key: 'remove',\n    value: function remove(start, end) {\n      if (this.videoBuffer_) {\n        this.videoBuffer_.updating = true;\n        this.videoBuffer_.remove(start, end);\n        this.gopBuffer_ = removeGopBuffer(this.gopBuffer_, start, end, this.timeMapping_);\n      }\n\n      if (!this.audioDisabled_ && this.audioBuffer_) {\n        this.audioBuffer_.updating = true;\n        this.audioBuffer_.remove(start, end);\n      } // Remove Metadata Cues (id3)\n\n\n      removeCuesFromTrack(start, end, this.metadataTrack_); // Remove Any Captions\n\n      if (this.inbandTextTracks_) {\n        for (var track in this.inbandTextTracks_) {\n          removeCuesFromTrack(start, end, this.inbandTextTracks_[track]);\n        }\n      }\n    }\n    /**\n     * Process any segments that the muxer has output\n     * Concatenate segments together based on type and append them into\n     * their respective sourceBuffers\n     *\n     * @private\n     */\n\n  }, {\n    key: 'processPendingSegments_',\n    value: function processPendingSegments_() {\n      var sortedSegments = {\n        video: {\n          segments: [],\n          bytes: 0\n        },\n        audio: {\n          segments: [],\n          bytes: 0\n        },\n        captions: [],\n        metadata: []\n      }; // Sort segments into separate video/audio arrays and\n      // keep track of their total byte lengths\n\n      sortedSegments = this.pendingBuffers_.reduce(function (segmentObj, segment) {\n        var type = segment.type;\n        var data = segment.data;\n        var initSegment = segment.initSegment;\n        segmentObj[type].segments.push(data);\n        segmentObj[type].bytes += data.byteLength;\n        segmentObj[type].initSegment = initSegment; // Gather any captions into a single array\n\n        if (segment.captions) {\n          segmentObj.captions = segmentObj.captions.concat(segment.captions);\n        }\n\n        if (segment.info) {\n          segmentObj[type].info = segment.info;\n        } // Gather any metadata into a single array\n\n\n        if (segment.metadata) {\n          segmentObj.metadata = segmentObj.metadata.concat(segment.metadata);\n        }\n\n        return segmentObj;\n      }, sortedSegments); // Create the real source buffers if they don't exist by now since we\n      // finally are sure what tracks are contained in the source\n\n      if (!this.videoBuffer_ && !this.audioBuffer_) {\n        // Remove any codecs that may have been specified by default but\n        // are no longer applicable now\n        if (sortedSegments.video.bytes === 0) {\n          this.videoCodec_ = null;\n        }\n\n        if (sortedSegments.audio.bytes === 0) {\n          this.audioCodec_ = null;\n        }\n\n        this.createRealSourceBuffers_();\n      }\n\n      if (sortedSegments.audio.info) {\n        this.mediaSource_.trigger({\n          type: 'audioinfo',\n          info: sortedSegments.audio.info\n        });\n      }\n\n      if (sortedSegments.video.info) {\n        this.mediaSource_.trigger({\n          type: 'videoinfo',\n          info: sortedSegments.video.info\n        });\n      }\n\n      if (this.appendAudioInitSegment_) {\n        if (!this.audioDisabled_ && this.audioBuffer_) {\n          sortedSegments.audio.segments.unshift(sortedSegments.audio.initSegment);\n          sortedSegments.audio.bytes += sortedSegments.audio.initSegment.byteLength;\n        }\n\n        this.appendAudioInitSegment_ = false;\n      }\n\n      var triggerUpdateend = false; // Merge multiple video and audio segments into one and append\n\n      if (this.videoBuffer_ && sortedSegments.video.bytes) {\n        sortedSegments.video.segments.unshift(sortedSegments.video.initSegment);\n        sortedSegments.video.bytes += sortedSegments.video.initSegment.byteLength;\n        this.concatAndAppendSegments_(sortedSegments.video, this.videoBuffer_);\n      } else if (this.videoBuffer_ && (this.audioDisabled_ || !this.audioBuffer_)) {\n        // The transmuxer did not return any bytes of video, meaning it was all trimmed\n        // for gop alignment. Since we have a video buffer and audio is disabled, updateend\n        // will never be triggered by this source buffer, which will cause contrib-hls\n        // to be stuck forever waiting for updateend. If audio is not disabled, updateend\n        // will be triggered by the audio buffer, which will be sent upwards since the video\n        // buffer will not be in an updating state.\n        triggerUpdateend = true;\n      } // Add text-track data for all\n\n\n      addTextTrackData(this, sortedSegments.captions, sortedSegments.metadata);\n\n      if (!this.audioDisabled_ && this.audioBuffer_) {\n        this.concatAndAppendSegments_(sortedSegments.audio, this.audioBuffer_);\n      }\n\n      this.pendingBuffers_.length = 0;\n\n      if (triggerUpdateend) {\n        this.trigger('updateend');\n      } // We are no longer in the internal \"updating\" state\n\n\n      this.bufferUpdating_ = false;\n    }\n    /**\n     * Combine all segments into a single Uint8Array and then append them\n     * to the destination buffer\n     *\n     * @param {Object} segmentObj\n     * @param {SourceBuffer} destinationBuffer native source buffer to append data to\n     * @private\n     */\n\n  }, {\n    key: 'concatAndAppendSegments_',\n    value: function concatAndAppendSegments_(segmentObj, destinationBuffer) {\n      var offset = 0;\n      var tempBuffer = void 0;\n\n      if (segmentObj.bytes) {\n        tempBuffer = new Uint8Array(segmentObj.bytes); // Combine the individual segments into one large typed-array\n\n        segmentObj.segments.forEach(function (segment) {\n          tempBuffer.set(segment, offset);\n          offset += segment.byteLength;\n        });\n\n        try {\n          destinationBuffer.updating = true;\n          destinationBuffer.appendBuffer(tempBuffer);\n        } catch (error) {\n          if (this.mediaSource_.player_) {\n            this.mediaSource_.player_.error({\n              code: -3,\n              type: 'APPEND_BUFFER_ERR',\n              message: error.message,\n              originalError: error\n            });\n          }\n        }\n      }\n    }\n    /**\n     * Emulate the native mediasource function. abort any soureBuffer\n     * actions and throw out any un-appended data.\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/abort\n     */\n\n  }, {\n    key: 'abort',\n    value: function abort() {\n      if (this.videoBuffer_) {\n        this.videoBuffer_.abort();\n      }\n\n      if (!this.audioDisabled_ && this.audioBuffer_) {\n        this.audioBuffer_.abort();\n      }\n\n      if (this.transmuxer_) {\n        this.transmuxer_.postMessage({\n          action: 'reset'\n        });\n      }\n\n      this.pendingBuffers_.length = 0;\n      this.bufferUpdating_ = false;\n    }\n  }]);\n  return VirtualSourceBuffer;\n}(videojs$1.EventTarget);\n/**\n * @file html-media-source.js\n */\n\n/**\n * Our MediaSource implementation in HTML, mimics native\n * MediaSource where/if possible.\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource\n * @class HtmlMediaSource\n * @extends videojs.EventTarget\n */\n\n\nvar HtmlMediaSource = function (_videojs$EventTarget) {\n  inherits(HtmlMediaSource, _videojs$EventTarget);\n\n  function HtmlMediaSource() {\n    classCallCheck(this, HtmlMediaSource);\n\n    var _this = possibleConstructorReturn(this, (HtmlMediaSource.__proto__ || Object.getPrototypeOf(HtmlMediaSource)).call(this));\n\n    var property = void 0;\n    _this.nativeMediaSource_ = new window$1.MediaSource(); // delegate to the native MediaSource's methods by default\n\n    for (property in _this.nativeMediaSource_) {\n      if (!(property in HtmlMediaSource.prototype) && typeof _this.nativeMediaSource_[property] === 'function') {\n        _this[property] = _this.nativeMediaSource_[property].bind(_this.nativeMediaSource_);\n      }\n    } // emulate `duration` and `seekable` until seeking can be\n    // handled uniformly for live streams\n    // see https://github.com/w3c/media-source/issues/5\n\n\n    _this.duration_ = NaN;\n    Object.defineProperty(_this, 'duration', {\n      get: function get$$1() {\n        if (this.duration_ === Infinity) {\n          return this.duration_;\n        }\n\n        return this.nativeMediaSource_.duration;\n      },\n      set: function set$$1(duration) {\n        this.duration_ = duration;\n\n        if (duration !== Infinity) {\n          this.nativeMediaSource_.duration = duration;\n          return;\n        }\n      }\n    });\n    Object.defineProperty(_this, 'seekable', {\n      get: function get$$1() {\n        if (this.duration_ === Infinity) {\n          return videojs$1.createTimeRanges([[0, this.nativeMediaSource_.duration]]);\n        }\n\n        return this.nativeMediaSource_.seekable;\n      }\n    });\n    Object.defineProperty(_this, 'readyState', {\n      get: function get$$1() {\n        return this.nativeMediaSource_.readyState;\n      }\n    });\n    Object.defineProperty(_this, 'activeSourceBuffers', {\n      get: function get$$1() {\n        return this.activeSourceBuffers_;\n      }\n    }); // the list of virtual and native SourceBuffers created by this\n    // MediaSource\n\n    _this.sourceBuffers = [];\n    _this.activeSourceBuffers_ = [];\n    /**\n     * update the list of active source buffers based upon various\n     * imformation from HLS and video.js\n     *\n     * @private\n     */\n\n    _this.updateActiveSourceBuffers_ = function () {\n      // Retain the reference but empty the array\n      _this.activeSourceBuffers_.length = 0; // If there is only one source buffer, then it will always be active and audio will\n      // be disabled based on the codec of the source buffer\n\n      if (_this.sourceBuffers.length === 1) {\n        var sourceBuffer = _this.sourceBuffers[0];\n        sourceBuffer.appendAudioInitSegment_ = true;\n        sourceBuffer.audioDisabled_ = !sourceBuffer.audioCodec_;\n\n        _this.activeSourceBuffers_.push(sourceBuffer);\n\n        return;\n      } // There are 2 source buffers, a combined (possibly video only) source buffer and\n      // and an audio only source buffer.\n      // By default, the audio in the combined virtual source buffer is enabled\n      // and the audio-only source buffer (if it exists) is disabled.\n\n\n      var disableCombined = false;\n      var disableAudioOnly = true; // TODO: maybe we can store the sourcebuffers on the track objects?\n      // safari may do something like this\n\n      for (var i = 0; i < _this.player_.audioTracks().length; i++) {\n        var track = _this.player_.audioTracks()[i];\n\n        if (track.enabled && track.kind !== 'main') {\n          // The enabled track is an alternate audio track so disable the audio in\n          // the combined source buffer and enable the audio-only source buffer.\n          disableCombined = true;\n          disableAudioOnly = false;\n          break;\n        }\n      }\n\n      _this.sourceBuffers.forEach(function (sourceBuffer, index) {\n        /* eslinst-disable */\n        // TODO once codecs are required, we can switch to using the codecs to determine\n        //      what stream is the video stream, rather than relying on videoTracks\n\n        /* eslinst-enable */\n        sourceBuffer.appendAudioInitSegment_ = true;\n\n        if (sourceBuffer.videoCodec_ && sourceBuffer.audioCodec_) {\n          // combined\n          sourceBuffer.audioDisabled_ = disableCombined;\n        } else if (sourceBuffer.videoCodec_ && !sourceBuffer.audioCodec_) {\n          // If the \"combined\" source buffer is video only, then we do not want\n          // disable the audio-only source buffer (this is mostly for demuxed\n          // audio and video hls)\n          sourceBuffer.audioDisabled_ = true;\n          disableAudioOnly = false;\n        } else if (!sourceBuffer.videoCodec_ && sourceBuffer.audioCodec_) {\n          // audio only\n          // In the case of audio only with alternate audio and disableAudioOnly is true\n          // this means we want to disable the audio on the alternate audio sourcebuffer\n          // but not the main \"combined\" source buffer. The \"combined\" source buffer is\n          // always at index 0, so this ensures audio won't be disabled in both source\n          // buffers.\n          sourceBuffer.audioDisabled_ = index ? disableAudioOnly : !disableAudioOnly;\n\n          if (sourceBuffer.audioDisabled_) {\n            return;\n          }\n        }\n\n        _this.activeSourceBuffers_.push(sourceBuffer);\n      });\n    };\n\n    _this.onPlayerMediachange_ = function () {\n      _this.sourceBuffers.forEach(function (sourceBuffer) {\n        sourceBuffer.appendAudioInitSegment_ = true;\n      });\n    };\n\n    _this.onHlsReset_ = function () {\n      _this.sourceBuffers.forEach(function (sourceBuffer) {\n        if (sourceBuffer.transmuxer_) {\n          sourceBuffer.transmuxer_.postMessage({\n            action: 'resetCaptions'\n          });\n        }\n      });\n    };\n\n    _this.onHlsSegmentTimeMapping_ = function (event) {\n      _this.sourceBuffers.forEach(function (buffer) {\n        return buffer.timeMapping_ = event.mapping;\n      });\n    }; // Re-emit MediaSource events on the polyfill\n\n\n    ['sourceopen', 'sourceclose', 'sourceended'].forEach(function (eventName) {\n      this.nativeMediaSource_.addEventListener(eventName, this.trigger.bind(this));\n    }, _this); // capture the associated player when the MediaSource is\n    // successfully attached\n\n    _this.on('sourceopen', function (event) {\n      // Get the player this MediaSource is attached to\n      var video = document.querySelector('[src=\"' + _this.url_ + '\"]');\n\n      if (!video) {\n        return;\n      }\n\n      _this.player_ = videojs$1(video.parentNode);\n\n      if (!_this.player_) {\n        return;\n      } // hls-reset is fired by videojs.Hls on to the tech after the main SegmentLoader\n      // resets its state and flushes the buffer\n\n\n      _this.player_.tech_.on('hls-reset', _this.onHlsReset_); // hls-segment-time-mapping is fired by videojs.Hls on to the tech after the main\n      // SegmentLoader inspects an MTS segment and has an accurate stream to display\n      // time mapping\n\n\n      _this.player_.tech_.on('hls-segment-time-mapping', _this.onHlsSegmentTimeMapping_);\n\n      if (_this.player_.audioTracks && _this.player_.audioTracks()) {\n        _this.player_.audioTracks().on('change', _this.updateActiveSourceBuffers_);\n\n        _this.player_.audioTracks().on('addtrack', _this.updateActiveSourceBuffers_);\n\n        _this.player_.audioTracks().on('removetrack', _this.updateActiveSourceBuffers_);\n      }\n\n      _this.player_.on('mediachange', _this.onPlayerMediachange_);\n    });\n\n    _this.on('sourceended', function (event) {\n      var duration = durationOfVideo(_this.duration);\n\n      for (var i = 0; i < _this.sourceBuffers.length; i++) {\n        var sourcebuffer = _this.sourceBuffers[i];\n        var cues = sourcebuffer.metadataTrack_ && sourcebuffer.metadataTrack_.cues;\n\n        if (cues && cues.length) {\n          cues[cues.length - 1].endTime = duration;\n        }\n      }\n    }); // explicitly terminate any WebWorkers that were created\n    // by SourceHandlers\n\n\n    _this.on('sourceclose', function (event) {\n      this.sourceBuffers.forEach(function (sourceBuffer) {\n        if (sourceBuffer.transmuxer_) {\n          sourceBuffer.transmuxer_.terminate();\n        }\n      });\n      this.sourceBuffers.length = 0;\n\n      if (!this.player_) {\n        return;\n      }\n\n      if (this.player_.audioTracks && this.player_.audioTracks()) {\n        this.player_.audioTracks().off('change', this.updateActiveSourceBuffers_);\n        this.player_.audioTracks().off('addtrack', this.updateActiveSourceBuffers_);\n        this.player_.audioTracks().off('removetrack', this.updateActiveSourceBuffers_);\n      } // We can only change this if the player hasn't been disposed of yet\n      // because `off` eventually tries to use the el_ property. If it has\n      // been disposed of, then don't worry about it because there are no\n      // event handlers left to unbind anyway\n\n\n      if (this.player_.el_) {\n        this.player_.off('mediachange', this.onPlayerMediachange_);\n      }\n\n      if (this.player_.tech_ && this.player_.tech_.el_) {\n        this.player_.tech_.off('hls-reset', this.onHlsReset_);\n        this.player_.tech_.off('hls-segment-time-mapping', this.onHlsSegmentTimeMapping_);\n      }\n    });\n\n    return _this;\n  }\n  /**\n   * Add a range that that can now be seeked to.\n   *\n   * @param {Double} start where to start the addition\n   * @param {Double} end where to end the addition\n   * @private\n   */\n\n\n  createClass(HtmlMediaSource, [{\n    key: 'addSeekableRange_',\n    value: function addSeekableRange_(start, end) {\n      var error = void 0;\n\n      if (this.duration !== Infinity) {\n        error = new Error('MediaSource.addSeekableRange() can only be invoked ' + 'when the duration is Infinity');\n        error.name = 'InvalidStateError';\n        error.code = 11;\n        throw error;\n      }\n\n      if (end > this.nativeMediaSource_.duration || isNaN(this.nativeMediaSource_.duration)) {\n        this.nativeMediaSource_.duration = end;\n      }\n    }\n    /**\n     * Add a source buffer to the media source.\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/addSourceBuffer\n     * @param {String} type the content-type of the content\n     * @return {Object} the created source buffer\n     */\n\n  }, {\n    key: 'addSourceBuffer',\n    value: function addSourceBuffer(type) {\n      var buffer = void 0;\n      var parsedType = parseContentType(type); // Create a VirtualSourceBuffer to transmux MPEG-2 transport\n      // stream segments into fragmented MP4s\n\n      if (/^(video|audio)\\/mp2t$/i.test(parsedType.type)) {\n        var codecs = [];\n\n        if (parsedType.parameters && parsedType.parameters.codecs) {\n          codecs = parsedType.parameters.codecs.split(',');\n          codecs = translateLegacyCodecs(codecs);\n          codecs = codecs.filter(function (codec) {\n            return isAudioCodec(codec) || isVideoCodec(codec);\n          });\n        }\n\n        if (codecs.length === 0) {\n          codecs = ['avc1.4d400d', 'mp4a.40.2'];\n        }\n\n        buffer = new VirtualSourceBuffer(this, codecs);\n\n        if (this.sourceBuffers.length !== 0) {\n          // If another VirtualSourceBuffer already exists, then we are creating a\n          // SourceBuffer for an alternate audio track and therefore we know that\n          // the source has both an audio and video track.\n          // That means we should trigger the manual creation of the real\n          // SourceBuffers instead of waiting for the transmuxer to return data\n          this.sourceBuffers[0].createRealSourceBuffers_();\n          buffer.createRealSourceBuffers_(); // Automatically disable the audio on the first source buffer if\n          // a second source buffer is ever created\n\n          this.sourceBuffers[0].audioDisabled_ = true;\n        }\n      } else {\n        // delegate to the native implementation\n        buffer = this.nativeMediaSource_.addSourceBuffer(type);\n      }\n\n      this.sourceBuffers.push(buffer);\n      return buffer;\n    }\n  }]);\n  return HtmlMediaSource;\n}(videojs$1.EventTarget);\n/**\n * @file videojs-contrib-media-sources.js\n */\n\n\nvar urlCount = 0; // ------------\n// Media Source\n// ------------\n// store references to the media sources so they can be connected\n// to a video element (a swf object)\n// TODO: can we store this somewhere local to this module?\n\nvideojs$1.mediaSources = {};\n/**\n * Provide a method for a swf object to notify JS that a\n * media source is now open.\n *\n * @param {String} msObjectURL string referencing the MSE Object URL\n * @param {String} swfId the swf id\n */\n\nvar open = function open(msObjectURL, swfId) {\n  var mediaSource = videojs$1.mediaSources[msObjectURL];\n\n  if (mediaSource) {\n    mediaSource.trigger({\n      type: 'sourceopen',\n      swfId: swfId\n    });\n  } else {\n    throw new Error('Media Source not found (Video.js)');\n  }\n};\n/**\n * Check to see if the native MediaSource object exists and supports\n * an MP4 container with both H.264 video and AAC-LC audio.\n *\n * @return {Boolean} if  native media sources are supported\n */\n\n\nvar supportsNativeMediaSources = function supportsNativeMediaSources() {\n  return !!window$1.MediaSource && !!window$1.MediaSource.isTypeSupported && window$1.MediaSource.isTypeSupported('video/mp4;codecs=\"avc1.4d400d,mp4a.40.2\"');\n};\n/**\n * An emulation of the MediaSource API so that we can support\n * native and non-native functionality. returns an instance of\n * HtmlMediaSource.\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/MediaSource\n */\n\n\nvar MediaSource = function MediaSource() {\n  this.MediaSource = {\n    open: open,\n    supportsNativeMediaSources: supportsNativeMediaSources\n  };\n\n  if (supportsNativeMediaSources()) {\n    return new HtmlMediaSource();\n  }\n\n  throw new Error('Cannot use create a virtual MediaSource for this video');\n};\n\nMediaSource.open = open;\nMediaSource.supportsNativeMediaSources = supportsNativeMediaSources;\n/**\n * A wrapper around the native URL for our MSE object\n * implementation, this object is exposed under videojs.URL\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/URL/URL\n */\n\nvar URL$1 = {\n  /**\n   * A wrapper around the native createObjectURL for our objects.\n   * This function maps a native or emulated mediaSource to a blob\n   * url so that it can be loaded into video.js\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL\n   * @param {MediaSource} object the object to create a blob url to\n   */\n  createObjectURL: function createObjectURL(object) {\n    var objectUrlPrefix = 'blob:vjs-media-source/';\n    var url = void 0; // use the native MediaSource to generate an object URL\n\n    if (object instanceof HtmlMediaSource) {\n      url = window$1.URL.createObjectURL(object.nativeMediaSource_);\n      object.url_ = url;\n      return url;\n    } // if the object isn't an emulated MediaSource, delegate to the\n    // native implementation\n\n\n    if (!(object instanceof HtmlMediaSource)) {\n      url = window$1.URL.createObjectURL(object);\n      object.url_ = url;\n      return url;\n    } // build a URL that can be used to map back to the emulated\n    // MediaSource\n\n\n    url = objectUrlPrefix + urlCount;\n    urlCount++; // setup the mapping back to object\n\n    videojs$1.mediaSources[url] = object;\n    return url;\n  }\n};\nvideojs$1.MediaSource = MediaSource;\nvideojs$1.URL = URL$1;\nvar EventTarget$1$1 = videojs$1.EventTarget,\n    mergeOptions$2 = videojs$1.mergeOptions;\n/**\n * Returns a new master manifest that is the result of merging an updated master manifest\n * into the original version.\n *\n * @param {Object} oldMaster\n *        The old parsed mpd object\n * @param {Object} newMaster\n *        The updated parsed mpd object\n * @return {Object}\n *         A new object representing the original master manifest with the updated media\n *         playlists merged in\n */\n\nvar updateMaster$1 = function updateMaster$$1(oldMaster, newMaster) {\n  var noChanges = void 0;\n  var update = mergeOptions$2(oldMaster, {\n    // These are top level properties that can be updated\n    duration: newMaster.duration,\n    minimumUpdatePeriod: newMaster.minimumUpdatePeriod\n  }); // First update the playlists in playlist list\n\n  for (var i = 0; i < newMaster.playlists.length; i++) {\n    var playlistUpdate = updateMaster(update, newMaster.playlists[i]);\n\n    if (playlistUpdate) {\n      update = playlistUpdate;\n    } else {\n      noChanges = true;\n    }\n  } // Then update media group playlists\n\n\n  forEachMediaGroup(newMaster, function (properties, type, group, label) {\n    if (properties.playlists && properties.playlists.length) {\n      var uri = properties.playlists[0].uri;\n\n      var _playlistUpdate = updateMaster(update, properties.playlists[0]);\n\n      if (_playlistUpdate) {\n        update = _playlistUpdate; // update the playlist reference within media groups\n\n        update.mediaGroups[type][group][label].playlists[0] = update.playlists[uri];\n        noChanges = false;\n      }\n    }\n  });\n\n  if (noChanges) {\n    return null;\n  }\n\n  return update;\n};\n\nvar generateSidxKey = function generateSidxKey(sidxInfo) {\n  // should be non-inclusive\n  var sidxByteRangeEnd = sidxInfo.byterange.offset + sidxInfo.byterange.length - 1;\n  return sidxInfo.uri + '-' + sidxInfo.byterange.offset + '-' + sidxByteRangeEnd;\n}; // SIDX should be equivalent if the URI and byteranges of the SIDX match.\n// If the SIDXs have maps, the two maps should match,\n// both `a` and `b` missing SIDXs is considered matching.\n// If `a` or `b` but not both have a map, they aren't matching.\n\n\nvar equivalentSidx = function equivalentSidx(a, b) {\n  var neitherMap = Boolean(!a.map && !b.map);\n  var equivalentMap = neitherMap || Boolean(a.map && b.map && a.map.byterange.offset === b.map.byterange.offset && a.map.byterange.length === b.map.byterange.length);\n  return equivalentMap && a.uri === b.uri && a.byterange.offset === b.byterange.offset && a.byterange.length === b.byterange.length;\n}; // exported for testing\n\n\nvar compareSidxEntry = function compareSidxEntry(playlists, oldSidxMapping) {\n  var newSidxMapping = {};\n\n  for (var uri in playlists) {\n    var playlist = playlists[uri];\n    var currentSidxInfo = playlist.sidx;\n\n    if (currentSidxInfo) {\n      var key = generateSidxKey(currentSidxInfo);\n\n      if (!oldSidxMapping[key]) {\n        break;\n      }\n\n      var savedSidxInfo = oldSidxMapping[key].sidxInfo;\n\n      if (equivalentSidx(savedSidxInfo, currentSidxInfo)) {\n        newSidxMapping[key] = oldSidxMapping[key];\n      }\n    }\n  }\n\n  return newSidxMapping;\n};\n/**\n *  A function that filters out changed items as they need to be requested separately.\n *\n *  The method is exported for testing\n *\n *  @param {Object} masterXml the mpd XML\n *  @param {string} srcUrl the mpd url\n *  @param {Date} clientOffset a time difference between server and client (passed through and not used)\n *  @param {Object} oldSidxMapping the SIDX to compare against\n */\n\n\nvar filterChangedSidxMappings = function filterChangedSidxMappings(masterXml, srcUrl, clientOffset, oldSidxMapping) {\n  // Don't pass current sidx mapping\n  var master = parse(masterXml, {\n    manifestUri: srcUrl,\n    clientOffset: clientOffset\n  });\n  var videoSidx = compareSidxEntry(master.playlists, oldSidxMapping);\n  var mediaGroupSidx = videoSidx;\n  forEachMediaGroup(master, function (properties, mediaType, groupKey, labelKey) {\n    if (properties.playlists && properties.playlists.length) {\n      var playlists = properties.playlists;\n      mediaGroupSidx = mergeOptions$2(mediaGroupSidx, compareSidxEntry(playlists, oldSidxMapping));\n    }\n  });\n  return mediaGroupSidx;\n}; // exported for testing\n\n\nvar requestSidx_ = function requestSidx_(sidxRange, playlist, xhr, options, finishProcessingFn) {\n  var sidxInfo = {\n    // resolve the segment URL relative to the playlist\n    uri: resolveManifestRedirect(options.handleManifestRedirects, sidxRange.resolvedUri),\n    // resolvedUri: sidxRange.resolvedUri,\n    byterange: sidxRange.byterange,\n    // the segment's playlist\n    playlist: playlist\n  };\n  var sidxRequestOptions = videojs$1.mergeOptions(sidxInfo, {\n    responseType: 'arraybuffer',\n    headers: segmentXhrHeaders(sidxInfo)\n  });\n  return xhr(sidxRequestOptions, finishProcessingFn);\n};\n\nvar DashPlaylistLoader = function (_EventTarget) {\n  inherits(DashPlaylistLoader, _EventTarget); // DashPlaylistLoader must accept either a src url or a playlist because subsequent\n  // playlist loader setups from media groups will expect to be able to pass a playlist\n  // (since there aren't external URLs to media playlists with DASH)\n\n  function DashPlaylistLoader(srcUrlOrPlaylist, hls) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var masterPlaylistLoader = arguments[3];\n    classCallCheck(this, DashPlaylistLoader);\n\n    var _this = possibleConstructorReturn(this, (DashPlaylistLoader.__proto__ || Object.getPrototypeOf(DashPlaylistLoader)).call(this));\n\n    var _options$withCredenti = options.withCredentials,\n        withCredentials = _options$withCredenti === undefined ? false : _options$withCredenti,\n        _options$handleManife = options.handleManifestRedirects,\n        handleManifestRedirects = _options$handleManife === undefined ? false : _options$handleManife;\n    _this.hls_ = hls;\n    _this.withCredentials = withCredentials;\n    _this.handleManifestRedirects = handleManifestRedirects;\n\n    if (!srcUrlOrPlaylist) {\n      throw new Error('A non-empty playlist URL or playlist is required');\n    } // event naming?\n\n\n    _this.on('minimumUpdatePeriod', function () {\n      _this.refreshXml_();\n    }); // live playlist staleness timeout\n\n\n    _this.on('mediaupdatetimeout', function () {\n      _this.refreshMedia_(_this.media().uri);\n    });\n\n    _this.state = 'HAVE_NOTHING';\n    _this.loadedPlaylists_ = {}; // initialize the loader state\n    // The masterPlaylistLoader will be created with a string\n\n    if (typeof srcUrlOrPlaylist === 'string') {\n      _this.srcUrl = srcUrlOrPlaylist; // TODO: reset sidxMapping between period changes\n      // once multi-period is refactored\n\n      _this.sidxMapping_ = {};\n      return possibleConstructorReturn(_this);\n    }\n\n    _this.setupChildLoader(masterPlaylistLoader, srcUrlOrPlaylist);\n\n    return _this;\n  }\n\n  createClass(DashPlaylistLoader, [{\n    key: 'setupChildLoader',\n    value: function setupChildLoader(masterPlaylistLoader, playlist) {\n      this.masterPlaylistLoader_ = masterPlaylistLoader;\n      this.childPlaylist_ = playlist;\n    }\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      this.stopRequest();\n      this.loadedPlaylists_ = {};\n      window$1.clearTimeout(this.minimumUpdatePeriodTimeout_);\n      window$1.clearTimeout(this.mediaRequest_);\n      window$1.clearTimeout(this.mediaUpdateTimeout);\n    }\n  }, {\n    key: 'hasPendingRequest',\n    value: function hasPendingRequest() {\n      return this.request || this.mediaRequest_;\n    }\n  }, {\n    key: 'stopRequest',\n    value: function stopRequest() {\n      if (this.request) {\n        var oldRequest = this.request;\n        this.request = null;\n        oldRequest.onreadystatechange = null;\n        oldRequest.abort();\n      }\n    }\n  }, {\n    key: 'sidxRequestFinished_',\n    value: function sidxRequestFinished_(playlist, master, startingState, doneFn) {\n      var _this2 = this;\n\n      return function (err, request) {\n        // disposed\n        if (!_this2.request) {\n          return;\n        } // pending request is cleared\n\n\n        _this2.request = null;\n\n        if (err) {\n          _this2.error = {\n            status: request.status,\n            message: 'DASH playlist request error at URL: ' + playlist.uri,\n            response: request.response,\n            // MEDIA_ERR_NETWORK\n            code: 2\n          };\n\n          if (startingState) {\n            _this2.state = startingState;\n          }\n\n          _this2.trigger('error');\n\n          return doneFn(master, null);\n        }\n\n        var bytes = new Uint8Array(request.response);\n        var sidx = mp4Inspector.parseSidx(bytes.subarray(8));\n        return doneFn(master, sidx);\n      };\n    }\n  }, {\n    key: 'media',\n    value: function media(playlist) {\n      var _this3 = this; // getter\n\n\n      if (!playlist) {\n        return this.media_;\n      } // setter\n\n\n      if (this.state === 'HAVE_NOTHING') {\n        throw new Error('Cannot switch media playlist from ' + this.state);\n      }\n\n      var startingState = this.state; // find the playlist object if the target playlist has been specified by URI\n\n      if (typeof playlist === 'string') {\n        if (!this.master.playlists[playlist]) {\n          throw new Error('Unknown playlist URI: ' + playlist);\n        }\n\n        playlist = this.master.playlists[playlist];\n      }\n\n      var mediaChange = !this.media_ || playlist.uri !== this.media_.uri; // switch to previously loaded playlists immediately\n\n      if (mediaChange && this.loadedPlaylists_[playlist.uri] && this.loadedPlaylists_[playlist.uri].endList) {\n        this.state = 'HAVE_METADATA';\n        this.media_ = playlist; // trigger media change if the active media has been updated\n\n        if (mediaChange) {\n          this.trigger('mediachanging');\n          this.trigger('mediachange');\n        }\n\n        return;\n      } // switching to the active playlist is a no-op\n\n\n      if (!mediaChange) {\n        return;\n      } // switching from an already loaded playlist\n\n\n      if (this.media_) {\n        this.trigger('mediachanging');\n      }\n\n      if (!playlist.sidx) {\n        // Continue asynchronously if there is no sidx\n        // wait one tick to allow haveMaster to run first on a child loader\n        this.mediaRequest_ = window$1.setTimeout(this.haveMetadata.bind(this, {\n          startingState: startingState,\n          playlist: playlist\n        }), 0); // exit early and don't do sidx work\n\n        return;\n      } // we have sidx mappings\n\n\n      var oldMaster = void 0;\n      var sidxMapping = void 0; // sidxMapping is used when parsing the masterXml, so store\n      // it on the masterPlaylistLoader\n\n      if (this.masterPlaylistLoader_) {\n        oldMaster = this.masterPlaylistLoader_.master;\n        sidxMapping = this.masterPlaylistLoader_.sidxMapping_;\n      } else {\n        oldMaster = this.master;\n        sidxMapping = this.sidxMapping_;\n      }\n\n      var sidxKey = generateSidxKey(playlist.sidx);\n      sidxMapping[sidxKey] = {\n        sidxInfo: playlist.sidx\n      };\n      this.request = requestSidx_(playlist.sidx, playlist, this.hls_.xhr, {\n        handleManifestRedirects: this.handleManifestRedirects\n      }, this.sidxRequestFinished_(playlist, oldMaster, startingState, function (newMaster, sidx) {\n        if (!newMaster || !sidx) {\n          throw new Error('failed to request sidx');\n        } // update loader's sidxMapping with parsed sidx box\n\n\n        sidxMapping[sidxKey].sidx = sidx; // everything is ready just continue to haveMetadata\n\n        _this3.haveMetadata({\n          startingState: startingState,\n          playlist: newMaster.playlists[playlist.uri]\n        });\n      }));\n    }\n  }, {\n    key: 'haveMetadata',\n    value: function haveMetadata(_ref) {\n      var startingState = _ref.startingState,\n          playlist = _ref.playlist;\n      this.state = 'HAVE_METADATA';\n      this.loadedPlaylists_[playlist.uri] = playlist;\n      this.mediaRequest_ = null; // This will trigger loadedplaylist\n\n      this.refreshMedia_(playlist.uri); // fire loadedmetadata the first time a media playlist is loaded\n      // to resolve setup of media groups\n\n      if (startingState === 'HAVE_MASTER') {\n        this.trigger('loadedmetadata');\n      } else {\n        // trigger media change if the active media has been updated\n        this.trigger('mediachange');\n      }\n    }\n  }, {\n    key: 'pause',\n    value: function pause() {\n      this.stopRequest();\n      window$1.clearTimeout(this.mediaUpdateTimeout);\n      window$1.clearTimeout(this.minimumUpdatePeriodTimeout_);\n\n      if (this.state === 'HAVE_NOTHING') {\n        // If we pause the loader before any data has been retrieved, its as if we never\n        // started, so reset to an unstarted state.\n        this.started = false;\n      }\n    }\n  }, {\n    key: 'load',\n    value: function load(isFinalRendition) {\n      var _this4 = this;\n\n      window$1.clearTimeout(this.mediaUpdateTimeout);\n      window$1.clearTimeout(this.minimumUpdatePeriodTimeout_);\n      var media = this.media();\n\n      if (isFinalRendition) {\n        var delay = media ? media.targetDuration / 2 * 1000 : 5 * 1000;\n        this.mediaUpdateTimeout = window$1.setTimeout(function () {\n          return _this4.load();\n        }, delay);\n        return;\n      } // because the playlists are internal to the manifest, load should either load the\n      // main manifest, or do nothing but trigger an event\n\n\n      if (!this.started) {\n        this.start();\n        return;\n      }\n\n      this.trigger('loadedplaylist');\n    }\n    /**\n     * Parses the master xml string and updates playlist uri references\n     *\n     * @return {Object}\n     *         The parsed mpd manifest object\n     */\n\n  }, {\n    key: 'parseMasterXml',\n    value: function parseMasterXml() {\n      var master = parse(this.masterXml_, {\n        manifestUri: this.srcUrl,\n        clientOffset: this.clientOffset_,\n        sidxMapping: this.sidxMapping_\n      });\n      master.uri = this.srcUrl; // Set up phony URIs for the playlists since we won't have external URIs for DASH\n      // but reference playlists by their URI throughout the project\n      // TODO: Should we create the dummy uris in mpd-parser as well (leaning towards yes).\n\n      for (var i = 0; i < master.playlists.length; i++) {\n        var phonyUri = 'placeholder-uri-' + i;\n        master.playlists[i].uri = phonyUri; // set up by URI references\n\n        master.playlists[phonyUri] = master.playlists[i];\n      } // set up phony URIs for the media group playlists since we won't have external\n      // URIs for DASH but reference playlists by their URI throughout the project\n\n\n      forEachMediaGroup(master, function (properties, mediaType, groupKey, labelKey) {\n        if (properties.playlists && properties.playlists.length) {\n          var _phonyUri = 'placeholder-uri-' + mediaType + '-' + groupKey + '-' + labelKey;\n\n          properties.playlists[0].uri = _phonyUri; // setup URI references\n\n          master.playlists[_phonyUri] = properties.playlists[0];\n        }\n      });\n      setupMediaPlaylists(master);\n      resolveMediaGroupUris(master);\n      return master;\n    }\n  }, {\n    key: 'start',\n    value: function start() {\n      var _this5 = this;\n\n      this.started = true; // We don't need to request the master manifest again\n      // Call this asynchronously to match the xhr request behavior below\n\n      if (this.masterPlaylistLoader_) {\n        this.mediaRequest_ = window$1.setTimeout(this.haveMaster_.bind(this), 0);\n        return;\n      } // request the specified URL\n\n\n      this.request = this.hls_.xhr({\n        uri: this.srcUrl,\n        withCredentials: this.withCredentials\n      }, function (error, req) {\n        // disposed\n        if (!_this5.request) {\n          return;\n        } // clear the loader's request reference\n\n\n        _this5.request = null;\n\n        if (error) {\n          _this5.error = {\n            status: req.status,\n            message: 'DASH playlist request error at URL: ' + _this5.srcUrl,\n            responseText: req.responseText,\n            // MEDIA_ERR_NETWORK\n            code: 2\n          };\n\n          if (_this5.state === 'HAVE_NOTHING') {\n            _this5.started = false;\n          }\n\n          return _this5.trigger('error');\n        }\n\n        _this5.masterXml_ = req.responseText;\n\n        if (req.responseHeaders && req.responseHeaders.date) {\n          _this5.masterLoaded_ = Date.parse(req.responseHeaders.date);\n        } else {\n          _this5.masterLoaded_ = Date.now();\n        }\n\n        _this5.srcUrl = resolveManifestRedirect(_this5.handleManifestRedirects, _this5.srcUrl, req);\n\n        _this5.syncClientServerClock_(_this5.onClientServerClockSync_.bind(_this5));\n      });\n    }\n    /**\n     * Parses the master xml for UTCTiming node to sync the client clock to the server\n     * clock. If the UTCTiming node requires a HEAD or GET request, that request is made.\n     *\n     * @param {Function} done\n     *        Function to call when clock sync has completed\n     */\n\n  }, {\n    key: 'syncClientServerClock_',\n    value: function syncClientServerClock_(done) {\n      var _this6 = this;\n\n      var utcTiming = parseUTCTiming(this.masterXml_); // No UTCTiming element found in the mpd. Use Date header from mpd request as the\n      // server clock\n\n      if (utcTiming === null) {\n        this.clientOffset_ = this.masterLoaded_ - Date.now();\n        return done();\n      }\n\n      if (utcTiming.method === 'DIRECT') {\n        this.clientOffset_ = utcTiming.value - Date.now();\n        return done();\n      }\n\n      this.request = this.hls_.xhr({\n        uri: resolveUrl(this.srcUrl, utcTiming.value),\n        method: utcTiming.method,\n        withCredentials: this.withCredentials\n      }, function (error, req) {\n        // disposed\n        if (!_this6.request) {\n          return;\n        }\n\n        if (error) {\n          // sync request failed, fall back to using date header from mpd\n          // TODO: log warning\n          _this6.clientOffset_ = _this6.masterLoaded_ - Date.now();\n          return done();\n        }\n\n        var serverTime = void 0;\n\n        if (utcTiming.method === 'HEAD') {\n          if (!req.responseHeaders || !req.responseHeaders.date) {\n            // expected date header not preset, fall back to using date header from mpd\n            // TODO: log warning\n            serverTime = _this6.masterLoaded_;\n          } else {\n            serverTime = Date.parse(req.responseHeaders.date);\n          }\n        } else {\n          serverTime = Date.parse(req.responseText);\n        }\n\n        _this6.clientOffset_ = serverTime - Date.now();\n        done();\n      });\n    }\n  }, {\n    key: 'haveMaster_',\n    value: function haveMaster_() {\n      this.state = 'HAVE_MASTER'; // clear media request\n\n      this.mediaRequest_ = null;\n\n      if (!this.masterPlaylistLoader_) {\n        this.master = this.parseMasterXml(); // We have the master playlist at this point, so\n        // trigger this to allow MasterPlaylistController\n        // to make an initial playlist selection\n\n        this.trigger('loadedplaylist');\n      } else if (!this.media_) {\n        // no media playlist was specifically selected so select\n        // the one the child playlist loader was created with\n        this.media(this.childPlaylist_);\n      }\n    }\n    /**\n     * Handler for after client/server clock synchronization has happened. Sets up\n     * xml refresh timer if specificed by the manifest.\n     */\n\n  }, {\n    key: 'onClientServerClockSync_',\n    value: function onClientServerClockSync_() {\n      var _this7 = this;\n\n      this.haveMaster_();\n\n      if (!this.hasPendingRequest() && !this.media_) {\n        this.media(this.master.playlists[0]);\n      } // TODO: minimumUpdatePeriod can have a value of 0. Currently the manifest will not\n      // be refreshed when this is the case. The inter-op guide says that when the\n      // minimumUpdatePeriod is 0, the manifest should outline all currently available\n      // segments, but future segments may require an update. I think a good solution\n      // would be to update the manifest at the same rate that the media playlists\n      // are \"refreshed\", i.e. every targetDuration.\n\n\n      if (this.master && this.master.minimumUpdatePeriod) {\n        this.minimumUpdatePeriodTimeout_ = window$1.setTimeout(function () {\n          _this7.trigger('minimumUpdatePeriod');\n        }, this.master.minimumUpdatePeriod);\n      }\n    }\n    /**\n     * Sends request to refresh the master xml and updates the parsed master manifest\n     * TODO: Does the client offset need to be recalculated when the xml is refreshed?\n     */\n\n  }, {\n    key: 'refreshXml_',\n    value: function refreshXml_() {\n      var _this8 = this; // The srcUrl here *may* need to pass through handleManifestsRedirects when\n      // sidx is implemented\n\n\n      this.request = this.hls_.xhr({\n        uri: this.srcUrl,\n        withCredentials: this.withCredentials\n      }, function (error, req) {\n        // disposed\n        if (!_this8.request) {\n          return;\n        } // clear the loader's request reference\n\n\n        _this8.request = null;\n\n        if (error) {\n          _this8.error = {\n            status: req.status,\n            message: 'DASH playlist request error at URL: ' + _this8.srcUrl,\n            responseText: req.responseText,\n            // MEDIA_ERR_NETWORK\n            code: 2\n          };\n\n          if (_this8.state === 'HAVE_NOTHING') {\n            _this8.started = false;\n          }\n\n          return _this8.trigger('error');\n        }\n\n        _this8.masterXml_ = req.responseText; // This will filter out updated sidx info from the mapping\n\n        _this8.sidxMapping_ = filterChangedSidxMappings(_this8.masterXml_, _this8.srcUrl, _this8.clientOffset_, _this8.sidxMapping_);\n\n        var master = _this8.parseMasterXml();\n\n        var updatedMaster = updateMaster$1(_this8.master, master);\n\n        if (updatedMaster) {\n          var sidxKey = generateSidxKey(_this8.media().sidx); // the sidx was updated, so the previous mapping was removed\n\n          if (!_this8.sidxMapping_[sidxKey]) {\n            var playlist = _this8.media();\n\n            _this8.request = requestSidx_(playlist.sidx, playlist, _this8.hls_.xhr, {\n              handleManifestRedirects: _this8.handleManifestRedirects\n            }, _this8.sidxRequestFinished_(playlist, master, _this8.state, function (newMaster, sidx) {\n              if (!newMaster || !sidx) {\n                throw new Error('failed to request sidx on minimumUpdatePeriod');\n              } // update loader's sidxMapping with parsed sidx box\n\n\n              _this8.sidxMapping_[sidxKey].sidx = sidx;\n              _this8.minimumUpdatePeriodTimeout_ = window$1.setTimeout(function () {\n                _this8.trigger('minimumUpdatePeriod');\n              }, _this8.master.minimumUpdatePeriod); // TODO: do we need to reload the current playlist?\n\n              _this8.refreshMedia_(_this8.media().uri);\n\n              return;\n            }));\n          } else {\n            _this8.master = updatedMaster;\n          }\n        }\n\n        _this8.minimumUpdatePeriodTimeout_ = window$1.setTimeout(function () {\n          _this8.trigger('minimumUpdatePeriod');\n        }, _this8.master.minimumUpdatePeriod);\n      });\n    }\n    /**\n     * Refreshes the media playlist by re-parsing the master xml and updating playlist\n     * references. If this is an alternate loader, the updated parsed manifest is retrieved\n     * from the master loader.\n     */\n\n  }, {\n    key: 'refreshMedia_',\n    value: function refreshMedia_(mediaUri) {\n      var _this9 = this;\n\n      if (!mediaUri) {\n        throw new Error('refreshMedia_ must take a media uri');\n      }\n\n      var oldMaster = void 0;\n      var newMaster = void 0;\n\n      if (this.masterPlaylistLoader_) {\n        oldMaster = this.masterPlaylistLoader_.master;\n        newMaster = this.masterPlaylistLoader_.parseMasterXml();\n      } else {\n        oldMaster = this.master;\n        newMaster = this.parseMasterXml();\n      }\n\n      var updatedMaster = updateMaster$1(oldMaster, newMaster);\n\n      if (updatedMaster) {\n        if (this.masterPlaylistLoader_) {\n          this.masterPlaylistLoader_.master = updatedMaster;\n        } else {\n          this.master = updatedMaster;\n        }\n\n        this.media_ = updatedMaster.playlists[mediaUri];\n      } else {\n        this.media_ = newMaster.playlists[mediaUri];\n        this.trigger('playlistunchanged');\n      }\n\n      if (!this.media().endList) {\n        this.mediaUpdateTimeout = window$1.setTimeout(function () {\n          _this9.trigger('mediaupdatetimeout');\n        }, refreshDelay(this.media(), !!updatedMaster));\n      }\n\n      this.trigger('loadedplaylist');\n    }\n  }]);\n  return DashPlaylistLoader;\n}(EventTarget$1$1);\n\nvar logger = function logger(source) {\n  if (videojs$1.log.debug) {\n    return videojs$1.log.debug.bind(videojs$1, 'VHS:', source + ' >');\n  }\n\n  return function () {};\n};\n\nfunction noop() {}\n/**\n * @file source-updater.js\n */\n\n/**\n * A queue of callbacks to be serialized and applied when a\n * MediaSource and its associated SourceBuffers are not in the\n * updating state. It is used by the segment loader to update the\n * underlying SourceBuffers when new data is loaded, for instance.\n *\n * @class SourceUpdater\n * @param {MediaSource} mediaSource the MediaSource to create the\n * SourceBuffer from\n * @param {String} mimeType the desired MIME type of the underlying\n * SourceBuffer\n * @param {Object} sourceBufferEmitter an event emitter that fires when a source buffer is\n * added to the media source\n */\n\n\nvar SourceUpdater = function () {\n  function SourceUpdater(mediaSource, mimeType, type, sourceBufferEmitter) {\n    classCallCheck(this, SourceUpdater);\n    this.callbacks_ = [];\n    this.pendingCallback_ = null;\n    this.timestampOffset_ = 0;\n    this.mediaSource = mediaSource;\n    this.processedAppend_ = false;\n    this.type_ = type;\n    this.mimeType_ = mimeType;\n    this.logger_ = logger('SourceUpdater[' + type + '][' + mimeType + ']');\n\n    if (mediaSource.readyState === 'closed') {\n      mediaSource.addEventListener('sourceopen', this.createSourceBuffer_.bind(this, mimeType, sourceBufferEmitter));\n    } else {\n      this.createSourceBuffer_(mimeType, sourceBufferEmitter);\n    }\n  }\n\n  createClass(SourceUpdater, [{\n    key: 'createSourceBuffer_',\n    value: function createSourceBuffer_(mimeType, sourceBufferEmitter) {\n      var _this = this;\n\n      this.sourceBuffer_ = this.mediaSource.addSourceBuffer(mimeType);\n      this.logger_('created SourceBuffer');\n\n      if (sourceBufferEmitter) {\n        sourceBufferEmitter.trigger('sourcebufferadded');\n\n        if (this.mediaSource.sourceBuffers.length < 2) {\n          // There's another source buffer we must wait for before we can start updating\n          // our own (or else we can get into a bad state, i.e., appending video/audio data\n          // before the other video/audio source buffer is available and leading to a video\n          // or audio only buffer).\n          sourceBufferEmitter.on('sourcebufferadded', function () {\n            _this.start_();\n          });\n          return;\n        }\n      }\n\n      this.start_();\n    }\n  }, {\n    key: 'start_',\n    value: function start_() {\n      var _this2 = this;\n\n      this.started_ = true; // run completion handlers and process callbacks as updateend\n      // events fire\n\n      this.onUpdateendCallback_ = function () {\n        var pendingCallback = _this2.pendingCallback_;\n        _this2.pendingCallback_ = null;\n        _this2.sourceBuffer_.removing = false;\n\n        _this2.logger_('buffered [' + printableRange(_this2.buffered()) + ']');\n\n        if (pendingCallback) {\n          pendingCallback();\n        }\n\n        _this2.runCallback_();\n      };\n\n      this.sourceBuffer_.addEventListener('updateend', this.onUpdateendCallback_);\n      this.runCallback_();\n    }\n    /**\n     * Aborts the current segment and resets the segment parser.\n     *\n     * @param {Function} done function to call when done\n     * @see http://w3c.github.io/media-source/#widl-SourceBuffer-abort-void\n     */\n\n  }, {\n    key: 'abort',\n    value: function abort(done) {\n      var _this3 = this;\n\n      if (this.processedAppend_) {\n        this.queueCallback_(function () {\n          _this3.sourceBuffer_.abort();\n        }, done);\n      }\n    }\n    /**\n     * Queue an update to append an ArrayBuffer.\n     *\n     * @param {ArrayBuffer} bytes\n     * @param {Function} done the function to call when done\n     * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-appendBuffer-void-ArrayBuffer-data\n     */\n\n  }, {\n    key: 'appendBuffer',\n    value: function appendBuffer(config, done) {\n      var _this4 = this;\n\n      this.processedAppend_ = true;\n      this.queueCallback_(function () {\n        if (config.videoSegmentTimingInfoCallback) {\n          _this4.sourceBuffer_.addEventListener('videoSegmentTimingInfo', config.videoSegmentTimingInfoCallback);\n        }\n\n        _this4.sourceBuffer_.appendBuffer(config.bytes);\n      }, function () {\n        if (config.videoSegmentTimingInfoCallback) {\n          _this4.sourceBuffer_.removeEventListener('videoSegmentTimingInfo', config.videoSegmentTimingInfoCallback);\n        }\n\n        done();\n      });\n    }\n    /**\n     * Indicates what TimeRanges are buffered in the managed SourceBuffer.\n     *\n     * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-buffered\n     */\n\n  }, {\n    key: 'buffered',\n    value: function buffered() {\n      if (!this.sourceBuffer_) {\n        return videojs$1.createTimeRanges();\n      }\n\n      return this.sourceBuffer_.buffered;\n    }\n    /**\n     * Queue an update to remove a time range from the buffer.\n     *\n     * @param {Number} start where to start the removal\n     * @param {Number} end where to end the removal\n     * @param {Function} [done=noop] optional callback to be executed when the remove\n     * operation is complete\n     * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-remove-void-double-start-unrestricted-double-end\n     */\n\n  }, {\n    key: 'remove',\n    value: function remove(start, end) {\n      var _this5 = this;\n\n      var done = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : noop;\n\n      if (this.processedAppend_) {\n        this.queueCallback_(function () {\n          _this5.logger_('remove [' + start + ' => ' + end + ']');\n\n          _this5.sourceBuffer_.removing = true;\n\n          _this5.sourceBuffer_.remove(start, end);\n        }, done);\n      }\n    }\n    /**\n     * Whether the underlying sourceBuffer is updating or not\n     *\n     * @return {Boolean} the updating status of the SourceBuffer\n     */\n\n  }, {\n    key: 'updating',\n    value: function updating() {\n      // we are updating if the sourcebuffer is updating or\n      return !this.sourceBuffer_ || this.sourceBuffer_.updating || // if we have a pending callback that is not our internal noop\n      !!this.pendingCallback_ && this.pendingCallback_ !== noop;\n    }\n    /**\n     * Set/get the timestampoffset on the SourceBuffer\n     *\n     * @return {Number} the timestamp offset\n     */\n\n  }, {\n    key: 'timestampOffset',\n    value: function timestampOffset(offset) {\n      var _this6 = this;\n\n      if (typeof offset !== 'undefined') {\n        this.queueCallback_(function () {\n          _this6.sourceBuffer_.timestampOffset = offset;\n\n          _this6.runCallback_();\n        });\n        this.timestampOffset_ = offset;\n      }\n\n      return this.timestampOffset_;\n    }\n    /**\n     * Queue a callback to run\n     */\n\n  }, {\n    key: 'queueCallback_',\n    value: function queueCallback_(callback, done) {\n      this.callbacks_.push([callback.bind(this), done]);\n      this.runCallback_();\n    }\n    /**\n     * Run a queued callback\n     */\n\n  }, {\n    key: 'runCallback_',\n    value: function runCallback_() {\n      var callbacks = void 0;\n\n      if (!this.updating() && this.callbacks_.length && this.started_) {\n        callbacks = this.callbacks_.shift();\n        this.pendingCallback_ = callbacks[1];\n        callbacks[0]();\n      }\n    }\n    /**\n     * dispose of the source updater and the underlying sourceBuffer\n     */\n\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      var _this7 = this;\n\n      var disposeFn = function disposeFn() {\n        if (_this7.sourceBuffer_ && _this7.mediaSource.readyState === 'open') {\n          _this7.sourceBuffer_.abort();\n        }\n\n        _this7.sourceBuffer_.removeEventListener('updateend', disposeFn);\n      };\n\n      this.sourceBuffer_.removeEventListener('updateend', this.onUpdateendCallback_);\n\n      if (this.sourceBuffer_.removing) {\n        this.sourceBuffer_.addEventListener('updateend', disposeFn);\n      } else {\n        disposeFn();\n      }\n    }\n  }]);\n  return SourceUpdater;\n}();\n\nvar Config = {\n  GOAL_BUFFER_LENGTH: 30,\n  MAX_GOAL_BUFFER_LENGTH: 60,\n  GOAL_BUFFER_LENGTH_RATE: 1,\n  // 0.5 MB/s\n  INITIAL_BANDWIDTH: 4194304,\n  // A fudge factor to apply to advertised playlist bitrates to account for\n  // temporary flucations in client bandwidth\n  BANDWIDTH_VARIANCE: 1.2,\n  // How much of the buffer must be filled before we consider upswitching\n  BUFFER_LOW_WATER_LINE: 0,\n  MAX_BUFFER_LOW_WATER_LINE: 30,\n  BUFFER_LOW_WATER_LINE_RATE: 1\n};\nvar REQUEST_ERRORS = {\n  FAILURE: 2,\n  TIMEOUT: -101,\n  ABORTED: -102\n};\n/**\n * Abort all requests\n *\n * @param {Object} activeXhrs - an object that tracks all XHR requests\n */\n\nvar abortAll = function abortAll(activeXhrs) {\n  activeXhrs.forEach(function (xhr) {\n    xhr.abort();\n  });\n};\n/**\n * Gather important bandwidth stats once a request has completed\n *\n * @param {Object} request - the XHR request from which to gather stats\n */\n\n\nvar getRequestStats = function getRequestStats(request) {\n  return {\n    bandwidth: request.bandwidth,\n    bytesReceived: request.bytesReceived || 0,\n    roundTripTime: request.roundTripTime || 0\n  };\n};\n/**\n * If possible gather bandwidth stats as a request is in\n * progress\n *\n * @param {Event} progressEvent - an event object from an XHR's progress event\n */\n\n\nvar getProgressStats = function getProgressStats(progressEvent) {\n  var request = progressEvent.target;\n  var roundTripTime = Date.now() - request.requestTime;\n  var stats = {\n    bandwidth: Infinity,\n    bytesReceived: 0,\n    roundTripTime: roundTripTime || 0\n  };\n  stats.bytesReceived = progressEvent.loaded; // This can result in Infinity if stats.roundTripTime is 0 but that is ok\n  // because we should only use bandwidth stats on progress to determine when\n  // abort a request early due to insufficient bandwidth\n\n  stats.bandwidth = Math.floor(stats.bytesReceived / stats.roundTripTime * 8 * 1000);\n  return stats;\n};\n/**\n * Handle all error conditions in one place and return an object\n * with all the information\n *\n * @param {Error|null} error - if non-null signals an error occured with the XHR\n * @param {Object} request -  the XHR request that possibly generated the error\n */\n\n\nvar handleErrors = function handleErrors(error, request) {\n  if (request.timedout) {\n    return {\n      status: request.status,\n      message: 'HLS request timed-out at URL: ' + request.uri,\n      code: REQUEST_ERRORS.TIMEOUT,\n      xhr: request\n    };\n  }\n\n  if (request.aborted) {\n    return {\n      status: request.status,\n      message: 'HLS request aborted at URL: ' + request.uri,\n      code: REQUEST_ERRORS.ABORTED,\n      xhr: request\n    };\n  }\n\n  if (error) {\n    return {\n      status: request.status,\n      message: 'HLS request errored at URL: ' + request.uri,\n      code: REQUEST_ERRORS.FAILURE,\n      xhr: request\n    };\n  }\n\n  return null;\n};\n/**\n * Handle responses for key data and convert the key data to the correct format\n * for the decryption step later\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} finishProcessingFn - a callback to execute to continue processing\n *                                        this request\n */\n\n\nvar handleKeyResponse = function handleKeyResponse(segment, finishProcessingFn) {\n  return function (error, request) {\n    var response = request.response;\n    var errorObj = handleErrors(error, request);\n\n    if (errorObj) {\n      return finishProcessingFn(errorObj, segment);\n    }\n\n    if (response.byteLength !== 16) {\n      return finishProcessingFn({\n        status: request.status,\n        message: 'Invalid HLS key at URL: ' + request.uri,\n        code: REQUEST_ERRORS.FAILURE,\n        xhr: request\n      }, segment);\n    }\n\n    var view = new DataView(response);\n    segment.key.bytes = new Uint32Array([view.getUint32(0), view.getUint32(4), view.getUint32(8), view.getUint32(12)]);\n    return finishProcessingFn(null, segment);\n  };\n};\n/**\n * Handle init-segment responses\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} finishProcessingFn - a callback to execute to continue processing\n *                                        this request\n */\n\n\nvar handleInitSegmentResponse = function handleInitSegmentResponse(segment, captionParser, finishProcessingFn) {\n  return function (error, request) {\n    var response = request.response;\n    var errorObj = handleErrors(error, request);\n\n    if (errorObj) {\n      return finishProcessingFn(errorObj, segment);\n    } // stop processing if received empty content\n\n\n    if (response.byteLength === 0) {\n      return finishProcessingFn({\n        status: request.status,\n        message: 'Empty HLS segment content at URL: ' + request.uri,\n        code: REQUEST_ERRORS.FAILURE,\n        xhr: request\n      }, segment);\n    }\n\n    segment.map.bytes = new Uint8Array(request.response); // Initialize CaptionParser if it hasn't been yet\n\n    if (captionParser && !captionParser.isInitialized()) {\n      captionParser.init();\n    }\n\n    segment.map.timescales = mp4probe.timescale(segment.map.bytes);\n    segment.map.videoTrackIds = mp4probe.videoTrackIds(segment.map.bytes);\n    return finishProcessingFn(null, segment);\n  };\n};\n/**\n * Response handler for segment-requests being sure to set the correct\n * property depending on whether the segment is encryped or not\n * Also records and keeps track of stats that are used for ABR purposes\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} finishProcessingFn - a callback to execute to continue processing\n *                                        this request\n */\n\n\nvar handleSegmentResponse = function handleSegmentResponse(segment, captionParser, finishProcessingFn) {\n  return function (error, request) {\n    var response = request.response;\n    var errorObj = handleErrors(error, request);\n    var parsed = void 0;\n\n    if (errorObj) {\n      return finishProcessingFn(errorObj, segment);\n    } // stop processing if received empty content\n\n\n    if (response.byteLength === 0) {\n      return finishProcessingFn({\n        status: request.status,\n        message: 'Empty HLS segment content at URL: ' + request.uri,\n        code: REQUEST_ERRORS.FAILURE,\n        xhr: request\n      }, segment);\n    }\n\n    segment.stats = getRequestStats(request);\n\n    if (segment.key) {\n      segment.encryptedBytes = new Uint8Array(request.response);\n    } else {\n      segment.bytes = new Uint8Array(request.response);\n    } // This is likely an FMP4 and has the init segment.\n    // Run through the CaptionParser in case there are captions.\n\n\n    if (captionParser && segment.map && segment.map.bytes) {\n      // Initialize CaptionParser if it hasn't been yet\n      if (!captionParser.isInitialized()) {\n        captionParser.init();\n      }\n\n      parsed = captionParser.parse(segment.bytes, segment.map.videoTrackIds, segment.map.timescales);\n\n      if (parsed && parsed.captions) {\n        segment.captionStreams = parsed.captionStreams;\n        segment.fmp4Captions = parsed.captions;\n      }\n    }\n\n    return finishProcessingFn(null, segment);\n  };\n};\n/**\n * Decrypt the segment via the decryption web worker\n *\n * @param {WebWorker} decrypter - a WebWorker interface to AES-128 decryption routines\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} doneFn - a callback that is executed after decryption has completed\n */\n\n\nvar decryptSegment = function decryptSegment(decrypter, segment, doneFn) {\n  var decryptionHandler = function decryptionHandler(event) {\n    if (event.data.source === segment.requestId) {\n      decrypter.removeEventListener('message', decryptionHandler);\n      var decrypted = event.data.decrypted;\n      segment.bytes = new Uint8Array(decrypted.bytes, decrypted.byteOffset, decrypted.byteLength);\n      return doneFn(null, segment);\n    }\n  };\n\n  decrypter.addEventListener('message', decryptionHandler);\n  var keyBytes = void 0;\n\n  if (segment.key.bytes.slice) {\n    keyBytes = segment.key.bytes.slice();\n  } else {\n    keyBytes = new Uint32Array(Array.prototype.slice.call(segment.key.bytes));\n  } // this is an encrypted segment\n  // incrementally decrypt the segment\n\n\n  decrypter.postMessage(createTransferableMessage({\n    source: segment.requestId,\n    encrypted: segment.encryptedBytes,\n    key: keyBytes,\n    iv: segment.key.iv\n  }), [segment.encryptedBytes.buffer, keyBytes.buffer]);\n};\n/**\n * This function waits for all XHRs to finish (with either success or failure)\n * before continueing processing via it's callback. The function gathers errors\n * from each request into a single errors array so that the error status for\n * each request can be examined later.\n *\n * @param {Object} activeXhrs - an object that tracks all XHR requests\n * @param {WebWorker} decrypter - a WebWorker interface to AES-128 decryption routines\n * @param {Function} doneFn - a callback that is executed after all resources have been\n *                            downloaded and any decryption completed\n */\n\n\nvar waitForCompletion = function waitForCompletion(activeXhrs, decrypter, doneFn) {\n  var count = 0;\n  var didError = false;\n  return function (error, segment) {\n    if (didError) {\n      return;\n    }\n\n    if (error) {\n      didError = true; // If there are errors, we have to abort any outstanding requests\n\n      abortAll(activeXhrs); // Even though the requests above are aborted, and in theory we could wait until we\n      // handle the aborted events from those requests, there are some cases where we may\n      // never get an aborted event. For instance, if the network connection is lost and\n      // there were two requests, the first may have triggered an error immediately, while\n      // the second request remains unsent. In that case, the aborted algorithm will not\n      // trigger an abort: see https://xhr.spec.whatwg.org/#the-abort()-method\n      //\n      // We also can't rely on the ready state of the XHR, since the request that\n      // triggered the connection error may also show as a ready state of 0 (unsent).\n      // Therefore, we have to finish this group of requests immediately after the first\n      // seen error.\n\n      return doneFn(error, segment);\n    }\n\n    count += 1;\n\n    if (count === activeXhrs.length) {\n      // Keep track of when *all* of the requests have completed\n      segment.endOfAllRequests = Date.now();\n\n      if (segment.encryptedBytes) {\n        return decryptSegment(decrypter, segment, doneFn);\n      } // Otherwise, everything is ready just continue\n\n\n      return doneFn(null, segment);\n    }\n  };\n};\n/**\n * Simple progress event callback handler that gathers some stats before\n * executing a provided callback with the `segment` object\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} progressFn - a callback that is executed each time a progress event\n *                                is received\n * @param {Event} event - the progress event object from XMLHttpRequest\n */\n\n\nvar handleProgress = function handleProgress(segment, progressFn) {\n  return function (event) {\n    segment.stats = videojs$1.mergeOptions(segment.stats, getProgressStats(event)); // record the time that we receive the first byte of data\n\n    if (!segment.stats.firstBytesReceivedAt && segment.stats.bytesReceived) {\n      segment.stats.firstBytesReceivedAt = Date.now();\n    }\n\n    return progressFn(event, segment);\n  };\n};\n/**\n * Load all resources and does any processing necessary for a media-segment\n *\n * Features:\n *   decrypts the media-segment if it has a key uri and an iv\n *   aborts *all* requests if *any* one request fails\n *\n * The segment object, at minimum, has the following format:\n * {\n *   resolvedUri: String,\n *   [byterange]: {\n *     offset: Number,\n *     length: Number\n *   },\n *   [key]: {\n *     resolvedUri: String\n *     [byterange]: {\n *       offset: Number,\n *       length: Number\n *     },\n *     iv: {\n *       bytes: Uint32Array\n *     }\n *   },\n *   [map]: {\n *     resolvedUri: String,\n *     [byterange]: {\n *       offset: Number,\n *       length: Number\n *     },\n *     [bytes]: Uint8Array\n *   }\n * }\n * ...where [name] denotes optional properties\n *\n * @param {Function} xhr - an instance of the xhr wrapper in xhr.js\n * @param {Object} xhrOptions - the base options to provide to all xhr requests\n * @param {WebWorker} decryptionWorker - a WebWorker interface to AES-128\n *                                       decryption routines\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} progressFn - a callback that receives progress events from the main\n *                                segment's xhr request\n * @param {Function} doneFn - a callback that is executed only once all requests have\n *                            succeeded or failed\n * @returns {Function} a function that, when invoked, immediately aborts all\n *                     outstanding requests\n */\n\n\nvar mediaSegmentRequest = function mediaSegmentRequest(xhr, xhrOptions, decryptionWorker, captionParser, segment, progressFn, doneFn) {\n  var activeXhrs = [];\n  var finishProcessingFn = waitForCompletion(activeXhrs, decryptionWorker, doneFn); // optionally, request the decryption key\n\n  if (segment.key && !segment.key.bytes) {\n    var keyRequestOptions = videojs$1.mergeOptions(xhrOptions, {\n      uri: segment.key.resolvedUri,\n      responseType: 'arraybuffer'\n    });\n    var keyRequestCallback = handleKeyResponse(segment, finishProcessingFn);\n    var keyXhr = xhr(keyRequestOptions, keyRequestCallback);\n    activeXhrs.push(keyXhr);\n  } // optionally, request the associated media init segment\n\n\n  if (segment.map && !segment.map.bytes) {\n    var initSegmentOptions = videojs$1.mergeOptions(xhrOptions, {\n      uri: segment.map.resolvedUri,\n      responseType: 'arraybuffer',\n      headers: segmentXhrHeaders(segment.map)\n    });\n    var initSegmentRequestCallback = handleInitSegmentResponse(segment, captionParser, finishProcessingFn);\n    var initSegmentXhr = xhr(initSegmentOptions, initSegmentRequestCallback);\n    activeXhrs.push(initSegmentXhr);\n  }\n\n  var segmentRequestOptions = videojs$1.mergeOptions(xhrOptions, {\n    uri: segment.resolvedUri,\n    responseType: 'arraybuffer',\n    headers: segmentXhrHeaders(segment)\n  });\n  var segmentRequestCallback = handleSegmentResponse(segment, captionParser, finishProcessingFn);\n  var segmentXhr = xhr(segmentRequestOptions, segmentRequestCallback);\n  segmentXhr.addEventListener('progress', handleProgress(segment, progressFn));\n  activeXhrs.push(segmentXhr);\n  return function () {\n    return abortAll(activeXhrs);\n  };\n}; // Utilities\n\n/**\n * Returns the CSS value for the specified property on an element\n * using `getComputedStyle`. Firefox has a long-standing issue where\n * getComputedStyle() may return null when running in an iframe with\n * `display: none`.\n *\n * @see https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n * @param {HTMLElement} el the htmlelement to work on\n * @param {string} the proprety to get the style for\n */\n\n\nvar safeGetComputedStyle = function safeGetComputedStyle(el, property) {\n  var result = void 0;\n\n  if (!el) {\n    return '';\n  }\n\n  result = window$1.getComputedStyle(el);\n\n  if (!result) {\n    return '';\n  }\n\n  return result[property];\n};\n/**\n * Resuable stable sort function\n *\n * @param {Playlists} array\n * @param {Function} sortFn Different comparators\n * @function stableSort\n */\n\n\nvar stableSort = function stableSort(array, sortFn) {\n  var newArray = array.slice();\n  array.sort(function (left, right) {\n    var cmp = sortFn(left, right);\n\n    if (cmp === 0) {\n      return newArray.indexOf(left) - newArray.indexOf(right);\n    }\n\n    return cmp;\n  });\n};\n/**\n * A comparator function to sort two playlist object by bandwidth.\n *\n * @param {Object} left a media playlist object\n * @param {Object} right a media playlist object\n * @return {Number} Greater than zero if the bandwidth attribute of\n * left is greater than the corresponding attribute of right. Less\n * than zero if the bandwidth of right is greater than left and\n * exactly zero if the two are equal.\n */\n\n\nvar comparePlaylistBandwidth = function comparePlaylistBandwidth(left, right) {\n  var leftBandwidth = void 0;\n  var rightBandwidth = void 0;\n\n  if (left.attributes.BANDWIDTH) {\n    leftBandwidth = left.attributes.BANDWIDTH;\n  }\n\n  leftBandwidth = leftBandwidth || window$1.Number.MAX_VALUE;\n\n  if (right.attributes.BANDWIDTH) {\n    rightBandwidth = right.attributes.BANDWIDTH;\n  }\n\n  rightBandwidth = rightBandwidth || window$1.Number.MAX_VALUE;\n  return leftBandwidth - rightBandwidth;\n};\n/**\n * A comparator function to sort two playlist object by resolution (width).\n * @param {Object} left a media playlist object\n * @param {Object} right a media playlist object\n * @return {Number} Greater than zero if the resolution.width attribute of\n * left is greater than the corresponding attribute of right. Less\n * than zero if the resolution.width of right is greater than left and\n * exactly zero if the two are equal.\n */\n\n\nvar comparePlaylistResolution = function comparePlaylistResolution(left, right) {\n  var leftWidth = void 0;\n  var rightWidth = void 0;\n\n  if (left.attributes.RESOLUTION && left.attributes.RESOLUTION.width) {\n    leftWidth = left.attributes.RESOLUTION.width;\n  }\n\n  leftWidth = leftWidth || window$1.Number.MAX_VALUE;\n\n  if (right.attributes.RESOLUTION && right.attributes.RESOLUTION.width) {\n    rightWidth = right.attributes.RESOLUTION.width;\n  }\n\n  rightWidth = rightWidth || window$1.Number.MAX_VALUE; // NOTE - Fallback to bandwidth sort as appropriate in cases where multiple renditions\n  // have the same media dimensions/ resolution\n\n  if (leftWidth === rightWidth && left.attributes.BANDWIDTH && right.attributes.BANDWIDTH) {\n    return left.attributes.BANDWIDTH - right.attributes.BANDWIDTH;\n  }\n\n  return leftWidth - rightWidth;\n};\n/**\n * Chooses the appropriate media playlist based on bandwidth and player size\n *\n * @param {Object} master\n *        Object representation of the master manifest\n * @param {Number} playerBandwidth\n *        Current calculated bandwidth of the player\n * @param {Number} playerWidth\n *        Current width of the player element\n * @param {Number} playerHeight\n *        Current height of the player element\n * @param {Boolean} limitRenditionByPlayerDimensions\n *        True if the player width and height should be used during the selection, false otherwise\n * @return {Playlist} the highest bitrate playlist less than the\n * currently detected bandwidth, accounting for some amount of\n * bandwidth variance\n */\n\n\nvar simpleSelector = function simpleSelector(master, playerBandwidth, playerWidth, playerHeight, limitRenditionByPlayerDimensions) {\n  // convert the playlists to an intermediary representation to make comparisons easier\n  var sortedPlaylistReps = master.playlists.map(function (playlist) {\n    var width = void 0;\n    var height = void 0;\n    var bandwidth = void 0;\n    width = playlist.attributes.RESOLUTION && playlist.attributes.RESOLUTION.width;\n    height = playlist.attributes.RESOLUTION && playlist.attributes.RESOLUTION.height;\n    bandwidth = playlist.attributes.BANDWIDTH;\n    bandwidth = bandwidth || window$1.Number.MAX_VALUE;\n    return {\n      bandwidth: bandwidth,\n      width: width,\n      height: height,\n      playlist: playlist\n    };\n  });\n  stableSort(sortedPlaylistReps, function (left, right) {\n    return left.bandwidth - right.bandwidth;\n  }); // filter out any playlists that have been excluded due to\n  // incompatible configurations\n\n  sortedPlaylistReps = sortedPlaylistReps.filter(function (rep) {\n    return !Playlist.isIncompatible(rep.playlist);\n  }); // filter out any playlists that have been disabled manually through the representations\n  // api or blacklisted temporarily due to playback errors.\n\n  var enabledPlaylistReps = sortedPlaylistReps.filter(function (rep) {\n    return Playlist.isEnabled(rep.playlist);\n  });\n\n  if (!enabledPlaylistReps.length) {\n    // if there are no enabled playlists, then they have all been blacklisted or disabled\n    // by the user through the representations api. In this case, ignore blacklisting and\n    // fallback to what the user wants by using playlists the user has not disabled.\n    enabledPlaylistReps = sortedPlaylistReps.filter(function (rep) {\n      return !Playlist.isDisabled(rep.playlist);\n    });\n  } // filter out any variant that has greater effective bitrate\n  // than the current estimated bandwidth\n\n\n  var bandwidthPlaylistReps = enabledPlaylistReps.filter(function (rep) {\n    return rep.bandwidth * Config.BANDWIDTH_VARIANCE < playerBandwidth;\n  });\n  var highestRemainingBandwidthRep = bandwidthPlaylistReps[bandwidthPlaylistReps.length - 1]; // get all of the renditions with the same (highest) bandwidth\n  // and then taking the very first element\n\n  var bandwidthBestRep = bandwidthPlaylistReps.filter(function (rep) {\n    return rep.bandwidth === highestRemainingBandwidthRep.bandwidth;\n  })[0]; // if we're not going to limit renditions by player size, make an early decision.\n\n  if (limitRenditionByPlayerDimensions === false) {\n    var _chosenRep = bandwidthBestRep || enabledPlaylistReps[0] || sortedPlaylistReps[0];\n\n    return _chosenRep ? _chosenRep.playlist : null;\n  } // filter out playlists without resolution information\n\n\n  var haveResolution = bandwidthPlaylistReps.filter(function (rep) {\n    return rep.width && rep.height;\n  }); // sort variants by resolution\n\n  stableSort(haveResolution, function (left, right) {\n    return left.width - right.width;\n  }); // if we have the exact resolution as the player use it\n\n  var resolutionBestRepList = haveResolution.filter(function (rep) {\n    return rep.width === playerWidth && rep.height === playerHeight;\n  });\n  highestRemainingBandwidthRep = resolutionBestRepList[resolutionBestRepList.length - 1]; // ensure that we pick the highest bandwidth variant that have exact resolution\n\n  var resolutionBestRep = resolutionBestRepList.filter(function (rep) {\n    return rep.bandwidth === highestRemainingBandwidthRep.bandwidth;\n  })[0];\n  var resolutionPlusOneList = void 0;\n  var resolutionPlusOneSmallest = void 0;\n  var resolutionPlusOneRep = void 0; // find the smallest variant that is larger than the player\n  // if there is no match of exact resolution\n\n  if (!resolutionBestRep) {\n    resolutionPlusOneList = haveResolution.filter(function (rep) {\n      return rep.width > playerWidth || rep.height > playerHeight;\n    }); // find all the variants have the same smallest resolution\n\n    resolutionPlusOneSmallest = resolutionPlusOneList.filter(function (rep) {\n      return rep.width === resolutionPlusOneList[0].width && rep.height === resolutionPlusOneList[0].height;\n    }); // ensure that we also pick the highest bandwidth variant that\n    // is just-larger-than the video player\n\n    highestRemainingBandwidthRep = resolutionPlusOneSmallest[resolutionPlusOneSmallest.length - 1];\n    resolutionPlusOneRep = resolutionPlusOneSmallest.filter(function (rep) {\n      return rep.bandwidth === highestRemainingBandwidthRep.bandwidth;\n    })[0];\n  } // fallback chain of variants\n\n\n  var chosenRep = resolutionPlusOneRep || resolutionBestRep || bandwidthBestRep || enabledPlaylistReps[0] || sortedPlaylistReps[0];\n  return chosenRep ? chosenRep.playlist : null;\n}; // Playlist Selectors\n\n/**\n * Chooses the appropriate media playlist based on the most recent\n * bandwidth estimate and the player size.\n *\n * Expects to be called within the context of an instance of HlsHandler\n *\n * @return {Playlist} the highest bitrate playlist less than the\n * currently detected bandwidth, accounting for some amount of\n * bandwidth variance\n */\n\n\nvar lastBandwidthSelector = function lastBandwidthSelector() {\n  return simpleSelector(this.playlists.master, this.systemBandwidth, parseInt(safeGetComputedStyle(this.tech_.el(), 'width'), 10), parseInt(safeGetComputedStyle(this.tech_.el(), 'height'), 10), this.limitRenditionByPlayerDimensions);\n};\n/**\n * Chooses the appropriate media playlist based on the potential to rebuffer\n *\n * @param {Object} settings\n *        Object of information required to use this selector\n * @param {Object} settings.master\n *        Object representation of the master manifest\n * @param {Number} settings.currentTime\n *        The current time of the player\n * @param {Number} settings.bandwidth\n *        Current measured bandwidth\n * @param {Number} settings.duration\n *        Duration of the media\n * @param {Number} settings.segmentDuration\n *        Segment duration to be used in round trip time calculations\n * @param {Number} settings.timeUntilRebuffer\n *        Time left in seconds until the player has to rebuffer\n * @param {Number} settings.currentTimeline\n *        The current timeline segments are being loaded from\n * @param {SyncController} settings.syncController\n *        SyncController for determining if we have a sync point for a given playlist\n * @return {Object|null}\n *         {Object} return.playlist\n *         The highest bandwidth playlist with the least amount of rebuffering\n *         {Number} return.rebufferingImpact\n *         The amount of time in seconds switching to this playlist will rebuffer. A\n *         negative value means that switching will cause zero rebuffering.\n */\n\n\nvar minRebufferMaxBandwidthSelector = function minRebufferMaxBandwidthSelector(settings) {\n  var master = settings.master,\n      currentTime = settings.currentTime,\n      bandwidth = settings.bandwidth,\n      duration$$1 = settings.duration,\n      segmentDuration = settings.segmentDuration,\n      timeUntilRebuffer = settings.timeUntilRebuffer,\n      currentTimeline = settings.currentTimeline,\n      syncController = settings.syncController; // filter out any playlists that have been excluded due to\n  // incompatible configurations\n\n  var compatiblePlaylists = master.playlists.filter(function (playlist) {\n    return !Playlist.isIncompatible(playlist);\n  }); // filter out any playlists that have been disabled manually through the representations\n  // api or blacklisted temporarily due to playback errors.\n\n  var enabledPlaylists = compatiblePlaylists.filter(Playlist.isEnabled);\n\n  if (!enabledPlaylists.length) {\n    // if there are no enabled playlists, then they have all been blacklisted or disabled\n    // by the user through the representations api. In this case, ignore blacklisting and\n    // fallback to what the user wants by using playlists the user has not disabled.\n    enabledPlaylists = compatiblePlaylists.filter(function (playlist) {\n      return !Playlist.isDisabled(playlist);\n    });\n  }\n\n  var bandwidthPlaylists = enabledPlaylists.filter(Playlist.hasAttribute.bind(null, 'BANDWIDTH'));\n  var rebufferingEstimates = bandwidthPlaylists.map(function (playlist) {\n    var syncPoint = syncController.getSyncPoint(playlist, duration$$1, currentTimeline, currentTime); // If there is no sync point for this playlist, switching to it will require a\n    // sync request first. This will double the request time\n\n    var numRequests = syncPoint ? 1 : 2;\n    var requestTimeEstimate = Playlist.estimateSegmentRequestTime(segmentDuration, bandwidth, playlist);\n    var rebufferingImpact = requestTimeEstimate * numRequests - timeUntilRebuffer;\n    return {\n      playlist: playlist,\n      rebufferingImpact: rebufferingImpact\n    };\n  });\n  var noRebufferingPlaylists = rebufferingEstimates.filter(function (estimate) {\n    return estimate.rebufferingImpact <= 0;\n  }); // Sort by bandwidth DESC\n\n  stableSort(noRebufferingPlaylists, function (a, b) {\n    return comparePlaylistBandwidth(b.playlist, a.playlist);\n  });\n\n  if (noRebufferingPlaylists.length) {\n    return noRebufferingPlaylists[0];\n  }\n\n  stableSort(rebufferingEstimates, function (a, b) {\n    return a.rebufferingImpact - b.rebufferingImpact;\n  });\n  return rebufferingEstimates[0] || null;\n};\n/**\n * Chooses the appropriate media playlist, which in this case is the lowest bitrate\n * one with video.  If no renditions with video exist, return the lowest audio rendition.\n *\n * Expects to be called within the context of an instance of HlsHandler\n *\n * @return {Object|null}\n *         {Object} return.playlist\n *         The lowest bitrate playlist that contains a video codec.  If no such rendition\n *         exists pick the lowest audio rendition.\n */\n\n\nvar lowestBitrateCompatibleVariantSelector = function lowestBitrateCompatibleVariantSelector() {\n  // filter out any playlists that have been excluded due to\n  // incompatible configurations or playback errors\n  var playlists = this.playlists.master.playlists.filter(Playlist.isEnabled); // Sort ascending by bitrate\n\n  stableSort(playlists, function (a, b) {\n    return comparePlaylistBandwidth(a, b);\n  }); // Parse and assume that playlists with no video codec have no video\n  // (this is not necessarily true, although it is generally true).\n  //\n  // If an entire manifest has no valid videos everything will get filtered\n  // out.\n\n  var playlistsWithVideo = playlists.filter(function (playlist) {\n    return parseCodecs(playlist.attributes.CODECS).videoCodec;\n  });\n  return playlistsWithVideo[0] || null;\n};\n/**\n * Create captions text tracks on video.js if they do not exist\n *\n * @param {Object} inbandTextTracks a reference to current inbandTextTracks\n * @param {Object} tech the video.js tech\n * @param {Object} captionStreams the caption streams to create\n * @private\n */\n\n\nvar createCaptionsTrackIfNotExists = function createCaptionsTrackIfNotExists(inbandTextTracks, tech, captionStreams) {\n  for (var trackId in captionStreams) {\n    if (!inbandTextTracks[trackId]) {\n      tech.trigger({\n        type: 'usage',\n        name: 'hls-608'\n      });\n      var track = tech.textTracks().getTrackById(trackId);\n\n      if (track) {\n        // Resuse an existing track with a CC# id because this was\n        // very likely created by videojs-contrib-hls from information\n        // in the m3u8 for us to use\n        inbandTextTracks[trackId] = track;\n      } else {\n        // Otherwise, create a track with the default `CC#` label and\n        // without a language\n        inbandTextTracks[trackId] = tech.addRemoteTextTrack({\n          kind: 'captions',\n          id: trackId,\n          label: trackId\n        }, false).track;\n      }\n    }\n  }\n};\n\nvar addCaptionData = function addCaptionData(_ref) {\n  var inbandTextTracks = _ref.inbandTextTracks,\n      captionArray = _ref.captionArray,\n      timestampOffset = _ref.timestampOffset;\n\n  if (!captionArray) {\n    return;\n  }\n\n  var Cue = window.WebKitDataCue || window.VTTCue;\n  captionArray.forEach(function (caption) {\n    var track = caption.stream;\n    var startTime = caption.startTime;\n    var endTime = caption.endTime;\n\n    if (!inbandTextTracks[track]) {\n      return;\n    }\n\n    startTime += timestampOffset;\n    endTime += timestampOffset;\n    inbandTextTracks[track].addCue(new Cue(startTime, endTime, caption.text));\n  });\n};\n/**\n * @file segment-loader.js\n */\n// in ms\n\n\nvar CHECK_BUFFER_DELAY = 500;\n/**\n * Determines if we should call endOfStream on the media source based\n * on the state of the buffer or if appened segment was the final\n * segment in the playlist.\n *\n * @param {Object} playlist a media playlist object\n * @param {Object} mediaSource the MediaSource object\n * @param {Number} segmentIndex the index of segment we last appended\n * @returns {Boolean} do we need to call endOfStream on the MediaSource\n */\n\nvar detectEndOfStream = function detectEndOfStream(playlist, mediaSource, segmentIndex) {\n  if (!playlist || !mediaSource) {\n    return false;\n  }\n\n  var segments = playlist.segments; // determine a few boolean values to help make the branch below easier\n  // to read\n\n  var appendedLastSegment = segmentIndex === segments.length; // if we've buffered to the end of the video, we need to call endOfStream\n  // so that MediaSources can trigger the `ended` event when it runs out of\n  // buffered data instead of waiting for me\n\n  return playlist.endList && mediaSource.readyState === 'open' && appendedLastSegment;\n};\n\nvar finite = function finite(num) {\n  return typeof num === 'number' && isFinite(num);\n};\n\nvar illegalMediaSwitch = function illegalMediaSwitch(loaderType, startingMedia, newSegmentMedia) {\n  // Although these checks should most likely cover non 'main' types, for now it narrows\n  // the scope of our checks.\n  if (loaderType !== 'main' || !startingMedia || !newSegmentMedia) {\n    return null;\n  }\n\n  if (!newSegmentMedia.containsAudio && !newSegmentMedia.containsVideo) {\n    return 'Neither audio nor video found in segment.';\n  }\n\n  if (startingMedia.containsVideo && !newSegmentMedia.containsVideo) {\n    return 'Only audio found in segment when we expected video.' + ' We can\\'t switch to audio only from a stream that had video.' + ' To get rid of this message, please add codec information to the manifest.';\n  }\n\n  if (!startingMedia.containsVideo && newSegmentMedia.containsVideo) {\n    return 'Video found in segment when we expected only audio.' + ' We can\\'t switch to a stream with video from an audio only stream.' + ' To get rid of this message, please add codec information to the manifest.';\n  }\n\n  return null;\n};\n/**\n * Calculates a time value that is safe to remove from the back buffer without interupting\n * playback.\n *\n * @param {TimeRange} seekable\n *        The current seekable range\n * @param {Number} currentTime\n *        The current time of the player\n * @param {Number} targetDuration\n *        The target duration of the current playlist\n * @return {Number}\n *         Time that is safe to remove from the back buffer without interupting playback\n */\n\n\nvar safeBackBufferTrimTime = function safeBackBufferTrimTime(seekable$$1, currentTime, targetDuration) {\n  var removeToTime = void 0;\n\n  if (seekable$$1.length && seekable$$1.start(0) > 0 && seekable$$1.start(0) < currentTime) {\n    // If we have a seekable range use that as the limit for what can be removed safely\n    removeToTime = seekable$$1.start(0);\n  } else {\n    // otherwise remove anything older than 30 seconds before the current play head\n    removeToTime = currentTime - 30;\n  } // Don't allow removing from the buffer within target duration of current time\n  // to avoid the possibility of removing the GOP currently being played which could\n  // cause playback stalls.\n\n\n  return Math.min(removeToTime, currentTime - targetDuration);\n};\n\nvar segmentInfoString = function segmentInfoString(segmentInfo) {\n  var _segmentInfo$segment = segmentInfo.segment,\n      start = _segmentInfo$segment.start,\n      end = _segmentInfo$segment.end,\n      _segmentInfo$playlist = segmentInfo.playlist,\n      seq = _segmentInfo$playlist.mediaSequence,\n      id = _segmentInfo$playlist.id,\n      _segmentInfo$playlist2 = _segmentInfo$playlist.segments,\n      segments = _segmentInfo$playlist2 === undefined ? [] : _segmentInfo$playlist2,\n      index = segmentInfo.mediaIndex,\n      timeline = segmentInfo.timeline;\n  return ['appending [' + index + '] of [' + seq + ', ' + (seq + segments.length) + '] from playlist [' + id + ']', '[' + start + ' => ' + end + '] in timeline [' + timeline + ']'].join(' ');\n};\n/**\n * An object that manages segment loading and appending.\n *\n * @class SegmentLoader\n * @param {Object} options required and optional options\n * @extends videojs.EventTarget\n */\n\n\nvar SegmentLoader = function (_videojs$EventTarget) {\n  inherits(SegmentLoader, _videojs$EventTarget);\n\n  function SegmentLoader(settings) {\n    classCallCheck(this, SegmentLoader); // check pre-conditions\n\n    var _this = possibleConstructorReturn(this, (SegmentLoader.__proto__ || Object.getPrototypeOf(SegmentLoader)).call(this));\n\n    if (!settings) {\n      throw new TypeError('Initialization settings are required');\n    }\n\n    if (typeof settings.currentTime !== 'function') {\n      throw new TypeError('No currentTime getter specified');\n    }\n\n    if (!settings.mediaSource) {\n      throw new TypeError('No MediaSource specified');\n    } // public properties\n\n\n    _this.bandwidth = settings.bandwidth;\n    _this.throughput = {\n      rate: 0,\n      count: 0\n    };\n    _this.roundTrip = NaN;\n\n    _this.resetStats_();\n\n    _this.mediaIndex = null; // private settings\n\n    _this.hasPlayed_ = settings.hasPlayed;\n    _this.currentTime_ = settings.currentTime;\n    _this.seekable_ = settings.seekable;\n    _this.seeking_ = settings.seeking;\n    _this.duration_ = settings.duration;\n    _this.mediaSource_ = settings.mediaSource;\n    _this.hls_ = settings.hls;\n    _this.loaderType_ = settings.loaderType;\n    _this.startingMedia_ = void 0;\n    _this.segmentMetadataTrack_ = settings.segmentMetadataTrack;\n    _this.goalBufferLength_ = settings.goalBufferLength;\n    _this.sourceType_ = settings.sourceType;\n    _this.inbandTextTracks_ = settings.inbandTextTracks;\n    _this.state_ = 'INIT'; // private instance variables\n\n    _this.checkBufferTimeout_ = null;\n    _this.error_ = void 0;\n    _this.currentTimeline_ = -1;\n    _this.pendingSegment_ = null;\n    _this.mimeType_ = null;\n    _this.sourceUpdater_ = null;\n    _this.xhrOptions_ = null; // Fragmented mp4 playback\n\n    _this.activeInitSegmentId_ = null;\n    _this.initSegments_ = {}; // HLSe playback\n\n    _this.cacheEncryptionKeys_ = settings.cacheEncryptionKeys;\n    _this.keyCache_ = {}; // Fmp4 CaptionParser\n\n    if (_this.loaderType_ === 'main') {\n      _this.captionParser_ = new CaptionParser();\n    } else {\n      _this.captionParser_ = null;\n    }\n\n    _this.decrypter_ = settings.decrypter; // Manages the tracking and generation of sync-points, mappings\n    // between a time in the display time and a segment index within\n    // a playlist\n\n    _this.syncController_ = settings.syncController;\n    _this.syncPoint_ = {\n      segmentIndex: 0,\n      time: 0\n    };\n\n    _this.syncController_.on('syncinfoupdate', function () {\n      return _this.trigger('syncinfoupdate');\n    });\n\n    _this.mediaSource_.addEventListener('sourceopen', function () {\n      return _this.ended_ = false;\n    }); // ...for determining the fetch location\n\n\n    _this.fetchAtBuffer_ = false;\n    _this.logger_ = logger('SegmentLoader[' + _this.loaderType_ + ']');\n    Object.defineProperty(_this, 'state', {\n      get: function get$$1() {\n        return this.state_;\n      },\n      set: function set$$1(newState) {\n        if (newState !== this.state_) {\n          this.logger_(this.state_ + ' -> ' + newState);\n          this.state_ = newState;\n        }\n      }\n    });\n    return _this;\n  }\n  /**\n   * reset all of our media stats\n   *\n   * @private\n   */\n\n\n  createClass(SegmentLoader, [{\n    key: 'resetStats_',\n    value: function resetStats_() {\n      this.mediaBytesTransferred = 0;\n      this.mediaRequests = 0;\n      this.mediaRequestsAborted = 0;\n      this.mediaRequestsTimedout = 0;\n      this.mediaRequestsErrored = 0;\n      this.mediaTransferDuration = 0;\n      this.mediaSecondsLoaded = 0;\n    }\n    /**\n     * dispose of the SegmentLoader and reset to the default state\n     */\n\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      this.state = 'DISPOSED';\n      this.pause();\n      this.abort_();\n\n      if (this.sourceUpdater_) {\n        this.sourceUpdater_.dispose();\n      }\n\n      this.resetStats_();\n\n      if (this.captionParser_) {\n        this.captionParser_.reset();\n      }\n    }\n    /**\n     * abort anything that is currently doing on with the SegmentLoader\n     * and reset to a default state\n     */\n\n  }, {\n    key: 'abort',\n    value: function abort() {\n      if (this.state !== 'WAITING') {\n        if (this.pendingSegment_) {\n          this.pendingSegment_ = null;\n        }\n\n        return;\n      }\n\n      this.abort_(); // We aborted the requests we were waiting on, so reset the loader's state to READY\n      // since we are no longer \"waiting\" on any requests. XHR callback is not always run\n      // when the request is aborted. This will prevent the loader from being stuck in the\n      // WAITING state indefinitely.\n\n      this.state = 'READY'; // don't wait for buffer check timeouts to begin fetching the\n      // next segment\n\n      if (!this.paused()) {\n        this.monitorBuffer_();\n      }\n    }\n    /**\n     * abort all pending xhr requests and null any pending segements\n     *\n     * @private\n     */\n\n  }, {\n    key: 'abort_',\n    value: function abort_() {\n      if (this.pendingSegment_) {\n        this.pendingSegment_.abortRequests();\n      } // clear out the segment being processed\n\n\n      this.pendingSegment_ = null;\n    }\n    /**\n     * set an error on the segment loader and null out any pending segements\n     *\n     * @param {Error} error the error to set on the SegmentLoader\n     * @return {Error} the error that was set or that is currently set\n     */\n\n  }, {\n    key: 'error',\n    value: function error(_error) {\n      if (typeof _error !== 'undefined') {\n        this.error_ = _error;\n      }\n\n      this.pendingSegment_ = null;\n      return this.error_;\n    }\n  }, {\n    key: 'endOfStream',\n    value: function endOfStream() {\n      this.ended_ = true;\n      this.pause();\n      this.trigger('ended');\n    }\n    /**\n     * Indicates which time ranges are buffered\n     *\n     * @return {TimeRange}\n     *         TimeRange object representing the current buffered ranges\n     */\n\n  }, {\n    key: 'buffered_',\n    value: function buffered_() {\n      if (!this.sourceUpdater_) {\n        return videojs$1.createTimeRanges();\n      }\n\n      return this.sourceUpdater_.buffered();\n    }\n    /**\n     * Gets and sets init segment for the provided map\n     *\n     * @param {Object} map\n     *        The map object representing the init segment to get or set\n     * @param {Boolean=} set\n     *        If true, the init segment for the provided map should be saved\n     * @return {Object}\n     *         map object for desired init segment\n     */\n\n  }, {\n    key: 'initSegment',\n    value: function initSegment(map) {\n      var set$$1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (!map) {\n        return null;\n      }\n\n      var id = initSegmentId(map);\n      var storedMap = this.initSegments_[id];\n\n      if (set$$1 && !storedMap && map.bytes) {\n        this.initSegments_[id] = storedMap = {\n          resolvedUri: map.resolvedUri,\n          byterange: map.byterange,\n          bytes: map.bytes,\n          timescales: map.timescales,\n          videoTrackIds: map.videoTrackIds\n        };\n      }\n\n      return storedMap || map;\n    }\n    /**\n     * Gets and sets key for the provided key\n     *\n     * @param {Object} key\n     *        The key object representing the key to get or set\n     * @param {Boolean=} set\n     *        If true, the key for the provided key should be saved\n     * @return {Object}\n     *         Key object for desired key\n     */\n\n  }, {\n    key: 'segmentKey',\n    value: function segmentKey(key) {\n      var set$$1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (!key) {\n        return null;\n      }\n\n      var id = segmentKeyId(key);\n      var storedKey = this.keyCache_[id]; // TODO: We should use the HTTP Expires header to invalidate our cache per\n      // https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-6.2.3\n\n      if (this.cacheEncryptionKeys_ && set$$1 && !storedKey && key.bytes) {\n        this.keyCache_[id] = storedKey = {\n          resolvedUri: key.resolvedUri,\n          bytes: key.bytes\n        };\n      }\n\n      var result = {\n        resolvedUri: (storedKey || key).resolvedUri\n      };\n\n      if (storedKey) {\n        result.bytes = storedKey.bytes;\n      }\n\n      return result;\n    }\n    /**\n     * Returns true if all configuration required for loading is present, otherwise false.\n     *\n     * @return {Boolean} True if the all configuration is ready for loading\n     * @private\n     */\n\n  }, {\n    key: 'couldBeginLoading_',\n    value: function couldBeginLoading_() {\n      return this.playlist_ && ( // the source updater is created when init_ is called, so either having a\n      // source updater or being in the INIT state with a mimeType is enough\n      // to say we have all the needed configuration to start loading.\n      this.sourceUpdater_ || this.mimeType_ && this.state === 'INIT') && !this.paused();\n    }\n    /**\n     * load a playlist and start to fill the buffer\n     */\n\n  }, {\n    key: 'load',\n    value: function load() {\n      // un-pause\n      this.monitorBuffer_(); // if we don't have a playlist yet, keep waiting for one to be\n      // specified\n\n      if (!this.playlist_) {\n        return;\n      } // not sure if this is the best place for this\n\n\n      this.syncController_.setDateTimeMapping(this.playlist_); // if all the configuration is ready, initialize and begin loading\n\n      if (this.state === 'INIT' && this.couldBeginLoading_()) {\n        return this.init_();\n      } // if we're in the middle of processing a segment already, don't\n      // kick off an additional segment request\n\n\n      if (!this.couldBeginLoading_() || this.state !== 'READY' && this.state !== 'INIT') {\n        return;\n      }\n\n      this.state = 'READY';\n    }\n    /**\n     * Once all the starting parameters have been specified, begin\n     * operation. This method should only be invoked from the INIT\n     * state.\n     *\n     * @private\n     */\n\n  }, {\n    key: 'init_',\n    value: function init_() {\n      this.state = 'READY';\n      this.sourceUpdater_ = new SourceUpdater(this.mediaSource_, this.mimeType_, this.loaderType_, this.sourceBufferEmitter_);\n      this.resetEverything();\n      return this.monitorBuffer_();\n    }\n    /**\n     * set a playlist on the segment loader\n     *\n     * @param {PlaylistLoader} media the playlist to set on the segment loader\n     */\n\n  }, {\n    key: 'playlist',\n    value: function playlist(newPlaylist) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (!newPlaylist) {\n        return;\n      }\n\n      var oldPlaylist = this.playlist_;\n      var segmentInfo = this.pendingSegment_;\n      this.playlist_ = newPlaylist;\n      this.xhrOptions_ = options; // when we haven't started playing yet, the start of a live playlist\n      // is always our zero-time so force a sync update each time the playlist\n      // is refreshed from the server\n\n      if (!this.hasPlayed_()) {\n        newPlaylist.syncInfo = {\n          mediaSequence: newPlaylist.mediaSequence,\n          time: 0\n        };\n      }\n\n      var oldId = null;\n\n      if (oldPlaylist) {\n        if (oldPlaylist.id) {\n          oldId = oldPlaylist.id;\n        } else if (oldPlaylist.uri) {\n          oldId = oldPlaylist.uri;\n        }\n      }\n\n      this.logger_('playlist update [' + oldId + ' => ' + (newPlaylist.id || newPlaylist.uri) + ']'); // in VOD, this is always a rendition switch (or we updated our syncInfo above)\n      // in LIVE, we always want to update with new playlists (including refreshes)\n\n      this.trigger('syncinfoupdate'); // if we were unpaused but waiting for a playlist, start\n      // buffering now\n\n      if (this.state === 'INIT' && this.couldBeginLoading_()) {\n        return this.init_();\n      }\n\n      if (!oldPlaylist || oldPlaylist.uri !== newPlaylist.uri) {\n        if (this.mediaIndex !== null) {\n          // we must \"resync\" the segment loader when we switch renditions and\n          // the segment loader is already synced to the previous rendition\n          this.resyncLoader();\n        } // the rest of this function depends on `oldPlaylist` being defined\n\n\n        return;\n      } // we reloaded the same playlist so we are in a live scenario\n      // and we will likely need to adjust the mediaIndex\n\n\n      var mediaSequenceDiff = newPlaylist.mediaSequence - oldPlaylist.mediaSequence;\n      this.logger_('live window shift [' + mediaSequenceDiff + ']'); // update the mediaIndex on the SegmentLoader\n      // this is important because we can abort a request and this value must be\n      // equal to the last appended mediaIndex\n\n      if (this.mediaIndex !== null) {\n        this.mediaIndex -= mediaSequenceDiff;\n      } // update the mediaIndex on the SegmentInfo object\n      // this is important because we will update this.mediaIndex with this value\n      // in `handleUpdateEnd_` after the segment has been successfully appended\n\n\n      if (segmentInfo) {\n        segmentInfo.mediaIndex -= mediaSequenceDiff; // we need to update the referenced segment so that timing information is\n        // saved for the new playlist's segment, however, if the segment fell off the\n        // playlist, we can leave the old reference and just lose the timing info\n\n        if (segmentInfo.mediaIndex >= 0) {\n          segmentInfo.segment = newPlaylist.segments[segmentInfo.mediaIndex];\n        }\n      }\n\n      this.syncController_.saveExpiredSegmentInfo(oldPlaylist, newPlaylist);\n    }\n    /**\n     * Prevent the loader from fetching additional segments. If there\n     * is a segment request outstanding, it will finish processing\n     * before the loader halts. A segment loader can be unpaused by\n     * calling load().\n     */\n\n  }, {\n    key: 'pause',\n    value: function pause() {\n      if (this.checkBufferTimeout_) {\n        window$1.clearTimeout(this.checkBufferTimeout_);\n        this.checkBufferTimeout_ = null;\n      }\n    }\n    /**\n     * Returns whether the segment loader is fetching additional\n     * segments when given the opportunity. This property can be\n     * modified through calls to pause() and load().\n     */\n\n  }, {\n    key: 'paused',\n    value: function paused() {\n      return this.checkBufferTimeout_ === null;\n    }\n    /**\n     * create/set the following mimetype on the SourceBuffer through a\n     * SourceUpdater\n     *\n     * @param {String} mimeType the mime type string to use\n     * @param {Object} sourceBufferEmitter an event emitter that fires when a source buffer\n     * is added to the media source\n     */\n\n  }, {\n    key: 'mimeType',\n    value: function mimeType(_mimeType, sourceBufferEmitter) {\n      if (this.mimeType_) {\n        return;\n      }\n\n      this.mimeType_ = _mimeType;\n      this.sourceBufferEmitter_ = sourceBufferEmitter; // if we were unpaused but waiting for a sourceUpdater, start\n      // buffering now\n\n      if (this.state === 'INIT' && this.couldBeginLoading_()) {\n        this.init_();\n      }\n    }\n    /**\n     * Delete all the buffered data and reset the SegmentLoader\n     * @param {Function} [done] an optional callback to be executed when the remove\n     * operation is complete\n     */\n\n  }, {\n    key: 'resetEverything',\n    value: function resetEverything(done) {\n      this.ended_ = false;\n      this.resetLoader();\n      this.remove(0, this.duration_(), done); // clears fmp4 captions\n\n      if (this.captionParser_) {\n        this.captionParser_.clearAllCaptions();\n      }\n\n      this.trigger('reseteverything');\n    }\n    /**\n     * Force the SegmentLoader to resync and start loading around the currentTime instead\n     * of starting at the end of the buffer\n     *\n     * Useful for fast quality changes\n     */\n\n  }, {\n    key: 'resetLoader',\n    value: function resetLoader() {\n      this.fetchAtBuffer_ = false;\n      this.resyncLoader();\n    }\n    /**\n     * Force the SegmentLoader to restart synchronization and make a conservative guess\n     * before returning to the simple walk-forward method\n     */\n\n  }, {\n    key: 'resyncLoader',\n    value: function resyncLoader() {\n      this.mediaIndex = null;\n      this.syncPoint_ = null;\n      this.abort();\n    }\n    /**\n     * Remove any data in the source buffer between start and end times\n     * @param {Number} start - the start time of the region to remove from the buffer\n     * @param {Number} end - the end time of the region to remove from the buffer\n     * @param {Function} [done] - an optional callback to be executed when the remove\n     * operation is complete\n     */\n\n  }, {\n    key: 'remove',\n    value: function remove(start, end, done) {\n      if (this.sourceUpdater_) {\n        this.sourceUpdater_.remove(start, end, done);\n      }\n\n      removeCuesFromTrack(start, end, this.segmentMetadataTrack_);\n\n      if (this.inbandTextTracks_) {\n        for (var id in this.inbandTextTracks_) {\n          removeCuesFromTrack(start, end, this.inbandTextTracks_[id]);\n        }\n      }\n    }\n    /**\n     * (re-)schedule monitorBufferTick_ to run as soon as possible\n     *\n     * @private\n     */\n\n  }, {\n    key: 'monitorBuffer_',\n    value: function monitorBuffer_() {\n      if (this.checkBufferTimeout_) {\n        window$1.clearTimeout(this.checkBufferTimeout_);\n      }\n\n      this.checkBufferTimeout_ = window$1.setTimeout(this.monitorBufferTick_.bind(this), 1);\n    }\n    /**\n     * As long as the SegmentLoader is in the READY state, periodically\n     * invoke fillBuffer_().\n     *\n     * @private\n     */\n\n  }, {\n    key: 'monitorBufferTick_',\n    value: function monitorBufferTick_() {\n      if (this.state === 'READY') {\n        this.fillBuffer_();\n      }\n\n      if (this.checkBufferTimeout_) {\n        window$1.clearTimeout(this.checkBufferTimeout_);\n      }\n\n      this.checkBufferTimeout_ = window$1.setTimeout(this.monitorBufferTick_.bind(this), CHECK_BUFFER_DELAY);\n    }\n    /**\n     * fill the buffer with segements unless the sourceBuffers are\n     * currently updating\n     *\n     * Note: this function should only ever be called by monitorBuffer_\n     * and never directly\n     *\n     * @private\n     */\n\n  }, {\n    key: 'fillBuffer_',\n    value: function fillBuffer_() {\n      if (this.sourceUpdater_.updating()) {\n        return;\n      }\n\n      if (!this.syncPoint_) {\n        this.syncPoint_ = this.syncController_.getSyncPoint(this.playlist_, this.duration_(), this.currentTimeline_, this.currentTime_());\n      } // see if we need to begin loading immediately\n\n\n      var segmentInfo = this.checkBuffer_(this.buffered_(), this.playlist_, this.mediaIndex, this.hasPlayed_(), this.currentTime_(), this.syncPoint_);\n\n      if (!segmentInfo) {\n        return;\n      }\n\n      if (this.isEndOfStream_(segmentInfo.mediaIndex)) {\n        this.endOfStream();\n        return;\n      }\n\n      if (segmentInfo.mediaIndex === this.playlist_.segments.length - 1 && this.mediaSource_.readyState === 'ended' && !this.seeking_()) {\n        return;\n      } // We will need to change timestampOffset of the sourceBuffer if:\n      // - The segment.timeline !== this.currentTimeline\n      //   (we are crossing a discontinuity somehow)\n      // - The \"timestampOffset\" for the start of this segment is less than\n      //   the currently set timestampOffset\n      // Also, clear captions if we are crossing a discontinuity boundary\n      // Previously, we changed the timestampOffset if the start of this segment\n      // is less than the currently set timestampOffset but this isn't wanted\n      // as it can produce bad behavior, especially around long running\n      // live streams\n\n\n      if (segmentInfo.timeline !== this.currentTimeline_) {\n        this.syncController_.reset();\n        segmentInfo.timestampOffset = segmentInfo.startOfSegment;\n\n        if (this.captionParser_) {\n          this.captionParser_.clearAllCaptions();\n        }\n      }\n\n      this.loadSegment_(segmentInfo);\n    }\n    /**\n     * Determines if this segment loader is at the end of it's stream.\n     *\n     * @param {Number} mediaIndex the index of segment we last appended\n     * @param {Object} [playlist=this.playlist_] a media playlist object\n     * @returns {Boolean} true if at end of stream, false otherwise.\n     */\n\n  }, {\n    key: 'isEndOfStream_',\n    value: function isEndOfStream_(mediaIndex) {\n      var playlist = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.playlist_;\n      return detectEndOfStream(playlist, this.mediaSource_, mediaIndex) && !this.sourceUpdater_.updating();\n    }\n    /**\n     * Determines what segment request should be made, given current playback\n     * state.\n     *\n     * @param {TimeRanges} buffered - the state of the buffer\n     * @param {Object} playlist - the playlist object to fetch segments from\n     * @param {Number} mediaIndex - the previous mediaIndex fetched or null\n     * @param {Boolean} hasPlayed - a flag indicating whether we have played or not\n     * @param {Number} currentTime - the playback position in seconds\n     * @param {Object} syncPoint - a segment info object that describes the\n     * @returns {Object} a segment request object that describes the segment to load\n     */\n\n  }, {\n    key: 'checkBuffer_',\n    value: function checkBuffer_(buffered, playlist, mediaIndex, hasPlayed, currentTime, syncPoint) {\n      var lastBufferedEnd = 0;\n      var startOfSegment = void 0;\n\n      if (buffered.length) {\n        lastBufferedEnd = buffered.end(buffered.length - 1);\n      }\n\n      var bufferedTime = Math.max(0, lastBufferedEnd - currentTime);\n\n      if (!playlist.segments.length) {\n        return null;\n      } // if there is plenty of content buffered, and the video has\n      // been played before relax for awhile\n\n\n      if (bufferedTime >= this.goalBufferLength_()) {\n        return null;\n      } // if the video has not yet played once, and we already have\n      // one segment downloaded do nothing\n\n\n      if (!hasPlayed && bufferedTime >= 1) {\n        return null;\n      } // When the syncPoint is null, there is no way of determining a good\n      // conservative segment index to fetch from\n      // The best thing to do here is to get the kind of sync-point data by\n      // making a request\n\n\n      if (syncPoint === null) {\n        mediaIndex = this.getSyncSegmentCandidate_(playlist);\n        return this.generateSegmentInfo_(playlist, mediaIndex, null, true);\n      } // Under normal playback conditions fetching is a simple walk forward\n\n\n      if (mediaIndex !== null) {\n        var segment = playlist.segments[mediaIndex];\n\n        if (segment && segment.end) {\n          startOfSegment = segment.end;\n        } else {\n          startOfSegment = lastBufferedEnd;\n        }\n\n        return this.generateSegmentInfo_(playlist, mediaIndex + 1, startOfSegment, false);\n      } // There is a sync-point but the lack of a mediaIndex indicates that\n      // we need to make a good conservative guess about which segment to\n      // fetch\n\n\n      if (this.fetchAtBuffer_) {\n        // Find the segment containing the end of the buffer\n        var mediaSourceInfo = Playlist.getMediaInfoForTime(playlist, lastBufferedEnd, syncPoint.segmentIndex, syncPoint.time);\n        mediaIndex = mediaSourceInfo.mediaIndex;\n        startOfSegment = mediaSourceInfo.startTime;\n      } else {\n        // Find the segment containing currentTime\n        var _mediaSourceInfo = Playlist.getMediaInfoForTime(playlist, currentTime, syncPoint.segmentIndex, syncPoint.time);\n\n        mediaIndex = _mediaSourceInfo.mediaIndex;\n        startOfSegment = _mediaSourceInfo.startTime;\n      }\n\n      return this.generateSegmentInfo_(playlist, mediaIndex, startOfSegment, false);\n    }\n    /**\n     * The segment loader has no recourse except to fetch a segment in the\n     * current playlist and use the internal timestamps in that segment to\n     * generate a syncPoint. This function returns a good candidate index\n     * for that process.\n     *\n     * @param {Object} playlist - the playlist object to look for a\n     * @returns {Number} An index of a segment from the playlist to load\n     */\n\n  }, {\n    key: 'getSyncSegmentCandidate_',\n    value: function getSyncSegmentCandidate_(playlist) {\n      var _this2 = this;\n\n      if (this.currentTimeline_ === -1) {\n        return 0;\n      }\n\n      var segmentIndexArray = playlist.segments.map(function (s, i) {\n        return {\n          timeline: s.timeline,\n          segmentIndex: i\n        };\n      }).filter(function (s) {\n        return s.timeline === _this2.currentTimeline_;\n      });\n\n      if (segmentIndexArray.length) {\n        return segmentIndexArray[Math.min(segmentIndexArray.length - 1, 1)].segmentIndex;\n      }\n\n      return Math.max(playlist.segments.length - 1, 0);\n    }\n  }, {\n    key: 'generateSegmentInfo_',\n    value: function generateSegmentInfo_(playlist, mediaIndex, startOfSegment, isSyncRequest) {\n      if (mediaIndex < 0 || mediaIndex >= playlist.segments.length) {\n        return null;\n      }\n\n      var segment = playlist.segments[mediaIndex];\n      return {\n        requestId: 'segment-loader-' + Math.random(),\n        // resolve the segment URL relative to the playlist\n        uri: segment.resolvedUri,\n        // the segment's mediaIndex at the time it was requested\n        mediaIndex: mediaIndex,\n        // whether or not to update the SegmentLoader's state with this\n        // segment's mediaIndex\n        isSyncRequest: isSyncRequest,\n        startOfSegment: startOfSegment,\n        // the segment's playlist\n        playlist: playlist,\n        // unencrypted bytes of the segment\n        bytes: null,\n        // when a key is defined for this segment, the encrypted bytes\n        encryptedBytes: null,\n        // The target timestampOffset for this segment when we append it\n        // to the source buffer\n        timestampOffset: null,\n        // The timeline that the segment is in\n        timeline: segment.timeline,\n        // The expected duration of the segment in seconds\n        duration: segment.duration,\n        // retain the segment in case the playlist updates while doing an async process\n        segment: segment\n      };\n    }\n    /**\n     * Determines if the network has enough bandwidth to complete the current segment\n     * request in a timely manner. If not, the request will be aborted early and bandwidth\n     * updated to trigger a playlist switch.\n     *\n     * @param {Object} stats\n     *        Object containing stats about the request timing and size\n     * @return {Boolean} True if the request was aborted, false otherwise\n     * @private\n     */\n\n  }, {\n    key: 'abortRequestEarly_',\n    value: function abortRequestEarly_(stats) {\n      if (this.hls_.tech_.paused() || // Don't abort if the current playlist is on the lowestEnabledRendition\n      // TODO: Replace using timeout with a boolean indicating whether this playlist is\n      //       the lowestEnabledRendition.\n      !this.xhrOptions_.timeout || // Don't abort if we have no bandwidth information to estimate segment sizes\n      !this.playlist_.attributes.BANDWIDTH) {\n        return false;\n      } // Wait at least 1 second since the first byte of data has been received before\n      // using the calculated bandwidth from the progress event to allow the bitrate\n      // to stabilize\n\n\n      if (Date.now() - (stats.firstBytesReceivedAt || Date.now()) < 1000) {\n        return false;\n      }\n\n      var currentTime = this.currentTime_();\n      var measuredBandwidth = stats.bandwidth;\n      var segmentDuration = this.pendingSegment_.duration;\n      var requestTimeRemaining = Playlist.estimateSegmentRequestTime(segmentDuration, measuredBandwidth, this.playlist_, stats.bytesReceived); // Subtract 1 from the timeUntilRebuffer so we still consider an early abort\n      // if we are only left with less than 1 second when the request completes.\n      // A negative timeUntilRebuffering indicates we are already rebuffering\n\n      var timeUntilRebuffer$$1 = timeUntilRebuffer(this.buffered_(), currentTime, this.hls_.tech_.playbackRate()) - 1; // Only consider aborting early if the estimated time to finish the download\n      // is larger than the estimated time until the player runs out of forward buffer\n\n      if (requestTimeRemaining <= timeUntilRebuffer$$1) {\n        return false;\n      }\n\n      var switchCandidate = minRebufferMaxBandwidthSelector({\n        master: this.hls_.playlists.master,\n        currentTime: currentTime,\n        bandwidth: measuredBandwidth,\n        duration: this.duration_(),\n        segmentDuration: segmentDuration,\n        timeUntilRebuffer: timeUntilRebuffer$$1,\n        currentTimeline: this.currentTimeline_,\n        syncController: this.syncController_\n      });\n\n      if (!switchCandidate) {\n        return;\n      }\n\n      var rebufferingImpact = requestTimeRemaining - timeUntilRebuffer$$1;\n      var timeSavedBySwitching = rebufferingImpact - switchCandidate.rebufferingImpact;\n      var minimumTimeSaving = 0.5; // If we are already rebuffering, increase the amount of variance we add to the\n      // potential round trip time of the new request so that we are not too aggressive\n      // with switching to a playlist that might save us a fraction of a second.\n\n      if (timeUntilRebuffer$$1 <= TIME_FUDGE_FACTOR) {\n        minimumTimeSaving = 1;\n      }\n\n      if (!switchCandidate.playlist || switchCandidate.playlist.uri === this.playlist_.uri || timeSavedBySwitching < minimumTimeSaving) {\n        return false;\n      } // set the bandwidth to that of the desired playlist being sure to scale by\n      // BANDWIDTH_VARIANCE and add one so the playlist selector does not exclude it\n      // don't trigger a bandwidthupdate as the bandwidth is artifial\n\n\n      this.bandwidth = switchCandidate.playlist.attributes.BANDWIDTH * Config.BANDWIDTH_VARIANCE + 1;\n      this.abort();\n      this.trigger('earlyabort');\n      return true;\n    }\n    /**\n     * XHR `progress` event handler\n     *\n     * @param {Event}\n     *        The XHR `progress` event\n     * @param {Object} simpleSegment\n     *        A simplified segment object copy\n     * @private\n     */\n\n  }, {\n    key: 'handleProgress_',\n    value: function handleProgress_(event, simpleSegment) {\n      if (!this.pendingSegment_ || simpleSegment.requestId !== this.pendingSegment_.requestId || this.abortRequestEarly_(simpleSegment.stats)) {\n        return;\n      }\n\n      this.trigger('progress');\n    }\n    /**\n     * load a specific segment from a request into the buffer\n     *\n     * @private\n     */\n\n  }, {\n    key: 'loadSegment_',\n    value: function loadSegment_(segmentInfo) {\n      this.state = 'WAITING';\n      this.pendingSegment_ = segmentInfo;\n      this.trimBackBuffer_(segmentInfo);\n      segmentInfo.abortRequests = mediaSegmentRequest(this.hls_.xhr, this.xhrOptions_, this.decrypter_, this.captionParser_, this.createSimplifiedSegmentObj_(segmentInfo), // progress callback\n      this.handleProgress_.bind(this), this.segmentRequestFinished_.bind(this));\n    }\n    /**\n     * trim the back buffer so that we don't have too much data\n     * in the source buffer\n     *\n     * @private\n     *\n     * @param {Object} segmentInfo - the current segment\n     */\n\n  }, {\n    key: 'trimBackBuffer_',\n    value: function trimBackBuffer_(segmentInfo) {\n      var removeToTime = safeBackBufferTrimTime(this.seekable_(), this.currentTime_(), this.playlist_.targetDuration || 10); // Chrome has a hard limit of 150MB of\n      // buffer and a very conservative \"garbage collector\"\n      // We manually clear out the old buffer to ensure\n      // we don't trigger the QuotaExceeded error\n      // on the source buffer during subsequent appends\n\n      if (removeToTime > 0) {\n        this.remove(0, removeToTime);\n      }\n    }\n    /**\n     * created a simplified copy of the segment object with just the\n     * information necessary to perform the XHR and decryption\n     *\n     * @private\n     *\n     * @param {Object} segmentInfo - the current segment\n     * @returns {Object} a simplified segment object copy\n     */\n\n  }, {\n    key: 'createSimplifiedSegmentObj_',\n    value: function createSimplifiedSegmentObj_(segmentInfo) {\n      var segment = segmentInfo.segment;\n      var simpleSegment = {\n        resolvedUri: segment.resolvedUri,\n        byterange: segment.byterange,\n        requestId: segmentInfo.requestId\n      };\n\n      if (segment.key) {\n        // if the media sequence is greater than 2^32, the IV will be incorrect\n        // assuming 10s segments, that would be about 1300 years\n        var iv = segment.key.iv || new Uint32Array([0, 0, 0, segmentInfo.mediaIndex + segmentInfo.playlist.mediaSequence]);\n        simpleSegment.key = this.segmentKey(segment.key);\n        simpleSegment.key.iv = iv;\n      }\n\n      if (segment.map) {\n        simpleSegment.map = this.initSegment(segment.map);\n      }\n\n      return simpleSegment;\n    }\n    /**\n     * Handle the callback from the segmentRequest function and set the\n     * associated SegmentLoader state and errors if necessary\n     *\n     * @private\n     */\n\n  }, {\n    key: 'segmentRequestFinished_',\n    value: function segmentRequestFinished_(error, simpleSegment) {\n      // every request counts as a media request even if it has been aborted\n      // or canceled due to a timeout\n      this.mediaRequests += 1;\n\n      if (simpleSegment.stats) {\n        this.mediaBytesTransferred += simpleSegment.stats.bytesReceived;\n        this.mediaTransferDuration += simpleSegment.stats.roundTripTime;\n      } // The request was aborted and the SegmentLoader has already been reset\n\n\n      if (!this.pendingSegment_) {\n        this.mediaRequestsAborted += 1;\n        return;\n      } // the request was aborted and the SegmentLoader has already started\n      // another request. this can happen when the timeout for an aborted\n      // request triggers due to a limitation in the XHR library\n      // do not count this as any sort of request or we risk double-counting\n\n\n      if (simpleSegment.requestId !== this.pendingSegment_.requestId) {\n        return;\n      } // an error occurred from the active pendingSegment_ so reset everything\n\n\n      if (error) {\n        this.pendingSegment_ = null;\n        this.state = 'READY'; // the requests were aborted just record the aborted stat and exit\n        // this is not a true error condition and nothing corrective needs\n        // to be done\n\n        if (error.code === REQUEST_ERRORS.ABORTED) {\n          this.mediaRequestsAborted += 1;\n          return;\n        }\n\n        this.pause(); // the error is really just that at least one of the requests timed-out\n        // set the bandwidth to a very low value and trigger an ABR switch to\n        // take emergency action\n\n        if (error.code === REQUEST_ERRORS.TIMEOUT) {\n          this.mediaRequestsTimedout += 1;\n          this.bandwidth = 1;\n          this.roundTrip = NaN;\n          this.trigger('bandwidthupdate');\n          return;\n        } // if control-flow has arrived here, then the error is real\n        // emit an error event to blacklist the current playlist\n\n\n        this.mediaRequestsErrored += 1;\n        this.error(error);\n        this.trigger('error');\n        return;\n      } // the response was a success so set any bandwidth stats the request\n      // generated for ABR purposes\n\n\n      this.bandwidth = simpleSegment.stats.bandwidth;\n      this.roundTrip = simpleSegment.stats.roundTripTime; // if this request included an initialization segment, save that data\n      // to the initSegment cache\n\n      if (simpleSegment.map) {\n        simpleSegment.map = this.initSegment(simpleSegment.map, true);\n      } // if this request included a segment key, save that data in the cache\n\n\n      if (simpleSegment.key) {\n        this.segmentKey(simpleSegment.key, true);\n      }\n\n      this.processSegmentResponse_(simpleSegment);\n    }\n    /**\n     * Move any important data from the simplified segment object\n     * back to the real segment object for future phases\n     *\n     * @private\n     */\n\n  }, {\n    key: 'processSegmentResponse_',\n    value: function processSegmentResponse_(simpleSegment) {\n      var segmentInfo = this.pendingSegment_;\n      segmentInfo.bytes = simpleSegment.bytes;\n\n      if (simpleSegment.map) {\n        segmentInfo.segment.map.bytes = simpleSegment.map.bytes;\n      }\n\n      segmentInfo.endOfAllRequests = simpleSegment.endOfAllRequests; // This has fmp4 captions, add them to text tracks\n\n      if (simpleSegment.fmp4Captions) {\n        createCaptionsTrackIfNotExists(this.inbandTextTracks_, this.hls_.tech_, simpleSegment.captionStreams);\n        addCaptionData({\n          inbandTextTracks: this.inbandTextTracks_,\n          captionArray: simpleSegment.fmp4Captions,\n          // fmp4s will not have a timestamp offset\n          timestampOffset: 0\n        }); // Reset stored captions since we added parsed\n        // captions to a text track at this point\n\n        if (this.captionParser_) {\n          this.captionParser_.clearParsedCaptions();\n        }\n      }\n\n      this.handleSegment_();\n    }\n    /**\n     * append a decrypted segement to the SourceBuffer through a SourceUpdater\n     *\n     * @private\n     */\n\n  }, {\n    key: 'handleSegment_',\n    value: function handleSegment_() {\n      var _this3 = this;\n\n      if (!this.pendingSegment_) {\n        this.state = 'READY';\n        return;\n      }\n\n      var segmentInfo = this.pendingSegment_;\n      var segment = segmentInfo.segment;\n      var timingInfo = this.syncController_.probeSegmentInfo(segmentInfo); // When we have our first timing info, determine what media types this loader is\n      // dealing with. Although we're maintaining extra state, it helps to preserve the\n      // separation of segment loader from the actual source buffers.\n\n      if (typeof this.startingMedia_ === 'undefined' && timingInfo && ( // Guard against cases where we're not getting timing info at all until we are\n      // certain that all streams will provide it.\n      timingInfo.containsAudio || timingInfo.containsVideo)) {\n        this.startingMedia_ = {\n          containsAudio: timingInfo.containsAudio,\n          containsVideo: timingInfo.containsVideo\n        };\n      }\n\n      var illegalMediaSwitchError = illegalMediaSwitch(this.loaderType_, this.startingMedia_, timingInfo);\n\n      if (illegalMediaSwitchError) {\n        this.error({\n          message: illegalMediaSwitchError,\n          blacklistDuration: Infinity\n        });\n        this.trigger('error');\n        return;\n      }\n\n      if (segmentInfo.isSyncRequest) {\n        this.trigger('syncinfoupdate');\n        this.pendingSegment_ = null;\n        this.state = 'READY';\n        return;\n      }\n\n      if (segmentInfo.timestampOffset !== null && segmentInfo.timestampOffset !== this.sourceUpdater_.timestampOffset()) {\n        this.sourceUpdater_.timestampOffset(segmentInfo.timestampOffset); // fired when a timestamp offset is set in HLS (can also identify discontinuities)\n\n        this.trigger('timestampoffset');\n      }\n\n      var timelineMapping = this.syncController_.mappingForTimeline(segmentInfo.timeline);\n\n      if (timelineMapping !== null) {\n        this.trigger({\n          type: 'segmenttimemapping',\n          mapping: timelineMapping\n        });\n      }\n\n      this.state = 'APPENDING'; // if the media initialization segment is changing, append it\n      // before the content segment\n\n      if (segment.map) {\n        var initId = initSegmentId(segment.map);\n\n        if (!this.activeInitSegmentId_ || this.activeInitSegmentId_ !== initId) {\n          var initSegment = this.initSegment(segment.map);\n          this.sourceUpdater_.appendBuffer({\n            bytes: initSegment.bytes\n          }, function () {\n            _this3.activeInitSegmentId_ = initId;\n          });\n        }\n      }\n\n      segmentInfo.byteLength = segmentInfo.bytes.byteLength;\n\n      if (typeof segment.start === 'number' && typeof segment.end === 'number') {\n        this.mediaSecondsLoaded += segment.end - segment.start;\n      } else {\n        this.mediaSecondsLoaded += segment.duration;\n      }\n\n      this.logger_(segmentInfoString(segmentInfo));\n      this.sourceUpdater_.appendBuffer({\n        bytes: segmentInfo.bytes,\n        videoSegmentTimingInfoCallback: this.handleVideoSegmentTimingInfo_.bind(this, segmentInfo.requestId)\n      }, this.handleUpdateEnd_.bind(this));\n    }\n  }, {\n    key: 'handleVideoSegmentTimingInfo_',\n    value: function handleVideoSegmentTimingInfo_(requestId, event) {\n      if (!this.pendingSegment_ || requestId !== this.pendingSegment_.requestId) {\n        return;\n      }\n\n      var segment = this.pendingSegment_.segment;\n\n      if (!segment.videoTimingInfo) {\n        segment.videoTimingInfo = {};\n      }\n\n      segment.videoTimingInfo.transmuxerPrependedSeconds = event.videoSegmentTimingInfo.prependedContentDuration || 0;\n      segment.videoTimingInfo.transmuxedPresentationStart = event.videoSegmentTimingInfo.start.presentation;\n      segment.videoTimingInfo.transmuxedPresentationEnd = event.videoSegmentTimingInfo.end.presentation; // mainly used as a reference for debugging\n\n      segment.videoTimingInfo.baseMediaDecodeTime = event.videoSegmentTimingInfo.baseMediaDecodeTime;\n    }\n    /**\n     * callback to run when appendBuffer is finished. detects if we are\n     * in a good state to do things with the data we got, or if we need\n     * to wait for more\n     *\n     * @private\n     */\n\n  }, {\n    key: 'handleUpdateEnd_',\n    value: function handleUpdateEnd_() {\n      if (!this.pendingSegment_) {\n        this.state = 'READY';\n\n        if (!this.paused()) {\n          this.monitorBuffer_();\n        }\n\n        return;\n      }\n\n      var segmentInfo = this.pendingSegment_;\n      var segment = segmentInfo.segment;\n      var isWalkingForward = this.mediaIndex !== null;\n      this.pendingSegment_ = null;\n      this.recordThroughput_(segmentInfo);\n      this.addSegmentMetadataCue_(segmentInfo);\n      this.state = 'READY';\n      this.mediaIndex = segmentInfo.mediaIndex;\n      this.fetchAtBuffer_ = true;\n      this.currentTimeline_ = segmentInfo.timeline; // We must update the syncinfo to recalculate the seekable range before\n      // the following conditional otherwise it may consider this a bad \"guess\"\n      // and attempt to resync when the post-update seekable window and live\n      // point would mean that this was the perfect segment to fetch\n\n      this.trigger('syncinfoupdate'); // If we previously appended a segment that ends more than 3 targetDurations before\n      // the currentTime_ that means that our conservative guess was too conservative.\n      // In that case, reset the loader state so that we try to use any information gained\n      // from the previous request to create a new, more accurate, sync-point.\n\n      if (segment.end && this.currentTime_() - segment.end > segmentInfo.playlist.targetDuration * 3) {\n        this.resetEverything();\n        return;\n      } // Don't do a rendition switch unless we have enough time to get a sync segment\n      // and conservatively guess\n\n\n      if (isWalkingForward) {\n        this.trigger('bandwidthupdate');\n      }\n\n      this.trigger('progress'); // any time an update finishes and the last segment is in the\n      // buffer, end the stream. this ensures the \"ended\" event will\n      // fire if playback reaches that point.\n\n      if (this.isEndOfStream_(segmentInfo.mediaIndex + 1, segmentInfo.playlist)) {\n        this.endOfStream();\n      }\n\n      if (!this.paused()) {\n        this.monitorBuffer_();\n      }\n    }\n    /**\n     * Records the current throughput of the decrypt, transmux, and append\n     * portion of the semgment pipeline. `throughput.rate` is a the cumulative\n     * moving average of the throughput. `throughput.count` is the number of\n     * data points in the average.\n     *\n     * @private\n     * @param {Object} segmentInfo the object returned by loadSegment\n     */\n\n  }, {\n    key: 'recordThroughput_',\n    value: function recordThroughput_(segmentInfo) {\n      var rate = this.throughput.rate; // Add one to the time to ensure that we don't accidentally attempt to divide\n      // by zero in the case where the throughput is ridiculously high\n\n      var segmentProcessingTime = Date.now() - segmentInfo.endOfAllRequests + 1; // Multiply by 8000 to convert from bytes/millisecond to bits/second\n\n      var segmentProcessingThroughput = Math.floor(segmentInfo.byteLength / segmentProcessingTime * 8 * 1000); // This is just a cumulative moving average calculation:\n      //   newAvg = oldAvg + (sample - oldAvg) / (sampleCount + 1)\n\n      this.throughput.rate += (segmentProcessingThroughput - rate) / ++this.throughput.count;\n    }\n    /**\n     * Adds a cue to the segment-metadata track with some metadata information about the\n     * segment\n     *\n     * @private\n     * @param {Object} segmentInfo\n     *        the object returned by loadSegment\n     * @method addSegmentMetadataCue_\n     */\n\n  }, {\n    key: 'addSegmentMetadataCue_',\n    value: function addSegmentMetadataCue_(segmentInfo) {\n      if (!this.segmentMetadataTrack_) {\n        return;\n      }\n\n      var segment = segmentInfo.segment;\n      var start = segment.start;\n      var end = segment.end; // Do not try adding the cue if the start and end times are invalid.\n\n      if (!finite(start) || !finite(end)) {\n        return;\n      }\n\n      removeCuesFromTrack(start, end, this.segmentMetadataTrack_);\n      var Cue = window$1.WebKitDataCue || window$1.VTTCue;\n      var value = {\n        custom: segment.custom,\n        dateTimeObject: segment.dateTimeObject,\n        dateTimeString: segment.dateTimeString,\n        bandwidth: segmentInfo.playlist.attributes.BANDWIDTH,\n        resolution: segmentInfo.playlist.attributes.RESOLUTION,\n        codecs: segmentInfo.playlist.attributes.CODECS,\n        byteLength: segmentInfo.byteLength,\n        uri: segmentInfo.uri,\n        timeline: segmentInfo.timeline,\n        playlist: segmentInfo.playlist.uri,\n        start: start,\n        end: end\n      };\n      var data = JSON.stringify(value);\n      var cue = new Cue(start, end, data); // Attach the metadata to the value property of the cue to keep consistency between\n      // the differences of WebKitDataCue in safari and VTTCue in other browsers\n\n      cue.value = value;\n      this.segmentMetadataTrack_.addCue(cue);\n    }\n  }]);\n  return SegmentLoader;\n}(videojs$1.EventTarget);\n\nvar uint8ToUtf8 = function uint8ToUtf8(uintArray) {\n  return decodeURIComponent(escape(String.fromCharCode.apply(null, uintArray)));\n};\n/**\n * @file vtt-segment-loader.js\n */\n\n\nvar VTT_LINE_TERMINATORS = new Uint8Array('\\n\\n'.split('').map(function (_char2) {\n  return _char2.charCodeAt(0);\n}));\n/**\n * An object that manages segment loading and appending.\n *\n * @class VTTSegmentLoader\n * @param {Object} options required and optional options\n * @extends videojs.EventTarget\n */\n\nvar VTTSegmentLoader = function (_SegmentLoader) {\n  inherits(VTTSegmentLoader, _SegmentLoader);\n\n  function VTTSegmentLoader(settings) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    classCallCheck(this, VTTSegmentLoader); // SegmentLoader requires a MediaSource be specified or it will throw an error;\n    // however, VTTSegmentLoader has no need of a media source, so delete the reference\n\n    var _this = possibleConstructorReturn(this, (VTTSegmentLoader.__proto__ || Object.getPrototypeOf(VTTSegmentLoader)).call(this, settings, options));\n\n    _this.mediaSource_ = null;\n    _this.subtitlesTrack_ = null;\n    return _this;\n  }\n  /**\n   * Indicates which time ranges are buffered\n   *\n   * @return {TimeRange}\n   *         TimeRange object representing the current buffered ranges\n   */\n\n\n  createClass(VTTSegmentLoader, [{\n    key: 'buffered_',\n    value: function buffered_() {\n      if (!this.subtitlesTrack_ || !this.subtitlesTrack_.cues.length) {\n        return videojs$1.createTimeRanges();\n      }\n\n      var cues = this.subtitlesTrack_.cues;\n      var start = cues[0].startTime;\n      var end = cues[cues.length - 1].startTime;\n      return videojs$1.createTimeRanges([[start, end]]);\n    }\n    /**\n     * Gets and sets init segment for the provided map\n     *\n     * @param {Object} map\n     *        The map object representing the init segment to get or set\n     * @param {Boolean=} set\n     *        If true, the init segment for the provided map should be saved\n     * @return {Object}\n     *         map object for desired init segment\n     */\n\n  }, {\n    key: 'initSegment',\n    value: function initSegment(map) {\n      var set$$1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (!map) {\n        return null;\n      }\n\n      var id = initSegmentId(map);\n      var storedMap = this.initSegments_[id];\n\n      if (set$$1 && !storedMap && map.bytes) {\n        // append WebVTT line terminators to the media initialization segment if it exists\n        // to follow the WebVTT spec (https://w3c.github.io/webvtt/#file-structure) that\n        // requires two or more WebVTT line terminators between the WebVTT header and the\n        // rest of the file\n        var combinedByteLength = VTT_LINE_TERMINATORS.byteLength + map.bytes.byteLength;\n        var combinedSegment = new Uint8Array(combinedByteLength);\n        combinedSegment.set(map.bytes);\n        combinedSegment.set(VTT_LINE_TERMINATORS, map.bytes.byteLength);\n        this.initSegments_[id] = storedMap = {\n          resolvedUri: map.resolvedUri,\n          byterange: map.byterange,\n          bytes: combinedSegment\n        };\n      }\n\n      return storedMap || map;\n    }\n    /**\n     * Returns true if all configuration required for loading is present, otherwise false.\n     *\n     * @return {Boolean} True if the all configuration is ready for loading\n     * @private\n     */\n\n  }, {\n    key: 'couldBeginLoading_',\n    value: function couldBeginLoading_() {\n      return this.playlist_ && this.subtitlesTrack_ && !this.paused();\n    }\n    /**\n     * Once all the starting parameters have been specified, begin\n     * operation. This method should only be invoked from the INIT\n     * state.\n     *\n     * @private\n     */\n\n  }, {\n    key: 'init_',\n    value: function init_() {\n      this.state = 'READY';\n      this.resetEverything();\n      return this.monitorBuffer_();\n    }\n    /**\n     * Set a subtitle track on the segment loader to add subtitles to\n     *\n     * @param {TextTrack=} track\n     *        The text track to add loaded subtitles to\n     * @return {TextTrack}\n     *        Returns the subtitles track\n     */\n\n  }, {\n    key: 'track',\n    value: function track(_track) {\n      if (typeof _track === 'undefined') {\n        return this.subtitlesTrack_;\n      }\n\n      this.subtitlesTrack_ = _track; // if we were unpaused but waiting for a sourceUpdater, start\n      // buffering now\n\n      if (this.state === 'INIT' && this.couldBeginLoading_()) {\n        this.init_();\n      }\n\n      return this.subtitlesTrack_;\n    }\n    /**\n     * Remove any data in the source buffer between start and end times\n     * @param {Number} start - the start time of the region to remove from the buffer\n     * @param {Number} end - the end time of the region to remove from the buffer\n     */\n\n  }, {\n    key: 'remove',\n    value: function remove(start, end) {\n      removeCuesFromTrack(start, end, this.subtitlesTrack_);\n    }\n    /**\n     * fill the buffer with segements unless the sourceBuffers are\n     * currently updating\n     *\n     * Note: this function should only ever be called by monitorBuffer_\n     * and never directly\n     *\n     * @private\n     */\n\n  }, {\n    key: 'fillBuffer_',\n    value: function fillBuffer_() {\n      var _this2 = this;\n\n      if (!this.syncPoint_) {\n        this.syncPoint_ = this.syncController_.getSyncPoint(this.playlist_, this.duration_(), this.currentTimeline_, this.currentTime_());\n      } // see if we need to begin loading immediately\n\n\n      var segmentInfo = this.checkBuffer_(this.buffered_(), this.playlist_, this.mediaIndex, this.hasPlayed_(), this.currentTime_(), this.syncPoint_);\n      segmentInfo = this.skipEmptySegments_(segmentInfo);\n\n      if (!segmentInfo) {\n        return;\n      }\n\n      if (this.syncController_.timestampOffsetForTimeline(segmentInfo.timeline) === null) {\n        // We don't have the timestamp offset that we need to sync subtitles.\n        // Rerun on a timestamp offset or user interaction.\n        var checkTimestampOffset = function checkTimestampOffset() {\n          _this2.state = 'READY';\n\n          if (!_this2.paused()) {\n            // if not paused, queue a buffer check as soon as possible\n            _this2.monitorBuffer_();\n          }\n        };\n\n        this.syncController_.one('timestampoffset', checkTimestampOffset);\n        this.state = 'WAITING_ON_TIMELINE';\n        return;\n      }\n\n      this.loadSegment_(segmentInfo);\n    }\n    /**\n     * Prevents the segment loader from requesting segments we know contain no subtitles\n     * by walking forward until we find the next segment that we don't know whether it is\n     * empty or not.\n     *\n     * @param {Object} segmentInfo\n     *        a segment info object that describes the current segment\n     * @return {Object}\n     *         a segment info object that describes the current segment\n     */\n\n  }, {\n    key: 'skipEmptySegments_',\n    value: function skipEmptySegments_(segmentInfo) {\n      while (segmentInfo && segmentInfo.segment.empty) {\n        segmentInfo = this.generateSegmentInfo_(segmentInfo.playlist, segmentInfo.mediaIndex + 1, segmentInfo.startOfSegment + segmentInfo.duration, segmentInfo.isSyncRequest);\n      }\n\n      return segmentInfo;\n    }\n    /**\n     * append a decrypted segement to the SourceBuffer through a SourceUpdater\n     *\n     * @private\n     */\n\n  }, {\n    key: 'handleSegment_',\n    value: function handleSegment_() {\n      var _this3 = this;\n\n      if (!this.pendingSegment_ || !this.subtitlesTrack_) {\n        this.state = 'READY';\n        return;\n      }\n\n      this.state = 'APPENDING';\n      var segmentInfo = this.pendingSegment_;\n      var segment = segmentInfo.segment; // Make sure that vttjs has loaded, otherwise, wait till it finished loading\n\n      if (typeof window$1.WebVTT !== 'function' && this.subtitlesTrack_ && this.subtitlesTrack_.tech_) {\n        var loadHandler = void 0;\n\n        var errorHandler = function errorHandler() {\n          _this3.subtitlesTrack_.tech_.off('vttjsloaded', loadHandler);\n\n          _this3.error({\n            message: 'Error loading vtt.js'\n          });\n\n          _this3.state = 'READY';\n\n          _this3.pause();\n\n          _this3.trigger('error');\n        };\n\n        loadHandler = function loadHandler() {\n          _this3.subtitlesTrack_.tech_.off('vttjserror', errorHandler);\n\n          _this3.handleSegment_();\n        };\n\n        this.state = 'WAITING_ON_VTTJS';\n        this.subtitlesTrack_.tech_.one('vttjsloaded', loadHandler);\n        this.subtitlesTrack_.tech_.one('vttjserror', errorHandler);\n        return;\n      }\n\n      segment.requested = true;\n\n      try {\n        this.parseVTTCues_(segmentInfo);\n      } catch (e) {\n        this.error({\n          message: e.message\n        });\n        this.state = 'READY';\n        this.pause();\n        return this.trigger('error');\n      }\n\n      this.updateTimeMapping_(segmentInfo, this.syncController_.timelines[segmentInfo.timeline], this.playlist_);\n\n      if (segmentInfo.isSyncRequest) {\n        this.trigger('syncinfoupdate');\n        this.pendingSegment_ = null;\n        this.state = 'READY';\n        return;\n      }\n\n      segmentInfo.byteLength = segmentInfo.bytes.byteLength;\n      this.mediaSecondsLoaded += segment.duration;\n\n      if (segmentInfo.cues.length) {\n        // remove any overlapping cues to prevent doubling\n        this.remove(segmentInfo.cues[0].endTime, segmentInfo.cues[segmentInfo.cues.length - 1].endTime);\n      }\n\n      segmentInfo.cues.forEach(function (cue) {\n        _this3.subtitlesTrack_.addCue(cue);\n      });\n      this.handleUpdateEnd_();\n    }\n    /**\n     * Uses the WebVTT parser to parse the segment response\n     *\n     * @param {Object} segmentInfo\n     *        a segment info object that describes the current segment\n     * @private\n     */\n\n  }, {\n    key: 'parseVTTCues_',\n    value: function parseVTTCues_(segmentInfo) {\n      var decoder = void 0;\n      var decodeBytesToString = false;\n\n      if (typeof window$1.TextDecoder === 'function') {\n        decoder = new window$1.TextDecoder('utf8');\n      } else {\n        decoder = window$1.WebVTT.StringDecoder();\n        decodeBytesToString = true;\n      }\n\n      var parser = new window$1.WebVTT.Parser(window$1, window$1.vttjs, decoder);\n      segmentInfo.cues = [];\n      segmentInfo.timestampmap = {\n        MPEGTS: 0,\n        LOCAL: 0\n      };\n      parser.oncue = segmentInfo.cues.push.bind(segmentInfo.cues);\n\n      parser.ontimestampmap = function (map) {\n        return segmentInfo.timestampmap = map;\n      };\n\n      parser.onparsingerror = function (error) {\n        videojs$1.log.warn('Error encountered when parsing cues: ' + error.message);\n      };\n\n      if (segmentInfo.segment.map) {\n        var mapData = segmentInfo.segment.map.bytes;\n\n        if (decodeBytesToString) {\n          mapData = uint8ToUtf8(mapData);\n        }\n\n        parser.parse(mapData);\n      }\n\n      var segmentData = segmentInfo.bytes;\n\n      if (decodeBytesToString) {\n        segmentData = uint8ToUtf8(segmentData);\n      }\n\n      parser.parse(segmentData);\n      parser.flush();\n    }\n    /**\n     * Updates the start and end times of any cues parsed by the WebVTT parser using\n     * the information parsed from the X-TIMESTAMP-MAP header and a TS to media time mapping\n     * from the SyncController\n     *\n     * @param {Object} segmentInfo\n     *        a segment info object that describes the current segment\n     * @param {Object} mappingObj\n     *        object containing a mapping from TS to media time\n     * @param {Object} playlist\n     *        the playlist object containing the segment\n     * @private\n     */\n\n  }, {\n    key: 'updateTimeMapping_',\n    value: function updateTimeMapping_(segmentInfo, mappingObj, playlist) {\n      var segment = segmentInfo.segment;\n\n      if (!mappingObj) {\n        // If the sync controller does not have a mapping of TS to Media Time for the\n        // timeline, then we don't have enough information to update the cue\n        // start/end times\n        return;\n      }\n\n      if (!segmentInfo.cues.length) {\n        // If there are no cues, we also do not have enough information to figure out\n        // segment timing. Mark that the segment contains no cues so we don't re-request\n        // an empty segment.\n        segment.empty = true;\n        return;\n      }\n\n      var timestampmap = segmentInfo.timestampmap;\n      var diff = timestampmap.MPEGTS / 90000 - timestampmap.LOCAL + mappingObj.mapping;\n      segmentInfo.cues.forEach(function (cue) {\n        // First convert cue time to TS time using the timestamp-map provided within the vtt\n        cue.startTime += diff;\n        cue.endTime += diff;\n      });\n\n      if (!playlist.syncInfo) {\n        var firstStart = segmentInfo.cues[0].startTime;\n        var lastStart = segmentInfo.cues[segmentInfo.cues.length - 1].startTime;\n        playlist.syncInfo = {\n          mediaSequence: playlist.mediaSequence + segmentInfo.mediaIndex,\n          time: Math.min(firstStart, lastStart - segment.duration)\n        };\n      }\n    }\n  }]);\n  return VTTSegmentLoader;\n}(SegmentLoader);\n/**\n * @file ad-cue-tags.js\n */\n\n/**\n * Searches for an ad cue that overlaps with the given mediaTime\n */\n\n\nvar findAdCue = function findAdCue(track, mediaTime) {\n  var cues = track.cues;\n\n  for (var i = 0; i < cues.length; i++) {\n    var cue = cues[i];\n\n    if (mediaTime >= cue.adStartTime && mediaTime <= cue.adEndTime) {\n      return cue;\n    }\n  }\n\n  return null;\n};\n\nvar updateAdCues = function updateAdCues(media, track) {\n  var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  if (!media.segments) {\n    return;\n  }\n\n  var mediaTime = offset;\n  var cue = void 0;\n\n  for (var i = 0; i < media.segments.length; i++) {\n    var segment = media.segments[i];\n\n    if (!cue) {\n      // Since the cues will span for at least the segment duration, adding a fudge\n      // factor of half segment duration will prevent duplicate cues from being\n      // created when timing info is not exact (e.g. cue start time initialized\n      // at 10.006677, but next call mediaTime is 10.003332 )\n      cue = findAdCue(track, mediaTime + segment.duration / 2);\n    }\n\n    if (cue) {\n      if ('cueIn' in segment) {\n        // Found a CUE-IN so end the cue\n        cue.endTime = mediaTime;\n        cue.adEndTime = mediaTime;\n        mediaTime += segment.duration;\n        cue = null;\n        continue;\n      }\n\n      if (mediaTime < cue.endTime) {\n        // Already processed this mediaTime for this cue\n        mediaTime += segment.duration;\n        continue;\n      } // otherwise extend cue until a CUE-IN is found\n\n\n      cue.endTime += segment.duration;\n    } else {\n      if ('cueOut' in segment) {\n        cue = new window$1.VTTCue(mediaTime, mediaTime + segment.duration, segment.cueOut);\n        cue.adStartTime = mediaTime; // Assumes tag format to be\n        // #EXT-X-CUE-OUT:30\n\n        cue.adEndTime = mediaTime + parseFloat(segment.cueOut);\n        track.addCue(cue);\n      }\n\n      if ('cueOutCont' in segment) {\n        // Entered into the middle of an ad cue\n        var adOffset = void 0;\n        var adTotal = void 0; // Assumes tag formate to be\n        // #EXT-X-CUE-OUT-CONT:10/30\n\n        var _segment$cueOutCont$s = segment.cueOutCont.split('/').map(parseFloat);\n\n        var _segment$cueOutCont$s2 = slicedToArray(_segment$cueOutCont$s, 2);\n\n        adOffset = _segment$cueOutCont$s2[0];\n        adTotal = _segment$cueOutCont$s2[1];\n        cue = new window$1.VTTCue(mediaTime, mediaTime + segment.duration, '');\n        cue.adStartTime = mediaTime - adOffset;\n        cue.adEndTime = cue.adStartTime + adTotal;\n        track.addCue(cue);\n      }\n    }\n\n    mediaTime += segment.duration;\n  }\n};\n/**\n * @file sync-controller.js\n */\n\n\nvar tsprobe = tsInspector.inspect;\nvar syncPointStrategies = [// Stategy \"VOD\": Handle the VOD-case where the sync-point is *always*\n//                the equivalence display-time 0 === segment-index 0\n{\n  name: 'VOD',\n  run: function run(syncController, playlist, duration$$1, currentTimeline, currentTime) {\n    if (duration$$1 !== Infinity) {\n      var syncPoint = {\n        time: 0,\n        segmentIndex: 0\n      };\n      return syncPoint;\n    }\n\n    return null;\n  }\n}, // Stategy \"ProgramDateTime\": We have a program-date-time tag in this playlist\n{\n  name: 'ProgramDateTime',\n  run: function run(syncController, playlist, duration$$1, currentTimeline, currentTime) {\n    if (!syncController.datetimeToDisplayTime) {\n      return null;\n    }\n\n    var segments = playlist.segments || [];\n    var syncPoint = null;\n    var lastDistance = null;\n    currentTime = currentTime || 0;\n\n    for (var i = 0; i < segments.length; i++) {\n      var segment = segments[i];\n\n      if (segment.dateTimeObject) {\n        var segmentTime = segment.dateTimeObject.getTime() / 1000;\n        var segmentStart = segmentTime + syncController.datetimeToDisplayTime;\n        var distance = Math.abs(currentTime - segmentStart); // Once the distance begins to increase, or if distance is 0, we have passed\n        // currentTime and can stop looking for better candidates\n\n        if (lastDistance !== null && (distance === 0 || lastDistance < distance)) {\n          break;\n        }\n\n        lastDistance = distance;\n        syncPoint = {\n          time: segmentStart,\n          segmentIndex: i\n        };\n      }\n    }\n\n    return syncPoint;\n  }\n}, // Stategy \"Segment\": We have a known time mapping for a timeline and a\n//                    segment in the current timeline with timing data\n{\n  name: 'Segment',\n  run: function run(syncController, playlist, duration$$1, currentTimeline, currentTime) {\n    var segments = playlist.segments || [];\n    var syncPoint = null;\n    var lastDistance = null;\n    currentTime = currentTime || 0;\n\n    for (var i = 0; i < segments.length; i++) {\n      var segment = segments[i];\n\n      if (segment.timeline === currentTimeline && typeof segment.start !== 'undefined') {\n        var distance = Math.abs(currentTime - segment.start); // Once the distance begins to increase, we have passed\n        // currentTime and can stop looking for better candidates\n\n        if (lastDistance !== null && lastDistance < distance) {\n          break;\n        }\n\n        if (!syncPoint || lastDistance === null || lastDistance >= distance) {\n          lastDistance = distance;\n          syncPoint = {\n            time: segment.start,\n            segmentIndex: i\n          };\n        }\n      }\n    }\n\n    return syncPoint;\n  }\n}, // Stategy \"Discontinuity\": We have a discontinuity with a known\n//                          display-time\n{\n  name: 'Discontinuity',\n  run: function run(syncController, playlist, duration$$1, currentTimeline, currentTime) {\n    var syncPoint = null;\n    currentTime = currentTime || 0;\n\n    if (playlist.discontinuityStarts && playlist.discontinuityStarts.length) {\n      var lastDistance = null;\n\n      for (var i = 0; i < playlist.discontinuityStarts.length; i++) {\n        var segmentIndex = playlist.discontinuityStarts[i];\n        var discontinuity = playlist.discontinuitySequence + i + 1;\n        var discontinuitySync = syncController.discontinuities[discontinuity];\n\n        if (discontinuitySync) {\n          var distance = Math.abs(currentTime - discontinuitySync.time); // Once the distance begins to increase, we have passed\n          // currentTime and can stop looking for better candidates\n\n          if (lastDistance !== null && lastDistance < distance) {\n            break;\n          }\n\n          if (!syncPoint || lastDistance === null || lastDistance >= distance) {\n            lastDistance = distance;\n            syncPoint = {\n              time: discontinuitySync.time,\n              segmentIndex: segmentIndex\n            };\n          }\n        }\n      }\n    }\n\n    return syncPoint;\n  }\n}, // Stategy \"Playlist\": We have a playlist with a known mapping of\n//                     segment index to display time\n{\n  name: 'Playlist',\n  run: function run(syncController, playlist, duration$$1, currentTimeline, currentTime) {\n    if (playlist.syncInfo) {\n      var syncPoint = {\n        time: playlist.syncInfo.time,\n        segmentIndex: playlist.syncInfo.mediaSequence - playlist.mediaSequence\n      };\n      return syncPoint;\n    }\n\n    return null;\n  }\n}];\n\nvar SyncController = function (_videojs$EventTarget) {\n  inherits(SyncController, _videojs$EventTarget);\n\n  function SyncController() {\n    classCallCheck(this, SyncController); // Segment Loader state variables...\n    // ...for synching across variants\n\n    var _this = possibleConstructorReturn(this, (SyncController.__proto__ || Object.getPrototypeOf(SyncController)).call(this));\n\n    _this.inspectCache_ = undefined; // ...for synching across variants\n\n    _this.timelines = [];\n    _this.discontinuities = [];\n    _this.datetimeToDisplayTime = null;\n    _this.logger_ = logger('SyncController');\n    return _this;\n  }\n  /**\n   * Find a sync-point for the playlist specified\n   *\n   * A sync-point is defined as a known mapping from display-time to\n   * a segment-index in the current playlist.\n   *\n   * @param {Playlist} playlist\n   *        The playlist that needs a sync-point\n   * @param {Number} duration\n   *        Duration of the MediaSource (Infinite if playing a live source)\n   * @param {Number} currentTimeline\n   *        The last timeline from which a segment was loaded\n   * @returns {Object}\n   *          A sync-point object\n   */\n\n\n  createClass(SyncController, [{\n    key: 'getSyncPoint',\n    value: function getSyncPoint(playlist, duration$$1, currentTimeline, currentTime) {\n      var syncPoints = this.runStrategies_(playlist, duration$$1, currentTimeline, currentTime);\n\n      if (!syncPoints.length) {\n        // Signal that we need to attempt to get a sync-point manually\n        // by fetching a segment in the playlist and constructing\n        // a sync-point from that information\n        return null;\n      } // Now find the sync-point that is closest to the currentTime because\n      // that should result in the most accurate guess about which segment\n      // to fetch\n\n\n      return this.selectSyncPoint_(syncPoints, {\n        key: 'time',\n        value: currentTime\n      });\n    }\n    /**\n     * Calculate the amount of time that has expired off the playlist during playback\n     *\n     * @param {Playlist} playlist\n     *        Playlist object to calculate expired from\n     * @param {Number} duration\n     *        Duration of the MediaSource (Infinity if playling a live source)\n     * @returns {Number|null}\n     *          The amount of time that has expired off the playlist during playback. Null\n     *          if no sync-points for the playlist can be found.\n     */\n\n  }, {\n    key: 'getExpiredTime',\n    value: function getExpiredTime(playlist, duration$$1) {\n      if (!playlist || !playlist.segments) {\n        return null;\n      }\n\n      var syncPoints = this.runStrategies_(playlist, duration$$1, playlist.discontinuitySequence, 0); // Without sync-points, there is not enough information to determine the expired time\n\n      if (!syncPoints.length) {\n        return null;\n      }\n\n      var syncPoint = this.selectSyncPoint_(syncPoints, {\n        key: 'segmentIndex',\n        value: 0\n      }); // If the sync-point is beyond the start of the playlist, we want to subtract the\n      // duration from index 0 to syncPoint.segmentIndex instead of adding.\n\n      if (syncPoint.segmentIndex > 0) {\n        syncPoint.time *= -1;\n      }\n\n      return Math.abs(syncPoint.time + sumDurations(playlist, syncPoint.segmentIndex, 0));\n    }\n    /**\n     * Runs each sync-point strategy and returns a list of sync-points returned by the\n     * strategies\n     *\n     * @private\n     * @param {Playlist} playlist\n     *        The playlist that needs a sync-point\n     * @param {Number} duration\n     *        Duration of the MediaSource (Infinity if playing a live source)\n     * @param {Number} currentTimeline\n     *        The last timeline from which a segment was loaded\n     * @returns {Array}\n     *          A list of sync-point objects\n     */\n\n  }, {\n    key: 'runStrategies_',\n    value: function runStrategies_(playlist, duration$$1, currentTimeline, currentTime) {\n      var syncPoints = []; // Try to find a sync-point in by utilizing various strategies...\n\n      for (var i = 0; i < syncPointStrategies.length; i++) {\n        var strategy = syncPointStrategies[i];\n        var syncPoint = strategy.run(this, playlist, duration$$1, currentTimeline, currentTime);\n\n        if (syncPoint) {\n          syncPoint.strategy = strategy.name;\n          syncPoints.push({\n            strategy: strategy.name,\n            syncPoint: syncPoint\n          });\n        }\n      }\n\n      return syncPoints;\n    }\n    /**\n     * Selects the sync-point nearest the specified target\n     *\n     * @private\n     * @param {Array} syncPoints\n     *        List of sync-points to select from\n     * @param {Object} target\n     *        Object specifying the property and value we are targeting\n     * @param {String} target.key\n     *        Specifies the property to target. Must be either 'time' or 'segmentIndex'\n     * @param {Number} target.value\n     *        The value to target for the specified key.\n     * @returns {Object}\n     *          The sync-point nearest the target\n     */\n\n  }, {\n    key: 'selectSyncPoint_',\n    value: function selectSyncPoint_(syncPoints, target) {\n      var bestSyncPoint = syncPoints[0].syncPoint;\n      var bestDistance = Math.abs(syncPoints[0].syncPoint[target.key] - target.value);\n      var bestStrategy = syncPoints[0].strategy;\n\n      for (var i = 1; i < syncPoints.length; i++) {\n        var newDistance = Math.abs(syncPoints[i].syncPoint[target.key] - target.value);\n\n        if (newDistance < bestDistance) {\n          bestDistance = newDistance;\n          bestSyncPoint = syncPoints[i].syncPoint;\n          bestStrategy = syncPoints[i].strategy;\n        }\n      }\n\n      this.logger_('syncPoint for [' + target.key + ': ' + target.value + '] chosen with strategy' + (' [' + bestStrategy + ']: [time:' + bestSyncPoint.time + ',') + (' segmentIndex:' + bestSyncPoint.segmentIndex + ']'));\n      return bestSyncPoint;\n    }\n    /**\n     * Save any meta-data present on the segments when segments leave\n     * the live window to the playlist to allow for synchronization at the\n     * playlist level later.\n     *\n     * @param {Playlist} oldPlaylist - The previous active playlist\n     * @param {Playlist} newPlaylist - The updated and most current playlist\n     */\n\n  }, {\n    key: 'saveExpiredSegmentInfo',\n    value: function saveExpiredSegmentInfo(oldPlaylist, newPlaylist) {\n      var mediaSequenceDiff = newPlaylist.mediaSequence - oldPlaylist.mediaSequence; // When a segment expires from the playlist and it has a start time\n      // save that information as a possible sync-point reference in future\n\n      for (var i = mediaSequenceDiff - 1; i >= 0; i--) {\n        var lastRemovedSegment = oldPlaylist.segments[i];\n\n        if (lastRemovedSegment && typeof lastRemovedSegment.start !== 'undefined') {\n          newPlaylist.syncInfo = {\n            mediaSequence: oldPlaylist.mediaSequence + i,\n            time: lastRemovedSegment.start\n          };\n          this.logger_('playlist refresh sync: [time:' + newPlaylist.syncInfo.time + ',' + (' mediaSequence: ' + newPlaylist.syncInfo.mediaSequence + ']'));\n          this.trigger('syncinfoupdate');\n          break;\n        }\n      }\n    }\n    /**\n     * Save the mapping from playlist's ProgramDateTime to display. This should\n     * only ever happen once at the start of playback.\n     *\n     * @param {Playlist} playlist - The currently active playlist\n     */\n\n  }, {\n    key: 'setDateTimeMapping',\n    value: function setDateTimeMapping(playlist) {\n      if (!this.datetimeToDisplayTime && playlist.segments && playlist.segments.length && playlist.segments[0].dateTimeObject) {\n        var playlistTimestamp = playlist.segments[0].dateTimeObject.getTime() / 1000;\n        this.datetimeToDisplayTime = -playlistTimestamp;\n      }\n    }\n    /**\n     * Reset the state of the inspection cache when we do a rendition\n     * switch\n     */\n\n  }, {\n    key: 'reset',\n    value: function reset() {\n      this.inspectCache_ = undefined;\n    }\n    /**\n     * Probe or inspect a fmp4 or an mpeg2-ts segment to determine the start\n     * and end of the segment in it's internal \"media time\". Used to generate\n     * mappings from that internal \"media time\" to the display time that is\n     * shown on the player.\n     *\n     * @param {SegmentInfo} segmentInfo - The current active request information\n     */\n\n  }, {\n    key: 'probeSegmentInfo',\n    value: function probeSegmentInfo(segmentInfo) {\n      var segment = segmentInfo.segment;\n      var playlist = segmentInfo.playlist;\n      var timingInfo = void 0;\n\n      if (segment.map) {\n        timingInfo = this.probeMp4Segment_(segmentInfo);\n      } else {\n        timingInfo = this.probeTsSegment_(segmentInfo);\n      }\n\n      if (timingInfo) {\n        if (this.calculateSegmentTimeMapping_(segmentInfo, timingInfo)) {\n          this.saveDiscontinuitySyncInfo_(segmentInfo); // If the playlist does not have sync information yet, record that information\n          // now with segment timing information\n\n          if (!playlist.syncInfo) {\n            playlist.syncInfo = {\n              mediaSequence: playlist.mediaSequence + segmentInfo.mediaIndex,\n              time: segment.start\n            };\n          }\n        }\n      }\n\n      return timingInfo;\n    }\n    /**\n     * Probe an fmp4 or an mpeg2-ts segment to determine the start of the segment\n     * in it's internal \"media time\".\n     *\n     * @private\n     * @param {SegmentInfo} segmentInfo - The current active request information\n     * @return {object} The start and end time of the current segment in \"media time\"\n     */\n\n  }, {\n    key: 'probeMp4Segment_',\n    value: function probeMp4Segment_(segmentInfo) {\n      var segment = segmentInfo.segment;\n      var timescales = mp4probe.timescale(segment.map.bytes);\n      var startTime = mp4probe.startTime(timescales, segmentInfo.bytes);\n\n      if (segmentInfo.timestampOffset !== null) {\n        segmentInfo.timestampOffset -= startTime;\n      }\n\n      return {\n        start: startTime,\n        end: startTime + segment.duration\n      };\n    }\n    /**\n     * Probe an mpeg2-ts segment to determine the start and end of the segment\n     * in it's internal \"media time\".\n     *\n     * @private\n     * @param {SegmentInfo} segmentInfo - The current active request information\n     * @return {object} The start and end time of the current segment in \"media time\"\n     */\n\n  }, {\n    key: 'probeTsSegment_',\n    value: function probeTsSegment_(segmentInfo) {\n      var timeInfo = tsprobe(segmentInfo.bytes, this.inspectCache_);\n      var segmentStartTime = void 0;\n      var segmentEndTime = void 0;\n\n      if (!timeInfo) {\n        return null;\n      }\n\n      if (timeInfo.video && timeInfo.video.length === 2) {\n        this.inspectCache_ = timeInfo.video[1].dts;\n        segmentStartTime = timeInfo.video[0].dtsTime;\n        segmentEndTime = timeInfo.video[1].dtsTime;\n      } else if (timeInfo.audio && timeInfo.audio.length === 2) {\n        this.inspectCache_ = timeInfo.audio[1].dts;\n        segmentStartTime = timeInfo.audio[0].dtsTime;\n        segmentEndTime = timeInfo.audio[1].dtsTime;\n      }\n\n      var probedInfo = {\n        start: segmentStartTime,\n        end: segmentEndTime,\n        containsVideo: timeInfo.video && timeInfo.video.length === 2,\n        containsAudio: timeInfo.audio && timeInfo.audio.length === 2\n      };\n      return probedInfo;\n    }\n  }, {\n    key: 'timestampOffsetForTimeline',\n    value: function timestampOffsetForTimeline(timeline) {\n      if (typeof this.timelines[timeline] === 'undefined') {\n        return null;\n      }\n\n      return this.timelines[timeline].time;\n    }\n  }, {\n    key: 'mappingForTimeline',\n    value: function mappingForTimeline(timeline) {\n      if (typeof this.timelines[timeline] === 'undefined') {\n        return null;\n      }\n\n      return this.timelines[timeline].mapping;\n    }\n    /**\n     * Use the \"media time\" for a segment to generate a mapping to \"display time\" and\n     * save that display time to the segment.\n     *\n     * @private\n     * @param {SegmentInfo} segmentInfo\n     *        The current active request information\n     * @param {object} timingInfo\n     *        The start and end time of the current segment in \"media time\"\n     * @returns {Boolean}\n     *          Returns false if segment time mapping could not be calculated\n     */\n\n  }, {\n    key: 'calculateSegmentTimeMapping_',\n    value: function calculateSegmentTimeMapping_(segmentInfo, timingInfo) {\n      var segment = segmentInfo.segment;\n      var mappingObj = this.timelines[segmentInfo.timeline];\n\n      if (segmentInfo.timestampOffset !== null) {\n        mappingObj = {\n          time: segmentInfo.startOfSegment,\n          mapping: segmentInfo.startOfSegment - timingInfo.start\n        };\n        this.timelines[segmentInfo.timeline] = mappingObj;\n        this.trigger('timestampoffset');\n        this.logger_('time mapping for timeline ' + segmentInfo.timeline + ': ' + ('[time: ' + mappingObj.time + '] [mapping: ' + mappingObj.mapping + ']'));\n        segment.start = segmentInfo.startOfSegment;\n        segment.end = timingInfo.end + mappingObj.mapping;\n      } else if (mappingObj) {\n        segment.start = timingInfo.start + mappingObj.mapping;\n        segment.end = timingInfo.end + mappingObj.mapping;\n      } else {\n        return false;\n      }\n\n      return true;\n    }\n    /**\n     * Each time we have discontinuity in the playlist, attempt to calculate the location\n     * in display of the start of the discontinuity and save that. We also save an accuracy\n     * value so that we save values with the most accuracy (closest to 0.)\n     *\n     * @private\n     * @param {SegmentInfo} segmentInfo - The current active request information\n     */\n\n  }, {\n    key: 'saveDiscontinuitySyncInfo_',\n    value: function saveDiscontinuitySyncInfo_(segmentInfo) {\n      var playlist = segmentInfo.playlist;\n      var segment = segmentInfo.segment; // If the current segment is a discontinuity then we know exactly where\n      // the start of the range and it's accuracy is 0 (greater accuracy values\n      // mean more approximation)\n\n      if (segment.discontinuity) {\n        this.discontinuities[segment.timeline] = {\n          time: segment.start,\n          accuracy: 0\n        };\n      } else if (playlist.discontinuityStarts && playlist.discontinuityStarts.length) {\n        // Search for future discontinuities that we can provide better timing\n        // information for and save that information for sync purposes\n        for (var i = 0; i < playlist.discontinuityStarts.length; i++) {\n          var segmentIndex = playlist.discontinuityStarts[i];\n          var discontinuity = playlist.discontinuitySequence + i + 1;\n          var mediaIndexDiff = segmentIndex - segmentInfo.mediaIndex;\n          var accuracy = Math.abs(mediaIndexDiff);\n\n          if (!this.discontinuities[discontinuity] || this.discontinuities[discontinuity].accuracy > accuracy) {\n            var time = void 0;\n\n            if (mediaIndexDiff < 0) {\n              time = segment.start - sumDurations(playlist, segmentInfo.mediaIndex, segmentIndex);\n            } else {\n              time = segment.end + sumDurations(playlist, segmentInfo.mediaIndex + 1, segmentIndex);\n            }\n\n            this.discontinuities[discontinuity] = {\n              time: time,\n              accuracy: accuracy\n            };\n          }\n        }\n      }\n    }\n  }]);\n  return SyncController;\n}(videojs$1.EventTarget);\n\nvar Decrypter$1 = new shimWorker(\"./decrypter-worker.worker.js\", function (window, document$$1) {\n  var self = this;\n\n  var decrypterWorker = function () {\n    /*\n     * pkcs7.pad\n     * https://github.com/brightcove/pkcs7\n     *\n     * Copyright (c) 2014 Brightcove\n     * Licensed under the apache2 license.\n     */\n\n    /**\n     * Returns the subarray of a Uint8Array without PKCS#7 padding.\n     * @param padded {Uint8Array} unencrypted bytes that have been padded\n     * @return {Uint8Array} the unpadded bytes\n     * @see http://tools.ietf.org/html/rfc5652\n     */\n    function unpad(padded) {\n      return padded.subarray(0, padded.byteLength - padded[padded.byteLength - 1]);\n    }\n\n    var classCallCheck = function classCallCheck(instance, Constructor) {\n      if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n      }\n    };\n\n    var createClass = function () {\n      function defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n          var descriptor = props[i];\n          descriptor.enumerable = descriptor.enumerable || false;\n          descriptor.configurable = true;\n          if (\"value\" in descriptor) descriptor.writable = true;\n          Object.defineProperty(target, descriptor.key, descriptor);\n        }\n      }\n\n      return function (Constructor, protoProps, staticProps) {\n        if (protoProps) defineProperties(Constructor.prototype, protoProps);\n        if (staticProps) defineProperties(Constructor, staticProps);\n        return Constructor;\n      };\n    }();\n\n    var inherits = function inherits(subClass, superClass) {\n      if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n      }\n\n      subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n          value: subClass,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      });\n      if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n    };\n\n    var possibleConstructorReturn = function possibleConstructorReturn(self, call) {\n      if (!self) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n      }\n\n      return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n    };\n    /**\n     * @file aes.js\n     *\n     * This file contains an adaptation of the AES decryption algorithm\n     * from the Standford Javascript Cryptography Library. That work is\n     * covered by the following copyright and permissions notice:\n     *\n     * Copyright 2009-2010 Emily Stark, Mike Hamburg, Dan Boneh.\n     * All rights reserved.\n     *\n     * Redistribution and use in source and binary forms, with or without\n     * modification, are permitted provided that the following conditions are\n     * met:\n     *\n     * 1. Redistributions of source code must retain the above copyright\n     *    notice, this list of conditions and the following disclaimer.\n     *\n     * 2. Redistributions in binary form must reproduce the above\n     *    copyright notice, this list of conditions and the following\n     *    disclaimer in the documentation and/or other materials provided\n     *    with the distribution.\n     *\n     * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR\n     * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n     * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n     * DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> OR CONTRIBUTORS BE\n     * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n     * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR\n     * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n     * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\n     * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN\n     * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n     *\n     * The views and conclusions contained in the software and documentation\n     * are those of the authors and should not be interpreted as representing\n     * official policies, either expressed or implied, of the authors.\n     */\n\n    /**\n     * Expand the S-box tables.\n     *\n     * @private\n     */\n\n\n    var precompute = function precompute() {\n      var tables = [[[], [], [], [], []], [[], [], [], [], []]];\n      var encTable = tables[0];\n      var decTable = tables[1];\n      var sbox = encTable[4];\n      var sboxInv = decTable[4];\n      var i = void 0;\n      var x = void 0;\n      var xInv = void 0;\n      var d = [];\n      var th = [];\n      var x2 = void 0;\n      var x4 = void 0;\n      var x8 = void 0;\n      var s = void 0;\n      var tEnc = void 0;\n      var tDec = void 0; // Compute double and third tables\n\n      for (i = 0; i < 256; i++) {\n        th[(d[i] = i << 1 ^ (i >> 7) * 283) ^ i] = i;\n      }\n\n      for (x = xInv = 0; !sbox[x]; x ^= x2 || 1, xInv = th[xInv] || 1) {\n        // Compute sbox\n        s = xInv ^ xInv << 1 ^ xInv << 2 ^ xInv << 3 ^ xInv << 4;\n        s = s >> 8 ^ s & 255 ^ 99;\n        sbox[x] = s;\n        sboxInv[s] = x; // Compute MixColumns\n\n        x8 = d[x4 = d[x2 = d[x]]];\n        tDec = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;\n        tEnc = d[s] * 0x101 ^ s * 0x1010100;\n\n        for (i = 0; i < 4; i++) {\n          encTable[i][x] = tEnc = tEnc << 24 ^ tEnc >>> 8;\n          decTable[i][s] = tDec = tDec << 24 ^ tDec >>> 8;\n        }\n      } // Compactify. Considerable speedup on Firefox.\n\n\n      for (i = 0; i < 5; i++) {\n        encTable[i] = encTable[i].slice(0);\n        decTable[i] = decTable[i].slice(0);\n      }\n\n      return tables;\n    };\n\n    var aesTables = null;\n    /**\n     * Schedule out an AES key for both encryption and decryption. This\n     * is a low-level class. Use a cipher mode to do bulk encryption.\n     *\n     * @class AES\n     * @param key {Array} The key as an array of 4, 6 or 8 words.\n     */\n\n    var AES = function () {\n      function AES(key) {\n        classCallCheck(this, AES);\n        /**\n         * The expanded S-box and inverse S-box tables. These will be computed\n         * on the client so that we don't have to send them down the wire.\n         *\n         * There are two tables, _tables[0] is for encryption and\n         * _tables[1] is for decryption.\n         *\n         * The first 4 sub-tables are the expanded S-box with MixColumns. The\n         * last (_tables[01][4]) is the S-box itself.\n         *\n         * @private\n         */\n        // if we have yet to precompute the S-box tables\n        // do so now\n\n        if (!aesTables) {\n          aesTables = precompute();\n        } // then make a copy of that object for use\n\n\n        this._tables = [[aesTables[0][0].slice(), aesTables[0][1].slice(), aesTables[0][2].slice(), aesTables[0][3].slice(), aesTables[0][4].slice()], [aesTables[1][0].slice(), aesTables[1][1].slice(), aesTables[1][2].slice(), aesTables[1][3].slice(), aesTables[1][4].slice()]];\n        var i = void 0;\n        var j = void 0;\n        var tmp = void 0;\n        var encKey = void 0;\n        var decKey = void 0;\n        var sbox = this._tables[0][4];\n        var decTable = this._tables[1];\n        var keyLen = key.length;\n        var rcon = 1;\n\n        if (keyLen !== 4 && keyLen !== 6 && keyLen !== 8) {\n          throw new Error('Invalid aes key size');\n        }\n\n        encKey = key.slice(0);\n        decKey = [];\n        this._key = [encKey, decKey]; // schedule encryption keys\n\n        for (i = keyLen; i < 4 * keyLen + 28; i++) {\n          tmp = encKey[i - 1]; // apply sbox\n\n          if (i % keyLen === 0 || keyLen === 8 && i % keyLen === 4) {\n            tmp = sbox[tmp >>> 24] << 24 ^ sbox[tmp >> 16 & 255] << 16 ^ sbox[tmp >> 8 & 255] << 8 ^ sbox[tmp & 255]; // shift rows and add rcon\n\n            if (i % keyLen === 0) {\n              tmp = tmp << 8 ^ tmp >>> 24 ^ rcon << 24;\n              rcon = rcon << 1 ^ (rcon >> 7) * 283;\n            }\n          }\n\n          encKey[i] = encKey[i - keyLen] ^ tmp;\n        } // schedule decryption keys\n\n\n        for (j = 0; i; j++, i--) {\n          tmp = encKey[j & 3 ? i : i - 4];\n\n          if (i <= 4 || j < 4) {\n            decKey[j] = tmp;\n          } else {\n            decKey[j] = decTable[0][sbox[tmp >>> 24]] ^ decTable[1][sbox[tmp >> 16 & 255]] ^ decTable[2][sbox[tmp >> 8 & 255]] ^ decTable[3][sbox[tmp & 255]];\n          }\n        }\n      }\n      /**\n       * Decrypt 16 bytes, specified as four 32-bit words.\n       *\n       * @param {Number} encrypted0 the first word to decrypt\n       * @param {Number} encrypted1 the second word to decrypt\n       * @param {Number} encrypted2 the third word to decrypt\n       * @param {Number} encrypted3 the fourth word to decrypt\n       * @param {Int32Array} out the array to write the decrypted words\n       * into\n       * @param {Number} offset the offset into the output array to start\n       * writing results\n       * @return {Array} The plaintext.\n       */\n\n\n      AES.prototype.decrypt = function decrypt$$1(encrypted0, encrypted1, encrypted2, encrypted3, out, offset) {\n        var key = this._key[1]; // state variables a,b,c,d are loaded with pre-whitened data\n\n        var a = encrypted0 ^ key[0];\n        var b = encrypted3 ^ key[1];\n        var c = encrypted2 ^ key[2];\n        var d = encrypted1 ^ key[3];\n        var a2 = void 0;\n        var b2 = void 0;\n        var c2 = void 0; // key.length === 2 ?\n\n        var nInnerRounds = key.length / 4 - 2;\n        var i = void 0;\n        var kIndex = 4;\n        var table = this._tables[1]; // load up the tables\n\n        var table0 = table[0];\n        var table1 = table[1];\n        var table2 = table[2];\n        var table3 = table[3];\n        var sbox = table[4]; // Inner rounds. Cribbed from OpenSSL.\n\n        for (i = 0; i < nInnerRounds; i++) {\n          a2 = table0[a >>> 24] ^ table1[b >> 16 & 255] ^ table2[c >> 8 & 255] ^ table3[d & 255] ^ key[kIndex];\n          b2 = table0[b >>> 24] ^ table1[c >> 16 & 255] ^ table2[d >> 8 & 255] ^ table3[a & 255] ^ key[kIndex + 1];\n          c2 = table0[c >>> 24] ^ table1[d >> 16 & 255] ^ table2[a >> 8 & 255] ^ table3[b & 255] ^ key[kIndex + 2];\n          d = table0[d >>> 24] ^ table1[a >> 16 & 255] ^ table2[b >> 8 & 255] ^ table3[c & 255] ^ key[kIndex + 3];\n          kIndex += 4;\n          a = a2;\n          b = b2;\n          c = c2;\n        } // Last round.\n\n\n        for (i = 0; i < 4; i++) {\n          out[(3 & -i) + offset] = sbox[a >>> 24] << 24 ^ sbox[b >> 16 & 255] << 16 ^ sbox[c >> 8 & 255] << 8 ^ sbox[d & 255] ^ key[kIndex++];\n          a2 = a;\n          a = b;\n          b = c;\n          c = d;\n          d = a2;\n        }\n      };\n\n      return AES;\n    }();\n    /**\n     * @file stream.js\n     */\n\n    /**\n     * A lightweight readable stream implemention that handles event dispatching.\n     *\n     * @class Stream\n     */\n\n\n    var Stream = function () {\n      function Stream() {\n        classCallCheck(this, Stream);\n        this.listeners = {};\n      }\n      /**\n       * Add a listener for a specified event type.\n       *\n       * @param {String} type the event name\n       * @param {Function} listener the callback to be invoked when an event of\n       * the specified type occurs\n       */\n\n\n      Stream.prototype.on = function on(type, listener) {\n        if (!this.listeners[type]) {\n          this.listeners[type] = [];\n        }\n\n        this.listeners[type].push(listener);\n      };\n      /**\n       * Remove a listener for a specified event type.\n       *\n       * @param {String} type the event name\n       * @param {Function} listener  a function previously registered for this\n       * type of event through `on`\n       * @return {Boolean} if we could turn it off or not\n       */\n\n\n      Stream.prototype.off = function off(type, listener) {\n        if (!this.listeners[type]) {\n          return false;\n        }\n\n        var index = this.listeners[type].indexOf(listener);\n        this.listeners[type].splice(index, 1);\n        return index > -1;\n      };\n      /**\n       * Trigger an event of the specified type on this stream. Any additional\n       * arguments to this function are passed as parameters to event listeners.\n       *\n       * @param {String} type the event name\n       */\n\n\n      Stream.prototype.trigger = function trigger(type) {\n        var callbacks = this.listeners[type];\n\n        if (!callbacks) {\n          return;\n        } // Slicing the arguments on every invocation of this method\n        // can add a significant amount of overhead. Avoid the\n        // intermediate object creation for the common case of a\n        // single callback argument\n\n\n        if (arguments.length === 2) {\n          var length = callbacks.length;\n\n          for (var i = 0; i < length; ++i) {\n            callbacks[i].call(this, arguments[1]);\n          }\n        } else {\n          var args = Array.prototype.slice.call(arguments, 1);\n          var _length = callbacks.length;\n\n          for (var _i = 0; _i < _length; ++_i) {\n            callbacks[_i].apply(this, args);\n          }\n        }\n      };\n      /**\n       * Destroys the stream and cleans up.\n       */\n\n\n      Stream.prototype.dispose = function dispose() {\n        this.listeners = {};\n      };\n      /**\n       * Forwards all `data` events on this stream to the destination stream. The\n       * destination stream should provide a method `push` to receive the data\n       * events as they arrive.\n       *\n       * @param {Stream} destination the stream that will receive all `data` events\n       * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\n       */\n\n\n      Stream.prototype.pipe = function pipe(destination) {\n        this.on('data', function (data) {\n          destination.push(data);\n        });\n      };\n\n      return Stream;\n    }();\n    /**\n     * @file async-stream.js\n     */\n\n    /**\n     * A wrapper around the Stream class to use setTiemout\n     * and run stream \"jobs\" Asynchronously\n     *\n     * @class AsyncStream\n     * @extends Stream\n     */\n\n\n    var AsyncStream$$1 = function (_Stream) {\n      inherits(AsyncStream$$1, _Stream);\n\n      function AsyncStream$$1() {\n        classCallCheck(this, AsyncStream$$1);\n\n        var _this = possibleConstructorReturn(this, _Stream.call(this, Stream));\n\n        _this.jobs = [];\n        _this.delay = 1;\n        _this.timeout_ = null;\n        return _this;\n      }\n      /**\n       * process an async job\n       *\n       * @private\n       */\n\n\n      AsyncStream$$1.prototype.processJob_ = function processJob_() {\n        this.jobs.shift()();\n\n        if (this.jobs.length) {\n          this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);\n        } else {\n          this.timeout_ = null;\n        }\n      };\n      /**\n       * push a job into the stream\n       *\n       * @param {Function} job the job to push into the stream\n       */\n\n\n      AsyncStream$$1.prototype.push = function push(job) {\n        this.jobs.push(job);\n\n        if (!this.timeout_) {\n          this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);\n        }\n      };\n\n      return AsyncStream$$1;\n    }(Stream);\n    /**\n     * @file decrypter.js\n     *\n     * An asynchronous implementation of AES-128 CBC decryption with\n     * PKCS#7 padding.\n     */\n\n    /**\n     * Convert network-order (big-endian) bytes into their little-endian\n     * representation.\n     */\n\n\n    var ntoh = function ntoh(word) {\n      return word << 24 | (word & 0xff00) << 8 | (word & 0xff0000) >> 8 | word >>> 24;\n    };\n    /**\n     * Decrypt bytes using AES-128 with CBC and PKCS#7 padding.\n     *\n     * @param {Uint8Array} encrypted the encrypted bytes\n     * @param {Uint32Array} key the bytes of the decryption key\n     * @param {Uint32Array} initVector the initialization vector (IV) to\n     * use for the first round of CBC.\n     * @return {Uint8Array} the decrypted bytes\n     *\n     * @see http://en.wikipedia.org/wiki/Advanced_Encryption_Standard\n     * @see http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Block_Chaining_.28CBC.29\n     * @see https://tools.ietf.org/html/rfc2315\n     */\n\n\n    var decrypt$$1 = function decrypt$$1(encrypted, key, initVector) {\n      // word-level access to the encrypted bytes\n      var encrypted32 = new Int32Array(encrypted.buffer, encrypted.byteOffset, encrypted.byteLength >> 2);\n      var decipher = new AES(Array.prototype.slice.call(key)); // byte and word-level access for the decrypted output\n\n      var decrypted = new Uint8Array(encrypted.byteLength);\n      var decrypted32 = new Int32Array(decrypted.buffer); // temporary variables for working with the IV, encrypted, and\n      // decrypted data\n\n      var init0 = void 0;\n      var init1 = void 0;\n      var init2 = void 0;\n      var init3 = void 0;\n      var encrypted0 = void 0;\n      var encrypted1 = void 0;\n      var encrypted2 = void 0;\n      var encrypted3 = void 0; // iteration variable\n\n      var wordIx = void 0; // pull out the words of the IV to ensure we don't modify the\n      // passed-in reference and easier access\n\n      init0 = initVector[0];\n      init1 = initVector[1];\n      init2 = initVector[2];\n      init3 = initVector[3]; // decrypt four word sequences, applying cipher-block chaining (CBC)\n      // to each decrypted block\n\n      for (wordIx = 0; wordIx < encrypted32.length; wordIx += 4) {\n        // convert big-endian (network order) words into little-endian\n        // (javascript order)\n        encrypted0 = ntoh(encrypted32[wordIx]);\n        encrypted1 = ntoh(encrypted32[wordIx + 1]);\n        encrypted2 = ntoh(encrypted32[wordIx + 2]);\n        encrypted3 = ntoh(encrypted32[wordIx + 3]); // decrypt the block\n\n        decipher.decrypt(encrypted0, encrypted1, encrypted2, encrypted3, decrypted32, wordIx); // XOR with the IV, and restore network byte-order to obtain the\n        // plaintext\n\n        decrypted32[wordIx] = ntoh(decrypted32[wordIx] ^ init0);\n        decrypted32[wordIx + 1] = ntoh(decrypted32[wordIx + 1] ^ init1);\n        decrypted32[wordIx + 2] = ntoh(decrypted32[wordIx + 2] ^ init2);\n        decrypted32[wordIx + 3] = ntoh(decrypted32[wordIx + 3] ^ init3); // setup the IV for the next round\n\n        init0 = encrypted0;\n        init1 = encrypted1;\n        init2 = encrypted2;\n        init3 = encrypted3;\n      }\n\n      return decrypted;\n    };\n    /**\n     * The `Decrypter` class that manages decryption of AES\n     * data through `AsyncStream` objects and the `decrypt`\n     * function\n     *\n     * @param {Uint8Array} encrypted the encrypted bytes\n     * @param {Uint32Array} key the bytes of the decryption key\n     * @param {Uint32Array} initVector the initialization vector (IV) to\n     * @param {Function} done the function to run when done\n     * @class Decrypter\n     */\n\n\n    var Decrypter$$1 = function () {\n      function Decrypter$$1(encrypted, key, initVector, done) {\n        classCallCheck(this, Decrypter$$1);\n        var step = Decrypter$$1.STEP;\n        var encrypted32 = new Int32Array(encrypted.buffer);\n        var decrypted = new Uint8Array(encrypted.byteLength);\n        var i = 0;\n        this.asyncStream_ = new AsyncStream$$1(); // split up the encryption job and do the individual chunks asynchronously\n\n        this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));\n\n        for (i = step; i < encrypted32.length; i += step) {\n          initVector = new Uint32Array([ntoh(encrypted32[i - 4]), ntoh(encrypted32[i - 3]), ntoh(encrypted32[i - 2]), ntoh(encrypted32[i - 1])]);\n          this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));\n        } // invoke the done() callback when everything is finished\n\n\n        this.asyncStream_.push(function () {\n          // remove pkcs#7 padding from the decrypted bytes\n          done(null, unpad(decrypted));\n        });\n      }\n      /**\n       * a getter for step the maximum number of bytes to process at one time\n       *\n       * @return {Number} the value of step 32000\n       */\n\n      /**\n       * @private\n       */\n\n\n      Decrypter$$1.prototype.decryptChunk_ = function decryptChunk_(encrypted, key, initVector, decrypted) {\n        return function () {\n          var bytes = decrypt$$1(encrypted, key, initVector);\n          decrypted.set(bytes, encrypted.byteOffset);\n        };\n      };\n\n      createClass(Decrypter$$1, null, [{\n        key: 'STEP',\n        get: function get$$1() {\n          // 4 * 8000;\n          return 32000;\n        }\n      }]);\n      return Decrypter$$1;\n    }();\n    /**\n     * @file bin-utils.js\n     */\n\n    /**\n     * Creates an object for sending to a web worker modifying properties that are TypedArrays\n     * into a new object with seperated properties for the buffer, byteOffset, and byteLength.\n     *\n     * @param {Object} message\n     *        Object of properties and values to send to the web worker\n     * @return {Object}\n     *         Modified message with TypedArray values expanded\n     * @function createTransferableMessage\n     */\n\n\n    var createTransferableMessage = function createTransferableMessage(message) {\n      var transferable = {};\n      Object.keys(message).forEach(function (key) {\n        var value = message[key];\n\n        if (ArrayBuffer.isView(value)) {\n          transferable[key] = {\n            bytes: value.buffer,\n            byteOffset: value.byteOffset,\n            byteLength: value.byteLength\n          };\n        } else {\n          transferable[key] = value;\n        }\n      });\n      return transferable;\n    };\n    /**\n     * Our web worker interface so that things can talk to aes-decrypter\n     * that will be running in a web worker. the scope is passed to this by\n     * webworkify.\n     *\n     * @param {Object} self\n     *        the scope for the web worker\n     */\n\n\n    var DecrypterWorker = function DecrypterWorker(self) {\n      self.onmessage = function (event) {\n        var data = event.data;\n        var encrypted = new Uint8Array(data.encrypted.bytes, data.encrypted.byteOffset, data.encrypted.byteLength);\n        var key = new Uint32Array(data.key.bytes, data.key.byteOffset, data.key.byteLength / 4);\n        var iv = new Uint32Array(data.iv.bytes, data.iv.byteOffset, data.iv.byteLength / 4);\n        /* eslint-disable no-new, handle-callback-err */\n\n        new Decrypter$$1(encrypted, key, iv, function (err, bytes) {\n          self.postMessage(createTransferableMessage({\n            source: data.source,\n            decrypted: bytes\n          }), [bytes.buffer]);\n        });\n        /* eslint-enable */\n      };\n    };\n\n    var decrypterWorker = new DecrypterWorker(self);\n    return decrypterWorker;\n  }();\n});\n/**\n * Convert the properties of an HLS track into an audioTrackKind.\n *\n * @private\n */\n\nvar audioTrackKind_ = function audioTrackKind_(properties) {\n  var kind = properties[\"default\"] ? 'main' : 'alternative';\n\n  if (properties.characteristics && properties.characteristics.indexOf('public.accessibility.describes-video') >= 0) {\n    kind = 'main-desc';\n  }\n\n  return kind;\n};\n/**\n * Pause provided segment loader and playlist loader if active\n *\n * @param {SegmentLoader} segmentLoader\n *        SegmentLoader to pause\n * @param {Object} mediaType\n *        Active media type\n * @function stopLoaders\n */\n\n\nvar stopLoaders = function stopLoaders(segmentLoader, mediaType) {\n  segmentLoader.abort();\n  segmentLoader.pause();\n\n  if (mediaType && mediaType.activePlaylistLoader) {\n    mediaType.activePlaylistLoader.pause();\n    mediaType.activePlaylistLoader = null;\n  }\n};\n/**\n * Start loading provided segment loader and playlist loader\n *\n * @param {PlaylistLoader} playlistLoader\n *        PlaylistLoader to start loading\n * @param {Object} mediaType\n *        Active media type\n * @function startLoaders\n */\n\n\nvar startLoaders = function startLoaders(playlistLoader, mediaType) {\n  // Segment loader will be started after `loadedmetadata` or `loadedplaylist` from the\n  // playlist loader\n  mediaType.activePlaylistLoader = playlistLoader;\n  playlistLoader.load();\n};\n/**\n * Returns a function to be called when the media group changes. It performs a\n * non-destructive (preserve the buffer) resync of the SegmentLoader. This is because a\n * change of group is merely a rendition switch of the same content at another encoding,\n * rather than a change of content, such as switching audio from English to Spanish.\n *\n * @param {String} type\n *        MediaGroup type\n * @param {Object} settings\n *        Object containing required information for media groups\n * @return {Function}\n *         Handler for a non-destructive resync of SegmentLoader when the active media\n *         group changes.\n * @function onGroupChanged\n */\n\n\nvar onGroupChanged = function onGroupChanged(type, settings) {\n  return function () {\n    var _settings$segmentLoad = settings.segmentLoaders,\n        segmentLoader = _settings$segmentLoad[type],\n        mainSegmentLoader = _settings$segmentLoad.main,\n        mediaType = settings.mediaTypes[type];\n    var activeTrack = mediaType.activeTrack();\n    var activeGroup = mediaType.activeGroup(activeTrack);\n    var previousActiveLoader = mediaType.activePlaylistLoader;\n    stopLoaders(segmentLoader, mediaType);\n\n    if (!activeGroup) {\n      // there is no group active\n      return;\n    }\n\n    if (!activeGroup.playlistLoader) {\n      if (previousActiveLoader) {\n        // The previous group had a playlist loader but the new active group does not\n        // this means we are switching from demuxed to muxed audio. In this case we want to\n        // do a destructive reset of the main segment loader and not restart the audio\n        // loaders.\n        mainSegmentLoader.resetEverything();\n      }\n\n      return;\n    } // Non-destructive resync\n\n\n    segmentLoader.resyncLoader();\n    startLoaders(activeGroup.playlistLoader, mediaType);\n  };\n};\n/**\n * Returns a function to be called when the media track changes. It performs a\n * destructive reset of the SegmentLoader to ensure we start loading as close to\n * currentTime as possible.\n *\n * @param {String} type\n *        MediaGroup type\n * @param {Object} settings\n *        Object containing required information for media groups\n * @return {Function}\n *         Handler for a destructive reset of SegmentLoader when the active media\n *         track changes.\n * @function onTrackChanged\n */\n\n\nvar onTrackChanged = function onTrackChanged(type, settings) {\n  return function () {\n    var _settings$segmentLoad2 = settings.segmentLoaders,\n        segmentLoader = _settings$segmentLoad2[type],\n        mainSegmentLoader = _settings$segmentLoad2.main,\n        mediaType = settings.mediaTypes[type];\n    var activeTrack = mediaType.activeTrack();\n    var activeGroup = mediaType.activeGroup(activeTrack);\n    var previousActiveLoader = mediaType.activePlaylistLoader;\n    stopLoaders(segmentLoader, mediaType);\n\n    if (!activeGroup) {\n      // there is no group active so we do not want to restart loaders\n      return;\n    }\n\n    if (!activeGroup.playlistLoader) {\n      // when switching from demuxed audio/video to muxed audio/video (noted by no playlist\n      // loader for the audio group), we want to do a destructive reset of the main segment\n      // loader and not restart the audio loaders\n      mainSegmentLoader.resetEverything();\n      return;\n    }\n\n    if (previousActiveLoader === activeGroup.playlistLoader) {\n      // Nothing has actually changed. This can happen because track change events can fire\n      // multiple times for a \"single\" change. One for enabling the new active track, and\n      // one for disabling the track that was active\n      startLoaders(activeGroup.playlistLoader, mediaType);\n      return;\n    }\n\n    if (segmentLoader.track) {\n      // For WebVTT, set the new text track in the segmentloader\n      segmentLoader.track(activeTrack);\n    } // destructive reset\n\n\n    segmentLoader.resetEverything();\n    startLoaders(activeGroup.playlistLoader, mediaType);\n  };\n};\n\nvar onError = {\n  /**\n   * Returns a function to be called when a SegmentLoader or PlaylistLoader encounters\n   * an error.\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @return {Function}\n   *         Error handler. Logs warning (or error if the playlist is blacklisted) to\n   *         console and switches back to default audio track.\n   * @function onError.AUDIO\n   */\n  AUDIO: function AUDIO(type, settings) {\n    return function () {\n      var segmentLoader = settings.segmentLoaders[type],\n          mediaType = settings.mediaTypes[type],\n          blacklistCurrentPlaylist = settings.blacklistCurrentPlaylist;\n      stopLoaders(segmentLoader, mediaType); // switch back to default audio track\n\n      var activeTrack = mediaType.activeTrack();\n      var activeGroup = mediaType.activeGroup();\n      var id = (activeGroup.filter(function (group) {\n        return group[\"default\"];\n      })[0] || activeGroup[0]).id;\n      var defaultTrack = mediaType.tracks[id];\n\n      if (activeTrack === defaultTrack) {\n        // Default track encountered an error. All we can do now is blacklist the current\n        // rendition and hope another will switch audio groups\n        blacklistCurrentPlaylist({\n          message: 'Problem encountered loading the default audio track.'\n        });\n        return;\n      }\n\n      videojs$1.log.warn('Problem encountered loading the alternate audio track.' + 'Switching back to default.');\n\n      for (var trackId in mediaType.tracks) {\n        mediaType.tracks[trackId].enabled = mediaType.tracks[trackId] === defaultTrack;\n      }\n\n      mediaType.onTrackChanged();\n    };\n  },\n\n  /**\n   * Returns a function to be called when a SegmentLoader or PlaylistLoader encounters\n   * an error.\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @return {Function}\n   *         Error handler. Logs warning to console and disables the active subtitle track\n   * @function onError.SUBTITLES\n   */\n  SUBTITLES: function SUBTITLES(type, settings) {\n    return function () {\n      var segmentLoader = settings.segmentLoaders[type],\n          mediaType = settings.mediaTypes[type];\n      videojs$1.log.warn('Problem encountered loading the subtitle track.' + 'Disabling subtitle track.');\n      stopLoaders(segmentLoader, mediaType);\n      var track = mediaType.activeTrack();\n\n      if (track) {\n        track.mode = 'disabled';\n      }\n\n      mediaType.onTrackChanged();\n    };\n  }\n};\nvar setupListeners = {\n  /**\n   * Setup event listeners for audio playlist loader\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {PlaylistLoader|null} playlistLoader\n   *        PlaylistLoader to register listeners on\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @function setupListeners.AUDIO\n   */\n  AUDIO: function AUDIO(type, playlistLoader, settings) {\n    if (!playlistLoader) {\n      // no playlist loader means audio will be muxed with the video\n      return;\n    }\n\n    var tech = settings.tech,\n        requestOptions = settings.requestOptions,\n        segmentLoader = settings.segmentLoaders[type];\n    playlistLoader.on('loadedmetadata', function () {\n      var media = playlistLoader.media();\n      segmentLoader.playlist(media, requestOptions); // if the video is already playing, or if this isn't a live video and preload\n      // permits, start downloading segments\n\n      if (!tech.paused() || media.endList && tech.preload() !== 'none') {\n        segmentLoader.load();\n      }\n    });\n    playlistLoader.on('loadedplaylist', function () {\n      segmentLoader.playlist(playlistLoader.media(), requestOptions); // If the player isn't paused, ensure that the segment loader is running\n\n      if (!tech.paused()) {\n        segmentLoader.load();\n      }\n    });\n    playlistLoader.on('error', onError[type](type, settings));\n  },\n\n  /**\n   * Setup event listeners for subtitle playlist loader\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {PlaylistLoader|null} playlistLoader\n   *        PlaylistLoader to register listeners on\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @function setupListeners.SUBTITLES\n   */\n  SUBTITLES: function SUBTITLES(type, playlistLoader, settings) {\n    var tech = settings.tech,\n        requestOptions = settings.requestOptions,\n        segmentLoader = settings.segmentLoaders[type],\n        mediaType = settings.mediaTypes[type];\n    playlistLoader.on('loadedmetadata', function () {\n      var media = playlistLoader.media();\n      segmentLoader.playlist(media, requestOptions);\n      segmentLoader.track(mediaType.activeTrack()); // if the video is already playing, or if this isn't a live video and preload\n      // permits, start downloading segments\n\n      if (!tech.paused() || media.endList && tech.preload() !== 'none') {\n        segmentLoader.load();\n      }\n    });\n    playlistLoader.on('loadedplaylist', function () {\n      segmentLoader.playlist(playlistLoader.media(), requestOptions); // If the player isn't paused, ensure that the segment loader is running\n\n      if (!tech.paused()) {\n        segmentLoader.load();\n      }\n    });\n    playlistLoader.on('error', onError[type](type, settings));\n  }\n};\nvar initialize = {\n  /**\n   * Setup PlaylistLoaders and AudioTracks for the audio groups\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @function initialize.AUDIO\n   */\n  'AUDIO': function AUDIO(type, settings) {\n    var hls = settings.hls,\n        sourceType = settings.sourceType,\n        segmentLoader = settings.segmentLoaders[type],\n        requestOptions = settings.requestOptions,\n        mediaGroups = settings.master.mediaGroups,\n        _settings$mediaTypes$ = settings.mediaTypes[type],\n        groups = _settings$mediaTypes$.groups,\n        tracks = _settings$mediaTypes$.tracks,\n        masterPlaylistLoader = settings.masterPlaylistLoader; // force a default if we have none\n\n    if (!mediaGroups[type] || Object.keys(mediaGroups[type]).length === 0) {\n      mediaGroups[type] = {\n        main: {\n          \"default\": {\n            \"default\": true\n          }\n        }\n      };\n    }\n\n    for (var groupId in mediaGroups[type]) {\n      if (!groups[groupId]) {\n        groups[groupId] = [];\n      } // List of playlists that have an AUDIO attribute value matching the current\n      // group ID\n\n\n      for (var variantLabel in mediaGroups[type][groupId]) {\n        var properties = mediaGroups[type][groupId][variantLabel];\n        var playlistLoader = void 0;\n\n        if (properties.resolvedUri) {\n          playlistLoader = new PlaylistLoader(properties.resolvedUri, hls, requestOptions);\n        } else if (properties.playlists && sourceType === 'dash') {\n          playlistLoader = new DashPlaylistLoader(properties.playlists[0], hls, requestOptions, masterPlaylistLoader);\n        } else {\n          // no resolvedUri means the audio is muxed with the video when using this\n          // audio track\n          playlistLoader = null;\n        }\n\n        properties = videojs$1.mergeOptions({\n          id: variantLabel,\n          playlistLoader: playlistLoader\n        }, properties);\n        setupListeners[type](type, properties.playlistLoader, settings);\n        groups[groupId].push(properties);\n\n        if (typeof tracks[variantLabel] === 'undefined') {\n          var track = new videojs$1.AudioTrack({\n            id: variantLabel,\n            kind: audioTrackKind_(properties),\n            enabled: false,\n            language: properties.language,\n            \"default\": properties[\"default\"],\n            label: variantLabel\n          });\n          tracks[variantLabel] = track;\n        }\n      }\n    } // setup single error event handler for the segment loader\n\n\n    segmentLoader.on('error', onError[type](type, settings));\n  },\n\n  /**\n   * Setup PlaylistLoaders and TextTracks for the subtitle groups\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @function initialize.SUBTITLES\n   */\n  'SUBTITLES': function SUBTITLES(type, settings) {\n    var tech = settings.tech,\n        hls = settings.hls,\n        sourceType = settings.sourceType,\n        segmentLoader = settings.segmentLoaders[type],\n        requestOptions = settings.requestOptions,\n        mediaGroups = settings.master.mediaGroups,\n        _settings$mediaTypes$2 = settings.mediaTypes[type],\n        groups = _settings$mediaTypes$2.groups,\n        tracks = _settings$mediaTypes$2.tracks,\n        masterPlaylistLoader = settings.masterPlaylistLoader;\n\n    for (var groupId in mediaGroups[type]) {\n      if (!groups[groupId]) {\n        groups[groupId] = [];\n      }\n\n      for (var variantLabel in mediaGroups[type][groupId]) {\n        if (mediaGroups[type][groupId][variantLabel].forced) {\n          // Subtitle playlists with the forced attribute are not selectable in Safari.\n          // According to Apple's HLS Authoring Specification:\n          //   If content has forced subtitles and regular subtitles in a given language,\n          //   the regular subtitles track in that language MUST contain both the forced\n          //   subtitles and the regular subtitles for that language.\n          // Because of this requirement and that Safari does not add forced subtitles,\n          // forced subtitles are skipped here to maintain consistent experience across\n          // all platforms\n          continue;\n        }\n\n        var properties = mediaGroups[type][groupId][variantLabel];\n        var playlistLoader = void 0;\n\n        if (sourceType === 'hls') {\n          playlistLoader = new PlaylistLoader(properties.resolvedUri, hls, requestOptions);\n        } else if (sourceType === 'dash') {\n          playlistLoader = new DashPlaylistLoader(properties.playlists[0], hls, requestOptions, masterPlaylistLoader);\n        }\n\n        properties = videojs$1.mergeOptions({\n          id: variantLabel,\n          playlistLoader: playlistLoader\n        }, properties);\n        setupListeners[type](type, properties.playlistLoader, settings);\n        groups[groupId].push(properties);\n\n        if (typeof tracks[variantLabel] === 'undefined') {\n          var track = tech.addRemoteTextTrack({\n            id: variantLabel,\n            kind: 'subtitles',\n            \"default\": properties[\"default\"] && properties.autoselect,\n            language: properties.language,\n            label: variantLabel\n          }, false).track;\n          tracks[variantLabel] = track;\n        }\n      }\n    } // setup single error event handler for the segment loader\n\n\n    segmentLoader.on('error', onError[type](type, settings));\n  },\n\n  /**\n   * Setup TextTracks for the closed-caption groups\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @function initialize['CLOSED-CAPTIONS']\n   */\n  'CLOSED-CAPTIONS': function CLOSEDCAPTIONS(type, settings) {\n    var tech = settings.tech,\n        mediaGroups = settings.master.mediaGroups,\n        _settings$mediaTypes$3 = settings.mediaTypes[type],\n        groups = _settings$mediaTypes$3.groups,\n        tracks = _settings$mediaTypes$3.tracks;\n\n    for (var groupId in mediaGroups[type]) {\n      if (!groups[groupId]) {\n        groups[groupId] = [];\n      }\n\n      for (var variantLabel in mediaGroups[type][groupId]) {\n        var properties = mediaGroups[type][groupId][variantLabel]; // We only support CEA608 captions for now, so ignore anything that\n        // doesn't use a CCx INSTREAM-ID\n\n        if (!properties.instreamId.match(/CC\\d/)) {\n          continue;\n        } // No PlaylistLoader is required for Closed-Captions because the captions are\n        // embedded within the video stream\n\n\n        groups[groupId].push(videojs$1.mergeOptions({\n          id: variantLabel\n        }, properties));\n\n        if (typeof tracks[variantLabel] === 'undefined') {\n          var track = tech.addRemoteTextTrack({\n            id: properties.instreamId,\n            kind: 'captions',\n            \"default\": properties[\"default\"] && properties.autoselect,\n            language: properties.language,\n            label: variantLabel\n          }, false).track;\n          tracks[variantLabel] = track;\n        }\n      }\n    }\n  }\n};\n/**\n * Returns a function used to get the active group of the provided type\n *\n * @param {String} type\n *        MediaGroup type\n * @param {Object} settings\n *        Object containing required information for media groups\n * @return {Function}\n *         Function that returns the active media group for the provided type. Takes an\n *         optional parameter {TextTrack} track. If no track is provided, a list of all\n *         variants in the group, otherwise the variant corresponding to the provided\n *         track is returned.\n * @function activeGroup\n */\n\nvar activeGroup = function activeGroup(type, settings) {\n  return function (track) {\n    var masterPlaylistLoader = settings.masterPlaylistLoader,\n        groups = settings.mediaTypes[type].groups;\n    var media = masterPlaylistLoader.media();\n\n    if (!media) {\n      return null;\n    }\n\n    var variants = null;\n\n    if (media.attributes[type]) {\n      variants = groups[media.attributes[type]];\n    }\n\n    variants = variants || groups.main;\n\n    if (typeof track === 'undefined') {\n      return variants;\n    }\n\n    if (track === null) {\n      // An active track was specified so a corresponding group is expected. track === null\n      // means no track is currently active so there is no corresponding group\n      return null;\n    }\n\n    return variants.filter(function (props) {\n      return props.id === track.id;\n    })[0] || null;\n  };\n};\n\nvar activeTrack = {\n  /**\n   * Returns a function used to get the active track of type provided\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @return {Function}\n   *         Function that returns the active media track for the provided type. Returns\n   *         null if no track is active\n   * @function activeTrack.AUDIO\n   */\n  AUDIO: function AUDIO(type, settings) {\n    return function () {\n      var tracks = settings.mediaTypes[type].tracks;\n\n      for (var id in tracks) {\n        if (tracks[id].enabled) {\n          return tracks[id];\n        }\n      }\n\n      return null;\n    };\n  },\n\n  /**\n   * Returns a function used to get the active track of type provided\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @return {Function}\n   *         Function that returns the active media track for the provided type. Returns\n   *         null if no track is active\n   * @function activeTrack.SUBTITLES\n   */\n  SUBTITLES: function SUBTITLES(type, settings) {\n    return function () {\n      var tracks = settings.mediaTypes[type].tracks;\n\n      for (var id in tracks) {\n        if (tracks[id].mode === 'showing') {\n          return tracks[id];\n        }\n      }\n\n      return null;\n    };\n  }\n};\n/**\n * Setup PlaylistLoaders and Tracks for media groups (Audio, Subtitles,\n * Closed-Captions) specified in the master manifest.\n *\n * @param {Object} settings\n *        Object containing required information for setting up the media groups\n * @param {SegmentLoader} settings.segmentLoaders.AUDIO\n *        Audio segment loader\n * @param {SegmentLoader} settings.segmentLoaders.SUBTITLES\n *        Subtitle segment loader\n * @param {SegmentLoader} settings.segmentLoaders.main\n *        Main segment loader\n * @param {Tech} settings.tech\n *        The tech of the player\n * @param {Object} settings.requestOptions\n *        XHR request options used by the segment loaders\n * @param {PlaylistLoader} settings.masterPlaylistLoader\n *        PlaylistLoader for the master source\n * @param {HlsHandler} settings.hls\n *        HLS SourceHandler\n * @param {Object} settings.master\n *        The parsed master manifest\n * @param {Object} settings.mediaTypes\n *        Object to store the loaders, tracks, and utility methods for each media type\n * @param {Function} settings.blacklistCurrentPlaylist\n *        Blacklists the current rendition and forces a rendition switch.\n * @function setupMediaGroups\n */\n\nvar setupMediaGroups = function setupMediaGroups(settings) {\n  ['AUDIO', 'SUBTITLES', 'CLOSED-CAPTIONS'].forEach(function (type) {\n    initialize[type](type, settings);\n  });\n  var mediaTypes = settings.mediaTypes,\n      masterPlaylistLoader = settings.masterPlaylistLoader,\n      tech = settings.tech,\n      hls = settings.hls; // setup active group and track getters and change event handlers\n\n  ['AUDIO', 'SUBTITLES'].forEach(function (type) {\n    mediaTypes[type].activeGroup = activeGroup(type, settings);\n    mediaTypes[type].activeTrack = activeTrack[type](type, settings);\n    mediaTypes[type].onGroupChanged = onGroupChanged(type, settings);\n    mediaTypes[type].onTrackChanged = onTrackChanged(type, settings);\n  }); // DO NOT enable the default subtitle or caption track.\n  // DO enable the default audio track\n\n  var audioGroup = mediaTypes.AUDIO.activeGroup();\n  var groupId = (audioGroup.filter(function (group) {\n    return group[\"default\"];\n  })[0] || audioGroup[0]).id;\n  mediaTypes.AUDIO.tracks[groupId].enabled = true;\n  mediaTypes.AUDIO.onTrackChanged();\n  masterPlaylistLoader.on('mediachange', function () {\n    ['AUDIO', 'SUBTITLES'].forEach(function (type) {\n      return mediaTypes[type].onGroupChanged();\n    });\n  }); // custom audio track change event handler for usage event\n\n  var onAudioTrackChanged = function onAudioTrackChanged() {\n    mediaTypes.AUDIO.onTrackChanged();\n    tech.trigger({\n      type: 'usage',\n      name: 'hls-audio-change'\n    });\n  };\n\n  tech.audioTracks().addEventListener('change', onAudioTrackChanged);\n  tech.remoteTextTracks().addEventListener('change', mediaTypes.SUBTITLES.onTrackChanged);\n  hls.on('dispose', function () {\n    tech.audioTracks().removeEventListener('change', onAudioTrackChanged);\n    tech.remoteTextTracks().removeEventListener('change', mediaTypes.SUBTITLES.onTrackChanged);\n  }); // clear existing audio tracks and add the ones we just created\n\n  tech.clearTracks('audio');\n\n  for (var id in mediaTypes.AUDIO.tracks) {\n    tech.audioTracks().addTrack(mediaTypes.AUDIO.tracks[id]);\n  }\n};\n/**\n * Creates skeleton object used to store the loaders, tracks, and utility methods for each\n * media type\n *\n * @return {Object}\n *         Object to store the loaders, tracks, and utility methods for each media type\n * @function createMediaTypes\n */\n\n\nvar createMediaTypes = function createMediaTypes() {\n  var mediaTypes = {};\n  ['AUDIO', 'SUBTITLES', 'CLOSED-CAPTIONS'].forEach(function (type) {\n    mediaTypes[type] = {\n      groups: {},\n      tracks: {},\n      activePlaylistLoader: null,\n      activeGroup: noop,\n      activeTrack: noop,\n      onGroupChanged: noop,\n      onTrackChanged: noop\n    };\n  });\n  return mediaTypes;\n};\n/**\n * @file master-playlist-controller.js\n */\n\n\nvar ABORT_EARLY_BLACKLIST_SECONDS = 60 * 2;\nvar Hls = void 0; // SegmentLoader stats that need to have each loader's\n// values summed to calculate the final value\n\nvar loaderStats = ['mediaRequests', 'mediaRequestsAborted', 'mediaRequestsTimedout', 'mediaRequestsErrored', 'mediaTransferDuration', 'mediaBytesTransferred'];\n\nvar sumLoaderStat = function sumLoaderStat(stat) {\n  return this.audioSegmentLoader_[stat] + this.mainSegmentLoader_[stat];\n};\n/**\n * the master playlist controller controller all interactons\n * between playlists and segmentloaders. At this time this mainly\n * involves a master playlist and a series of audio playlists\n * if they are available\n *\n * @class MasterPlaylistController\n * @extends videojs.EventTarget\n */\n\n\nvar MasterPlaylistController = function (_videojs$EventTarget) {\n  inherits(MasterPlaylistController, _videojs$EventTarget);\n\n  function MasterPlaylistController(options) {\n    classCallCheck(this, MasterPlaylistController);\n\n    var _this = possibleConstructorReturn(this, (MasterPlaylistController.__proto__ || Object.getPrototypeOf(MasterPlaylistController)).call(this));\n\n    var url = options.url,\n        handleManifestRedirects = options.handleManifestRedirects,\n        withCredentials = options.withCredentials,\n        tech = options.tech,\n        bandwidth = options.bandwidth,\n        externHls = options.externHls,\n        useCueTags = options.useCueTags,\n        blacklistDuration = options.blacklistDuration,\n        enableLowInitialPlaylist = options.enableLowInitialPlaylist,\n        sourceType = options.sourceType,\n        seekTo = options.seekTo,\n        cacheEncryptionKeys = options.cacheEncryptionKeys;\n\n    if (!url) {\n      throw new Error('A non-empty playlist URL is required');\n    }\n\n    Hls = externHls;\n    _this.withCredentials = withCredentials;\n    _this.tech_ = tech;\n    _this.hls_ = tech.hls;\n    _this.seekTo_ = seekTo;\n    _this.sourceType_ = sourceType;\n    _this.useCueTags_ = useCueTags;\n    _this.blacklistDuration = blacklistDuration;\n    _this.enableLowInitialPlaylist = enableLowInitialPlaylist;\n\n    if (_this.useCueTags_) {\n      _this.cueTagsTrack_ = _this.tech_.addTextTrack('metadata', 'ad-cues');\n      _this.cueTagsTrack_.inBandMetadataTrackDispatchType = '';\n    }\n\n    _this.requestOptions_ = {\n      withCredentials: withCredentials,\n      handleManifestRedirects: handleManifestRedirects,\n      timeout: null\n    };\n    _this.mediaTypes_ = createMediaTypes();\n    _this.mediaSource = new videojs$1.MediaSource(); // load the media source into the player\n\n    _this.mediaSource.addEventListener('sourceopen', _this.handleSourceOpen_.bind(_this));\n\n    _this.seekable_ = videojs$1.createTimeRanges();\n\n    _this.hasPlayed_ = function () {\n      return false;\n    };\n\n    _this.syncController_ = new SyncController(options);\n    _this.segmentMetadataTrack_ = tech.addRemoteTextTrack({\n      kind: 'metadata',\n      label: 'segment-metadata'\n    }, false).track;\n    _this.decrypter_ = new Decrypter$1();\n    _this.inbandTextTracks_ = {};\n    var segmentLoaderSettings = {\n      hls: _this.hls_,\n      mediaSource: _this.mediaSource,\n      currentTime: _this.tech_.currentTime.bind(_this.tech_),\n      seekable: function seekable$$1() {\n        return _this.seekable();\n      },\n      seeking: function seeking() {\n        return _this.tech_.seeking();\n      },\n      duration: function duration$$1() {\n        return _this.mediaSource.duration;\n      },\n      hasPlayed: function hasPlayed() {\n        return _this.hasPlayed_();\n      },\n      goalBufferLength: function goalBufferLength() {\n        return _this.goalBufferLength();\n      },\n      bandwidth: bandwidth,\n      syncController: _this.syncController_,\n      decrypter: _this.decrypter_,\n      sourceType: _this.sourceType_,\n      inbandTextTracks: _this.inbandTextTracks_,\n      cacheEncryptionKeys: cacheEncryptionKeys\n    };\n    _this.masterPlaylistLoader_ = _this.sourceType_ === 'dash' ? new DashPlaylistLoader(url, _this.hls_, _this.requestOptions_) : new PlaylistLoader(url, _this.hls_, _this.requestOptions_);\n\n    _this.setupMasterPlaylistLoaderListeners_(); // setup segment loaders\n    // combined audio/video or just video when alternate audio track is selected\n\n\n    _this.mainSegmentLoader_ = new SegmentLoader(videojs$1.mergeOptions(segmentLoaderSettings, {\n      segmentMetadataTrack: _this.segmentMetadataTrack_,\n      loaderType: 'main'\n    }), options); // alternate audio track\n\n    _this.audioSegmentLoader_ = new SegmentLoader(videojs$1.mergeOptions(segmentLoaderSettings, {\n      loaderType: 'audio'\n    }), options);\n    _this.subtitleSegmentLoader_ = new VTTSegmentLoader(videojs$1.mergeOptions(segmentLoaderSettings, {\n      loaderType: 'vtt'\n    }), options);\n\n    _this.setupSegmentLoaderListeners_(); // Create SegmentLoader stat-getters\n\n\n    loaderStats.forEach(function (stat) {\n      _this[stat + '_'] = sumLoaderStat.bind(_this, stat);\n    });\n    _this.logger_ = logger('MPC');\n\n    _this.masterPlaylistLoader_.load();\n\n    return _this;\n  }\n  /**\n   * Register event handlers on the master playlist loader. A helper\n   * function for construction time.\n   *\n   * @private\n   */\n\n\n  createClass(MasterPlaylistController, [{\n    key: 'setupMasterPlaylistLoaderListeners_',\n    value: function setupMasterPlaylistLoaderListeners_() {\n      var _this2 = this;\n\n      this.masterPlaylistLoader_.on('loadedmetadata', function () {\n        var media = _this2.masterPlaylistLoader_.media();\n\n        var requestTimeout = media.targetDuration * 1.5 * 1000; // If we don't have any more available playlists, we don't want to\n        // timeout the request.\n\n        if (isLowestEnabledRendition(_this2.masterPlaylistLoader_.master, _this2.masterPlaylistLoader_.media())) {\n          _this2.requestOptions_.timeout = 0;\n        } else {\n          _this2.requestOptions_.timeout = requestTimeout;\n        } // if this isn't a live video and preload permits, start\n        // downloading segments\n\n\n        if (media.endList && _this2.tech_.preload() !== 'none') {\n          _this2.mainSegmentLoader_.playlist(media, _this2.requestOptions_);\n\n          _this2.mainSegmentLoader_.load();\n        }\n\n        setupMediaGroups({\n          sourceType: _this2.sourceType_,\n          segmentLoaders: {\n            AUDIO: _this2.audioSegmentLoader_,\n            SUBTITLES: _this2.subtitleSegmentLoader_,\n            main: _this2.mainSegmentLoader_\n          },\n          tech: _this2.tech_,\n          requestOptions: _this2.requestOptions_,\n          masterPlaylistLoader: _this2.masterPlaylistLoader_,\n          hls: _this2.hls_,\n          master: _this2.master(),\n          mediaTypes: _this2.mediaTypes_,\n          blacklistCurrentPlaylist: _this2.blacklistCurrentPlaylist.bind(_this2)\n        });\n\n        _this2.triggerPresenceUsage_(_this2.master(), media);\n\n        try {\n          _this2.setupSourceBuffers_();\n        } catch (e) {\n          videojs$1.log.warn('Failed to create SourceBuffers', e);\n          return _this2.mediaSource.endOfStream('decode');\n        }\n\n        _this2.setupFirstPlay();\n\n        if (!_this2.mediaTypes_.AUDIO.activePlaylistLoader || _this2.mediaTypes_.AUDIO.activePlaylistLoader.media()) {\n          _this2.trigger('selectedinitialmedia');\n        } else {\n          // We must wait for the active audio playlist loader to\n          // finish setting up before triggering this event so the\n          // representations API and EME setup is correct\n          _this2.mediaTypes_.AUDIO.activePlaylistLoader.one('loadedmetadata', function () {\n            _this2.trigger('selectedinitialmedia');\n          });\n        }\n      });\n      this.masterPlaylistLoader_.on('loadedplaylist', function () {\n        var updatedPlaylist = _this2.masterPlaylistLoader_.media();\n\n        if (!updatedPlaylist) {\n          // blacklist any variants that are not supported by the browser before selecting\n          // an initial media as the playlist selectors do not consider browser support\n          _this2.excludeUnsupportedVariants_();\n\n          var selectedMedia = void 0;\n\n          if (_this2.enableLowInitialPlaylist) {\n            selectedMedia = _this2.selectInitialPlaylist();\n          }\n\n          if (!selectedMedia) {\n            selectedMedia = _this2.selectPlaylist();\n          }\n\n          _this2.initialMedia_ = selectedMedia;\n\n          _this2.masterPlaylistLoader_.media(_this2.initialMedia_);\n\n          return;\n        }\n\n        if (_this2.useCueTags_) {\n          _this2.updateAdCues_(updatedPlaylist);\n        } // TODO: Create a new event on the PlaylistLoader that signals\n        // that the segments have changed in some way and use that to\n        // update the SegmentLoader instead of doing it twice here and\n        // on `mediachange`\n\n\n        _this2.mainSegmentLoader_.playlist(updatedPlaylist, _this2.requestOptions_);\n\n        _this2.updateDuration(); // If the player isn't paused, ensure that the segment loader is running,\n        // as it is possible that it was temporarily stopped while waiting for\n        // a playlist (e.g., in case the playlist errored and we re-requested it).\n\n\n        if (!_this2.tech_.paused()) {\n          _this2.mainSegmentLoader_.load();\n\n          if (_this2.audioSegmentLoader_) {\n            _this2.audioSegmentLoader_.load();\n          }\n        }\n\n        if (!updatedPlaylist.endList) {\n          var addSeekableRange = function addSeekableRange() {\n            var seekable$$1 = _this2.seekable();\n\n            if (seekable$$1.length !== 0) {\n              _this2.mediaSource.addSeekableRange_(seekable$$1.start(0), seekable$$1.end(0));\n            }\n          };\n\n          if (_this2.duration() !== Infinity) {\n            var onDurationchange = function onDurationchange() {\n              if (_this2.duration() === Infinity) {\n                addSeekableRange();\n              } else {\n                _this2.tech_.one('durationchange', onDurationchange);\n              }\n            };\n\n            _this2.tech_.one('durationchange', onDurationchange);\n          } else {\n            addSeekableRange();\n          }\n        }\n      });\n      this.masterPlaylistLoader_.on('error', function () {\n        _this2.blacklistCurrentPlaylist(_this2.masterPlaylistLoader_.error);\n      });\n      this.masterPlaylistLoader_.on('mediachanging', function () {\n        _this2.mainSegmentLoader_.abort();\n\n        _this2.mainSegmentLoader_.pause();\n      });\n      this.masterPlaylistLoader_.on('mediachange', function () {\n        var media = _this2.masterPlaylistLoader_.media();\n\n        var requestTimeout = media.targetDuration * 1.5 * 1000; // If we don't have any more available playlists, we don't want to\n        // timeout the request.\n\n        if (isLowestEnabledRendition(_this2.masterPlaylistLoader_.master, _this2.masterPlaylistLoader_.media())) {\n          _this2.requestOptions_.timeout = 0;\n        } else {\n          _this2.requestOptions_.timeout = requestTimeout;\n        } // TODO: Create a new event on the PlaylistLoader that signals\n        // that the segments have changed in some way and use that to\n        // update the SegmentLoader instead of doing it twice here and\n        // on `loadedplaylist`\n\n\n        _this2.mainSegmentLoader_.playlist(media, _this2.requestOptions_);\n\n        _this2.mainSegmentLoader_.load();\n\n        _this2.tech_.trigger({\n          type: 'mediachange',\n          bubbles: true\n        });\n      });\n      this.masterPlaylistLoader_.on('playlistunchanged', function () {\n        var updatedPlaylist = _this2.masterPlaylistLoader_.media();\n\n        var playlistOutdated = _this2.stuckAtPlaylistEnd_(updatedPlaylist);\n\n        if (playlistOutdated) {\n          // Playlist has stopped updating and we're stuck at its end. Try to\n          // blacklist it and switch to another playlist in the hope that that\n          // one is updating (and give the player a chance to re-adjust to the\n          // safe live point).\n          _this2.blacklistCurrentPlaylist({\n            message: 'Playlist no longer updating.'\n          }); // useful for monitoring QoS\n\n\n          _this2.tech_.trigger('playliststuck');\n        }\n      });\n      this.masterPlaylistLoader_.on('renditiondisabled', function () {\n        _this2.tech_.trigger({\n          type: 'usage',\n          name: 'hls-rendition-disabled'\n        });\n      });\n      this.masterPlaylistLoader_.on('renditionenabled', function () {\n        _this2.tech_.trigger({\n          type: 'usage',\n          name: 'hls-rendition-enabled'\n        });\n      });\n    }\n    /**\n     * A helper function for triggerring presence usage events once per source\n     *\n     * @private\n     */\n\n  }, {\n    key: 'triggerPresenceUsage_',\n    value: function triggerPresenceUsage_(master, media) {\n      var mediaGroups = master.mediaGroups || {};\n      var defaultDemuxed = true;\n      var audioGroupKeys = Object.keys(mediaGroups.AUDIO);\n\n      for (var mediaGroup in mediaGroups.AUDIO) {\n        for (var label in mediaGroups.AUDIO[mediaGroup]) {\n          var properties = mediaGroups.AUDIO[mediaGroup][label];\n\n          if (!properties.uri) {\n            defaultDemuxed = false;\n          }\n        }\n      }\n\n      if (defaultDemuxed) {\n        this.tech_.trigger({\n          type: 'usage',\n          name: 'hls-demuxed'\n        });\n      }\n\n      if (Object.keys(mediaGroups.SUBTITLES).length) {\n        this.tech_.trigger({\n          type: 'usage',\n          name: 'hls-webvtt'\n        });\n      }\n\n      if (Hls.Playlist.isAes(media)) {\n        this.tech_.trigger({\n          type: 'usage',\n          name: 'hls-aes'\n        });\n      }\n\n      if (Hls.Playlist.isFmp4(media)) {\n        this.tech_.trigger({\n          type: 'usage',\n          name: 'hls-fmp4'\n        });\n      }\n\n      if (audioGroupKeys.length && Object.keys(mediaGroups.AUDIO[audioGroupKeys[0]]).length > 1) {\n        this.tech_.trigger({\n          type: 'usage',\n          name: 'hls-alternate-audio'\n        });\n      }\n\n      if (this.useCueTags_) {\n        this.tech_.trigger({\n          type: 'usage',\n          name: 'hls-playlist-cue-tags'\n        });\n      }\n    }\n    /**\n     * Register event handlers on the segment loaders. A helper function\n     * for construction time.\n     *\n     * @private\n     */\n\n  }, {\n    key: 'setupSegmentLoaderListeners_',\n    value: function setupSegmentLoaderListeners_() {\n      var _this3 = this;\n\n      this.mainSegmentLoader_.on('bandwidthupdate', function () {\n        var nextPlaylist = _this3.selectPlaylist();\n\n        var currentPlaylist = _this3.masterPlaylistLoader_.media();\n\n        var buffered = _this3.tech_.buffered();\n\n        var forwardBuffer = buffered.length ? buffered.end(buffered.length - 1) - _this3.tech_.currentTime() : 0;\n\n        var bufferLowWaterLine = _this3.bufferLowWaterLine(); // If the playlist is live, then we want to not take low water line into account.\n        // This is because in LIVE, the player plays 3 segments from the end of the\n        // playlist, and if `BUFFER_LOW_WATER_LINE` is greater than the duration availble\n        // in those segments, a viewer will never experience a rendition upswitch.\n\n\n        if (!currentPlaylist.endList || // For the same reason as LIVE, we ignore the low water line when the VOD\n        // duration is below the max potential low water line\n        _this3.duration() < Config.MAX_BUFFER_LOW_WATER_LINE || // we want to switch down to lower resolutions quickly to continue playback, but\n        nextPlaylist.attributes.BANDWIDTH < currentPlaylist.attributes.BANDWIDTH || // ensure we have some buffer before we switch up to prevent us running out of\n        // buffer while loading a higher rendition.\n        forwardBuffer >= bufferLowWaterLine) {\n          _this3.masterPlaylistLoader_.media(nextPlaylist);\n        }\n\n        _this3.tech_.trigger('bandwidthupdate');\n      });\n      this.mainSegmentLoader_.on('progress', function () {\n        _this3.trigger('progress');\n      });\n      this.mainSegmentLoader_.on('error', function () {\n        _this3.blacklistCurrentPlaylist(_this3.mainSegmentLoader_.error());\n      });\n      this.mainSegmentLoader_.on('syncinfoupdate', function () {\n        _this3.onSyncInfoUpdate_();\n      });\n      this.mainSegmentLoader_.on('timestampoffset', function () {\n        _this3.tech_.trigger({\n          type: 'usage',\n          name: 'hls-timestamp-offset'\n        });\n      });\n      this.audioSegmentLoader_.on('syncinfoupdate', function () {\n        _this3.onSyncInfoUpdate_();\n      });\n      this.mainSegmentLoader_.on('ended', function () {\n        _this3.onEndOfStream();\n      });\n      this.mainSegmentLoader_.on('earlyabort', function () {\n        _this3.blacklistCurrentPlaylist({\n          message: 'Aborted early because there isn\\'t enough bandwidth to complete the ' + 'request without rebuffering.'\n        }, ABORT_EARLY_BLACKLIST_SECONDS);\n      });\n      this.mainSegmentLoader_.on('reseteverything', function () {\n        // If playing an MTS stream, a videojs.MediaSource is listening for\n        // hls-reset to reset caption parsing state in the transmuxer\n        _this3.tech_.trigger('hls-reset');\n      });\n      this.mainSegmentLoader_.on('segmenttimemapping', function (event) {\n        // If playing an MTS stream in html, a videojs.MediaSource is listening for\n        // hls-segment-time-mapping update its internal mapping of stream to display time\n        _this3.tech_.trigger({\n          type: 'hls-segment-time-mapping',\n          mapping: event.mapping\n        });\n      });\n      this.audioSegmentLoader_.on('ended', function () {\n        _this3.onEndOfStream();\n      });\n    }\n  }, {\n    key: 'mediaSecondsLoaded_',\n    value: function mediaSecondsLoaded_() {\n      return Math.max(this.audioSegmentLoader_.mediaSecondsLoaded + this.mainSegmentLoader_.mediaSecondsLoaded);\n    }\n    /**\n     * Call load on our SegmentLoaders\n     */\n\n  }, {\n    key: 'load',\n    value: function load() {\n      this.mainSegmentLoader_.load();\n\n      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\n        this.audioSegmentLoader_.load();\n      }\n\n      if (this.mediaTypes_.SUBTITLES.activePlaylistLoader) {\n        this.subtitleSegmentLoader_.load();\n      }\n    }\n    /**\n     * Re-tune playback quality level for the current player\n     * conditions without performing destructive actions, like\n     * removing already buffered content\n     *\n     * @private\n     */\n\n  }, {\n    key: 'smoothQualityChange_',\n    value: function smoothQualityChange_() {\n      var media = this.selectPlaylist();\n\n      if (media !== this.masterPlaylistLoader_.media()) {\n        this.masterPlaylistLoader_.media(media);\n        this.mainSegmentLoader_.resetLoader(); // don't need to reset audio as it is reset when media changes\n      }\n    }\n    /**\n     * Re-tune playback quality level for the current player\n     * conditions. This method will perform destructive actions like removing\n     * already buffered content in order to readjust the currently active\n     * playlist quickly. This is good for manual quality changes\n     *\n     * @private\n     */\n\n  }, {\n    key: 'fastQualityChange_',\n    value: function fastQualityChange_() {\n      var _this4 = this;\n\n      var media = this.selectPlaylist();\n\n      if (media === this.masterPlaylistLoader_.media()) {\n        return;\n      }\n\n      this.masterPlaylistLoader_.media(media); // Delete all buffered data to allow an immediate quality switch, then seek to give\n      // the browser a kick to remove any cached frames from the previous rendtion (.04 seconds\n      // ahead is roughly the minimum that will accomplish this across a variety of content\n      // in IE and Edge, but seeking in place is sufficient on all other browsers)\n      // Edge/IE bug: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/14600375/\n      // Chrome bug: https://bugs.chromium.org/p/chromium/issues/detail?id=651904\n\n      this.mainSegmentLoader_.resetEverything(function () {\n        // Since this is not a typical seek, we avoid the seekTo method which can cause segments\n        // from the previously enabled rendition to load before the new playlist has finished loading\n        if (videojs$1.browser.IE_VERSION || videojs$1.browser.IS_EDGE) {\n          _this4.tech_.setCurrentTime(_this4.tech_.currentTime() + 0.04);\n        } else {\n          _this4.tech_.setCurrentTime(_this4.tech_.currentTime());\n        }\n      }); // don't need to reset audio as it is reset when media changes\n    }\n    /**\n     * Begin playback.\n     */\n\n  }, {\n    key: 'play',\n    value: function play() {\n      if (this.setupFirstPlay()) {\n        return;\n      }\n\n      if (this.tech_.ended()) {\n        this.seekTo_(0);\n      }\n\n      if (this.hasPlayed_()) {\n        this.load();\n      }\n\n      var seekable$$1 = this.tech_.seekable(); // if the viewer has paused and we fell out of the live window,\n      // seek forward to the live point\n\n      if (this.tech_.duration() === Infinity) {\n        if (this.tech_.currentTime() < seekable$$1.start(0)) {\n          return this.seekTo_(seekable$$1.end(seekable$$1.length - 1));\n        }\n      }\n    }\n    /**\n     * Seek to the latest media position if this is a live video and the\n     * player and video are loaded and initialized.\n     */\n\n  }, {\n    key: 'setupFirstPlay',\n    value: function setupFirstPlay() {\n      var _this5 = this;\n\n      var media = this.masterPlaylistLoader_.media(); // Check that everything is ready to begin buffering for the first call to play\n      //  If 1) there is no active media\n      //     2) the player is paused\n      //     3) the first play has already been setup\n      // then exit early\n\n      if (!media || this.tech_.paused() || this.hasPlayed_()) {\n        return false;\n      } // when the video is a live stream\n\n\n      if (!media.endList) {\n        var seekable$$1 = this.seekable();\n\n        if (!seekable$$1.length) {\n          // without a seekable range, the player cannot seek to begin buffering at the live\n          // point\n          return false;\n        }\n\n        if (videojs$1.browser.IE_VERSION && this.tech_.readyState() === 0) {\n          // IE11 throws an InvalidStateError if you try to set currentTime while the\n          // readyState is 0, so it must be delayed until the tech fires loadedmetadata.\n          this.tech_.one('loadedmetadata', function () {\n            _this5.trigger('firstplay');\n\n            _this5.seekTo_(seekable$$1.end(0));\n\n            _this5.hasPlayed_ = function () {\n              return true;\n            };\n          });\n          return false;\n        } // trigger firstplay to inform the source handler to ignore the next seek event\n\n\n        this.trigger('firstplay'); // seek to the live point\n\n        this.seekTo_(seekable$$1.end(0));\n      }\n\n      this.hasPlayed_ = function () {\n        return true;\n      }; // we can begin loading now that everything is ready\n\n\n      this.load();\n      return true;\n    }\n    /**\n     * handle the sourceopen event on the MediaSource\n     *\n     * @private\n     */\n\n  }, {\n    key: 'handleSourceOpen_',\n    value: function handleSourceOpen_() {\n      // Only attempt to create the source buffer if none already exist.\n      // handleSourceOpen is also called when we are \"re-opening\" a source buffer\n      // after `endOfStream` has been called (in response to a seek for instance)\n      try {\n        this.setupSourceBuffers_();\n      } catch (e) {\n        videojs$1.log.warn('Failed to create Source Buffers', e);\n        return this.mediaSource.endOfStream('decode');\n      } // if autoplay is enabled, begin playback. This is duplicative of\n      // code in video.js but is required because play() must be invoked\n      // *after* the media source has opened.\n\n\n      if (this.tech_.autoplay()) {\n        var playPromise = this.tech_.play(); // Catch/silence error when a pause interrupts a play request\n        // on browsers which return a promise\n\n        if (typeof playPromise !== 'undefined' && typeof playPromise.then === 'function') {\n          playPromise.then(null, function (e) {});\n        }\n      }\n\n      this.trigger('sourceopen');\n    }\n    /**\n     * Calls endOfStream on the media source when all active stream types have called\n     * endOfStream\n     *\n     * @param {string} streamType\n     *        Stream type of the segment loader that called endOfStream\n     * @private\n     */\n\n  }, {\n    key: 'onEndOfStream',\n    value: function onEndOfStream() {\n      var isEndOfStream = this.mainSegmentLoader_.ended_;\n\n      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\n        // if the audio playlist loader exists, then alternate audio is active\n        if (!this.mainSegmentLoader_.startingMedia_ || this.mainSegmentLoader_.startingMedia_.containsVideo) {\n          // if we do not know if the main segment loader contains video yet or if we\n          // definitively know the main segment loader contains video, then we need to wait\n          // for both main and audio segment loaders to call endOfStream\n          isEndOfStream = isEndOfStream && this.audioSegmentLoader_.ended_;\n        } else {\n          // otherwise just rely on the audio loader\n          isEndOfStream = this.audioSegmentLoader_.ended_;\n        }\n      }\n\n      if (!isEndOfStream) {\n        return;\n      }\n\n      this.logger_('calling mediaSource.endOfStream()'); // on chrome calling endOfStream can sometimes cause an exception,\n      // even when the media source is in a valid state.\n\n      try {\n        this.mediaSource.endOfStream();\n      } catch (e) {\n        videojs$1.log.warn('Failed to call media source endOfStream', e);\n      }\n    }\n    /**\n     * Check if a playlist has stopped being updated\n     * @param {Object} playlist the media playlist object\n     * @return {boolean} whether the playlist has stopped being updated or not\n     */\n\n  }, {\n    key: 'stuckAtPlaylistEnd_',\n    value: function stuckAtPlaylistEnd_(playlist) {\n      var seekable$$1 = this.seekable();\n\n      if (!seekable$$1.length) {\n        // playlist doesn't have enough information to determine whether we are stuck\n        return false;\n      }\n\n      var expired = this.syncController_.getExpiredTime(playlist, this.mediaSource.duration);\n\n      if (expired === null) {\n        return false;\n      } // does not use the safe live end to calculate playlist end, since we\n      // don't want to say we are stuck while there is still content\n\n\n      var absolutePlaylistEnd = Hls.Playlist.playlistEnd(playlist, expired);\n      var currentTime = this.tech_.currentTime();\n      var buffered = this.tech_.buffered();\n\n      if (!buffered.length) {\n        // return true if the playhead reached the absolute end of the playlist\n        return absolutePlaylistEnd - currentTime <= SAFE_TIME_DELTA;\n      }\n\n      var bufferedEnd = buffered.end(buffered.length - 1); // return true if there is too little buffer left and buffer has reached absolute\n      // end of playlist\n\n      return bufferedEnd - currentTime <= SAFE_TIME_DELTA && absolutePlaylistEnd - bufferedEnd <= SAFE_TIME_DELTA;\n    }\n    /**\n     * Blacklists a playlist when an error occurs for a set amount of time\n     * making it unavailable for selection by the rendition selection algorithm\n     * and then forces a new playlist (rendition) selection.\n     *\n     * @param {Object=} error an optional error that may include the playlist\n     * to blacklist\n     * @param {Number=} blacklistDuration an optional number of seconds to blacklist the\n     * playlist\n     */\n\n  }, {\n    key: 'blacklistCurrentPlaylist',\n    value: function blacklistCurrentPlaylist() {\n      var error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var blacklistDuration = arguments[1];\n      var currentPlaylist = void 0;\n      var nextPlaylist = void 0; // If the `error` was generated by the playlist loader, it will contain\n      // the playlist we were trying to load (but failed) and that should be\n      // blacklisted instead of the currently selected playlist which is likely\n      // out-of-date in this scenario\n\n      currentPlaylist = error.playlist || this.masterPlaylistLoader_.media();\n      blacklistDuration = blacklistDuration || error.blacklistDuration || this.blacklistDuration; // If there is no current playlist, then an error occurred while we were\n      // trying to load the master OR while we were disposing of the tech\n\n      if (!currentPlaylist) {\n        this.error = error;\n\n        try {\n          return this.mediaSource.endOfStream('network');\n        } catch (e) {\n          return this.trigger('error');\n        }\n      }\n\n      var isFinalRendition = this.masterPlaylistLoader_.master.playlists.filter(isEnabled).length === 1;\n      var playlists = this.masterPlaylistLoader_.master.playlists;\n\n      if (playlists.length === 1) {\n        // Never blacklisting this playlist because it's the only playlist\n        videojs$1.log.warn('Problem encountered with the current ' + 'HLS playlist. Trying again since it is the only playlist.');\n        this.tech_.trigger('retryplaylist');\n        return this.masterPlaylistLoader_.load(isFinalRendition);\n      }\n\n      if (isFinalRendition) {\n        // Since we're on the final non-blacklisted playlist, and we're about to blacklist\n        // it, instead of erring the player or retrying this playlist, clear out the current\n        // blacklist. This allows other playlists to be attempted in case any have been\n        // fixed.\n        videojs$1.log.warn('Removing all playlists from the blacklist because the last ' + 'rendition is about to be blacklisted.');\n        playlists.forEach(function (playlist) {\n          if (playlist.excludeUntil !== Infinity) {\n            delete playlist.excludeUntil;\n          }\n        }); // Technically we are retrying a playlist, in that we are simply retrying a previous\n        // playlist. This is needed for users relying on the retryplaylist event to catch a\n        // case where the player might be stuck and looping through \"dead\" playlists.\n\n        this.tech_.trigger('retryplaylist');\n      } // Blacklist this playlist\n\n\n      currentPlaylist.excludeUntil = Date.now() + blacklistDuration * 1000;\n      this.tech_.trigger('blacklistplaylist');\n      this.tech_.trigger({\n        type: 'usage',\n        name: 'hls-rendition-blacklisted'\n      }); // Select a new playlist\n\n      nextPlaylist = this.selectPlaylist();\n      videojs$1.log.warn('Problem encountered with the current HLS playlist.' + (error.message ? ' ' + error.message : '') + ' Switching to another playlist.');\n      return this.masterPlaylistLoader_.media(nextPlaylist, isFinalRendition);\n    }\n    /**\n     * Pause all segment loaders\n     */\n\n  }, {\n    key: 'pauseLoading',\n    value: function pauseLoading() {\n      this.mainSegmentLoader_.pause();\n\n      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\n        this.audioSegmentLoader_.pause();\n      }\n\n      if (this.mediaTypes_.SUBTITLES.activePlaylistLoader) {\n        this.subtitleSegmentLoader_.pause();\n      }\n    }\n    /**\n     * set the current time on all segment loaders\n     *\n     * @param {TimeRange} currentTime the current time to set\n     * @return {TimeRange} the current time\n     */\n\n  }, {\n    key: 'setCurrentTime',\n    value: function setCurrentTime(currentTime) {\n      var buffered = findRange(this.tech_.buffered(), currentTime);\n\n      if (!(this.masterPlaylistLoader_ && this.masterPlaylistLoader_.media())) {\n        // return immediately if the metadata is not ready yet\n        return 0;\n      } // it's clearly an edge-case but don't thrown an error if asked to\n      // seek within an empty playlist\n\n\n      if (!this.masterPlaylistLoader_.media().segments) {\n        return 0;\n      } // In flash playback, the segment loaders should be reset on every seek, even\n      // in buffer seeks. If the seek location is already buffered, continue buffering as\n      // usual\n      // TODO: redo this comment\n\n\n      if (buffered && buffered.length) {\n        return currentTime;\n      } // cancel outstanding requests so we begin buffering at the new\n      // location\n\n\n      this.mainSegmentLoader_.resetEverything();\n      this.mainSegmentLoader_.abort();\n\n      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\n        this.audioSegmentLoader_.resetEverything();\n        this.audioSegmentLoader_.abort();\n      }\n\n      if (this.mediaTypes_.SUBTITLES.activePlaylistLoader) {\n        this.subtitleSegmentLoader_.resetEverything();\n        this.subtitleSegmentLoader_.abort();\n      } // start segment loader loading in case they are paused\n\n\n      this.load();\n    }\n    /**\n     * get the current duration\n     *\n     * @return {TimeRange} the duration\n     */\n\n  }, {\n    key: 'duration',\n    value: function duration$$1() {\n      if (!this.masterPlaylistLoader_) {\n        return 0;\n      }\n\n      if (this.mediaSource) {\n        return this.mediaSource.duration;\n      }\n\n      return Hls.Playlist.duration(this.masterPlaylistLoader_.media());\n    }\n    /**\n     * check the seekable range\n     *\n     * @return {TimeRange} the seekable range\n     */\n\n  }, {\n    key: 'seekable',\n    value: function seekable$$1() {\n      return this.seekable_;\n    }\n  }, {\n    key: 'onSyncInfoUpdate_',\n    value: function onSyncInfoUpdate_() {\n      var mainSeekable = void 0;\n      var audioSeekable = void 0;\n\n      if (!this.masterPlaylistLoader_) {\n        return;\n      }\n\n      var media = this.masterPlaylistLoader_.media();\n\n      if (!media) {\n        return;\n      }\n\n      var expired = this.syncController_.getExpiredTime(media, this.mediaSource.duration);\n\n      if (expired === null) {\n        // not enough information to update seekable\n        return;\n      }\n\n      mainSeekable = Hls.Playlist.seekable(media, expired);\n\n      if (mainSeekable.length === 0) {\n        return;\n      }\n\n      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\n        media = this.mediaTypes_.AUDIO.activePlaylistLoader.media();\n        expired = this.syncController_.getExpiredTime(media, this.mediaSource.duration);\n\n        if (expired === null) {\n          return;\n        }\n\n        audioSeekable = Hls.Playlist.seekable(media, expired);\n\n        if (audioSeekable.length === 0) {\n          return;\n        }\n      }\n\n      var oldEnd = void 0;\n      var oldStart = void 0;\n\n      if (this.seekable_ && this.seekable_.length) {\n        oldEnd = this.seekable_.end(0);\n        oldStart = this.seekable_.start(0);\n      }\n\n      if (!audioSeekable) {\n        // seekable has been calculated based on buffering video data so it\n        // can be returned directly\n        this.seekable_ = mainSeekable;\n      } else if (audioSeekable.start(0) > mainSeekable.end(0) || mainSeekable.start(0) > audioSeekable.end(0)) {\n        // seekables are pretty far off, rely on main\n        this.seekable_ = mainSeekable;\n      } else {\n        this.seekable_ = videojs$1.createTimeRanges([[audioSeekable.start(0) > mainSeekable.start(0) ? audioSeekable.start(0) : mainSeekable.start(0), audioSeekable.end(0) < mainSeekable.end(0) ? audioSeekable.end(0) : mainSeekable.end(0)]]);\n      } // seekable is the same as last time\n\n\n      if (this.seekable_ && this.seekable_.length) {\n        if (this.seekable_.end(0) === oldEnd && this.seekable_.start(0) === oldStart) {\n          return;\n        }\n      }\n\n      this.logger_('seekable updated [' + printableRange(this.seekable_) + ']');\n      this.tech_.trigger('seekablechanged');\n    }\n    /**\n     * Update the player duration\n     */\n\n  }, {\n    key: 'updateDuration',\n    value: function updateDuration() {\n      var _this6 = this;\n\n      var oldDuration = this.mediaSource.duration;\n      var newDuration = Hls.Playlist.duration(this.masterPlaylistLoader_.media());\n      var buffered = this.tech_.buffered();\n\n      var setDuration = function setDuration() {\n        // on firefox setting the duration may sometimes cause an exception\n        // even if the media source is open and source buffers are not\n        // updating, something about the media source being in an invalid state.\n        _this6.logger_('Setting duration from ' + _this6.mediaSource.duration + ' => ' + newDuration);\n\n        try {\n          _this6.mediaSource.duration = newDuration;\n        } catch (e) {\n          videojs$1.log.warn('Failed to set media source duration', e);\n        }\n\n        _this6.tech_.trigger('durationchange');\n\n        _this6.mediaSource.removeEventListener('sourceopen', setDuration);\n      };\n\n      if (buffered.length > 0) {\n        newDuration = Math.max(newDuration, buffered.end(buffered.length - 1));\n      } // if the duration has changed, invalidate the cached value\n\n\n      if (oldDuration !== newDuration) {\n        // update the duration\n        if (this.mediaSource.readyState !== 'open') {\n          this.mediaSource.addEventListener('sourceopen', setDuration);\n        } else {\n          setDuration();\n        }\n      }\n    }\n    /**\n     * dispose of the MasterPlaylistController and everything\n     * that it controls\n     */\n\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      var _this7 = this;\n\n      this.decrypter_.terminate();\n      this.masterPlaylistLoader_.dispose();\n      this.mainSegmentLoader_.dispose();\n      ['AUDIO', 'SUBTITLES'].forEach(function (type) {\n        var groups = _this7.mediaTypes_[type].groups;\n\n        for (var id in groups) {\n          groups[id].forEach(function (group) {\n            if (group.playlistLoader) {\n              group.playlistLoader.dispose();\n            }\n          });\n        }\n      });\n      this.audioSegmentLoader_.dispose();\n      this.subtitleSegmentLoader_.dispose();\n    }\n    /**\n     * return the master playlist object if we have one\n     *\n     * @return {Object} the master playlist object that we parsed\n     */\n\n  }, {\n    key: 'master',\n    value: function master() {\n      return this.masterPlaylistLoader_.master;\n    }\n    /**\n     * return the currently selected playlist\n     *\n     * @return {Object} the currently selected playlist object that we parsed\n     */\n\n  }, {\n    key: 'media',\n    value: function media() {\n      // playlist loader will not return media if it has not been fully loaded\n      return this.masterPlaylistLoader_.media() || this.initialMedia_;\n    }\n    /**\n     * setup our internal source buffers on our segment Loaders\n     *\n     * @private\n     */\n\n  }, {\n    key: 'setupSourceBuffers_',\n    value: function setupSourceBuffers_() {\n      var media = this.masterPlaylistLoader_.media();\n      var mimeTypes = void 0; // wait until a media playlist is available and the Media Source is\n      // attached\n\n      if (!media || this.mediaSource.readyState !== 'open') {\n        return;\n      }\n\n      mimeTypes = mimeTypesForPlaylist(this.masterPlaylistLoader_.master, media);\n\n      if (mimeTypes.length < 1) {\n        this.error = 'No compatible SourceBuffer configuration for the variant stream:' + media.resolvedUri;\n        return this.mediaSource.endOfStream('decode');\n      }\n\n      this.configureLoaderMimeTypes_(mimeTypes); // exclude any incompatible variant streams from future playlist\n      // selection\n\n      this.excludeIncompatibleVariants_(media);\n    }\n  }, {\n    key: 'configureLoaderMimeTypes_',\n    value: function configureLoaderMimeTypes_(mimeTypes) {\n      // If the content is demuxed, we can't start appending segments to a source buffer\n      // until both source buffers are set up, or else the browser may not let us add the\n      // second source buffer (it will assume we are playing either audio only or video\n      // only).\n      var sourceBufferEmitter = // If there is more than one mime type\n      mimeTypes.length > 1 && // and the first mime type does not have muxed video and audio\n      mimeTypes[0].indexOf(',') === -1 && // and the two mime types are different (they can be the same in the case of audio\n      // only with alternate audio)\n      mimeTypes[0] !== mimeTypes[1] ? // then we want to wait on the second source buffer\n      new videojs$1.EventTarget() : // otherwise there is no need to wait as the content is either audio only,\n      // video only, or muxed content.\n      null;\n      this.mainSegmentLoader_.mimeType(mimeTypes[0], sourceBufferEmitter);\n\n      if (mimeTypes[1]) {\n        this.audioSegmentLoader_.mimeType(mimeTypes[1], sourceBufferEmitter);\n      }\n    }\n    /**\n     * Blacklists playlists with codecs that are unsupported by the browser.\n     */\n\n  }, {\n    key: 'excludeUnsupportedVariants_',\n    value: function excludeUnsupportedVariants_() {\n      this.master().playlists.forEach(function (variant) {\n        if (variant.attributes.CODECS && window$1.MediaSource && window$1.MediaSource.isTypeSupported && !window$1.MediaSource.isTypeSupported('video/mp4; codecs=\"' + mapLegacyAvcCodecs(variant.attributes.CODECS) + '\"')) {\n          variant.excludeUntil = Infinity;\n        }\n      });\n    }\n    /**\n     * Blacklist playlists that are known to be codec or\n     * stream-incompatible with the SourceBuffer configuration. For\n     * instance, Media Source Extensions would cause the video element to\n     * stall waiting for video data if you switched from a variant with\n     * video and audio to an audio-only one.\n     *\n     * @param {Object} media a media playlist compatible with the current\n     * set of SourceBuffers. Variants in the current master playlist that\n     * do not appear to have compatible codec or stream configurations\n     * will be excluded from the default playlist selection algorithm\n     * indefinitely.\n     * @private\n     */\n\n  }, {\n    key: 'excludeIncompatibleVariants_',\n    value: function excludeIncompatibleVariants_(media) {\n      var codecCount = 2;\n      var videoCodec = null;\n      var codecs = void 0;\n\n      if (media.attributes.CODECS) {\n        codecs = parseCodecs(media.attributes.CODECS);\n        videoCodec = codecs.videoCodec;\n        codecCount = codecs.codecCount;\n      }\n\n      this.master().playlists.forEach(function (variant) {\n        var variantCodecs = {\n          codecCount: 2,\n          videoCodec: null\n        };\n\n        if (variant.attributes.CODECS) {\n          variantCodecs = parseCodecs(variant.attributes.CODECS);\n        } // if the streams differ in the presence or absence of audio or\n        // video, they are incompatible\n\n\n        if (variantCodecs.codecCount !== codecCount) {\n          variant.excludeUntil = Infinity;\n        } // if h.264 is specified on the current playlist, some flavor of\n        // it must be specified on all compatible variants\n\n\n        if (variantCodecs.videoCodec !== videoCodec) {\n          variant.excludeUntil = Infinity;\n        }\n      });\n    }\n  }, {\n    key: 'updateAdCues_',\n    value: function updateAdCues_(media) {\n      var offset = 0;\n      var seekable$$1 = this.seekable();\n\n      if (seekable$$1.length) {\n        offset = seekable$$1.start(0);\n      }\n\n      updateAdCues(media, this.cueTagsTrack_, offset);\n    }\n    /**\n     * Calculates the desired forward buffer length based on current time\n     *\n     * @return {Number} Desired forward buffer length in seconds\n     */\n\n  }, {\n    key: 'goalBufferLength',\n    value: function goalBufferLength() {\n      var currentTime = this.tech_.currentTime();\n      var initial = Config.GOAL_BUFFER_LENGTH;\n      var rate = Config.GOAL_BUFFER_LENGTH_RATE;\n      var max = Math.max(initial, Config.MAX_GOAL_BUFFER_LENGTH);\n      return Math.min(initial + currentTime * rate, max);\n    }\n    /**\n     * Calculates the desired buffer low water line based on current time\n     *\n     * @return {Number} Desired buffer low water line in seconds\n     */\n\n  }, {\n    key: 'bufferLowWaterLine',\n    value: function bufferLowWaterLine() {\n      var currentTime = this.tech_.currentTime();\n      var initial = Config.BUFFER_LOW_WATER_LINE;\n      var rate = Config.BUFFER_LOW_WATER_LINE_RATE;\n      var max = Math.max(initial, Config.MAX_BUFFER_LOW_WATER_LINE);\n      return Math.min(initial + currentTime * rate, max);\n    }\n  }]);\n  return MasterPlaylistController;\n}(videojs$1.EventTarget);\n/**\n * Returns a function that acts as the Enable/disable playlist function.\n *\n * @param {PlaylistLoader} loader - The master playlist loader\n * @param {String} playlistUri - uri of the playlist\n * @param {Function} changePlaylistFn - A function to be called after a\n * playlist's enabled-state has been changed. Will NOT be called if a\n * playlist's enabled-state is unchanged\n * @param {Boolean=} enable - Value to set the playlist enabled-state to\n * or if undefined returns the current enabled-state for the playlist\n * @return {Function} Function for setting/getting enabled\n */\n\n\nvar enableFunction = function enableFunction(loader, playlistUri, changePlaylistFn) {\n  return function (enable) {\n    var playlist = loader.master.playlists[playlistUri];\n    var incompatible = isIncompatible(playlist);\n    var currentlyEnabled = isEnabled(playlist);\n\n    if (typeof enable === 'undefined') {\n      return currentlyEnabled;\n    }\n\n    if (enable) {\n      delete playlist.disabled;\n    } else {\n      playlist.disabled = true;\n    }\n\n    if (enable !== currentlyEnabled && !incompatible) {\n      // Ensure the outside world knows about our changes\n      changePlaylistFn();\n\n      if (enable) {\n        loader.trigger('renditionenabled');\n      } else {\n        loader.trigger('renditiondisabled');\n      }\n    }\n\n    return enable;\n  };\n};\n/**\n * The representation object encapsulates the publicly visible information\n * in a media playlist along with a setter/getter-type function (enabled)\n * for changing the enabled-state of a particular playlist entry\n *\n * @class Representation\n */\n\n\nvar Representation = function Representation(hlsHandler, playlist, id) {\n  classCallCheck(this, Representation);\n  var mpc = hlsHandler.masterPlaylistController_,\n      smoothQualityChange = hlsHandler.options_.smoothQualityChange; // Get a reference to a bound version of the quality change function\n\n  var changeType = smoothQualityChange ? 'smooth' : 'fast';\n  var qualityChangeFunction = mpc[changeType + 'QualityChange_'].bind(mpc); // some playlist attributes are optional\n\n  if (playlist.attributes.RESOLUTION) {\n    var resolution = playlist.attributes.RESOLUTION;\n    this.width = resolution.width;\n    this.height = resolution.height;\n  }\n\n  this.bandwidth = playlist.attributes.BANDWIDTH; // The id is simply the ordinality of the media playlist\n  // within the master playlist\n\n  this.id = id; // Partially-apply the enableFunction to create a playlist-\n  // specific variant\n\n  this.enabled = enableFunction(hlsHandler.playlists, playlist.uri, qualityChangeFunction);\n};\n/**\n * A mixin function that adds the `representations` api to an instance\n * of the HlsHandler class\n * @param {HlsHandler} hlsHandler - An instance of HlsHandler to add the\n * representation API into\n */\n\n\nvar renditionSelectionMixin = function renditionSelectionMixin(hlsHandler) {\n  var playlists = hlsHandler.playlists; // Add a single API-specific function to the HlsHandler instance\n\n  hlsHandler.representations = function () {\n    return playlists.master.playlists.filter(function (media) {\n      return !isIncompatible(media);\n    }).map(function (e, i) {\n      return new Representation(hlsHandler, e, e.uri);\n    });\n  };\n};\n/**\n * @file playback-watcher.js\n *\n * Playback starts, and now my watch begins. It shall not end until my death. I shall\n * take no wait, hold no uncleared timeouts, father no bad seeks. I shall wear no crowns\n * and win no glory. I shall live and die at my post. I am the corrector of the underflow.\n * I am the watcher of gaps. I am the shield that guards the realms of seekable. I pledge\n * my life and honor to the Playback Watch, for this Player and all the Players to come.\n */\n// Set of events that reset the playback-watcher time check logic and clear the timeout\n\n\nvar timerCancelEvents = ['seeking', 'seeked', 'pause', 'playing', 'error'];\n/**\n * @class PlaybackWatcher\n */\n\nvar PlaybackWatcher = function () {\n  /**\n   * Represents an PlaybackWatcher object.\n   * @constructor\n   * @param {object} options an object that includes the tech and settings\n   */\n  function PlaybackWatcher(options) {\n    var _this = this;\n\n    classCallCheck(this, PlaybackWatcher);\n    this.tech_ = options.tech;\n    this.seekable = options.seekable;\n    this.seekTo = options.seekTo;\n    this.allowSeeksWithinUnsafeLiveWindow = options.allowSeeksWithinUnsafeLiveWindow;\n    this.media = options.media;\n    this.consecutiveUpdates = 0;\n    this.lastRecordedTime = null;\n    this.timer_ = null;\n    this.checkCurrentTimeTimeout_ = null;\n    this.logger_ = logger('PlaybackWatcher');\n    this.logger_('initialize');\n\n    var canPlayHandler = function canPlayHandler() {\n      return _this.monitorCurrentTime_();\n    };\n\n    var waitingHandler = function waitingHandler() {\n      return _this.techWaiting_();\n    };\n\n    var cancelTimerHandler = function cancelTimerHandler() {\n      return _this.cancelTimer_();\n    };\n\n    var fixesBadSeeksHandler = function fixesBadSeeksHandler() {\n      return _this.fixesBadSeeks_();\n    };\n\n    this.tech_.on('seekablechanged', fixesBadSeeksHandler);\n    this.tech_.on('waiting', waitingHandler);\n    this.tech_.on(timerCancelEvents, cancelTimerHandler);\n    this.tech_.on('canplay', canPlayHandler); // Define the dispose function to clean up our events\n\n    this.dispose = function () {\n      _this.logger_('dispose');\n\n      _this.tech_.off('seekablechanged', fixesBadSeeksHandler);\n\n      _this.tech_.off('waiting', waitingHandler);\n\n      _this.tech_.off(timerCancelEvents, cancelTimerHandler);\n\n      _this.tech_.off('canplay', canPlayHandler);\n\n      if (_this.checkCurrentTimeTimeout_) {\n        window$1.clearTimeout(_this.checkCurrentTimeTimeout_);\n      }\n\n      _this.cancelTimer_();\n    };\n  }\n  /**\n   * Periodically check current time to see if playback stopped\n   *\n   * @private\n   */\n\n\n  createClass(PlaybackWatcher, [{\n    key: 'monitorCurrentTime_',\n    value: function monitorCurrentTime_() {\n      this.checkCurrentTime_();\n\n      if (this.checkCurrentTimeTimeout_) {\n        window$1.clearTimeout(this.checkCurrentTimeTimeout_);\n      } // 42 = 24 fps // 250 is what Webkit uses // FF uses 15\n\n\n      this.checkCurrentTimeTimeout_ = window$1.setTimeout(this.monitorCurrentTime_.bind(this), 250);\n    }\n    /**\n     * The purpose of this function is to emulate the \"waiting\" event on\n     * browsers that do not emit it when they are waiting for more\n     * data to continue playback\n     *\n     * @private\n     */\n\n  }, {\n    key: 'checkCurrentTime_',\n    value: function checkCurrentTime_() {\n      if (this.tech_.seeking() && this.fixesBadSeeks_()) {\n        this.consecutiveUpdates = 0;\n        this.lastRecordedTime = this.tech_.currentTime();\n        return;\n      }\n\n      if (this.tech_.paused() || this.tech_.seeking()) {\n        return;\n      }\n\n      var currentTime = this.tech_.currentTime();\n      var buffered = this.tech_.buffered();\n\n      if (this.lastRecordedTime === currentTime && (!buffered.length || currentTime + SAFE_TIME_DELTA >= buffered.end(buffered.length - 1))) {\n        // If current time is at the end of the final buffered region, then any playback\n        // stall is most likely caused by buffering in a low bandwidth environment. The tech\n        // should fire a `waiting` event in this scenario, but due to browser and tech\n        // inconsistencies. Calling `techWaiting_` here allows us to simulate\n        // responding to a native `waiting` event when the tech fails to emit one.\n        return this.techWaiting_();\n      }\n\n      if (this.consecutiveUpdates >= 5 && currentTime === this.lastRecordedTime) {\n        this.consecutiveUpdates++;\n        this.waiting_();\n      } else if (currentTime === this.lastRecordedTime) {\n        this.consecutiveUpdates++;\n      } else {\n        this.consecutiveUpdates = 0;\n        this.lastRecordedTime = currentTime;\n      }\n    }\n    /**\n     * Cancels any pending timers and resets the 'timeupdate' mechanism\n     * designed to detect that we are stalled\n     *\n     * @private\n     */\n\n  }, {\n    key: 'cancelTimer_',\n    value: function cancelTimer_() {\n      this.consecutiveUpdates = 0;\n\n      if (this.timer_) {\n        this.logger_('cancelTimer_');\n        clearTimeout(this.timer_);\n      }\n\n      this.timer_ = null;\n    }\n    /**\n     * Fixes situations where there's a bad seek\n     *\n     * @return {Boolean} whether an action was taken to fix the seek\n     * @private\n     */\n\n  }, {\n    key: 'fixesBadSeeks_',\n    value: function fixesBadSeeks_() {\n      var seeking = this.tech_.seeking();\n\n      if (!seeking) {\n        return false;\n      }\n\n      var seekable = this.seekable();\n      var currentTime = this.tech_.currentTime();\n      var isAfterSeekableRange = this.afterSeekableWindow_(seekable, currentTime, this.media(), this.allowSeeksWithinUnsafeLiveWindow);\n      var seekTo = void 0;\n\n      if (isAfterSeekableRange) {\n        var seekableEnd = seekable.end(seekable.length - 1); // sync to live point (if VOD, our seekable was updated and we're simply adjusting)\n\n        seekTo = seekableEnd;\n      }\n\n      if (this.beforeSeekableWindow_(seekable, currentTime)) {\n        var seekableStart = seekable.start(0); // sync to the beginning of the live window\n        // provide a buffer of .1 seconds to handle rounding/imprecise numbers\n\n        seekTo = seekableStart + SAFE_TIME_DELTA;\n      }\n\n      if (typeof seekTo !== 'undefined') {\n        this.logger_('Trying to seek outside of seekable at time ' + currentTime + ' with ' + ('seekable range ' + printableRange(seekable) + '. Seeking to ') + (seekTo + '.'));\n        this.seekTo(seekTo);\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * Handler for situations when we determine the player is waiting.\n     *\n     * @private\n     */\n\n  }, {\n    key: 'waiting_',\n    value: function waiting_() {\n      if (this.techWaiting_()) {\n        return;\n      } // All tech waiting checks failed. Use last resort correction\n\n\n      var currentTime = this.tech_.currentTime();\n      var buffered = this.tech_.buffered();\n      var currentRange = findRange(buffered, currentTime); // Sometimes the player can stall for unknown reasons within a contiguous buffered\n      // region with no indication that anything is amiss (seen in Firefox). Seeking to\n      // currentTime is usually enough to kickstart the player. This checks that the player\n      // is currently within a buffered region before attempting a corrective seek.\n      // Chrome does not appear to continue `timeupdate` events after a `waiting` event\n      // until there is ~ 3 seconds of forward buffer available. PlaybackWatcher should also\n      // make sure there is ~3 seconds of forward buffer before taking any corrective action\n      // to avoid triggering an `unknownwaiting` event when the network is slow.\n\n      if (currentRange.length && currentTime + 3 <= currentRange.end(0)) {\n        this.cancelTimer_();\n        this.seekTo(currentTime);\n        this.logger_('Stopped at ' + currentTime + ' while inside a buffered region ' + ('[' + currentRange.start(0) + ' -> ' + currentRange.end(0) + ']. Attempting to resume ') + 'playback by seeking to the current time.'); // unknown waiting corrections may be useful for monitoring QoS\n\n        this.tech_.trigger({\n          type: 'usage',\n          name: 'hls-unknown-waiting'\n        });\n        return;\n      }\n    }\n    /**\n     * Handler for situations when the tech fires a `waiting` event\n     *\n     * @return {Boolean}\n     *         True if an action (or none) was needed to correct the waiting. False if no\n     *         checks passed\n     * @private\n     */\n\n  }, {\n    key: 'techWaiting_',\n    value: function techWaiting_() {\n      var seekable = this.seekable();\n      var currentTime = this.tech_.currentTime();\n\n      if (this.tech_.seeking() && this.fixesBadSeeks_()) {\n        // Tech is seeking or bad seek fixed, no action needed\n        return true;\n      }\n\n      if (this.tech_.seeking() || this.timer_ !== null) {\n        // Tech is seeking or already waiting on another action, no action needed\n        return true;\n      }\n\n      if (this.beforeSeekableWindow_(seekable, currentTime)) {\n        var livePoint = seekable.end(seekable.length - 1);\n        this.logger_('Fell out of live window at time ' + currentTime + '. Seeking to ' + ('live point (seekable end) ' + livePoint));\n        this.cancelTimer_();\n        this.seekTo(livePoint); // live window resyncs may be useful for monitoring QoS\n\n        this.tech_.trigger({\n          type: 'usage',\n          name: 'hls-live-resync'\n        });\n        return true;\n      }\n\n      var buffered = this.tech_.buffered();\n      var nextRange = findNextRange(buffered, currentTime);\n\n      if (this.videoUnderflow_(nextRange, buffered, currentTime)) {\n        // Even though the video underflowed and was stuck in a gap, the audio overplayed\n        // the gap, leading currentTime into a buffered range. Seeking to currentTime\n        // allows the video to catch up to the audio position without losing any audio\n        // (only suffering ~3 seconds of frozen video and a pause in audio playback).\n        this.cancelTimer_();\n        this.seekTo(currentTime); // video underflow may be useful for monitoring QoS\n\n        this.tech_.trigger({\n          type: 'usage',\n          name: 'hls-video-underflow'\n        });\n        return true;\n      } // check for gap\n\n\n      if (nextRange.length > 0) {\n        var difference = nextRange.start(0) - currentTime;\n        this.logger_('Stopped at ' + currentTime + ', setting timer for ' + difference + ', seeking ' + ('to ' + nextRange.start(0)));\n        this.timer_ = setTimeout(this.skipTheGap_.bind(this), difference * 1000, currentTime);\n        return true;\n      } // All checks failed. Returning false to indicate failure to correct waiting\n\n\n      return false;\n    }\n  }, {\n    key: 'afterSeekableWindow_',\n    value: function afterSeekableWindow_(seekable, currentTime, playlist) {\n      var allowSeeksWithinUnsafeLiveWindow = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n      if (!seekable.length) {\n        // we can't make a solid case if there's no seekable, default to false\n        return false;\n      }\n\n      var allowedEnd = seekable.end(seekable.length - 1) + SAFE_TIME_DELTA;\n      var isLive = !playlist.endList;\n\n      if (isLive && allowSeeksWithinUnsafeLiveWindow) {\n        allowedEnd = seekable.end(seekable.length - 1) + playlist.targetDuration * 3;\n      }\n\n      if (currentTime > allowedEnd) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: 'beforeSeekableWindow_',\n    value: function beforeSeekableWindow_(seekable, currentTime) {\n      if (seekable.length && // can't fall before 0 and 0 seekable start identifies VOD stream\n      seekable.start(0) > 0 && currentTime < seekable.start(0) - SAFE_TIME_DELTA) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: 'videoUnderflow_',\n    value: function videoUnderflow_(nextRange, buffered, currentTime) {\n      if (nextRange.length === 0) {\n        // Even if there is no available next range, there is still a possibility we are\n        // stuck in a gap due to video underflow.\n        var gap = this.gapFromVideoUnderflow_(buffered, currentTime);\n\n        if (gap) {\n          this.logger_('Encountered a gap in video from ' + gap.start + ' to ' + gap.end + '. ' + ('Seeking to current time ' + currentTime));\n          return true;\n        }\n      }\n\n      return false;\n    }\n    /**\n     * Timer callback. If playback still has not proceeded, then we seek\n     * to the start of the next buffered region.\n     *\n     * @private\n     */\n\n  }, {\n    key: 'skipTheGap_',\n    value: function skipTheGap_(scheduledCurrentTime) {\n      var buffered = this.tech_.buffered();\n      var currentTime = this.tech_.currentTime();\n      var nextRange = findNextRange(buffered, currentTime);\n      this.cancelTimer_();\n\n      if (nextRange.length === 0 || currentTime !== scheduledCurrentTime) {\n        return;\n      }\n\n      this.logger_('skipTheGap_:', 'currentTime:', currentTime, 'scheduled currentTime:', scheduledCurrentTime, 'nextRange start:', nextRange.start(0)); // only seek if we still have not played\n\n      this.seekTo(nextRange.start(0) + TIME_FUDGE_FACTOR);\n      this.tech_.trigger({\n        type: 'usage',\n        name: 'hls-gap-skip'\n      });\n    }\n  }, {\n    key: 'gapFromVideoUnderflow_',\n    value: function gapFromVideoUnderflow_(buffered, currentTime) {\n      // At least in Chrome, if there is a gap in the video buffer, the audio will continue\n      // playing for ~3 seconds after the video gap starts. This is done to account for\n      // video buffer underflow/underrun (note that this is not done when there is audio\n      // buffer underflow/underrun -- in that case the video will stop as soon as it\n      // encounters the gap, as audio stalls are more noticeable/jarring to a user than\n      // video stalls). The player's time will reflect the playthrough of audio, so the\n      // time will appear as if we are in a buffered region, even if we are stuck in a\n      // \"gap.\"\n      //\n      // Example:\n      // video buffer:   0 => 10.1, 10.2 => 20\n      // audio buffer:   0 => 20\n      // overall buffer: 0 => 10.1, 10.2 => 20\n      // current time: 13\n      //\n      // Chrome's video froze at 10 seconds, where the video buffer encountered the gap,\n      // however, the audio continued playing until it reached ~3 seconds past the gap\n      // (13 seconds), at which point it stops as well. Since current time is past the\n      // gap, findNextRange will return no ranges.\n      //\n      // To check for this issue, we see if there is a gap that starts somewhere within\n      // a 3 second range (3 seconds +/- 1 second) back from our current time.\n      var gaps = findGaps(buffered);\n\n      for (var i = 0; i < gaps.length; i++) {\n        var start = gaps.start(i);\n        var end = gaps.end(i); // gap is starts no more than 4 seconds back\n\n        if (currentTime - start < 4 && currentTime - start > 2) {\n          return {\n            start: start,\n            end: end\n          };\n        }\n      }\n\n      return null;\n    }\n  }]);\n  return PlaybackWatcher;\n}();\n\nvar defaultOptions = {\n  errorInterval: 30,\n  getSource: function getSource(next) {\n    var tech = this.tech({\n      IWillNotUseThisInPlugins: true\n    });\n    var sourceObj = tech.currentSource_;\n    return next(sourceObj);\n  }\n};\n/**\n * Main entry point for the plugin\n *\n * @param {Player} player a reference to a videojs Player instance\n * @param {Object} [options] an object with plugin options\n * @private\n */\n\nvar initPlugin = function initPlugin(player, options) {\n  var lastCalled = 0;\n  var seekTo = 0;\n  var localOptions = videojs$1.mergeOptions(defaultOptions, options);\n  player.ready(function () {\n    player.trigger({\n      type: 'usage',\n      name: 'hls-error-reload-initialized'\n    });\n  });\n  /**\n   * Player modifications to perform that must wait until `loadedmetadata`\n   * has been triggered\n   *\n   * @private\n   */\n\n  var loadedMetadataHandler = function loadedMetadataHandler() {\n    if (seekTo) {\n      player.currentTime(seekTo);\n    }\n  };\n  /**\n   * Set the source on the player element, play, and seek if necessary\n   *\n   * @param {Object} sourceObj An object specifying the source url and mime-type to play\n   * @private\n   */\n\n\n  var setSource = function setSource(sourceObj) {\n    if (sourceObj === null || sourceObj === undefined) {\n      return;\n    }\n\n    seekTo = player.duration() !== Infinity && player.currentTime() || 0;\n    player.one('loadedmetadata', loadedMetadataHandler);\n    player.src(sourceObj);\n    player.trigger({\n      type: 'usage',\n      name: 'hls-error-reload'\n    });\n    player.play();\n  };\n  /**\n   * Attempt to get a source from either the built-in getSource function\n   * or a custom function provided via the options\n   *\n   * @private\n   */\n\n\n  var errorHandler = function errorHandler() {\n    // Do not attempt to reload the source if a source-reload occurred before\n    // 'errorInterval' time has elapsed since the last source-reload\n    if (Date.now() - lastCalled < localOptions.errorInterval * 1000) {\n      player.trigger({\n        type: 'usage',\n        name: 'hls-error-reload-canceled'\n      });\n      return;\n    }\n\n    if (!localOptions.getSource || typeof localOptions.getSource !== 'function') {\n      videojs$1.log.error('ERROR: reloadSourceOnError - The option getSource must be a function!');\n      return;\n    }\n\n    lastCalled = Date.now();\n    return localOptions.getSource.call(player, setSource);\n  };\n  /**\n   * Unbind any event handlers that were bound by the plugin\n   *\n   * @private\n   */\n\n\n  var cleanupEvents = function cleanupEvents() {\n    player.off('loadedmetadata', loadedMetadataHandler);\n    player.off('error', errorHandler);\n    player.off('dispose', cleanupEvents);\n  };\n  /**\n   * Cleanup before re-initializing the plugin\n   *\n   * @param {Object} [newOptions] an object with plugin options\n   * @private\n   */\n\n\n  var reinitPlugin = function reinitPlugin(newOptions) {\n    cleanupEvents();\n    initPlugin(player, newOptions);\n  };\n\n  player.on('error', errorHandler);\n  player.on('dispose', cleanupEvents); // Overwrite the plugin function so that we can correctly cleanup before\n  // initializing the plugin\n\n  player.reloadSourceOnError = reinitPlugin;\n};\n/**\n * Reload the source when an error is detected as long as there\n * wasn't an error previously within the last 30 seconds\n *\n * @param {Object} [options] an object with plugin options\n */\n\n\nvar reloadSourceOnError = function reloadSourceOnError(options) {\n  initPlugin(this, options);\n};\n\nvar version$1 = \"1.10.3\"; // since VHS handles HLS and DASH (and in the future, more types), use * to capture all\n\nvideojs$1.use('*', function (player) {\n  return {\n    setSource: function setSource(srcObj, next) {\n      // pass null as the first argument to indicate that the source is not rejected\n      next(null, srcObj);\n    },\n    // VHS needs to know when seeks happen. For external seeks (generated at the player\n    // level), this middleware will capture the action. For internal seeks (generated at\n    // the tech level), we use a wrapped function so that we can handle it on our own\n    // (specified elsewhere).\n    setCurrentTime: function setCurrentTime(time) {\n      if (player.vhs && player.currentSource().src === player.vhs.source_.src) {\n        player.vhs.setCurrentTime(time);\n      }\n\n      return time;\n    },\n    // Sync VHS after play requests.\n    // This specifically handles replay where the order of actions is\n    // play, video element will seek to 0 (skipping the setCurrentTime middleware)\n    // then triggers a play event.\n    play: function play() {\n      if (player.vhs && player.currentSource().src === player.vhs.source_.src) {\n        player.vhs.setCurrentTime(player.tech_.currentTime());\n      }\n    }\n  };\n});\n/**\n * @file videojs-http-streaming.js\n *\n * The main file for the HLS project.\n * License: https://github.com/videojs/videojs-http-streaming/blob/master/LICENSE\n */\n\nvar Hls$1 = {\n  PlaylistLoader: PlaylistLoader,\n  Playlist: Playlist,\n  Decrypter: Decrypter,\n  AsyncStream: AsyncStream,\n  decrypt: decrypt,\n  utils: utils,\n  STANDARD_PLAYLIST_SELECTOR: lastBandwidthSelector,\n  INITIAL_PLAYLIST_SELECTOR: lowestBitrateCompatibleVariantSelector,\n  comparePlaylistBandwidth: comparePlaylistBandwidth,\n  comparePlaylistResolution: comparePlaylistResolution,\n  xhr: xhrFactory()\n}; // Define getter/setters for config properites\n\n['GOAL_BUFFER_LENGTH', 'MAX_GOAL_BUFFER_LENGTH', 'GOAL_BUFFER_LENGTH_RATE', 'BUFFER_LOW_WATER_LINE', 'MAX_BUFFER_LOW_WATER_LINE', 'BUFFER_LOW_WATER_LINE_RATE', 'BANDWIDTH_VARIANCE'].forEach(function (prop) {\n  Object.defineProperty(Hls$1, prop, {\n    get: function get$$1() {\n      videojs$1.log.warn('using Hls.' + prop + ' is UNSAFE be sure you know what you are doing');\n      return Config[prop];\n    },\n    set: function set$$1(value) {\n      videojs$1.log.warn('using Hls.' + prop + ' is UNSAFE be sure you know what you are doing');\n\n      if (typeof value !== 'number' || value < 0) {\n        videojs$1.log.warn('value of Hls.' + prop + ' must be greater than or equal to 0');\n        return;\n      }\n\n      Config[prop] = value;\n    }\n  });\n});\nvar LOCAL_STORAGE_KEY$1 = 'videojs-vhs';\n\nvar simpleTypeFromSourceType = function simpleTypeFromSourceType(type) {\n  var mpegurlRE = /^(audio|video|application)\\/(x-|vnd\\.apple\\.)?mpegurl/i;\n\n  if (mpegurlRE.test(type)) {\n    return 'hls';\n  }\n\n  var dashRE = /^application\\/dash\\+xml/i;\n\n  if (dashRE.test(type)) {\n    return 'dash';\n  }\n\n  return null;\n};\n/**\n * Updates the selectedIndex of the QualityLevelList when a mediachange happens in hls.\n *\n * @param {QualityLevelList} qualityLevels The QualityLevelList to update.\n * @param {PlaylistLoader} playlistLoader PlaylistLoader containing the new media info.\n * @function handleHlsMediaChange\n */\n\n\nvar handleHlsMediaChange = function handleHlsMediaChange(qualityLevels, playlistLoader) {\n  var newPlaylist = playlistLoader.media();\n  var selectedIndex = -1;\n\n  for (var i = 0; i < qualityLevels.length; i++) {\n    if (qualityLevels[i].id === newPlaylist.uri) {\n      selectedIndex = i;\n      break;\n    }\n  }\n\n  qualityLevels.selectedIndex_ = selectedIndex;\n  qualityLevels.trigger({\n    selectedIndex: selectedIndex,\n    type: 'change'\n  });\n};\n/**\n * Adds quality levels to list once playlist metadata is available\n *\n * @param {QualityLevelList} qualityLevels The QualityLevelList to attach events to.\n * @param {Object} hls Hls object to listen to for media events.\n * @function handleHlsLoadedMetadata\n */\n\n\nvar handleHlsLoadedMetadata = function handleHlsLoadedMetadata(qualityLevels, hls) {\n  hls.representations().forEach(function (rep) {\n    qualityLevels.addQualityLevel(rep);\n  });\n  handleHlsMediaChange(qualityLevels, hls.playlists);\n}; // HLS is a source handler, not a tech. Make sure attempts to use it\n// as one do not cause exceptions.\n\n\nHls$1.canPlaySource = function () {\n  return videojs$1.log.warn('HLS is no longer a tech. Please remove it from ' + 'your player\\'s techOrder.');\n};\n\nvar emeKeySystems = function emeKeySystems(keySystemOptions, videoPlaylist, audioPlaylist) {\n  if (!keySystemOptions) {\n    return keySystemOptions;\n  } // upsert the content types based on the selected playlist\n\n\n  var keySystemContentTypes = {};\n\n  for (var keySystem in keySystemOptions) {\n    keySystemContentTypes[keySystem] = {\n      audioContentType: 'audio/mp4; codecs=\"' + audioPlaylist.attributes.CODECS + '\"',\n      videoContentType: 'video/mp4; codecs=\"' + videoPlaylist.attributes.CODECS + '\"'\n    };\n\n    if (videoPlaylist.contentProtection && videoPlaylist.contentProtection[keySystem] && videoPlaylist.contentProtection[keySystem].pssh) {\n      keySystemContentTypes[keySystem].pssh = videoPlaylist.contentProtection[keySystem].pssh;\n    } // videojs-contrib-eme accepts the option of specifying: 'com.some.cdm': 'url'\n    // so we need to prevent overwriting the URL entirely\n\n\n    if (typeof keySystemOptions[keySystem] === 'string') {\n      keySystemContentTypes[keySystem].url = keySystemOptions[keySystem];\n    }\n  }\n\n  return videojs$1.mergeOptions(keySystemOptions, keySystemContentTypes);\n};\n\nvar setupEmeOptions = function setupEmeOptions(hlsHandler) {\n  if (hlsHandler.options_.sourceType !== 'dash') {\n    return;\n  }\n\n  var player = videojs$1.players[hlsHandler.tech_.options_.playerId];\n\n  if (player.eme) {\n    var sourceOptions = emeKeySystems(hlsHandler.source_.keySystems, hlsHandler.playlists.media(), hlsHandler.masterPlaylistController_.mediaTypes_.AUDIO.activePlaylistLoader.media());\n\n    if (sourceOptions) {\n      player.currentSource().keySystems = sourceOptions; // works around https://bugs.chromium.org/p/chromium/issues/detail?id=895449\n\n      if (player.eme.initializeMediaKeys) {\n        player.eme.initializeMediaKeys();\n      }\n    }\n  }\n};\n\nvar getVhsLocalStorage = function getVhsLocalStorage() {\n  if (!window.localStorage) {\n    return null;\n  }\n\n  var storedObject = window.localStorage.getItem(LOCAL_STORAGE_KEY$1);\n\n  if (!storedObject) {\n    return null;\n  }\n\n  try {\n    return JSON.parse(storedObject);\n  } catch (e) {\n    // someone may have tampered with the value\n    return null;\n  }\n};\n\nvar updateVhsLocalStorage = function updateVhsLocalStorage(options) {\n  if (!window.localStorage) {\n    return false;\n  }\n\n  var objectToStore = getVhsLocalStorage();\n  objectToStore = objectToStore ? videojs$1.mergeOptions(objectToStore, options) : options;\n\n  try {\n    window.localStorage.setItem(LOCAL_STORAGE_KEY$1, JSON.stringify(objectToStore));\n  } catch (e) {\n    // Throws if storage is full (e.g., always on iOS 5+ Safari private mode, where\n    // storage is set to 0).\n    // https://developer.mozilla.org/en-US/docs/Web/API/Storage/setItem#Exceptions\n    // No need to perform any operation.\n    return false;\n  }\n\n  return objectToStore;\n};\n/**\n * Whether the browser has built-in HLS support.\n */\n\n\nHls$1.supportsNativeHls = function () {\n  var video = document.createElement('video'); // native HLS is definitely not supported if HTML5 video isn't\n\n  if (!videojs$1.getTech('Html5').isSupported()) {\n    return false;\n  } // HLS manifests can go by many mime-types\n\n\n  var canPlay = [// Apple santioned\n  'application/vnd.apple.mpegurl', // Apple sanctioned for backwards compatibility\n  'audio/mpegurl', // Very common\n  'audio/x-mpegurl', // Very common\n  'application/x-mpegurl', // Included for completeness\n  'video/x-mpegurl', 'video/mpegurl', 'application/mpegurl'];\n  return canPlay.some(function (canItPlay) {\n    return /maybe|probably/i.test(video.canPlayType(canItPlay));\n  });\n}();\n\nHls$1.supportsNativeDash = function () {\n  if (!videojs$1.getTech('Html5').isSupported()) {\n    return false;\n  }\n\n  return /maybe|probably/i.test(document.createElement('video').canPlayType('application/dash+xml'));\n}();\n\nHls$1.supportsTypeNatively = function (type) {\n  if (type === 'hls') {\n    return Hls$1.supportsNativeHls;\n  }\n\n  if (type === 'dash') {\n    return Hls$1.supportsNativeDash;\n  }\n\n  return false;\n};\n/**\n * HLS is a source handler, not a tech. Make sure attempts to use it\n * as one do not cause exceptions.\n */\n\n\nHls$1.isSupported = function () {\n  return videojs$1.log.warn('HLS is no longer a tech. Please remove it from ' + 'your player\\'s techOrder.');\n};\n\nvar Component$1 = videojs$1.getComponent('Component');\n/**\n * The Hls Handler object, where we orchestrate all of the parts\n * of HLS to interact with video.js\n *\n * @class HlsHandler\n * @extends videojs.Component\n * @param {Object} source the soruce object\n * @param {Tech} tech the parent tech object\n * @param {Object} options optional and required options\n */\n\nvar HlsHandler = function (_Component) {\n  inherits(HlsHandler, _Component);\n\n  function HlsHandler(source, tech, options) {\n    classCallCheck(this, HlsHandler); // tech.player() is deprecated but setup a reference to HLS for\n    // backwards-compatibility\n\n    var _this = possibleConstructorReturn(this, (HlsHandler.__proto__ || Object.getPrototypeOf(HlsHandler)).call(this, tech, options.hls));\n\n    if (tech.options_ && tech.options_.playerId) {\n      var _player = videojs$1(tech.options_.playerId);\n\n      if (!_player.hasOwnProperty('hls')) {\n        Object.defineProperty(_player, 'hls', {\n          get: function get$$1() {\n            videojs$1.log.warn('player.hls is deprecated. Use player.tech().hls instead.');\n            tech.trigger({\n              type: 'usage',\n              name: 'hls-player-access'\n            });\n            return _this;\n          },\n          configurable: true\n        });\n      } // Set up a reference to the HlsHandler from player.vhs. This allows users to start\n      // migrating from player.tech_.hls... to player.vhs... for API access. Although this\n      // isn't the most appropriate form of reference for video.js (since all APIs should\n      // be provided through core video.js), it is a common pattern for plugins, and vhs\n      // will act accordingly.\n\n\n      _player.vhs = _this; // deprecated, for backwards compatibility\n\n      _player.dash = _this;\n      _this.player_ = _player;\n    }\n\n    _this.tech_ = tech;\n    _this.source_ = source;\n    _this.stats = {};\n\n    _this.setOptions_();\n\n    if (_this.options_.overrideNative && tech.overrideNativeAudioTracks && tech.overrideNativeVideoTracks) {\n      tech.overrideNativeAudioTracks(true);\n      tech.overrideNativeVideoTracks(true);\n    } else if (_this.options_.overrideNative && (tech.featuresNativeVideoTracks || tech.featuresNativeAudioTracks)) {\n      // overriding native HLS only works if audio tracks have been emulated\n      // error early if we're misconfigured\n      throw new Error('Overriding native HLS requires emulated tracks. ' + 'See https://git.io/vMpjB');\n    } // listen for fullscreenchange events for this player so that we\n    // can adjust our quality selection quickly\n\n\n    _this.on(document, ['fullscreenchange', 'webkitfullscreenchange', 'mozfullscreenchange', 'MSFullscreenChange'], function (event) {\n      var fullscreenElement = document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.msFullscreenElement;\n\n      if (fullscreenElement && fullscreenElement.contains(_this.tech_.el())) {\n        _this.masterPlaylistController_.smoothQualityChange_();\n      }\n    }); // Handle seeking when looping - middleware doesn't handle this seek event from the tech\n\n\n    _this.on(_this.tech_, 'seeking', function () {\n      if (this.tech_.currentTime() === 0 && this.tech_.player_.loop()) {\n        this.setCurrentTime(0);\n      }\n    });\n\n    _this.on(_this.tech_, 'error', function () {\n      if (this.masterPlaylistController_) {\n        this.masterPlaylistController_.pauseLoading();\n      }\n    });\n\n    _this.on(_this.tech_, 'play', _this.play);\n\n    return _this;\n  }\n\n  createClass(HlsHandler, [{\n    key: 'setOptions_',\n    value: function setOptions_() {\n      var _this2 = this; // defaults\n\n\n      this.options_.withCredentials = this.options_.withCredentials || false;\n      this.options_.handleManifestRedirects = this.options_.handleManifestRedirects || false;\n      this.options_.limitRenditionByPlayerDimensions = this.options_.limitRenditionByPlayerDimensions === false ? false : true;\n      this.options_.smoothQualityChange = this.options_.smoothQualityChange || false;\n      this.options_.useBandwidthFromLocalStorage = typeof this.source_.useBandwidthFromLocalStorage !== 'undefined' ? this.source_.useBandwidthFromLocalStorage : this.options_.useBandwidthFromLocalStorage || false;\n      this.options_.customTagParsers = this.options_.customTagParsers || [];\n      this.options_.customTagMappers = this.options_.customTagMappers || [];\n      this.options_.cacheEncryptionKeys = this.options_.cacheEncryptionKeys || false;\n\n      if (typeof this.options_.blacklistDuration !== 'number') {\n        this.options_.blacklistDuration = 5 * 60;\n      }\n\n      if (typeof this.options_.bandwidth !== 'number') {\n        if (this.options_.useBandwidthFromLocalStorage) {\n          var storedObject = getVhsLocalStorage();\n\n          if (storedObject && storedObject.bandwidth) {\n            this.options_.bandwidth = storedObject.bandwidth;\n            this.tech_.trigger({\n              type: 'usage',\n              name: 'hls-bandwidth-from-local-storage'\n            });\n          }\n\n          if (storedObject && storedObject.throughput) {\n            this.options_.throughput = storedObject.throughput;\n            this.tech_.trigger({\n              type: 'usage',\n              name: 'hls-throughput-from-local-storage'\n            });\n          }\n        }\n      } // if bandwidth was not set by options or pulled from local storage, start playlist\n      // selection at a reasonable bandwidth\n\n\n      if (typeof this.options_.bandwidth !== 'number') {\n        this.options_.bandwidth = Config.INITIAL_BANDWIDTH;\n      } // If the bandwidth number is unchanged from the initial setting\n      // then this takes precedence over the enableLowInitialPlaylist option\n\n\n      this.options_.enableLowInitialPlaylist = this.options_.enableLowInitialPlaylist && this.options_.bandwidth === Config.INITIAL_BANDWIDTH; // grab options passed to player.src\n\n      ['withCredentials', 'limitRenditionByPlayerDimensions', 'bandwidth', 'smoothQualityChange', 'customTagParsers', 'customTagMappers', 'handleManifestRedirects', 'cacheEncryptionKeys'].forEach(function (option) {\n        if (typeof _this2.source_[option] !== 'undefined') {\n          _this2.options_[option] = _this2.source_[option];\n        }\n      });\n      this.limitRenditionByPlayerDimensions = this.options_.limitRenditionByPlayerDimensions;\n    }\n    /**\n     * called when player.src gets called, handle a new source\n     *\n     * @param {Object} src the source object to handle\n     */\n\n  }, {\n    key: 'src',\n    value: function src(_src, type) {\n      var _this3 = this; // do nothing if the src is falsey\n\n\n      if (!_src) {\n        return;\n      }\n\n      this.setOptions_(); // add master playlist controller options\n\n      this.options_.url = this.source_.src;\n      this.options_.tech = this.tech_;\n      this.options_.externHls = Hls$1;\n      this.options_.sourceType = simpleTypeFromSourceType(type); // Whenever we seek internally, we should update both the tech and call our own\n      // setCurrentTime function. This is needed because \"seeking\" events aren't always\n      // reliable. External seeks (via the player object) are handled via middleware.\n\n      this.options_.seekTo = function (time) {\n        _this3.tech_.setCurrentTime(time);\n\n        _this3.setCurrentTime(time);\n      };\n\n      this.masterPlaylistController_ = new MasterPlaylistController(this.options_);\n      this.playbackWatcher_ = new PlaybackWatcher(videojs$1.mergeOptions(this.options_, {\n        seekable: function seekable$$1() {\n          return _this3.seekable();\n        },\n        media: function media() {\n          return _this3.masterPlaylistController_.media();\n        }\n      }));\n      this.masterPlaylistController_.on('error', function () {\n        var player = videojs$1.players[_this3.tech_.options_.playerId];\n        player.error(_this3.masterPlaylistController_.error);\n      }); // `this` in selectPlaylist should be the HlsHandler for backwards\n      // compatibility with < v2\n\n      this.masterPlaylistController_.selectPlaylist = this.selectPlaylist ? this.selectPlaylist.bind(this) : Hls$1.STANDARD_PLAYLIST_SELECTOR.bind(this);\n      this.masterPlaylistController_.selectInitialPlaylist = Hls$1.INITIAL_PLAYLIST_SELECTOR.bind(this); // re-expose some internal objects for backwards compatibility with < v2\n\n      this.playlists = this.masterPlaylistController_.masterPlaylistLoader_;\n      this.mediaSource = this.masterPlaylistController_.mediaSource; // Proxy assignment of some properties to the master playlist\n      // controller. Using a custom property for backwards compatibility\n      // with < v2\n\n      Object.defineProperties(this, {\n        selectPlaylist: {\n          get: function get$$1() {\n            return this.masterPlaylistController_.selectPlaylist;\n          },\n          set: function set$$1(selectPlaylist) {\n            this.masterPlaylistController_.selectPlaylist = selectPlaylist.bind(this);\n          }\n        },\n        throughput: {\n          get: function get$$1() {\n            return this.masterPlaylistController_.mainSegmentLoader_.throughput.rate;\n          },\n          set: function set$$1(throughput) {\n            this.masterPlaylistController_.mainSegmentLoader_.throughput.rate = throughput; // By setting `count` to 1 the throughput value becomes the starting value\n            // for the cumulative average\n\n            this.masterPlaylistController_.mainSegmentLoader_.throughput.count = 1;\n          }\n        },\n        bandwidth: {\n          get: function get$$1() {\n            return this.masterPlaylistController_.mainSegmentLoader_.bandwidth;\n          },\n          set: function set$$1(bandwidth) {\n            this.masterPlaylistController_.mainSegmentLoader_.bandwidth = bandwidth; // setting the bandwidth manually resets the throughput counter\n            // `count` is set to zero that current value of `rate` isn't included\n            // in the cumulative average\n\n            this.masterPlaylistController_.mainSegmentLoader_.throughput = {\n              rate: 0,\n              count: 0\n            };\n          }\n        },\n\n        /**\n         * `systemBandwidth` is a combination of two serial processes bit-rates. The first\n         * is the network bitrate provided by `bandwidth` and the second is the bitrate of\n         * the entire process after that - decryption, transmuxing, and appending - provided\n         * by `throughput`.\n         *\n         * Since the two process are serial, the overall system bandwidth is given by:\n         *   sysBandwidth = 1 / (1 / bandwidth + 1 / throughput)\n         */\n        systemBandwidth: {\n          get: function get$$1() {\n            var invBandwidth = 1 / (this.bandwidth || 1);\n            var invThroughput = void 0;\n\n            if (this.throughput > 0) {\n              invThroughput = 1 / this.throughput;\n            } else {\n              invThroughput = 0;\n            }\n\n            var systemBitrate = Math.floor(1 / (invBandwidth + invThroughput));\n            return systemBitrate;\n          },\n          set: function set$$1() {\n            videojs$1.log.error('The \"systemBandwidth\" property is read-only');\n          }\n        }\n      });\n\n      if (this.options_.bandwidth) {\n        this.bandwidth = this.options_.bandwidth;\n      }\n\n      if (this.options_.throughput) {\n        this.throughput = this.options_.throughput;\n      }\n\n      Object.defineProperties(this.stats, {\n        bandwidth: {\n          get: function get$$1() {\n            return _this3.bandwidth || 0;\n          },\n          enumerable: true\n        },\n        mediaRequests: {\n          get: function get$$1() {\n            return _this3.masterPlaylistController_.mediaRequests_() || 0;\n          },\n          enumerable: true\n        },\n        mediaRequestsAborted: {\n          get: function get$$1() {\n            return _this3.masterPlaylistController_.mediaRequestsAborted_() || 0;\n          },\n          enumerable: true\n        },\n        mediaRequestsTimedout: {\n          get: function get$$1() {\n            return _this3.masterPlaylistController_.mediaRequestsTimedout_() || 0;\n          },\n          enumerable: true\n        },\n        mediaRequestsErrored: {\n          get: function get$$1() {\n            return _this3.masterPlaylistController_.mediaRequestsErrored_() || 0;\n          },\n          enumerable: true\n        },\n        mediaTransferDuration: {\n          get: function get$$1() {\n            return _this3.masterPlaylistController_.mediaTransferDuration_() || 0;\n          },\n          enumerable: true\n        },\n        mediaBytesTransferred: {\n          get: function get$$1() {\n            return _this3.masterPlaylistController_.mediaBytesTransferred_() || 0;\n          },\n          enumerable: true\n        },\n        mediaSecondsLoaded: {\n          get: function get$$1() {\n            return _this3.masterPlaylistController_.mediaSecondsLoaded_() || 0;\n          },\n          enumerable: true\n        },\n        buffered: {\n          get: function get$$1() {\n            return timeRangesToArray(_this3.tech_.buffered());\n          },\n          enumerable: true\n        },\n        currentTime: {\n          get: function get$$1() {\n            return _this3.tech_.currentTime();\n          },\n          enumerable: true\n        },\n        currentSource: {\n          get: function get$$1() {\n            return _this3.tech_.currentSource_;\n          },\n          enumerable: true\n        },\n        currentTech: {\n          get: function get$$1() {\n            return _this3.tech_.name_;\n          },\n          enumerable: true\n        },\n        duration: {\n          get: function get$$1() {\n            return _this3.tech_.duration();\n          },\n          enumerable: true\n        },\n        master: {\n          get: function get$$1() {\n            return _this3.playlists.master;\n          },\n          enumerable: true\n        },\n        playerDimensions: {\n          get: function get$$1() {\n            return _this3.tech_.currentDimensions();\n          },\n          enumerable: true\n        },\n        seekable: {\n          get: function get$$1() {\n            return timeRangesToArray(_this3.tech_.seekable());\n          },\n          enumerable: true\n        },\n        timestamp: {\n          get: function get$$1() {\n            return Date.now();\n          },\n          enumerable: true\n        },\n        videoPlaybackQuality: {\n          get: function get$$1() {\n            return _this3.tech_.getVideoPlaybackQuality();\n          },\n          enumerable: true\n        }\n      });\n      this.tech_.one('canplay', this.masterPlaylistController_.setupFirstPlay.bind(this.masterPlaylistController_));\n      this.tech_.on('bandwidthupdate', function () {\n        if (_this3.options_.useBandwidthFromLocalStorage) {\n          updateVhsLocalStorage({\n            bandwidth: _this3.bandwidth,\n            throughput: Math.round(_this3.throughput)\n          });\n        }\n      });\n      this.masterPlaylistController_.on('selectedinitialmedia', function () {\n        // Add the manual rendition mix-in to HlsHandler\n        renditionSelectionMixin(_this3);\n        setupEmeOptions(_this3);\n      }); // the bandwidth of the primary segment loader is our best\n      // estimate of overall bandwidth\n\n      this.on(this.masterPlaylistController_, 'progress', function () {\n        this.tech_.trigger('progress');\n      });\n      this.tech_.ready(function () {\n        return _this3.setupQualityLevels_();\n      }); // do nothing if the tech has been disposed already\n      // this can occur if someone sets the src in player.ready(), for instance\n\n      if (!this.tech_.el()) {\n        return;\n      }\n\n      this.tech_.src(videojs$1.URL.createObjectURL(this.masterPlaylistController_.mediaSource));\n    }\n    /**\n     * Initializes the quality levels and sets listeners to update them.\n     *\n     * @method setupQualityLevels_\n     * @private\n     */\n\n  }, {\n    key: 'setupQualityLevels_',\n    value: function setupQualityLevels_() {\n      var _this4 = this;\n\n      var player = videojs$1.players[this.tech_.options_.playerId];\n\n      if (player && player.qualityLevels) {\n        this.qualityLevels_ = player.qualityLevels();\n        this.masterPlaylistController_.on('selectedinitialmedia', function () {\n          handleHlsLoadedMetadata(_this4.qualityLevels_, _this4);\n        });\n        this.playlists.on('mediachange', function () {\n          handleHlsMediaChange(_this4.qualityLevels_, _this4.playlists);\n        });\n      }\n    }\n    /**\n     * Begin playing the video.\n     */\n\n  }, {\n    key: 'play',\n    value: function play() {\n      this.masterPlaylistController_.play();\n    }\n    /**\n     * a wrapper around the function in MasterPlaylistController\n     */\n\n  }, {\n    key: 'setCurrentTime',\n    value: function setCurrentTime(currentTime) {\n      this.masterPlaylistController_.setCurrentTime(currentTime);\n    }\n    /**\n     * a wrapper around the function in MasterPlaylistController\n     */\n\n  }, {\n    key: 'duration',\n    value: function duration$$1() {\n      return this.masterPlaylistController_.duration();\n    }\n    /**\n     * a wrapper around the function in MasterPlaylistController\n     */\n\n  }, {\n    key: 'seekable',\n    value: function seekable$$1() {\n      return this.masterPlaylistController_.seekable();\n    }\n    /**\n     * Abort all outstanding work and cleanup.\n     */\n\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      if (this.playbackWatcher_) {\n        this.playbackWatcher_.dispose();\n      }\n\n      if (this.masterPlaylistController_) {\n        this.masterPlaylistController_.dispose();\n      }\n\n      if (this.qualityLevels_) {\n        this.qualityLevels_.dispose();\n      }\n\n      if (this.player_) {\n        delete this.player_.vhs;\n        delete this.player_.dash;\n        delete this.player_.hls;\n      }\n\n      if (this.tech_ && this.tech_.hls) {\n        delete this.tech_.hls;\n      }\n\n      get$1(HlsHandler.prototype.__proto__ || Object.getPrototypeOf(HlsHandler.prototype), 'dispose', this).call(this);\n    }\n  }, {\n    key: 'convertToProgramTime',\n    value: function convertToProgramTime(time, callback) {\n      return getProgramTime({\n        playlist: this.masterPlaylistController_.media(),\n        time: time,\n        callback: callback\n      });\n    } // the player must be playing before calling this\n\n  }, {\n    key: 'seekToProgramTime',\n    value: function seekToProgramTime$$1(programTime, callback) {\n      var pauseAfterSeek = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var retryCount = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 2;\n      return seekToProgramTime({\n        programTime: programTime,\n        playlist: this.masterPlaylistController_.media(),\n        retryCount: retryCount,\n        pauseAfterSeek: pauseAfterSeek,\n        seekTo: this.options_.seekTo,\n        tech: this.options_.tech,\n        callback: callback\n      });\n    }\n  }]);\n  return HlsHandler;\n}(Component$1);\n/**\n * The Source Handler object, which informs video.js what additional\n * MIME types are supported and sets up playback. It is registered\n * automatically to the appropriate tech based on the capabilities of\n * the browser it is running in. It is not necessary to use or modify\n * this object in normal usage.\n */\n\n\nvar HlsSourceHandler = {\n  name: 'videojs-http-streaming',\n  VERSION: version$1,\n  canHandleSource: function canHandleSource(srcObj) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var localOptions = videojs$1.mergeOptions(videojs$1.options, options);\n    return HlsSourceHandler.canPlayType(srcObj.type, localOptions);\n  },\n  handleSource: function handleSource(source, tech) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var localOptions = videojs$1.mergeOptions(videojs$1.options, options);\n    tech.hls = new HlsHandler(source, tech, localOptions);\n    tech.hls.xhr = xhrFactory();\n    tech.hls.src(source.src, source.type);\n    return tech.hls;\n  },\n  canPlayType: function canPlayType(type) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var _videojs$mergeOptions = videojs$1.mergeOptions(videojs$1.options, options),\n        overrideNative = _videojs$mergeOptions.hls.overrideNative;\n\n    var supportedType = simpleTypeFromSourceType(type);\n    var canUseMsePlayback = supportedType && (!Hls$1.supportsTypeNatively(supportedType) || overrideNative);\n    return canUseMsePlayback ? 'maybe' : '';\n  }\n};\n\nif (typeof videojs$1.MediaSource === 'undefined' || typeof videojs$1.URL === 'undefined') {\n  videojs$1.MediaSource = MediaSource;\n  videojs$1.URL = URL$1;\n} // register source handlers with the appropriate techs\n\n\nif (MediaSource.supportsNativeMediaSources()) {\n  videojs$1.getTech('Html5').registerSourceHandler(HlsSourceHandler, 0);\n}\n\nvideojs$1.HlsHandler = HlsHandler;\nvideojs$1.HlsSourceHandler = HlsSourceHandler;\nvideojs$1.Hls = Hls$1;\n\nif (!videojs$1.use) {\n  videojs$1.registerComponent('Hls', Hls$1);\n}\n\nvideojs$1.options.hls = videojs$1.options.hls || {};\n\nif (videojs$1.registerPlugin) {\n  videojs$1.registerPlugin('reloadSourceOnError', reloadSourceOnError);\n} else {\n  videojs$1.plugin('reloadSourceOnError', reloadSourceOnError);\n}\n\nexport default videojs$1;\n","<template>\n    <div class=\"video-content\">\n        <video ref=\"videoPlayer\" class=\"video-js\"></video>\n    </div>\n</template>\n\n<style lang=\"scss\" scoped>\n.video-content {\n    display: flex;\n    text-align: center;\n    height: 100%;\n    .video-js {\n        height: 100%;\n        flex: 1;\n    }\n}\n</style>\n\n\n<script>\n\nimport videojs from \"video.js\";\n\nexport default {\n    name: \"VideoPlayer\",\n    props: {\n        options: {\n            type: Object,\n            default() {\n                return {};\n            }\n        }\n    },\n    data() {\n        return {\n            player: null\n        };\n    },\n    mounted() {\n        this.player = videojs(\n            this.$refs.videoPlayer,\n            this.options,\n            function onPlayerReady() {\n                console.log(\"onPlayerReady\", this);\n            }\n        );\n    },\n    beforeDestroy() {\n        if (this.player) {\n            this.player.dispose();\n        }\n    }\n};\n</script>","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/vuetify-loader/lib/loader.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Video.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/vuetify-loader/lib/loader.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Video.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Video.vue?vue&type=template&id=a73de09c&scoped=true&\"\nimport script from \"./Video.vue?vue&type=script&lang=js&\"\nexport * from \"./Video.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Video.vue?vue&type=style&index=0&id=a73de09c&lang=scss&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"a73de09c\",\n  null\n  \n)\n\nexport default component.exports","<template>\n    <v-app dark>\n        <SystemBar />\n        <v-content>\n            <div class=\"content-wrapper\">\n                <div class=\"content\">\n                    <!-- <v-container fluid> -->\n                        <!-- <v-layout align-center fill-height row wrap> -->\n                            <!-- <v-flex style=\"text-align: center\"> -->\n                                <Video v-if=\"load\" :options=\"videoOptions\"/>\n                            <!-- </v-flex> -->\n                        <!-- </v-layout> -->\n                    <!-- </v-container> -->\n                </div>\n            </div>\n        </v-content>\n    </v-app>\n\n</template>\n\n<style lang=\"scss\">\nhtml {\n    overflow: hidden;\n}\n</style>\n\n\n<style lang=\"scss\" scoped>\n.content-wrapper {\n    height: 100%;\n    width: 100%;\n    overflow: hidden;\n    position: relative;\n    .content {\n        width: 100%;\n        height: 100%;\n        position: absolute;\n        overflow: auto;\n    }\n}\n</style>\n\n<script>\n\nimport SystemBar from \"@/components/common/SystemBar.vue\";\nimport Video from \"@/components/video-player/Video.vue\";\n\nconst { path, config } = window.electron;\n\nexport default {\n    name: \"VideoView\",\n    components: {\n        SystemBar,\n        Video\n    },\n    props: {\n        name: String,\n        type: String\n    },\n    data: function () {\n        return {\n            src: \"\",\n            load: false,\n            videoOptions: {\n\t\t\t\tautoplay: true,\n\t\t\t\tcontrols: true,\n\t\t\t\tsources: [],\n                width: \"100%\",\n                height: \"100%\"\n\t\t\t}\n        };\n    },\n    mounted: function () {\n        console.log(this.name);\n        config\n        .getUserConfig()\n        .then(userConfig => {\n            this.src = path.join(userConfig.setPath, this.name);\n            this.videoOptions.sources.push({\n                src: this.src,\n                type: this.type === \"mp4\" ? \"video/mp4\" : \"audio/mp3\"\n            });\n            this.load = true;\n        }).catch(console.error);\n    }\n}\n</script>\n\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/vuetify-loader/lib/loader.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./VideoView.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/vuetify-loader/lib/loader.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./VideoView.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./VideoView.vue?vue&type=template&id=7ee749f4&scoped=true&\"\nimport script from \"./VideoView.vue?vue&type=script&lang=js&\"\nexport * from \"./VideoView.vue?vue&type=script&lang=js&\"\nimport style0 from \"./VideoView.vue?vue&type=style&index=0&lang=scss&\"\nimport style1 from \"./VideoView.vue?vue&type=style&index=1&id=7ee749f4&lang=scss&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"7ee749f4\",\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!/home/andriy/my_dev/free-folk-renderer/node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VApp } from 'vuetify/lib'\nimport { VContent } from 'vuetify/lib'\ninstallComponents(component, {VApp,VContent})\n","<template>\n  <div class=\"home\">\n    <VideoView :name=\"name\" type=\"type\"/>\n  </div>\n</template>\n\n<script>\nimport VideoView from '@/components/video-player/VideoView.vue'\n\nexport default {\n  name: 'video-view',\n  components: {\n    VideoView\n  },\n  props: {\n      name: String,\n      type: String\n  }\n}\n</script>\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/vuetify-loader/lib/loader.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./VideoView.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/vuetify-loader/lib/loader.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./VideoView.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./VideoView.vue?vue&type=template&id=31250e76&\"\nimport script from \"./VideoView.vue?vue&type=script&lang=js&\"\nexport * from \"./VideoView.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import mod from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../../node_modules/css-loader/index.js??ref--8-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../../node_modules/sass-loader/lib/loader.js??ref--8-oneOf-1-3!../../../node_modules/vuetify-loader/lib/loader.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./VideoView.vue?vue&type=style&index=1&id=7ee749f4&lang=scss&scoped=true&\"; export default mod; export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../../node_modules/css-loader/index.js??ref--8-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../../node_modules/sass-loader/lib/loader.js??ref--8-oneOf-1-3!../../../node_modules/vuetify-loader/lib/loader.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./VideoView.vue?vue&type=style&index=1&id=7ee749f4&lang=scss&scoped=true&\"","/**\n * mux.js\n *\n * Copyright (c) Brightcove\n * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n */\n'use strict';\n\nvar Stream = require('../utils/stream.js');\nvar ExpGolomb = require('../utils/exp-golomb.js');\n\nvar H264Stream, NalByteStream;\nvar PROFILES_WITH_OPTIONAL_SPS_DATA;\n\n/**\n * Accepts a NAL unit byte stream and unpacks the embedded NAL units.\n */\nNalByteStream = function() {\n  var\n    syncPoint = 0,\n    i,\n    buffer;\n  NalByteStream.prototype.init.call(this);\n\n  /*\n   * Scans a byte stream and triggers a data event with the NAL units found.\n   * @param {Object} data Event received from H264Stream\n   * @param {Uint8Array} data.data The h264 byte stream to be scanned\n   *\n   * @see H264Stream.push\n   */\n  this.push = function(data) {\n    var swapBuffer;\n\n    if (!buffer) {\n      buffer = data.data;\n    } else {\n      swapBuffer = new Uint8Array(buffer.byteLength + data.data.byteLength);\n      swapBuffer.set(buffer);\n      swapBuffer.set(data.data, buffer.byteLength);\n      buffer = swapBuffer;\n    }\n\n    // Rec. ITU-T H.264, Annex B\n    // scan for NAL unit boundaries\n\n    // a match looks like this:\n    // 0 0 1 .. NAL .. 0 0 1\n    // ^ sync point        ^ i\n    // or this:\n    // 0 0 1 .. NAL .. 0 0 0\n    // ^ sync point        ^ i\n\n    // advance the sync point to a NAL start, if necessary\n    for (; syncPoint < buffer.byteLength - 3; syncPoint++) {\n      if (buffer[syncPoint + 2] === 1) {\n        // the sync point is properly aligned\n        i = syncPoint + 5;\n        break;\n      }\n    }\n\n    while (i < buffer.byteLength) {\n      // look at the current byte to determine if we've hit the end of\n      // a NAL unit boundary\n      switch (buffer[i]) {\n      case 0:\n        // skip past non-sync sequences\n        if (buffer[i - 1] !== 0) {\n          i += 2;\n          break;\n        } else if (buffer[i - 2] !== 0) {\n          i++;\n          break;\n        }\n\n        // deliver the NAL unit if it isn't empty\n        if (syncPoint + 3 !== i - 2) {\n          this.trigger('data', buffer.subarray(syncPoint + 3, i - 2));\n        }\n\n        // drop trailing zeroes\n        do {\n          i++;\n        } while (buffer[i] !== 1 && i < buffer.length);\n        syncPoint = i - 2;\n        i += 3;\n        break;\n      case 1:\n        // skip past non-sync sequences\n        if (buffer[i - 1] !== 0 ||\n            buffer[i - 2] !== 0) {\n          i += 3;\n          break;\n        }\n\n        // deliver the NAL unit\n        this.trigger('data', buffer.subarray(syncPoint + 3, i - 2));\n        syncPoint = i - 2;\n        i += 3;\n        break;\n      default:\n        // the current byte isn't a one or zero, so it cannot be part\n        // of a sync sequence\n        i += 3;\n        break;\n      }\n    }\n    // filter out the NAL units that were delivered\n    buffer = buffer.subarray(syncPoint);\n    i -= syncPoint;\n    syncPoint = 0;\n  };\n\n  this.flush = function() {\n    // deliver the last buffered NAL unit\n    if (buffer && buffer.byteLength > 3) {\n      this.trigger('data', buffer.subarray(syncPoint + 3));\n    }\n    // reset the stream state\n    buffer = null;\n    syncPoint = 0;\n    this.trigger('done');\n  };\n};\nNalByteStream.prototype = new Stream();\n\n// values of profile_idc that indicate additional fields are included in the SPS\n// see Recommendation ITU-T H.264 (4/2013),\n// 7.3.2.1.1 Sequence parameter set data syntax\nPROFILES_WITH_OPTIONAL_SPS_DATA = {\n  100: true,\n  110: true,\n  122: true,\n  244: true,\n  44: true,\n  83: true,\n  86: true,\n  118: true,\n  128: true,\n  138: true,\n  139: true,\n  134: true\n};\n\n/**\n * Accepts input from a ElementaryStream and produces H.264 NAL unit data\n * events.\n */\nH264Stream = function() {\n  var\n    nalByteStream = new NalByteStream(),\n    self,\n    trackId,\n    currentPts,\n    currentDts,\n\n    discardEmulationPreventionBytes,\n    readSequenceParameterSet,\n    skipScalingList;\n\n  H264Stream.prototype.init.call(this);\n  self = this;\n\n  /*\n   * Pushes a packet from a stream onto the NalByteStream\n   *\n   * @param {Object} packet - A packet received from a stream\n   * @param {Uint8Array} packet.data - The raw bytes of the packet\n   * @param {Number} packet.dts - Decode timestamp of the packet\n   * @param {Number} packet.pts - Presentation timestamp of the packet\n   * @param {Number} packet.trackId - The id of the h264 track this packet came from\n   * @param {('video'|'audio')} packet.type - The type of packet\n   *\n   */\n  this.push = function(packet) {\n    if (packet.type !== 'video') {\n      return;\n    }\n    trackId = packet.trackId;\n    currentPts = packet.pts;\n    currentDts = packet.dts;\n\n    nalByteStream.push(packet);\n  };\n\n  /*\n   * Identify NAL unit types and pass on the NALU, trackId, presentation and decode timestamps\n   * for the NALUs to the next stream component.\n   * Also, preprocess caption and sequence parameter NALUs.\n   *\n   * @param {Uint8Array} data - A NAL unit identified by `NalByteStream.push`\n   * @see NalByteStream.push\n   */\n  nalByteStream.on('data', function(data) {\n    var\n      event = {\n        trackId: trackId,\n        pts: currentPts,\n        dts: currentDts,\n        data: data\n      };\n\n    switch (data[0] & 0x1f) {\n    case 0x05:\n      event.nalUnitType = 'slice_layer_without_partitioning_rbsp_idr';\n      break;\n    case 0x06:\n      event.nalUnitType = 'sei_rbsp';\n      event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));\n      break;\n    case 0x07:\n      event.nalUnitType = 'seq_parameter_set_rbsp';\n      event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));\n      event.config = readSequenceParameterSet(event.escapedRBSP);\n      break;\n    case 0x08:\n      event.nalUnitType = 'pic_parameter_set_rbsp';\n      break;\n    case 0x09:\n      event.nalUnitType = 'access_unit_delimiter_rbsp';\n      break;\n\n    default:\n      break;\n    }\n    // This triggers data on the H264Stream\n    self.trigger('data', event);\n  });\n  nalByteStream.on('done', function() {\n    self.trigger('done');\n  });\n\n  this.flush = function() {\n    nalByteStream.flush();\n  };\n\n  /**\n   * Advance the ExpGolomb decoder past a scaling list. The scaling\n   * list is optionally transmitted as part of a sequence parameter\n   * set and is not relevant to transmuxing.\n   * @param count {number} the number of entries in this scaling list\n   * @param expGolombDecoder {object} an ExpGolomb pointed to the\n   * start of a scaling list\n   * @see Recommendation ITU-T H.264, Section 7.3.2.1.1.1\n   */\n  skipScalingList = function(count, expGolombDecoder) {\n    var\n      lastScale = 8,\n      nextScale = 8,\n      j,\n      deltaScale;\n\n    for (j = 0; j < count; j++) {\n      if (nextScale !== 0) {\n        deltaScale = expGolombDecoder.readExpGolomb();\n        nextScale = (lastScale + deltaScale + 256) % 256;\n      }\n\n      lastScale = (nextScale === 0) ? lastScale : nextScale;\n    }\n  };\n\n  /**\n   * Expunge any \"Emulation Prevention\" bytes from a \"Raw Byte\n   * Sequence Payload\"\n   * @param data {Uint8Array} the bytes of a RBSP from a NAL\n   * unit\n   * @return {Uint8Array} the RBSP without any Emulation\n   * Prevention Bytes\n   */\n  discardEmulationPreventionBytes = function(data) {\n    var\n      length = data.byteLength,\n      emulationPreventionBytesPositions = [],\n      i = 1,\n      newLength, newData;\n\n    // Find all `Emulation Prevention Bytes`\n    while (i < length - 2) {\n      if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {\n        emulationPreventionBytesPositions.push(i + 2);\n        i += 2;\n      } else {\n        i++;\n      }\n    }\n\n    // If no Emulation Prevention Bytes were found just return the original\n    // array\n    if (emulationPreventionBytesPositions.length === 0) {\n      return data;\n    }\n\n    // Create a new array to hold the NAL unit data\n    newLength = length - emulationPreventionBytesPositions.length;\n    newData = new Uint8Array(newLength);\n    var sourceIndex = 0;\n\n    for (i = 0; i < newLength; sourceIndex++, i++) {\n      if (sourceIndex === emulationPreventionBytesPositions[0]) {\n        // Skip this byte\n        sourceIndex++;\n        // Remove this position index\n        emulationPreventionBytesPositions.shift();\n      }\n      newData[i] = data[sourceIndex];\n    }\n\n    return newData;\n  };\n\n  /**\n   * Read a sequence parameter set and return some interesting video\n   * properties. A sequence parameter set is the H264 metadata that\n   * describes the properties of upcoming video frames.\n   * @param data {Uint8Array} the bytes of a sequence parameter set\n   * @return {object} an object with configuration parsed from the\n   * sequence parameter set, including the dimensions of the\n   * associated video frames.\n   */\n  readSequenceParameterSet = function(data) {\n    var\n      frameCropLeftOffset = 0,\n      frameCropRightOffset = 0,\n      frameCropTopOffset = 0,\n      frameCropBottomOffset = 0,\n      sarScale = 1,\n      expGolombDecoder, profileIdc, levelIdc, profileCompatibility,\n      chromaFormatIdc, picOrderCntType,\n      numRefFramesInPicOrderCntCycle, picWidthInMbsMinus1,\n      picHeightInMapUnitsMinus1,\n      frameMbsOnlyFlag,\n      scalingListCount,\n      sarRatio,\n      aspectRatioIdc,\n      i;\n\n    expGolombDecoder = new ExpGolomb(data);\n    profileIdc = expGolombDecoder.readUnsignedByte(); // profile_idc\n    profileCompatibility = expGolombDecoder.readUnsignedByte(); // constraint_set[0-5]_flag\n    levelIdc = expGolombDecoder.readUnsignedByte(); // level_idc u(8)\n    expGolombDecoder.skipUnsignedExpGolomb(); // seq_parameter_set_id\n\n    // some profiles have more optional data we don't need\n    if (PROFILES_WITH_OPTIONAL_SPS_DATA[profileIdc]) {\n      chromaFormatIdc = expGolombDecoder.readUnsignedExpGolomb();\n      if (chromaFormatIdc === 3) {\n        expGolombDecoder.skipBits(1); // separate_colour_plane_flag\n      }\n      expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_luma_minus8\n      expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_chroma_minus8\n      expGolombDecoder.skipBits(1); // qpprime_y_zero_transform_bypass_flag\n      if (expGolombDecoder.readBoolean()) { // seq_scaling_matrix_present_flag\n        scalingListCount = (chromaFormatIdc !== 3) ? 8 : 12;\n        for (i = 0; i < scalingListCount; i++) {\n          if (expGolombDecoder.readBoolean()) { // seq_scaling_list_present_flag[ i ]\n            if (i < 6) {\n              skipScalingList(16, expGolombDecoder);\n            } else {\n              skipScalingList(64, expGolombDecoder);\n            }\n          }\n        }\n      }\n    }\n\n    expGolombDecoder.skipUnsignedExpGolomb(); // log2_max_frame_num_minus4\n    picOrderCntType = expGolombDecoder.readUnsignedExpGolomb();\n\n    if (picOrderCntType === 0) {\n      expGolombDecoder.readUnsignedExpGolomb(); // log2_max_pic_order_cnt_lsb_minus4\n    } else if (picOrderCntType === 1) {\n      expGolombDecoder.skipBits(1); // delta_pic_order_always_zero_flag\n      expGolombDecoder.skipExpGolomb(); // offset_for_non_ref_pic\n      expGolombDecoder.skipExpGolomb(); // offset_for_top_to_bottom_field\n      numRefFramesInPicOrderCntCycle = expGolombDecoder.readUnsignedExpGolomb();\n      for (i = 0; i < numRefFramesInPicOrderCntCycle; i++) {\n        expGolombDecoder.skipExpGolomb(); // offset_for_ref_frame[ i ]\n      }\n    }\n\n    expGolombDecoder.skipUnsignedExpGolomb(); // max_num_ref_frames\n    expGolombDecoder.skipBits(1); // gaps_in_frame_num_value_allowed_flag\n\n    picWidthInMbsMinus1 = expGolombDecoder.readUnsignedExpGolomb();\n    picHeightInMapUnitsMinus1 = expGolombDecoder.readUnsignedExpGolomb();\n\n    frameMbsOnlyFlag = expGolombDecoder.readBits(1);\n    if (frameMbsOnlyFlag === 0) {\n      expGolombDecoder.skipBits(1); // mb_adaptive_frame_field_flag\n    }\n\n    expGolombDecoder.skipBits(1); // direct_8x8_inference_flag\n    if (expGolombDecoder.readBoolean()) { // frame_cropping_flag\n      frameCropLeftOffset = expGolombDecoder.readUnsignedExpGolomb();\n      frameCropRightOffset = expGolombDecoder.readUnsignedExpGolomb();\n      frameCropTopOffset = expGolombDecoder.readUnsignedExpGolomb();\n      frameCropBottomOffset = expGolombDecoder.readUnsignedExpGolomb();\n    }\n    if (expGolombDecoder.readBoolean()) {\n      // vui_parameters_present_flag\n      if (expGolombDecoder.readBoolean()) {\n        // aspect_ratio_info_present_flag\n        aspectRatioIdc = expGolombDecoder.readUnsignedByte();\n        switch (aspectRatioIdc) {\n          case 1: sarRatio = [1, 1]; break;\n          case 2: sarRatio = [12, 11]; break;\n          case 3: sarRatio = [10, 11]; break;\n          case 4: sarRatio = [16, 11]; break;\n          case 5: sarRatio = [40, 33]; break;\n          case 6: sarRatio = [24, 11]; break;\n          case 7: sarRatio = [20, 11]; break;\n          case 8: sarRatio = [32, 11]; break;\n          case 9: sarRatio = [80, 33]; break;\n          case 10: sarRatio = [18, 11]; break;\n          case 11: sarRatio = [15, 11]; break;\n          case 12: sarRatio = [64, 33]; break;\n          case 13: sarRatio = [160, 99]; break;\n          case 14: sarRatio = [4, 3]; break;\n          case 15: sarRatio = [3, 2]; break;\n          case 16: sarRatio = [2, 1]; break;\n          case 255: {\n            sarRatio = [expGolombDecoder.readUnsignedByte() << 8 |\n                        expGolombDecoder.readUnsignedByte(),\n                        expGolombDecoder.readUnsignedByte() << 8 |\n                        expGolombDecoder.readUnsignedByte() ];\n            break;\n          }\n        }\n        if (sarRatio) {\n          sarScale = sarRatio[0] / sarRatio[1];\n        }\n      }\n    }\n    return {\n      profileIdc: profileIdc,\n      levelIdc: levelIdc,\n      profileCompatibility: profileCompatibility,\n      width: Math.ceil((((picWidthInMbsMinus1 + 1) * 16) - frameCropLeftOffset * 2 - frameCropRightOffset * 2) * sarScale),\n      height: ((2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16) - (frameCropTopOffset * 2) - (frameCropBottomOffset * 2)\n    };\n  };\n\n};\nH264Stream.prototype = new Stream();\n\nmodule.exports = {\n  H264Stream: H264Stream,\n  NalByteStream: NalByteStream\n};\n","var trim = require('string.prototype.trim')\n  , forEach = require('for-each')\n  , isArray = function(arg) {\n      return Object.prototype.toString.call(arg) === '[object Array]';\n    }\n\nmodule.exports = function (headers) {\n  if (!headers)\n    return {}\n\n  var result = {}\n\n  forEach(\n      trim(headers).split('\\n')\n    , function (row) {\n        var index = row.indexOf(':')\n          , key = trim(row.slice(0, index)).toLowerCase()\n          , value = trim(row.slice(index + 1))\n\n        if (typeof(result[key]) === 'undefined') {\n          result[key] = value\n        } else if (isArray(result[key])) {\n          result[key].push(value)\n        } else {\n          result[key] = [ result[key], value ]\n        }\n      }\n  )\n\n  return result\n}\n","'use strict';\n\n/* eslint no-invalid-this: 1 */\n\nvar ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';\nvar slice = Array.prototype.slice;\nvar toStr = Object.prototype.toString;\nvar funcType = '[object Function]';\n\nmodule.exports = function bind(that) {\n    var target = this;\n    if (typeof target !== 'function' || toStr.call(target) !== funcType) {\n        throw new TypeError(ERROR_MESSAGE + target);\n    }\n    var args = slice.call(arguments, 1);\n\n    var bound;\n    var binder = function () {\n        if (this instanceof bound) {\n            var result = target.apply(\n                this,\n                args.concat(slice.call(arguments))\n            );\n            if (Object(result) === result) {\n                return result;\n            }\n            return this;\n        } else {\n            return target.apply(\n                that,\n                args.concat(slice.call(arguments))\n            );\n        }\n    };\n\n    var boundLength = Math.max(0, target.length - args.length);\n    var boundArgs = [];\n    for (var i = 0; i < boundLength; i++) {\n        boundArgs.push('$' + i);\n    }\n\n    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);\n\n    if (target.prototype) {\n        var Empty = function Empty() {};\n        Empty.prototype = target.prototype;\n        bound.prototype = new Empty();\n        Empty.prototype = null;\n    }\n\n    return bound;\n};\n","/**\n * mux.js\n *\n * Copyright (c) Brightcove\n * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n */\nvar highPrefix = [33, 16, 5, 32, 164, 27];\nvar lowPrefix = [33, 65, 108, 84, 1, 2, 4, 8, 168, 2, 4, 8, 17, 191, 252];\nvar zeroFill = function(count) {\n  var a = [];\n  while (count--) {\n    a.push(0);\n  }\n  return a;\n};\n\nvar makeTable = function(metaTable) {\n  return Object.keys(metaTable).reduce(function(obj, key) {\n    obj[key] = new Uint8Array(metaTable[key].reduce(function(arr, part) {\n      return arr.concat(part);\n    }, []));\n    return obj;\n  }, {});\n};\n\n// Frames-of-silence to use for filling in missing AAC frames\nvar coneOfSilence = {\n  96000: [highPrefix, [227, 64], zeroFill(154), [56]],\n  88200: [highPrefix, [231], zeroFill(170), [56]],\n  64000: [highPrefix, [248, 192], zeroFill(240), [56]],\n  48000: [highPrefix, [255, 192], zeroFill(268), [55, 148, 128], zeroFill(54), [112]],\n  44100: [highPrefix, [255, 192], zeroFill(268), [55, 163, 128], zeroFill(84), [112]],\n  32000: [highPrefix, [255, 192], zeroFill(268), [55, 234], zeroFill(226), [112]],\n  24000: [highPrefix, [255, 192], zeroFill(268), [55, 255, 128], zeroFill(268), [111, 112], zeroFill(126), [224]],\n  16000: [highPrefix, [255, 192], zeroFill(268), [55, 255, 128], zeroFill(268), [111, 255], zeroFill(269), [223, 108], zeroFill(195), [1, 192]],\n  12000: [lowPrefix, zeroFill(268), [3, 127, 248], zeroFill(268), [6, 255, 240], zeroFill(268), [13, 255, 224], zeroFill(268), [27, 253, 128], zeroFill(259), [56]],\n  11025: [lowPrefix, zeroFill(268), [3, 127, 248], zeroFill(268), [6, 255, 240], zeroFill(268), [13, 255, 224], zeroFill(268), [27, 255, 192], zeroFill(268), [55, 175, 128], zeroFill(108), [112]],\n  8000: [lowPrefix, zeroFill(268), [3, 121, 16], zeroFill(47), [7]]\n};\n\nmodule.exports = makeTable(coneOfSilence);\n","var dP = require('./_object-dp').f;\nvar FProto = Function.prototype;\nvar nameRE = /^\\s*function ([^ (]*)/;\nvar NAME = 'name';\n\n// 19.2.4.2 name\nNAME in FProto || require('./_descriptors') && dP(FProto, NAME, {\n  configurable: true,\n  get: function () {\n    try {\n      return ('' + this).match(nameRE)[1];\n    } catch (e) {\n      return '';\n    }\n  }\n});\n","/**\n * mux.js\n *\n * Copyright (c) Brightcove\n * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n */\nvar toUnsigned = function(value) {\n  return value >>> 0;\n};\n\nmodule.exports = {\n  toUnsigned: toUnsigned\n};\n","module.exports = isFunction\n\nvar toString = Object.prototype.toString\n\nfunction isFunction (fn) {\n  var string = toString.call(fn)\n  return string === '[object Function]' ||\n    (typeof fn === 'function' && string !== '[object RegExp]') ||\n    (typeof window !== 'undefined' &&\n     // IE8 and below\n     (fn === window.setTimeout ||\n      fn === window.alert ||\n      fn === window.confirm ||\n      fn === window.prompt))\n};\n","/*! @name mpd-parser @version 0.8.1 @license Apache-2.0 */\nimport window$1 from 'global/window';\n\nvar version = \"0.8.1\";\n\nvar isObject = function isObject(obj) {\n  return !!obj && typeof obj === 'object';\n};\n\nvar merge = function merge() {\n  for (var _len = arguments.length, objects = new Array(_len), _key = 0; _key < _len; _key++) {\n    objects[_key] = arguments[_key];\n  }\n\n  return objects.reduce(function (result, source) {\n    Object.keys(source).forEach(function (key) {\n      if (Array.isArray(result[key]) && Array.isArray(source[key])) {\n        result[key] = result[key].concat(source[key]);\n      } else if (isObject(result[key]) && isObject(source[key])) {\n        result[key] = merge(result[key], source[key]);\n      } else {\n        result[key] = source[key];\n      }\n    });\n    return result;\n  }, {});\n};\nvar values = function values(o) {\n  return Object.keys(o).map(function (k) {\n    return o[k];\n  });\n};\n\nvar range = function range(start, end) {\n  var result = [];\n\n  for (var i = start; i < end; i++) {\n    result.push(i);\n  }\n\n  return result;\n};\nvar flatten = function flatten(lists) {\n  return lists.reduce(function (x, y) {\n    return x.concat(y);\n  }, []);\n};\nvar from = function from(list) {\n  if (!list.length) {\n    return [];\n  }\n\n  var result = [];\n\n  for (var i = 0; i < list.length; i++) {\n    result.push(list[i]);\n  }\n\n  return result;\n};\nvar findIndexes = function findIndexes(l, key) {\n  return l.reduce(function (a, e, i) {\n    if (e[key]) {\n      a.push(i);\n    }\n\n    return a;\n  }, []);\n};\n\nvar errors = {\n  INVALID_NUMBER_OF_PERIOD: 'INVALID_NUMBER_OF_PERIOD',\n  DASH_EMPTY_MANIFEST: 'DASH_EMPTY_MANIFEST',\n  DASH_INVALID_XML: 'DASH_INVALID_XML',\n  NO_BASE_URL: 'NO_BASE_URL',\n  MISSING_SEGMENT_INFORMATION: 'MISSING_SEGMENT_INFORMATION',\n  SEGMENT_TIME_UNSPECIFIED: 'SEGMENT_TIME_UNSPECIFIED',\n  UNSUPPORTED_UTC_TIMING_SCHEME: 'UNSUPPORTED_UTC_TIMING_SCHEME'\n};\n\nvar commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nfunction createCommonjsModule(fn, module) {\n\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n}\n\nvar urlToolkit = createCommonjsModule(function (module, exports) {\n// see https://tools.ietf.org/html/rfc1808\n\n/* jshint ignore:start */\n(function(root) { \n/* jshint ignore:end */\n\n  var URL_REGEX = /^((?:[a-zA-Z0-9+\\-.]+:)?)(\\/\\/[^\\/?#]*)?((?:[^\\/\\?#]*\\/)*.*?)??(;.*?)?(\\?.*?)?(#.*?)?$/;\n  var FIRST_SEGMENT_REGEX = /^([^\\/?#]*)(.*)$/;\n  var SLASH_DOT_REGEX = /(?:\\/|^)\\.(?=\\/)/g;\n  var SLASH_DOT_DOT_REGEX = /(?:\\/|^)\\.\\.\\/(?!\\.\\.\\/).*?(?=\\/)/g;\n\n  var URLToolkit = { // jshint ignore:line\n    // If opts.alwaysNormalize is true then the path will always be normalized even when it starts with / or //\n    // E.g\n    // With opts.alwaysNormalize = false (default, spec compliant)\n    // http://a.com/b/cd + /e/f/../g => http://a.com/e/f/../g\n    // With opts.alwaysNormalize = true (not spec compliant)\n    // http://a.com/b/cd + /e/f/../g => http://a.com/e/g\n    buildAbsoluteURL: function(baseURL, relativeURL, opts) {\n      opts = opts || {};\n      // remove any remaining space and CRLF\n      baseURL = baseURL.trim();\n      relativeURL = relativeURL.trim();\n      if (!relativeURL) {\n        // 2a) If the embedded URL is entirely empty, it inherits the\n        // entire base URL (i.e., is set equal to the base URL)\n        // and we are done.\n        if (!opts.alwaysNormalize) {\n          return baseURL;\n        }\n        var basePartsForNormalise = URLToolkit.parseURL(baseURL);\n        if (!basePartsForNormalise) {\n          throw new Error('Error trying to parse base URL.');\n        }\n        basePartsForNormalise.path = URLToolkit.normalizePath(basePartsForNormalise.path);\n        return URLToolkit.buildURLFromParts(basePartsForNormalise);\n      }\n      var relativeParts = URLToolkit.parseURL(relativeURL);\n      if (!relativeParts) {\n        throw new Error('Error trying to parse relative URL.');\n      }\n      if (relativeParts.scheme) {\n        // 2b) If the embedded URL starts with a scheme name, it is\n        // interpreted as an absolute URL and we are done.\n        if (!opts.alwaysNormalize) {\n          return relativeURL;\n        }\n        relativeParts.path = URLToolkit.normalizePath(relativeParts.path);\n        return URLToolkit.buildURLFromParts(relativeParts);\n      }\n      var baseParts = URLToolkit.parseURL(baseURL);\n      if (!baseParts) {\n        throw new Error('Error trying to parse base URL.');\n      }\n      if (!baseParts.netLoc && baseParts.path && baseParts.path[0] !== '/') {\n        // If netLoc missing and path doesn't start with '/', assume everthing before the first '/' is the netLoc\n        // This causes 'example.com/a' to be handled as '//example.com/a' instead of '/example.com/a'\n        var pathParts = FIRST_SEGMENT_REGEX.exec(baseParts.path);\n        baseParts.netLoc = pathParts[1];\n        baseParts.path = pathParts[2];\n      }\n      if (baseParts.netLoc && !baseParts.path) {\n        baseParts.path = '/';\n      }\n      var builtParts = {\n        // 2c) Otherwise, the embedded URL inherits the scheme of\n        // the base URL.\n        scheme: baseParts.scheme,\n        netLoc: relativeParts.netLoc,\n        path: null,\n        params: relativeParts.params,\n        query: relativeParts.query,\n        fragment: relativeParts.fragment\n      };\n      if (!relativeParts.netLoc) {\n        // 3) If the embedded URL's <net_loc> is non-empty, we skip to\n        // Step 7.  Otherwise, the embedded URL inherits the <net_loc>\n        // (if any) of the base URL.\n        builtParts.netLoc = baseParts.netLoc;\n        // 4) If the embedded URL path is preceded by a slash \"/\", the\n        // path is not relative and we skip to Step 7.\n        if (relativeParts.path[0] !== '/') {\n          if (!relativeParts.path) {\n            // 5) If the embedded URL path is empty (and not preceded by a\n            // slash), then the embedded URL inherits the base URL path\n            builtParts.path = baseParts.path;\n            // 5a) if the embedded URL's <params> is non-empty, we skip to\n            // step 7; otherwise, it inherits the <params> of the base\n            // URL (if any) and\n            if (!relativeParts.params) {\n              builtParts.params = baseParts.params;\n              // 5b) if the embedded URL's <query> is non-empty, we skip to\n              // step 7; otherwise, it inherits the <query> of the base\n              // URL (if any) and we skip to step 7.\n              if (!relativeParts.query) {\n                builtParts.query = baseParts.query;\n              }\n            }\n          } else {\n            // 6) The last segment of the base URL's path (anything\n            // following the rightmost slash \"/\", or the entire path if no\n            // slash is present) is removed and the embedded URL's path is\n            // appended in its place.\n            var baseURLPath = baseParts.path;\n            var newPath = baseURLPath.substring(0, baseURLPath.lastIndexOf('/') + 1) + relativeParts.path;\n            builtParts.path = URLToolkit.normalizePath(newPath);\n          }\n        }\n      }\n      if (builtParts.path === null) {\n        builtParts.path = opts.alwaysNormalize ? URLToolkit.normalizePath(relativeParts.path) : relativeParts.path;\n      }\n      return URLToolkit.buildURLFromParts(builtParts);\n    },\n    parseURL: function(url) {\n      var parts = URL_REGEX.exec(url);\n      if (!parts) {\n        return null;\n      }\n      return {\n        scheme: parts[1] || '',\n        netLoc: parts[2] || '',\n        path: parts[3] || '',\n        params: parts[4] || '',\n        query: parts[5] || '',\n        fragment: parts[6] || ''\n      };\n    },\n    normalizePath: function(path) {\n      // The following operations are\n      // then applied, in order, to the new path:\n      // 6a) All occurrences of \"./\", where \".\" is a complete path\n      // segment, are removed.\n      // 6b) If the path ends with \".\" as a complete path segment,\n      // that \".\" is removed.\n      path = path.split('').reverse().join('').replace(SLASH_DOT_REGEX, '');\n      // 6c) All occurrences of \"<segment>/../\", where <segment> is a\n      // complete path segment not equal to \"..\", are removed.\n      // Removal of these path segments is performed iteratively,\n      // removing the leftmost matching pattern on each iteration,\n      // until no matching pattern remains.\n      // 6d) If the path ends with \"<segment>/..\", where <segment> is a\n      // complete path segment not equal to \"..\", that\n      // \"<segment>/..\" is removed.\n      while (path.length !== (path = path.replace(SLASH_DOT_DOT_REGEX, '')).length) {} // jshint ignore:line\n      return path.split('').reverse().join('');\n    },\n    buildURLFromParts: function(parts) {\n      return parts.scheme + parts.netLoc + parts.path + parts.params + parts.query + parts.fragment;\n    }\n  };\n\n/* jshint ignore:start */\n  module.exports = URLToolkit;\n})(commonjsGlobal);\n/* jshint ignore:end */\n});\n\nvar resolveUrl = function resolveUrl(baseUrl, relativeUrl) {\n  // return early if we don't need to resolve\n  if (/^[a-z]+:/i.test(relativeUrl)) {\n    return relativeUrl;\n  } // if the base URL is relative then combine with the current location\n\n\n  if (!/\\/\\//i.test(baseUrl)) {\n    baseUrl = urlToolkit.buildAbsoluteURL(window$1.location.href, baseUrl);\n  }\n\n  return urlToolkit.buildAbsoluteURL(baseUrl, relativeUrl);\n};\n\n/**\n * @typedef {Object} SingleUri\n * @property {string} uri - relative location of segment\n * @property {string} resolvedUri - resolved location of segment\n * @property {Object} byterange - Object containing information on how to make byte range\n *   requests following byte-range-spec per RFC2616.\n * @property {String} byterange.length - length of range request\n * @property {String} byterange.offset - byte offset of range request\n *\n * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.1\n */\n\n/**\n * Converts a URLType node (5.3.9.2.3 Table 13) to a segment object\n * that conforms to how m3u8-parser is structured\n *\n * @see https://github.com/videojs/m3u8-parser\n *\n * @param {string} baseUrl - baseUrl provided by <BaseUrl> nodes\n * @param {string} source - source url for segment\n * @param {string} range - optional range used for range calls,\n *   follows  RFC 2616, Clause 14.35.1\n * @return {SingleUri} full segment information transformed into a format similar\n *   to m3u8-parser\n */\n\nvar urlTypeToSegment = function urlTypeToSegment(_ref) {\n  var _ref$baseUrl = _ref.baseUrl,\n      baseUrl = _ref$baseUrl === void 0 ? '' : _ref$baseUrl,\n      _ref$source = _ref.source,\n      source = _ref$source === void 0 ? '' : _ref$source,\n      _ref$range = _ref.range,\n      range = _ref$range === void 0 ? '' : _ref$range,\n      _ref$indexRange = _ref.indexRange,\n      indexRange = _ref$indexRange === void 0 ? '' : _ref$indexRange;\n  var segment = {\n    uri: source,\n    resolvedUri: resolveUrl(baseUrl || '', source)\n  };\n\n  if (range || indexRange) {\n    var rangeStr = range ? range : indexRange;\n    var ranges = rangeStr.split('-');\n    var startRange = parseInt(ranges[0], 10);\n    var endRange = parseInt(ranges[1], 10); // byterange should be inclusive according to\n    // RFC 2616, Clause 14.35.1\n\n    segment.byterange = {\n      length: endRange - startRange + 1,\n      offset: startRange\n    };\n  }\n\n  return segment;\n};\nvar byteRangeToString = function byteRangeToString(byterange) {\n  // `endRange` is one less than `offset + length` because the HTTP range\n  // header uses inclusive ranges\n  var endRange = byterange.offset + byterange.length - 1;\n  return byterange.offset + \"-\" + endRange;\n};\n\n/**\n * Functions for calculating the range of available segments in static and dynamic\n * manifests.\n */\n\nvar segmentRange = {\n  /**\n   * Returns the entire range of available segments for a static MPD\n   *\n   * @param {Object} attributes\n   *        Inheritied MPD attributes\n   * @return {{ start: number, end: number }}\n   *         The start and end numbers for available segments\n   */\n  static: function _static(attributes) {\n    var duration = attributes.duration,\n        _attributes$timescale = attributes.timescale,\n        timescale = _attributes$timescale === void 0 ? 1 : _attributes$timescale,\n        sourceDuration = attributes.sourceDuration;\n    return {\n      start: 0,\n      end: Math.ceil(sourceDuration / (duration / timescale))\n    };\n  },\n\n  /**\n   * Returns the current live window range of available segments for a dynamic MPD\n   *\n   * @param {Object} attributes\n   *        Inheritied MPD attributes\n   * @return {{ start: number, end: number }}\n   *         The start and end numbers for available segments\n   */\n  dynamic: function dynamic(attributes) {\n    var NOW = attributes.NOW,\n        clientOffset = attributes.clientOffset,\n        availabilityStartTime = attributes.availabilityStartTime,\n        _attributes$timescale2 = attributes.timescale,\n        timescale = _attributes$timescale2 === void 0 ? 1 : _attributes$timescale2,\n        duration = attributes.duration,\n        _attributes$start = attributes.start,\n        start = _attributes$start === void 0 ? 0 : _attributes$start,\n        _attributes$minimumUp = attributes.minimumUpdatePeriod,\n        minimumUpdatePeriod = _attributes$minimumUp === void 0 ? 0 : _attributes$minimumUp,\n        _attributes$timeShift = attributes.timeShiftBufferDepth,\n        timeShiftBufferDepth = _attributes$timeShift === void 0 ? Infinity : _attributes$timeShift;\n    var now = (NOW + clientOffset) / 1000;\n    var periodStartWC = availabilityStartTime + start;\n    var periodEndWC = now + minimumUpdatePeriod;\n    var periodDuration = periodEndWC - periodStartWC;\n    var segmentCount = Math.ceil(periodDuration * timescale / duration);\n    var availableStart = Math.floor((now - periodStartWC - timeShiftBufferDepth) * timescale / duration);\n    var availableEnd = Math.floor((now - periodStartWC) * timescale / duration);\n    return {\n      start: Math.max(0, availableStart),\n      end: Math.min(segmentCount, availableEnd)\n    };\n  }\n};\n/**\n * Maps a range of numbers to objects with information needed to build the corresponding\n * segment list\n *\n * @name toSegmentsCallback\n * @function\n * @param {number} number\n *        Number of the segment\n * @param {number} index\n *        Index of the number in the range list\n * @return {{ number: Number, duration: Number, timeline: Number, time: Number }}\n *         Object with segment timing and duration info\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping a range of numbers to\n * information needed to build the segment list.\n *\n * @param {Object} attributes\n *        Inherited MPD attributes\n * @return {toSegmentsCallback}\n *         Callback map function\n */\n\nvar toSegments = function toSegments(attributes) {\n  return function (number, index) {\n    var duration = attributes.duration,\n        _attributes$timescale3 = attributes.timescale,\n        timescale = _attributes$timescale3 === void 0 ? 1 : _attributes$timescale3,\n        periodIndex = attributes.periodIndex,\n        _attributes$startNumb = attributes.startNumber,\n        startNumber = _attributes$startNumb === void 0 ? 1 : _attributes$startNumb;\n    return {\n      number: startNumber + number,\n      duration: duration / timescale,\n      timeline: periodIndex,\n      time: index * duration\n    };\n  };\n};\n/**\n * Returns a list of objects containing segment timing and duration info used for\n * building the list of segments. This uses the @duration attribute specified\n * in the MPD manifest to derive the range of segments.\n *\n * @param {Object} attributes\n *        Inherited MPD attributes\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\n *         List of Objects with segment timing and duration info\n */\n\nvar parseByDuration = function parseByDuration(attributes) {\n  var _attributes$type = attributes.type,\n      type = _attributes$type === void 0 ? 'static' : _attributes$type,\n      duration = attributes.duration,\n      _attributes$timescale4 = attributes.timescale,\n      timescale = _attributes$timescale4 === void 0 ? 1 : _attributes$timescale4,\n      sourceDuration = attributes.sourceDuration;\n\n  var _segmentRange$type = segmentRange[type](attributes),\n      start = _segmentRange$type.start,\n      end = _segmentRange$type.end;\n\n  var segments = range(start, end).map(toSegments(attributes));\n\n  if (type === 'static') {\n    var index = segments.length - 1; // final segment may be less than full segment duration\n\n    segments[index].duration = sourceDuration - duration / timescale * index;\n  }\n\n  return segments;\n};\n\n/**\n * Translates SegmentBase into a set of segments.\n * (DASH SPEC Section 5.3.9.3.2) contains a set of <SegmentURL> nodes.  Each\n * node should be translated into segment.\n *\n * @param {Object} attributes\n *   Object containing all inherited attributes from parent elements with attribute\n *   names as keys\n * @return {Object.<Array>} list of segments\n */\n\nvar segmentsFromBase = function segmentsFromBase(attributes) {\n  var baseUrl = attributes.baseUrl,\n      _attributes$initializ = attributes.initialization,\n      initialization = _attributes$initializ === void 0 ? {} : _attributes$initializ,\n      sourceDuration = attributes.sourceDuration,\n      _attributes$timescale = attributes.timescale,\n      timescale = _attributes$timescale === void 0 ? 1 : _attributes$timescale,\n      _attributes$indexRang = attributes.indexRange,\n      indexRange = _attributes$indexRang === void 0 ? '' : _attributes$indexRang,\n      duration = attributes.duration; // base url is required for SegmentBase to work, per spec (Section 5.3.9.2.1)\n\n  if (!baseUrl) {\n    throw new Error(errors.NO_BASE_URL);\n  }\n\n  var initSegment = urlTypeToSegment({\n    baseUrl: baseUrl,\n    source: initialization.sourceURL,\n    range: initialization.range\n  });\n  var segment = urlTypeToSegment({\n    baseUrl: baseUrl,\n    source: baseUrl,\n    indexRange: indexRange\n  });\n  segment.map = initSegment; // If there is a duration, use it, otherwise use the given duration of the source\n  // (since SegmentBase is only for one total segment)\n\n  if (duration) {\n    var segmentTimeInfo = parseByDuration(attributes);\n\n    if (segmentTimeInfo.length) {\n      segment.duration = segmentTimeInfo[0].duration;\n      segment.timeline = segmentTimeInfo[0].timeline;\n    }\n  } else if (sourceDuration) {\n    segment.duration = sourceDuration / timescale;\n    segment.timeline = 0;\n  } // This is used for mediaSequence\n\n\n  segment.number = 0;\n  return [segment];\n};\n/**\n * Given a playlist, a sidx box, and a baseUrl, update the segment list of the playlist\n * according to the sidx information given.\n *\n * playlist.sidx has metadadata about the sidx where-as the sidx param\n * is the parsed sidx box itself.\n *\n * @param {Object} playlist the playlist to update the sidx information for\n * @param {Object} sidx the parsed sidx box\n * @return {Object} the playlist object with the updated sidx information\n */\n\nvar addSegmentsToPlaylist = function addSegmentsToPlaylist(playlist, sidx, baseUrl) {\n  // Retain init segment information\n  var initSegment = playlist.sidx.map ? playlist.sidx.map : null; // Retain source duration from initial master manifest parsing\n\n  var sourceDuration = playlist.sidx.duration; // Retain source timeline\n\n  var timeline = playlist.timeline || 0;\n  var sidxByteRange = playlist.sidx.byterange;\n  var sidxEnd = sidxByteRange.offset + sidxByteRange.length; // Retain timescale of the parsed sidx\n\n  var timescale = sidx.timescale; // referenceType 1 refers to other sidx boxes\n\n  var mediaReferences = sidx.references.filter(function (r) {\n    return r.referenceType !== 1;\n  });\n  var segments = []; // firstOffset is the offset from the end of the sidx box\n\n  var startIndex = sidxEnd + sidx.firstOffset;\n\n  for (var i = 0; i < mediaReferences.length; i++) {\n    var reference = sidx.references[i]; // size of the referenced (sub)segment\n\n    var size = reference.referencedSize; // duration of the referenced (sub)segment, in  the  timescale\n    // this will be converted to seconds when generating segments\n\n    var duration = reference.subsegmentDuration; // should be an inclusive range\n\n    var endIndex = startIndex + size - 1;\n    var indexRange = startIndex + \"-\" + endIndex;\n    var attributes = {\n      baseUrl: baseUrl,\n      timescale: timescale,\n      timeline: timeline,\n      // this is used in parseByDuration\n      periodIndex: timeline,\n      duration: duration,\n      sourceDuration: sourceDuration,\n      indexRange: indexRange\n    };\n    var segment = segmentsFromBase(attributes)[0];\n\n    if (initSegment) {\n      segment.map = initSegment;\n    }\n\n    segments.push(segment);\n    startIndex += size;\n  }\n\n  playlist.segments = segments;\n  return playlist;\n};\n\nvar mergeDiscontiguousPlaylists = function mergeDiscontiguousPlaylists(playlists) {\n  var mergedPlaylists = values(playlists.reduce(function (acc, playlist) {\n    // assuming playlist IDs are the same across periods\n    // TODO: handle multiperiod where representation sets are not the same\n    // across periods\n    var name = playlist.attributes.id + (playlist.attributes.lang || ''); // Periods after first\n\n    if (acc[name]) {\n      var _acc$name$segments;\n\n      // first segment of subsequent periods signal a discontinuity\n      if (playlist.segments[0]) {\n        playlist.segments[0].discontinuity = true;\n      }\n\n      (_acc$name$segments = acc[name].segments).push.apply(_acc$name$segments, playlist.segments); // bubble up contentProtection, this assumes all DRM content\n      // has the same contentProtection\n\n\n      if (playlist.attributes.contentProtection) {\n        acc[name].attributes.contentProtection = playlist.attributes.contentProtection;\n      }\n    } else {\n      // first Period\n      acc[name] = playlist;\n    }\n\n    return acc;\n  }, {}));\n  return mergedPlaylists.map(function (playlist) {\n    playlist.discontinuityStarts = findIndexes(playlist.segments, 'discontinuity');\n    return playlist;\n  });\n};\n\nvar addSegmentInfoFromSidx = function addSegmentInfoFromSidx(playlists, sidxMapping) {\n  if (sidxMapping === void 0) {\n    sidxMapping = {};\n  }\n\n  if (!Object.keys(sidxMapping).length) {\n    return playlists;\n  }\n\n  for (var i in playlists) {\n    var playlist = playlists[i];\n\n    if (!playlist.sidx) {\n      continue;\n    }\n\n    var sidxKey = playlist.sidx.uri + '-' + byteRangeToString(playlist.sidx.byterange);\n    var sidxMatch = sidxMapping[sidxKey] && sidxMapping[sidxKey].sidx;\n\n    if (playlist.sidx && sidxMatch) {\n      addSegmentsToPlaylist(playlist, sidxMatch, playlist.sidx.resolvedUri);\n    }\n  }\n\n  return playlists;\n};\n\nvar formatAudioPlaylist = function formatAudioPlaylist(_ref) {\n  var _attributes;\n\n  var attributes = _ref.attributes,\n      segments = _ref.segments,\n      sidx = _ref.sidx;\n  var playlist = {\n    attributes: (_attributes = {\n      NAME: attributes.id,\n      BANDWIDTH: attributes.bandwidth,\n      CODECS: attributes.codecs\n    }, _attributes['PROGRAM-ID'] = 1, _attributes),\n    uri: '',\n    endList: (attributes.type || 'static') === 'static',\n    timeline: attributes.periodIndex,\n    resolvedUri: '',\n    targetDuration: attributes.duration,\n    segments: segments,\n    mediaSequence: segments.length ? segments[0].number : 1\n  };\n\n  if (attributes.contentProtection) {\n    playlist.contentProtection = attributes.contentProtection;\n  }\n\n  if (sidx) {\n    playlist.sidx = sidx;\n  }\n\n  return playlist;\n};\nvar formatVttPlaylist = function formatVttPlaylist(_ref2) {\n  var _attributes2;\n\n  var attributes = _ref2.attributes,\n      segments = _ref2.segments;\n\n  if (typeof segments === 'undefined') {\n    // vtt tracks may use single file in BaseURL\n    segments = [{\n      uri: attributes.baseUrl,\n      timeline: attributes.periodIndex,\n      resolvedUri: attributes.baseUrl || '',\n      duration: attributes.sourceDuration,\n      number: 0\n    }]; // targetDuration should be the same duration as the only segment\n\n    attributes.duration = attributes.sourceDuration;\n  }\n\n  return {\n    attributes: (_attributes2 = {\n      NAME: attributes.id,\n      BANDWIDTH: attributes.bandwidth\n    }, _attributes2['PROGRAM-ID'] = 1, _attributes2),\n    uri: '',\n    endList: (attributes.type || 'static') === 'static',\n    timeline: attributes.periodIndex,\n    resolvedUri: attributes.baseUrl || '',\n    targetDuration: attributes.duration,\n    segments: segments,\n    mediaSequence: segments.length ? segments[0].number : 1\n  };\n};\nvar organizeAudioPlaylists = function organizeAudioPlaylists(playlists, sidxMapping) {\n  if (sidxMapping === void 0) {\n    sidxMapping = {};\n  }\n\n  var mainPlaylist;\n  var formattedPlaylists = playlists.reduce(function (a, playlist) {\n    var role = playlist.attributes.role && playlist.attributes.role.value || '';\n    var language = playlist.attributes.lang || '';\n    var label = 'main';\n\n    if (language) {\n      var roleLabel = role ? \" (\" + role + \")\" : '';\n      label = \"\" + playlist.attributes.lang + roleLabel;\n    } // skip if we already have the highest quality audio for a language\n\n\n    if (a[label] && a[label].playlists[0].attributes.BANDWIDTH > playlist.attributes.bandwidth) {\n      return a;\n    }\n\n    a[label] = {\n      language: language,\n      autoselect: true,\n      default: role === 'main',\n      playlists: addSegmentInfoFromSidx([formatAudioPlaylist(playlist)], sidxMapping),\n      uri: ''\n    };\n\n    if (typeof mainPlaylist === 'undefined' && role === 'main') {\n      mainPlaylist = playlist;\n      mainPlaylist.default = true;\n    }\n\n    return a;\n  }, {}); // if no playlists have role \"main\", mark the first as main\n\n  if (!mainPlaylist) {\n    var firstLabel = Object.keys(formattedPlaylists)[0];\n    formattedPlaylists[firstLabel].default = true;\n  }\n\n  return formattedPlaylists;\n};\nvar organizeVttPlaylists = function organizeVttPlaylists(playlists, sidxMapping) {\n  if (sidxMapping === void 0) {\n    sidxMapping = {};\n  }\n\n  return playlists.reduce(function (a, playlist) {\n    var label = playlist.attributes.lang || 'text'; // skip if we already have subtitles\n\n    if (a[label]) {\n      return a;\n    }\n\n    a[label] = {\n      language: label,\n      default: false,\n      autoselect: false,\n      playlists: addSegmentInfoFromSidx([formatVttPlaylist(playlist)], sidxMapping),\n      uri: ''\n    };\n    return a;\n  }, {});\n};\nvar formatVideoPlaylist = function formatVideoPlaylist(_ref3) {\n  var _attributes3;\n\n  var attributes = _ref3.attributes,\n      segments = _ref3.segments,\n      sidx = _ref3.sidx;\n  var playlist = {\n    attributes: (_attributes3 = {\n      NAME: attributes.id,\n      AUDIO: 'audio',\n      SUBTITLES: 'subs',\n      RESOLUTION: {\n        width: attributes.width,\n        height: attributes.height\n      },\n      CODECS: attributes.codecs,\n      BANDWIDTH: attributes.bandwidth\n    }, _attributes3['PROGRAM-ID'] = 1, _attributes3),\n    uri: '',\n    endList: (attributes.type || 'static') === 'static',\n    timeline: attributes.periodIndex,\n    resolvedUri: '',\n    targetDuration: attributes.duration,\n    segments: segments,\n    mediaSequence: segments.length ? segments[0].number : 1\n  };\n\n  if (attributes.contentProtection) {\n    playlist.contentProtection = attributes.contentProtection;\n  }\n\n  if (sidx) {\n    playlist.sidx = sidx;\n  }\n\n  return playlist;\n};\nvar toM3u8 = function toM3u8(dashPlaylists, sidxMapping) {\n  var _mediaGroups;\n\n  if (sidxMapping === void 0) {\n    sidxMapping = {};\n  }\n\n  if (!dashPlaylists.length) {\n    return {};\n  } // grab all master attributes\n\n\n  var _dashPlaylists$0$attr = dashPlaylists[0].attributes,\n      duration = _dashPlaylists$0$attr.sourceDuration,\n      _dashPlaylists$0$attr2 = _dashPlaylists$0$attr.minimumUpdatePeriod,\n      minimumUpdatePeriod = _dashPlaylists$0$attr2 === void 0 ? 0 : _dashPlaylists$0$attr2;\n\n  var videoOnly = function videoOnly(_ref4) {\n    var attributes = _ref4.attributes;\n    return attributes.mimeType === 'video/mp4' || attributes.contentType === 'video';\n  };\n\n  var audioOnly = function audioOnly(_ref5) {\n    var attributes = _ref5.attributes;\n    return attributes.mimeType === 'audio/mp4' || attributes.contentType === 'audio';\n  };\n\n  var vttOnly = function vttOnly(_ref6) {\n    var attributes = _ref6.attributes;\n    return attributes.mimeType === 'text/vtt' || attributes.contentType === 'text';\n  };\n\n  var videoPlaylists = mergeDiscontiguousPlaylists(dashPlaylists.filter(videoOnly)).map(formatVideoPlaylist);\n  var audioPlaylists = mergeDiscontiguousPlaylists(dashPlaylists.filter(audioOnly));\n  var vttPlaylists = dashPlaylists.filter(vttOnly);\n  var master = {\n    allowCache: true,\n    discontinuityStarts: [],\n    segments: [],\n    endList: true,\n    mediaGroups: (_mediaGroups = {\n      AUDIO: {},\n      VIDEO: {}\n    }, _mediaGroups['CLOSED-CAPTIONS'] = {}, _mediaGroups.SUBTITLES = {}, _mediaGroups),\n    uri: '',\n    duration: duration,\n    playlists: addSegmentInfoFromSidx(videoPlaylists, sidxMapping),\n    minimumUpdatePeriod: minimumUpdatePeriod * 1000\n  };\n\n  if (audioPlaylists.length) {\n    master.mediaGroups.AUDIO.audio = organizeAudioPlaylists(audioPlaylists, sidxMapping);\n  }\n\n  if (vttPlaylists.length) {\n    master.mediaGroups.SUBTITLES.subs = organizeVttPlaylists(vttPlaylists, sidxMapping);\n  }\n\n  return master;\n};\n\n/**\n * Calculates the R (repetition) value for a live stream (for the final segment\n * in a manifest where the r value is negative 1)\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {number} time\n *        current time (typically the total time up until the final segment)\n * @param {number} duration\n *        duration property for the given <S />\n *\n * @return {number}\n *        R value to reach the end of the given period\n */\nvar getLiveRValue = function getLiveRValue(attributes, time, duration) {\n  var NOW = attributes.NOW,\n      clientOffset = attributes.clientOffset,\n      availabilityStartTime = attributes.availabilityStartTime,\n      _attributes$timescale = attributes.timescale,\n      timescale = _attributes$timescale === void 0 ? 1 : _attributes$timescale,\n      _attributes$start = attributes.start,\n      start = _attributes$start === void 0 ? 0 : _attributes$start,\n      _attributes$minimumUp = attributes.minimumUpdatePeriod,\n      minimumUpdatePeriod = _attributes$minimumUp === void 0 ? 0 : _attributes$minimumUp;\n  var now = (NOW + clientOffset) / 1000;\n  var periodStartWC = availabilityStartTime + start;\n  var periodEndWC = now + minimumUpdatePeriod;\n  var periodDuration = periodEndWC - periodStartWC;\n  return Math.ceil((periodDuration * timescale - time) / duration);\n};\n/**\n * Uses information provided by SegmentTemplate.SegmentTimeline to determine segment\n * timing and duration\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {Object[]} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\n *         List of Objects with segment timing and duration info\n */\n\n\nvar parseByTimeline = function parseByTimeline(attributes, segmentTimeline) {\n  var _attributes$type = attributes.type,\n      type = _attributes$type === void 0 ? 'static' : _attributes$type,\n      _attributes$minimumUp2 = attributes.minimumUpdatePeriod,\n      minimumUpdatePeriod = _attributes$minimumUp2 === void 0 ? 0 : _attributes$minimumUp2,\n      _attributes$media = attributes.media,\n      media = _attributes$media === void 0 ? '' : _attributes$media,\n      sourceDuration = attributes.sourceDuration,\n      _attributes$timescale2 = attributes.timescale,\n      timescale = _attributes$timescale2 === void 0 ? 1 : _attributes$timescale2,\n      _attributes$startNumb = attributes.startNumber,\n      startNumber = _attributes$startNumb === void 0 ? 1 : _attributes$startNumb,\n      timeline = attributes.periodIndex;\n  var segments = [];\n  var time = -1;\n\n  for (var sIndex = 0; sIndex < segmentTimeline.length; sIndex++) {\n    var S = segmentTimeline[sIndex];\n    var duration = S.d;\n    var repeat = S.r || 0;\n    var segmentTime = S.t || 0;\n\n    if (time < 0) {\n      // first segment\n      time = segmentTime;\n    }\n\n    if (segmentTime && segmentTime > time) {\n      // discontinuity\n      // TODO: How to handle this type of discontinuity\n      // timeline++ here would treat it like HLS discontuity and content would\n      // get appended without gap\n      // E.G.\n      //  <S t=\"0\" d=\"1\" />\n      //  <S d=\"1\" />\n      //  <S d=\"1\" />\n      //  <S t=\"5\" d=\"1\" />\n      // would have $Time$ values of [0, 1, 2, 5]\n      // should this be appened at time positions [0, 1, 2, 3],(#EXT-X-DISCONTINUITY)\n      // or [0, 1, 2, gap, gap, 5]? (#EXT-X-GAP)\n      // does the value of sourceDuration consider this when calculating arbitrary\n      // negative @r repeat value?\n      // E.G. Same elements as above with this added at the end\n      //  <S d=\"1\" r=\"-1\" />\n      //  with a sourceDuration of 10\n      // Would the 2 gaps be included in the time duration calculations resulting in\n      // 8 segments with $Time$ values of [0, 1, 2, 5, 6, 7, 8, 9] or 10 segments\n      // with $Time$ values of [0, 1, 2, 5, 6, 7, 8, 9, 10, 11] ?\n      time = segmentTime;\n    }\n\n    var count = void 0;\n\n    if (repeat < 0) {\n      var nextS = sIndex + 1;\n\n      if (nextS === segmentTimeline.length) {\n        // last segment\n        if (type === 'dynamic' && minimumUpdatePeriod > 0 && media.indexOf('$Number$') > 0) {\n          count = getLiveRValue(attributes, time, duration);\n        } else {\n          // TODO: This may be incorrect depending on conclusion of TODO above\n          count = (sourceDuration * timescale - time) / duration;\n        }\n      } else {\n        count = (segmentTimeline[nextS].t - time) / duration;\n      }\n    } else {\n      count = repeat + 1;\n    }\n\n    var end = startNumber + segments.length + count;\n    var number = startNumber + segments.length;\n\n    while (number < end) {\n      segments.push({\n        number: number,\n        duration: duration / timescale,\n        time: time,\n        timeline: timeline\n      });\n      time += duration;\n      number++;\n    }\n  }\n\n  return segments;\n};\n\nvar identifierPattern = /\\$([A-z]*)(?:(%0)([0-9]+)d)?\\$/g;\n/**\n * Replaces template identifiers with corresponding values. To be used as the callback\n * for String.prototype.replace\n *\n * @name replaceCallback\n * @function\n * @param {string} match\n *        Entire match of identifier\n * @param {string} identifier\n *        Name of matched identifier\n * @param {string} format\n *        Format tag string. Its presence indicates that padding is expected\n * @param {string} width\n *        Desired length of the replaced value. Values less than this width shall be left\n *        zero padded\n * @return {string}\n *         Replacement for the matched identifier\n */\n\n/**\n * Returns a function to be used as a callback for String.prototype.replace to replace\n * template identifiers\n *\n * @param {Obect} values\n *        Object containing values that shall be used to replace known identifiers\n * @param {number} values.RepresentationID\n *        Value of the Representation@id attribute\n * @param {number} values.Number\n *        Number of the corresponding segment\n * @param {number} values.Bandwidth\n *        Value of the Representation@bandwidth attribute.\n * @param {number} values.Time\n *        Timestamp value of the corresponding segment\n * @return {replaceCallback}\n *         Callback to be used with String.prototype.replace to replace identifiers\n */\n\nvar identifierReplacement = function identifierReplacement(values) {\n  return function (match, identifier, format, width) {\n    if (match === '$$') {\n      // escape sequence\n      return '$';\n    }\n\n    if (typeof values[identifier] === 'undefined') {\n      return match;\n    }\n\n    var value = '' + values[identifier];\n\n    if (identifier === 'RepresentationID') {\n      // Format tag shall not be present with RepresentationID\n      return value;\n    }\n\n    if (!format) {\n      width = 1;\n    } else {\n      width = parseInt(width, 10);\n    }\n\n    if (value.length >= width) {\n      return value;\n    }\n\n    return \"\" + new Array(width - value.length + 1).join('0') + value;\n  };\n};\n/**\n * Constructs a segment url from a template string\n *\n * @param {string} url\n *        Template string to construct url from\n * @param {Obect} values\n *        Object containing values that shall be used to replace known identifiers\n * @param {number} values.RepresentationID\n *        Value of the Representation@id attribute\n * @param {number} values.Number\n *        Number of the corresponding segment\n * @param {number} values.Bandwidth\n *        Value of the Representation@bandwidth attribute.\n * @param {number} values.Time\n *        Timestamp value of the corresponding segment\n * @return {string}\n *         Segment url with identifiers replaced\n */\n\nvar constructTemplateUrl = function constructTemplateUrl(url, values) {\n  return url.replace(identifierPattern, identifierReplacement(values));\n};\n/**\n * Generates a list of objects containing timing and duration information about each\n * segment needed to generate segment uris and the complete segment object\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {Object[]|undefined} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *        the SegmentTimeline element\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\n *         List of Objects with segment timing and duration info\n */\n\nvar parseTemplateInfo = function parseTemplateInfo(attributes, segmentTimeline) {\n  if (!attributes.duration && !segmentTimeline) {\n    // if neither @duration or SegmentTimeline are present, then there shall be exactly\n    // one media segment\n    return [{\n      number: attributes.startNumber || 1,\n      duration: attributes.sourceDuration,\n      time: 0,\n      timeline: attributes.periodIndex\n    }];\n  }\n\n  if (attributes.duration) {\n    return parseByDuration(attributes);\n  }\n\n  return parseByTimeline(attributes, segmentTimeline);\n};\n/**\n * Generates a list of segments using information provided by the SegmentTemplate element\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {Object[]|undefined} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *        the SegmentTimeline element\n * @return {Object[]}\n *         List of segment objects\n */\n\nvar segmentsFromTemplate = function segmentsFromTemplate(attributes, segmentTimeline) {\n  var templateValues = {\n    RepresentationID: attributes.id,\n    Bandwidth: attributes.bandwidth || 0\n  };\n  var _attributes$initializ = attributes.initialization,\n      initialization = _attributes$initializ === void 0 ? {\n    sourceURL: '',\n    range: ''\n  } : _attributes$initializ;\n  var mapSegment = urlTypeToSegment({\n    baseUrl: attributes.baseUrl,\n    source: constructTemplateUrl(initialization.sourceURL, templateValues),\n    range: initialization.range\n  });\n  var segments = parseTemplateInfo(attributes, segmentTimeline);\n  return segments.map(function (segment) {\n    templateValues.Number = segment.number;\n    templateValues.Time = segment.time;\n    var uri = constructTemplateUrl(attributes.media || '', templateValues);\n    return {\n      uri: uri,\n      timeline: segment.timeline,\n      duration: segment.duration,\n      resolvedUri: resolveUrl(attributes.baseUrl || '', uri),\n      map: mapSegment,\n      number: segment.number\n    };\n  });\n};\n\n/**\n * Converts a <SegmentUrl> (of type URLType from the DASH spec 5.3.9.2 Table 14)\n * to an object that matches the output of a segment in videojs/mpd-parser\n *\n * @param {Object} attributes\n *   Object containing all inherited attributes from parent elements with attribute\n *   names as keys\n * @param {Object} segmentUrl\n *   <SegmentURL> node to translate into a segment object\n * @return {Object} translated segment object\n */\n\nvar SegmentURLToSegmentObject = function SegmentURLToSegmentObject(attributes, segmentUrl) {\n  var baseUrl = attributes.baseUrl,\n      _attributes$initializ = attributes.initialization,\n      initialization = _attributes$initializ === void 0 ? {} : _attributes$initializ;\n  var initSegment = urlTypeToSegment({\n    baseUrl: baseUrl,\n    source: initialization.sourceURL,\n    range: initialization.range\n  });\n  var segment = urlTypeToSegment({\n    baseUrl: baseUrl,\n    source: segmentUrl.media,\n    range: segmentUrl.mediaRange\n  });\n  segment.map = initSegment;\n  return segment;\n};\n/**\n * Generates a list of segments using information provided by the SegmentList element\n * SegmentList (DASH SPEC Section 5.3.9.3.2) contains a set of <SegmentURL> nodes.  Each\n * node should be translated into segment.\n *\n * @param {Object} attributes\n *   Object containing all inherited attributes from parent elements with attribute\n *   names as keys\n * @param {Object[]|undefined} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *        the SegmentTimeline element\n * @return {Object.<Array>} list of segments\n */\n\n\nvar segmentsFromList = function segmentsFromList(attributes, segmentTimeline) {\n  var duration = attributes.duration,\n      _attributes$segmentUr = attributes.segmentUrls,\n      segmentUrls = _attributes$segmentUr === void 0 ? [] : _attributes$segmentUr; // Per spec (5.3.9.2.1) no way to determine segment duration OR\n  // if both SegmentTimeline and @duration are defined, it is outside of spec.\n\n  if (!duration && !segmentTimeline || duration && segmentTimeline) {\n    throw new Error(errors.SEGMENT_TIME_UNSPECIFIED);\n  }\n\n  var segmentUrlMap = segmentUrls.map(function (segmentUrlObject) {\n    return SegmentURLToSegmentObject(attributes, segmentUrlObject);\n  });\n  var segmentTimeInfo;\n\n  if (duration) {\n    segmentTimeInfo = parseByDuration(attributes);\n  }\n\n  if (segmentTimeline) {\n    segmentTimeInfo = parseByTimeline(attributes, segmentTimeline);\n  }\n\n  var segments = segmentTimeInfo.map(function (segmentTime, index) {\n    if (segmentUrlMap[index]) {\n      var segment = segmentUrlMap[index];\n      segment.timeline = segmentTime.timeline;\n      segment.duration = segmentTime.duration;\n      segment.number = segmentTime.number;\n      return segment;\n    } // Since we're mapping we should get rid of any blank segments (in case\n    // the given SegmentTimeline is handling for more elements than we have\n    // SegmentURLs for).\n\n  }).filter(function (segment) {\n    return segment;\n  });\n  return segments;\n};\n\nvar generateSegments = function generateSegments(_ref) {\n  var attributes = _ref.attributes,\n      segmentInfo = _ref.segmentInfo;\n  var segmentAttributes;\n  var segmentsFn;\n\n  if (segmentInfo.template) {\n    segmentsFn = segmentsFromTemplate;\n    segmentAttributes = merge(attributes, segmentInfo.template);\n  } else if (segmentInfo.base) {\n    segmentsFn = segmentsFromBase;\n    segmentAttributes = merge(attributes, segmentInfo.base);\n  } else if (segmentInfo.list) {\n    segmentsFn = segmentsFromList;\n    segmentAttributes = merge(attributes, segmentInfo.list);\n  }\n\n  var segmentsInfo = {\n    attributes: attributes\n  };\n\n  if (!segmentsFn) {\n    return segmentsInfo;\n  }\n\n  var segments = segmentsFn(segmentAttributes, segmentInfo.timeline); // The @duration attribute will be used to determin the playlist's targetDuration which\n  // must be in seconds. Since we've generated the segment list, we no longer need\n  // @duration to be in @timescale units, so we can convert it here.\n\n  if (segmentAttributes.duration) {\n    var _segmentAttributes = segmentAttributes,\n        duration = _segmentAttributes.duration,\n        _segmentAttributes$ti = _segmentAttributes.timescale,\n        timescale = _segmentAttributes$ti === void 0 ? 1 : _segmentAttributes$ti;\n    segmentAttributes.duration = duration / timescale;\n  } else if (segments.length) {\n    // if there is no @duration attribute, use the largest segment duration as\n    // as target duration\n    segmentAttributes.duration = segments.reduce(function (max, segment) {\n      return Math.max(max, Math.ceil(segment.duration));\n    }, 0);\n  } else {\n    segmentAttributes.duration = 0;\n  }\n\n  segmentsInfo.attributes = segmentAttributes;\n  segmentsInfo.segments = segments; // This is a sidx box without actual segment information\n\n  if (segmentInfo.base && segmentAttributes.indexRange) {\n    segmentsInfo.sidx = segments[0];\n    segmentsInfo.segments = [];\n  }\n\n  return segmentsInfo;\n};\nvar toPlaylists = function toPlaylists(representations) {\n  return representations.map(generateSegments);\n};\n\nvar findChildren = function findChildren(element, name) {\n  return from(element.childNodes).filter(function (_ref) {\n    var tagName = _ref.tagName;\n    return tagName === name;\n  });\n};\nvar getContent = function getContent(element) {\n  return element.textContent.trim();\n};\n\nvar parseDuration = function parseDuration(str) {\n  var SECONDS_IN_YEAR = 365 * 24 * 60 * 60;\n  var SECONDS_IN_MONTH = 30 * 24 * 60 * 60;\n  var SECONDS_IN_DAY = 24 * 60 * 60;\n  var SECONDS_IN_HOUR = 60 * 60;\n  var SECONDS_IN_MIN = 60; // P10Y10M10DT10H10M10.1S\n\n  var durationRegex = /P(?:(\\d*)Y)?(?:(\\d*)M)?(?:(\\d*)D)?(?:T(?:(\\d*)H)?(?:(\\d*)M)?(?:([\\d.]*)S)?)?/;\n  var match = durationRegex.exec(str);\n\n  if (!match) {\n    return 0;\n  }\n\n  var _match$slice = match.slice(1),\n      year = _match$slice[0],\n      month = _match$slice[1],\n      day = _match$slice[2],\n      hour = _match$slice[3],\n      minute = _match$slice[4],\n      second = _match$slice[5];\n\n  return parseFloat(year || 0) * SECONDS_IN_YEAR + parseFloat(month || 0) * SECONDS_IN_MONTH + parseFloat(day || 0) * SECONDS_IN_DAY + parseFloat(hour || 0) * SECONDS_IN_HOUR + parseFloat(minute || 0) * SECONDS_IN_MIN + parseFloat(second || 0);\n};\nvar parseDate = function parseDate(str) {\n  // Date format without timezone according to ISO 8601\n  // YYY-MM-DDThh:mm:ss.ssssss\n  var dateRegex = /^\\d+-\\d+-\\d+T\\d+:\\d+:\\d+(\\.\\d+)?$/; // If the date string does not specifiy a timezone, we must specifiy UTC. This is\n  // expressed by ending with 'Z'\n\n  if (dateRegex.test(str)) {\n    str += 'Z';\n  }\n\n  return Date.parse(str);\n};\n\nvar parsers = {\n  /**\n   * Specifies the duration of the entire Media Presentation. Format is a duration string\n   * as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  mediaPresentationDuration: function mediaPresentationDuration(value) {\n    return parseDuration(value);\n  },\n\n  /**\n   * Specifies the Segment availability start time for all Segments referred to in this\n   * MPD. For a dynamic manifest, it specifies the anchor for the earliest availability\n   * time. Format is a date string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The date as seconds from unix epoch\n   */\n  availabilityStartTime: function availabilityStartTime(value) {\n    return parseDate(value) / 1000;\n  },\n\n  /**\n   * Specifies the smallest period between potential changes to the MPD. Format is a\n   * duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  minimumUpdatePeriod: function minimumUpdatePeriod(value) {\n    return parseDuration(value);\n  },\n\n  /**\n   * Specifies the duration of the smallest time shifting buffer for any Representation\n   * in the MPD. Format is a duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  timeShiftBufferDepth: function timeShiftBufferDepth(value) {\n    return parseDuration(value);\n  },\n\n  /**\n   * Specifies the PeriodStart time of the Period relative to the availabilityStarttime.\n   * Format is a duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  start: function start(value) {\n    return parseDuration(value);\n  },\n\n  /**\n   * Specifies the width of the visual presentation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed width\n   */\n  width: function width(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the height of the visual presentation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed height\n   */\n  height: function height(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the bitrate of the representation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed bandwidth\n   */\n  bandwidth: function bandwidth(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the number of the first Media Segment in this Representation in the Period\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed number\n   */\n  startNumber: function startNumber(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the timescale in units per seconds\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The aprsed timescale\n   */\n  timescale: function timescale(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the constant approximate Segment duration\n   * NOTE: The <Period> element also contains an @duration attribute. This duration\n   *       specifies the duration of the Period. This attribute is currently not\n   *       supported by the rest of the parser, however we still check for it to prevent\n   *       errors.\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed duration\n   */\n  duration: function duration(value) {\n    var parsedValue = parseInt(value, 10);\n\n    if (isNaN(parsedValue)) {\n      return parseDuration(value);\n    }\n\n    return parsedValue;\n  },\n\n  /**\n   * Specifies the Segment duration, in units of the value of the @timescale.\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed duration\n   */\n  d: function d(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the MPD start time, in @timescale units, the first Segment in the series\n   * starts relative to the beginning of the Period\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed time\n   */\n  t: function t(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the repeat count of the number of following contiguous Segments with the\n   * same duration expressed by the value of @d\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed number\n   */\n  r: function r(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Default parser for all other attributes. Acts as a no-op and just returns the value\n   * as a string\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {string}\n   *         Unparsed value\n   */\n  DEFAULT: function DEFAULT(value) {\n    return value;\n  }\n};\n/**\n * Gets all the attributes and values of the provided node, parses attributes with known\n * types, and returns an object with attribute names mapped to values.\n *\n * @param {Node} el\n *        The node to parse attributes from\n * @return {Object}\n *         Object with all attributes of el parsed\n */\n\nvar parseAttributes = function parseAttributes(el) {\n  if (!(el && el.attributes)) {\n    return {};\n  }\n\n  return from(el.attributes).reduce(function (a, e) {\n    var parseFn = parsers[e.name] || parsers.DEFAULT;\n    a[e.name] = parseFn(e.value);\n    return a;\n  }, {});\n};\n\nfunction decodeB64ToUint8Array(b64Text) {\n  var decodedString = window$1.atob(b64Text);\n  var array = new Uint8Array(decodedString.length);\n\n  for (var i = 0; i < decodedString.length; i++) {\n    array[i] = decodedString.charCodeAt(i);\n  }\n\n  return array;\n}\n\nvar keySystemsMap = {\n  'urn:uuid:1077efec-c0b2-4d02-ace3-3c1e52e2fb4b': 'org.w3.clearkey',\n  'urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed': 'com.widevine.alpha',\n  'urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95': 'com.microsoft.playready',\n  'urn:uuid:f239e769-efa3-4850-9c16-a903c6932efb': 'com.adobe.primetime'\n};\n/**\n * Builds a list of urls that is the product of the reference urls and BaseURL values\n *\n * @param {string[]} referenceUrls\n *        List of reference urls to resolve to\n * @param {Node[]} baseUrlElements\n *        List of BaseURL nodes from the mpd\n * @return {string[]}\n *         List of resolved urls\n */\n\nvar buildBaseUrls = function buildBaseUrls(referenceUrls, baseUrlElements) {\n  if (!baseUrlElements.length) {\n    return referenceUrls;\n  }\n\n  return flatten(referenceUrls.map(function (reference) {\n    return baseUrlElements.map(function (baseUrlElement) {\n      return resolveUrl(reference, getContent(baseUrlElement));\n    });\n  }));\n};\n/**\n * Contains all Segment information for its containing AdaptationSet\n *\n * @typedef {Object} SegmentInformation\n * @property {Object|undefined} template\n *           Contains the attributes for the SegmentTemplate node\n * @property {Object[]|undefined} timeline\n *           Contains a list of atrributes for each S node within the SegmentTimeline node\n * @property {Object|undefined} list\n *           Contains the attributes for the SegmentList node\n * @property {Object|undefined} base\n *           Contains the attributes for the SegmentBase node\n */\n\n/**\n * Returns all available Segment information contained within the AdaptationSet node\n *\n * @param {Node} adaptationSet\n *        The AdaptationSet node to get Segment information from\n * @return {SegmentInformation}\n *         The Segment information contained within the provided AdaptationSet\n */\n\nvar getSegmentInformation = function getSegmentInformation(adaptationSet) {\n  var segmentTemplate = findChildren(adaptationSet, 'SegmentTemplate')[0];\n  var segmentList = findChildren(adaptationSet, 'SegmentList')[0];\n  var segmentUrls = segmentList && findChildren(segmentList, 'SegmentURL').map(function (s) {\n    return merge({\n      tag: 'SegmentURL'\n    }, parseAttributes(s));\n  });\n  var segmentBase = findChildren(adaptationSet, 'SegmentBase')[0];\n  var segmentTimelineParentNode = segmentList || segmentTemplate;\n  var segmentTimeline = segmentTimelineParentNode && findChildren(segmentTimelineParentNode, 'SegmentTimeline')[0];\n  var segmentInitializationParentNode = segmentList || segmentBase || segmentTemplate;\n  var segmentInitialization = segmentInitializationParentNode && findChildren(segmentInitializationParentNode, 'Initialization')[0]; // SegmentTemplate is handled slightly differently, since it can have both\n  // @initialization and an <Initialization> node.  @initialization can be templated,\n  // while the node can have a url and range specified.  If the <SegmentTemplate> has\n  // both @initialization and an <Initialization> subelement we opt to override with\n  // the node, as this interaction is not defined in the spec.\n\n  var template = segmentTemplate && parseAttributes(segmentTemplate);\n\n  if (template && segmentInitialization) {\n    template.initialization = segmentInitialization && parseAttributes(segmentInitialization);\n  } else if (template && template.initialization) {\n    // If it is @initialization we convert it to an object since this is the format that\n    // later functions will rely on for the initialization segment.  This is only valid\n    // for <SegmentTemplate>\n    template.initialization = {\n      sourceURL: template.initialization\n    };\n  }\n\n  var segmentInfo = {\n    template: template,\n    timeline: segmentTimeline && findChildren(segmentTimeline, 'S').map(function (s) {\n      return parseAttributes(s);\n    }),\n    list: segmentList && merge(parseAttributes(segmentList), {\n      segmentUrls: segmentUrls,\n      initialization: parseAttributes(segmentInitialization)\n    }),\n    base: segmentBase && merge(parseAttributes(segmentBase), {\n      initialization: parseAttributes(segmentInitialization)\n    })\n  };\n  Object.keys(segmentInfo).forEach(function (key) {\n    if (!segmentInfo[key]) {\n      delete segmentInfo[key];\n    }\n  });\n  return segmentInfo;\n};\n/**\n * Contains Segment information and attributes needed to construct a Playlist object\n * from a Representation\n *\n * @typedef {Object} RepresentationInformation\n * @property {SegmentInformation} segmentInfo\n *           Segment information for this Representation\n * @property {Object} attributes\n *           Inherited attributes for this Representation\n */\n\n/**\n * Maps a Representation node to an object containing Segment information and attributes\n *\n * @name inheritBaseUrlsCallback\n * @function\n * @param {Node} representation\n *        Representation node from the mpd\n * @return {RepresentationInformation}\n *         Representation information needed to construct a Playlist object\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping Representation nodes to\n * Segment information and attributes using inherited BaseURL nodes.\n *\n * @param {Object} adaptationSetAttributes\n *        Contains attributes inherited by the AdaptationSet\n * @param {string[]} adaptationSetBaseUrls\n *        Contains list of resolved base urls inherited by the AdaptationSet\n * @param {SegmentInformation} adaptationSetSegmentInfo\n *        Contains Segment information for the AdaptationSet\n * @return {inheritBaseUrlsCallback}\n *         Callback map function\n */\n\nvar inheritBaseUrls = function inheritBaseUrls(adaptationSetAttributes, adaptationSetBaseUrls, adaptationSetSegmentInfo) {\n  return function (representation) {\n    var repBaseUrlElements = findChildren(representation, 'BaseURL');\n    var repBaseUrls = buildBaseUrls(adaptationSetBaseUrls, repBaseUrlElements);\n    var attributes = merge(adaptationSetAttributes, parseAttributes(representation));\n    var representationSegmentInfo = getSegmentInformation(representation);\n    return repBaseUrls.map(function (baseUrl) {\n      return {\n        segmentInfo: merge(adaptationSetSegmentInfo, representationSegmentInfo),\n        attributes: merge(attributes, {\n          baseUrl: baseUrl\n        })\n      };\n    });\n  };\n};\n/**\n * Tranforms a series of content protection nodes to\n * an object containing pssh data by key system\n *\n * @param {Node[]} contentProtectionNodes\n *        Content protection nodes\n * @return {Object}\n *        Object containing pssh data by key system\n */\n\nvar generateKeySystemInformation = function generateKeySystemInformation(contentProtectionNodes) {\n  return contentProtectionNodes.reduce(function (acc, node) {\n    var attributes = parseAttributes(node);\n    var keySystem = keySystemsMap[attributes.schemeIdUri];\n\n    if (keySystem) {\n      acc[keySystem] = {\n        attributes: attributes\n      };\n      var psshNode = findChildren(node, 'cenc:pssh')[0];\n\n      if (psshNode) {\n        var pssh = getContent(psshNode);\n        var psshBuffer = pssh && decodeB64ToUint8Array(pssh);\n        acc[keySystem].pssh = psshBuffer;\n      }\n    }\n\n    return acc;\n  }, {});\n};\n/**\n * Maps an AdaptationSet node to a list of Representation information objects\n *\n * @name toRepresentationsCallback\n * @function\n * @param {Node} adaptationSet\n *        AdaptationSet node from the mpd\n * @return {RepresentationInformation[]}\n *         List of objects containing Representaion information\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping AdaptationSet nodes to a list of\n * Representation information objects\n *\n * @param {Object} periodAttributes\n *        Contains attributes inherited by the Period\n * @param {string[]} periodBaseUrls\n *        Contains list of resolved base urls inherited by the Period\n * @param {string[]} periodSegmentInfo\n *        Contains Segment Information at the period level\n * @return {toRepresentationsCallback}\n *         Callback map function\n */\n\n\nvar toRepresentations = function toRepresentations(periodAttributes, periodBaseUrls, periodSegmentInfo) {\n  return function (adaptationSet) {\n    var adaptationSetAttributes = parseAttributes(adaptationSet);\n    var adaptationSetBaseUrls = buildBaseUrls(periodBaseUrls, findChildren(adaptationSet, 'BaseURL'));\n    var role = findChildren(adaptationSet, 'Role')[0];\n    var roleAttributes = {\n      role: parseAttributes(role)\n    };\n    var attrs = merge(periodAttributes, adaptationSetAttributes, roleAttributes);\n    var contentProtection = generateKeySystemInformation(findChildren(adaptationSet, 'ContentProtection'));\n\n    if (Object.keys(contentProtection).length) {\n      attrs = merge(attrs, {\n        contentProtection: contentProtection\n      });\n    }\n\n    var segmentInfo = getSegmentInformation(adaptationSet);\n    var representations = findChildren(adaptationSet, 'Representation');\n    var adaptationSetSegmentInfo = merge(periodSegmentInfo, segmentInfo);\n    return flatten(representations.map(inheritBaseUrls(attrs, adaptationSetBaseUrls, adaptationSetSegmentInfo)));\n  };\n};\n/**\n * Maps an Period node to a list of Representation inforamtion objects for all\n * AdaptationSet nodes contained within the Period\n *\n * @name toAdaptationSetsCallback\n * @function\n * @param {Node} period\n *        Period node from the mpd\n * @param {number} periodIndex\n *        Index of the Period within the mpd\n * @return {RepresentationInformation[]}\n *         List of objects containing Representaion information\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping Period nodes to a list of\n * Representation information objects\n *\n * @param {Object} mpdAttributes\n *        Contains attributes inherited by the mpd\n * @param {string[]} mpdBaseUrls\n *        Contains list of resolved base urls inherited by the mpd\n * @return {toAdaptationSetsCallback}\n *         Callback map function\n */\n\nvar toAdaptationSets = function toAdaptationSets(mpdAttributes, mpdBaseUrls) {\n  return function (period, index) {\n    var periodBaseUrls = buildBaseUrls(mpdBaseUrls, findChildren(period, 'BaseURL'));\n    var periodAtt = parseAttributes(period);\n    var parsedPeriodId = parseInt(periodAtt.id, 10); // fallback to mapping index if Period@id is not a number\n\n    var periodIndex = window$1.isNaN(parsedPeriodId) ? index : parsedPeriodId;\n    var periodAttributes = merge(mpdAttributes, {\n      periodIndex: periodIndex\n    });\n    var adaptationSets = findChildren(period, 'AdaptationSet');\n    var periodSegmentInfo = getSegmentInformation(period);\n    return flatten(adaptationSets.map(toRepresentations(periodAttributes, periodBaseUrls, periodSegmentInfo)));\n  };\n};\n/**\n * Traverses the mpd xml tree to generate a list of Representation information objects\n * that have inherited attributes from parent nodes\n *\n * @param {Node} mpd\n *        The root node of the mpd\n * @param {Object} options\n *        Available options for inheritAttributes\n * @param {string} options.manifestUri\n *        The uri source of the mpd\n * @param {number} options.NOW\n *        Current time per DASH IOP.  Default is current time in ms since epoch\n * @param {number} options.clientOffset\n *        Client time difference from NOW (in milliseconds)\n * @return {RepresentationInformation[]}\n *         List of objects containing Representation information\n */\n\nvar inheritAttributes = function inheritAttributes(mpd, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      _options$manifestUri = _options.manifestUri,\n      manifestUri = _options$manifestUri === void 0 ? '' : _options$manifestUri,\n      _options$NOW = _options.NOW,\n      NOW = _options$NOW === void 0 ? Date.now() : _options$NOW,\n      _options$clientOffset = _options.clientOffset,\n      clientOffset = _options$clientOffset === void 0 ? 0 : _options$clientOffset;\n  var periods = findChildren(mpd, 'Period');\n\n  if (!periods.length) {\n    throw new Error(errors.INVALID_NUMBER_OF_PERIOD);\n  }\n\n  var mpdAttributes = parseAttributes(mpd);\n  var mpdBaseUrls = buildBaseUrls([manifestUri], findChildren(mpd, 'BaseURL'));\n  mpdAttributes.sourceDuration = mpdAttributes.mediaPresentationDuration || 0;\n  mpdAttributes.NOW = NOW;\n  mpdAttributes.clientOffset = clientOffset;\n  return flatten(periods.map(toAdaptationSets(mpdAttributes, mpdBaseUrls)));\n};\n\nvar stringToMpdXml = function stringToMpdXml(manifestString) {\n  if (manifestString === '') {\n    throw new Error(errors.DASH_EMPTY_MANIFEST);\n  }\n\n  var parser = new window$1.DOMParser();\n  var xml = parser.parseFromString(manifestString, 'application/xml');\n  var mpd = xml && xml.documentElement.tagName === 'MPD' ? xml.documentElement : null;\n\n  if (!mpd || mpd && mpd.getElementsByTagName('parsererror').length > 0) {\n    throw new Error(errors.DASH_INVALID_XML);\n  }\n\n  return mpd;\n};\n\n/**\n * Parses the manifest for a UTCTiming node, returning the nodes attributes if found\n *\n * @param {string} mpd\n *        XML string of the MPD manifest\n * @return {Object|null}\n *         Attributes of UTCTiming node specified in the manifest. Null if none found\n */\n\nvar parseUTCTimingScheme = function parseUTCTimingScheme(mpd) {\n  var UTCTimingNode = findChildren(mpd, 'UTCTiming')[0];\n\n  if (!UTCTimingNode) {\n    return null;\n  }\n\n  var attributes = parseAttributes(UTCTimingNode);\n\n  switch (attributes.schemeIdUri) {\n    case 'urn:mpeg:dash:utc:http-head:2014':\n    case 'urn:mpeg:dash:utc:http-head:2012':\n      attributes.method = 'HEAD';\n      break;\n\n    case 'urn:mpeg:dash:utc:http-xsdate:2014':\n    case 'urn:mpeg:dash:utc:http-iso:2014':\n    case 'urn:mpeg:dash:utc:http-xsdate:2012':\n    case 'urn:mpeg:dash:utc:http-iso:2012':\n      attributes.method = 'GET';\n      break;\n\n    case 'urn:mpeg:dash:utc:direct:2014':\n    case 'urn:mpeg:dash:utc:direct:2012':\n      attributes.method = 'DIRECT';\n      attributes.value = Date.parse(attributes.value);\n      break;\n\n    case 'urn:mpeg:dash:utc:http-ntp:2014':\n    case 'urn:mpeg:dash:utc:ntp:2014':\n    case 'urn:mpeg:dash:utc:sntp:2014':\n    default:\n      throw new Error(errors.UNSUPPORTED_UTC_TIMING_SCHEME);\n  }\n\n  return attributes;\n};\n\nvar VERSION = version;\nvar parse = function parse(manifestString, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return toM3u8(toPlaylists(inheritAttributes(stringToMpdXml(manifestString), options)), options.sidxMapping);\n};\n/**\n * Parses the manifest for a UTCTiming node, returning the nodes attributes if found\n *\n * @param {string} manifestString\n *        XML string of the MPD manifest\n * @return {Object|null}\n *         Attributes of UTCTiming node specified in the manifest. Null if none found\n */\n\nvar parseUTCTiming = function parseUTCTiming(manifestString) {\n  return parseUTCTimingScheme(stringToMpdXml(manifestString));\n};\n\nexport { VERSION, parse, parseUTCTiming };\n","module.exports = SafeParseTuple\n\nfunction SafeParseTuple(obj, reviver) {\n    var json\n    var error = null\n\n    try {\n        json = JSON.parse(obj, reviver)\n    } catch (err) {\n        error = err\n    }\n\n    return [error, json]\n}\n","import mod from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../../node_modules/css-loader/index.js??ref--8-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../../node_modules/sass-loader/lib/loader.js??ref--8-oneOf-1-3!../../../node_modules/vuetify-loader/lib/loader.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./VideoView.vue?vue&type=style&index=0&lang=scss&\"; export default mod; export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../../node_modules/css-loader/index.js??ref--8-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../../node_modules/sass-loader/lib/loader.js??ref--8-oneOf-1-3!../../../node_modules/vuetify-loader/lib/loader.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./VideoView.vue?vue&type=style&index=0&lang=scss&\"","/**\n * mux.js\n *\n * Copyright (c) Brightcove\n * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n *\n * Parse the internal MP4 structure into an equivalent javascript\n * object.\n */\n'use strict';\n\nvar\n  inspectMp4,\n  textifyMp4,\n\n  parseType = require('../mp4/probe').parseType,\n  parseMp4Date = function(seconds) {\n    return new Date(seconds * 1000 - 2082844800000);\n  },\n  parseSampleFlags = function(flags) {\n    return {\n      isLeading: (flags[0] & 0x0c) >>> 2,\n      dependsOn: flags[0] & 0x03,\n      isDependedOn: (flags[1] & 0xc0) >>> 6,\n      hasRedundancy: (flags[1] & 0x30) >>> 4,\n      paddingValue: (flags[1] & 0x0e) >>> 1,\n      isNonSyncSample: flags[1] & 0x01,\n      degradationPriority: (flags[2] << 8) | flags[3]\n    };\n  },\n  nalParse = function(avcStream) {\n    var\n      avcView = new DataView(avcStream.buffer, avcStream.byteOffset, avcStream.byteLength),\n      result = [],\n      i,\n      length;\n    for (i = 0; i + 4 < avcStream.length; i += length) {\n      length = avcView.getUint32(i);\n      i += 4;\n\n      // bail if this doesn't appear to be an H264 stream\n      if (length <= 0) {\n        result.push('<span style=\\'color:red;\\'>MALFORMED DATA</span>');\n        continue;\n      }\n\n      switch (avcStream[i] & 0x1F) {\n      case 0x01:\n        result.push('slice_layer_without_partitioning_rbsp');\n        break;\n      case 0x05:\n        result.push('slice_layer_without_partitioning_rbsp_idr');\n        break;\n      case 0x06:\n        result.push('sei_rbsp');\n        break;\n      case 0x07:\n        result.push('seq_parameter_set_rbsp');\n        break;\n      case 0x08:\n        result.push('pic_parameter_set_rbsp');\n        break;\n      case 0x09:\n        result.push('access_unit_delimiter_rbsp');\n        break;\n      default:\n        result.push('UNKNOWN NAL - ' + avcStream[i] & 0x1F);\n        break;\n      }\n    }\n    return result;\n  },\n\n  // registry of handlers for individual mp4 box types\n  parse = {\n    // codingname, not a first-class box type. stsd entries share the\n    // same format as real boxes so the parsing infrastructure can be\n    // shared\n    avc1: function(data) {\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n      return {\n        dataReferenceIndex: view.getUint16(6),\n        width: view.getUint16(24),\n        height: view.getUint16(26),\n        horizresolution: view.getUint16(28) + (view.getUint16(30) / 16),\n        vertresolution: view.getUint16(32) + (view.getUint16(34) / 16),\n        frameCount: view.getUint16(40),\n        depth: view.getUint16(74),\n        config: inspectMp4(data.subarray(78, data.byteLength))\n      };\n    },\n    avcC: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n          configurationVersion: data[0],\n          avcProfileIndication: data[1],\n          profileCompatibility: data[2],\n          avcLevelIndication: data[3],\n          lengthSizeMinusOne: data[4] & 0x03,\n          sps: [],\n          pps: []\n        },\n        numOfSequenceParameterSets = data[5] & 0x1f,\n        numOfPictureParameterSets,\n        nalSize,\n        offset,\n        i;\n\n      // iterate past any SPSs\n      offset = 6;\n      for (i = 0; i < numOfSequenceParameterSets; i++) {\n        nalSize = view.getUint16(offset);\n        offset += 2;\n        result.sps.push(new Uint8Array(data.subarray(offset, offset + nalSize)));\n        offset += nalSize;\n      }\n      // iterate past any PPSs\n      numOfPictureParameterSets = data[offset];\n      offset++;\n      for (i = 0; i < numOfPictureParameterSets; i++) {\n        nalSize = view.getUint16(offset);\n        offset += 2;\n        result.pps.push(new Uint8Array(data.subarray(offset, offset + nalSize)));\n        offset += nalSize;\n      }\n      return result;\n    },\n    btrt: function(data) {\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n      return {\n        bufferSizeDB: view.getUint32(0),\n        maxBitrate: view.getUint32(4),\n        avgBitrate: view.getUint32(8)\n      };\n    },\n    esds: function(data) {\n      return {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        esId: (data[6] << 8) | data[7],\n        streamPriority: data[8] & 0x1f,\n        decoderConfig: {\n          objectProfileIndication: data[11],\n          streamType: (data[12] >>> 2) & 0x3f,\n          bufferSize: (data[13] << 16) | (data[14] << 8) | data[15],\n          maxBitrate: (data[16] << 24) |\n            (data[17] << 16) |\n            (data[18] <<  8) |\n            data[19],\n          avgBitrate: (data[20] << 24) |\n            (data[21] << 16) |\n            (data[22] <<  8) |\n            data[23],\n          decoderConfigDescriptor: {\n            tag: data[24],\n            length: data[25],\n            audioObjectType: (data[26] >>> 3) & 0x1f,\n            samplingFrequencyIndex: ((data[26] & 0x07) << 1) |\n              ((data[27] >>> 7) & 0x01),\n            channelConfiguration: (data[27] >>> 3) & 0x0f\n          }\n        }\n      };\n    },\n    ftyp: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n          majorBrand: parseType(data.subarray(0, 4)),\n          minorVersion: view.getUint32(4),\n          compatibleBrands: []\n        },\n        i = 8;\n      while (i < data.byteLength) {\n        result.compatibleBrands.push(parseType(data.subarray(i, i + 4)));\n        i += 4;\n      }\n      return result;\n    },\n    dinf: function(data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    dref: function(data) {\n      return {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        dataReferences: inspectMp4(data.subarray(8))\n      };\n    },\n    hdlr: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n          version: view.getUint8(0),\n          flags: new Uint8Array(data.subarray(1, 4)),\n          handlerType: parseType(data.subarray(8, 12)),\n          name: ''\n        },\n        i = 8;\n\n      // parse out the name field\n      for (i = 24; i < data.byteLength; i++) {\n        if (data[i] === 0x00) {\n          // the name field is null-terminated\n          i++;\n          break;\n        }\n        result.name += String.fromCharCode(data[i]);\n      }\n      // decode UTF-8 to javascript's internal representation\n      // see http://ecmanaut.blogspot.com/2006/07/encoding-decoding-utf8-in-javascript.html\n      result.name = decodeURIComponent(escape(result.name));\n\n      return result;\n    },\n    mdat: function(data) {\n      return {\n        byteLength: data.byteLength,\n        nals: nalParse(data)\n      };\n    },\n    mdhd: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        i = 4,\n        language,\n        result = {\n          version: view.getUint8(0),\n          flags: new Uint8Array(data.subarray(1, 4)),\n          language: ''\n        };\n      if (result.version === 1) {\n        i += 4;\n        result.creationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n        i += 8;\n        result.modificationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n        i += 4;\n        result.timescale = view.getUint32(i);\n        i += 8;\n        result.duration = view.getUint32(i); // truncating top 4 bytes\n      } else {\n        result.creationTime = parseMp4Date(view.getUint32(i));\n        i += 4;\n        result.modificationTime = parseMp4Date(view.getUint32(i));\n        i += 4;\n        result.timescale = view.getUint32(i);\n        i += 4;\n        result.duration = view.getUint32(i);\n      }\n      i += 4;\n      // language is stored as an ISO-639-2/T code in an array of three 5-bit fields\n      // each field is the packed difference between its ASCII value and 0x60\n      language = view.getUint16(i);\n      result.language += String.fromCharCode((language >> 10) + 0x60);\n      result.language += String.fromCharCode(((language & 0x03e0) >> 5) + 0x60);\n      result.language += String.fromCharCode((language & 0x1f) + 0x60);\n\n      return result;\n    },\n    mdia: function(data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    mfhd: function(data) {\n      return {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        sequenceNumber: (data[4] << 24) |\n          (data[5] << 16) |\n          (data[6] << 8) |\n          (data[7])\n      };\n    },\n    minf: function(data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    // codingname, not a first-class box type. stsd entries share the\n    // same format as real boxes so the parsing infrastructure can be\n    // shared\n    mp4a: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n          // 6 bytes reserved\n          dataReferenceIndex: view.getUint16(6),\n          // 4 + 4 bytes reserved\n          channelcount: view.getUint16(16),\n          samplesize: view.getUint16(18),\n          // 2 bytes pre_defined\n          // 2 bytes reserved\n          samplerate: view.getUint16(24) + (view.getUint16(26) / 65536)\n        };\n\n      // if there are more bytes to process, assume this is an ISO/IEC\n      // 14496-14 MP4AudioSampleEntry and parse the ESDBox\n      if (data.byteLength > 28) {\n        result.streamDescriptor = inspectMp4(data.subarray(28))[0];\n      }\n      return result;\n    },\n    moof: function(data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    moov: function(data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    mvex: function(data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    mvhd: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        i = 4,\n        result = {\n          version: view.getUint8(0),\n          flags: new Uint8Array(data.subarray(1, 4))\n        };\n\n      if (result.version === 1) {\n        i += 4;\n        result.creationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n        i += 8;\n        result.modificationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n        i += 4;\n        result.timescale = view.getUint32(i);\n        i += 8;\n        result.duration = view.getUint32(i); // truncating top 4 bytes\n      } else {\n        result.creationTime = parseMp4Date(view.getUint32(i));\n        i += 4;\n        result.modificationTime = parseMp4Date(view.getUint32(i));\n        i += 4;\n        result.timescale = view.getUint32(i);\n        i += 4;\n        result.duration = view.getUint32(i);\n      }\n      i += 4;\n\n      // convert fixed-point, base 16 back to a number\n      result.rate = view.getUint16(i) + (view.getUint16(i + 2) / 16);\n      i += 4;\n      result.volume = view.getUint8(i) + (view.getUint8(i + 1) / 8);\n      i += 2;\n      i += 2;\n      i += 2 * 4;\n      result.matrix = new Uint32Array(data.subarray(i, i + (9 * 4)));\n      i += 9 * 4;\n      i += 6 * 4;\n      result.nextTrackId = view.getUint32(i);\n      return result;\n    },\n    pdin: function(data) {\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n      return {\n        version: view.getUint8(0),\n        flags: new Uint8Array(data.subarray(1, 4)),\n        rate: view.getUint32(4),\n        initialDelay: view.getUint32(8)\n      };\n    },\n    sdtp: function(data) {\n      var\n        result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          samples: []\n        }, i;\n\n      for (i = 4; i < data.byteLength; i++) {\n        result.samples.push({\n          dependsOn: (data[i] & 0x30) >> 4,\n          isDependedOn: (data[i] & 0x0c) >> 2,\n          hasRedundancy: data[i] & 0x03\n        });\n      }\n      return result;\n    },\n    sidx: function(data) {\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n          result = {\n            version: data[0],\n            flags: new Uint8Array(data.subarray(1, 4)),\n            references: [],\n            referenceId: view.getUint32(4),\n            timescale: view.getUint32(8),\n            earliestPresentationTime: view.getUint32(12),\n            firstOffset: view.getUint32(16)\n          },\n          referenceCount = view.getUint16(22),\n          i;\n\n      for (i = 24; referenceCount; i += 12, referenceCount--) {\n        result.references.push({\n          referenceType: (data[i] & 0x80) >>> 7,\n          referencedSize: view.getUint32(i) & 0x7FFFFFFF,\n          subsegmentDuration: view.getUint32(i + 4),\n          startsWithSap: !!(data[i + 8] & 0x80),\n          sapType: (data[i + 8] & 0x70) >>> 4,\n          sapDeltaTime: view.getUint32(i + 8) & 0x0FFFFFFF\n        });\n      }\n\n      return result;\n    },\n    smhd: function(data) {\n      return {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        balance: data[4] + (data[5] / 256)\n      };\n    },\n    stbl: function(data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    stco: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          chunkOffsets: []\n        },\n        entryCount = view.getUint32(4),\n        i;\n      for (i = 8; entryCount; i += 4, entryCount--) {\n        result.chunkOffsets.push(view.getUint32(i));\n      }\n      return result;\n    },\n    stsc: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        entryCount = view.getUint32(4),\n        result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          sampleToChunks: []\n        },\n        i;\n      for (i = 8; entryCount; i += 12, entryCount--) {\n        result.sampleToChunks.push({\n          firstChunk: view.getUint32(i),\n          samplesPerChunk: view.getUint32(i + 4),\n          sampleDescriptionIndex: view.getUint32(i + 8)\n        });\n      }\n      return result;\n    },\n    stsd: function(data) {\n      return {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        sampleDescriptions: inspectMp4(data.subarray(8))\n      };\n    },\n    stsz: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          sampleSize: view.getUint32(4),\n          entries: []\n        },\n        i;\n      for (i = 12; i < data.byteLength; i += 4) {\n        result.entries.push(view.getUint32(i));\n      }\n      return result;\n    },\n    stts: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          timeToSamples: []\n        },\n        entryCount = view.getUint32(4),\n        i;\n\n      for (i = 8; entryCount; i += 8, entryCount--) {\n        result.timeToSamples.push({\n          sampleCount: view.getUint32(i),\n          sampleDelta: view.getUint32(i + 4)\n        });\n      }\n      return result;\n    },\n    styp: function(data) {\n      return parse.ftyp(data);\n    },\n    tfdt: function(data) {\n      var result = {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        baseMediaDecodeTime: data[4] << 24 | data[5] << 16 | data[6] << 8 | data[7]\n      };\n      if (result.version === 1) {\n        result.baseMediaDecodeTime *= Math.pow(2, 32);\n        result.baseMediaDecodeTime += data[8] << 24 | data[9] << 16 | data[10] << 8 | data[11];\n      }\n      return result;\n    },\n    tfhd: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          trackId: view.getUint32(4)\n        },\n        baseDataOffsetPresent = result.flags[2] & 0x01,\n        sampleDescriptionIndexPresent = result.flags[2] & 0x02,\n        defaultSampleDurationPresent = result.flags[2] & 0x08,\n        defaultSampleSizePresent = result.flags[2] & 0x10,\n        defaultSampleFlagsPresent = result.flags[2] & 0x20,\n        durationIsEmpty = result.flags[0] & 0x010000,\n        defaultBaseIsMoof =  result.flags[0] & 0x020000,\n        i;\n\n      i = 8;\n      if (baseDataOffsetPresent) {\n        i += 4; // truncate top 4 bytes\n        // FIXME: should we read the full 64 bits?\n        result.baseDataOffset = view.getUint32(12);\n        i += 4;\n      }\n      if (sampleDescriptionIndexPresent) {\n        result.sampleDescriptionIndex = view.getUint32(i);\n        i += 4;\n      }\n      if (defaultSampleDurationPresent) {\n        result.defaultSampleDuration = view.getUint32(i);\n        i += 4;\n      }\n      if (defaultSampleSizePresent) {\n        result.defaultSampleSize = view.getUint32(i);\n        i += 4;\n      }\n      if (defaultSampleFlagsPresent) {\n        result.defaultSampleFlags = view.getUint32(i);\n      }\n      if (durationIsEmpty) {\n        result.durationIsEmpty = true;\n      }\n      if (!baseDataOffsetPresent && defaultBaseIsMoof) {\n        result.baseDataOffsetIsMoof = true;\n      }\n      return result;\n    },\n    tkhd: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        i = 4,\n        result = {\n          version: view.getUint8(0),\n          flags: new Uint8Array(data.subarray(1, 4))\n        };\n      if (result.version === 1) {\n        i += 4;\n        result.creationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n        i += 8;\n        result.modificationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n        i += 4;\n        result.trackId = view.getUint32(i);\n        i += 4;\n        i += 8;\n        result.duration = view.getUint32(i); // truncating top 4 bytes\n      } else {\n        result.creationTime = parseMp4Date(view.getUint32(i));\n        i += 4;\n        result.modificationTime = parseMp4Date(view.getUint32(i));\n        i += 4;\n        result.trackId = view.getUint32(i);\n        i += 4;\n        i += 4;\n        result.duration = view.getUint32(i);\n      }\n      i += 4;\n      i += 2 * 4;\n      result.layer = view.getUint16(i);\n      i += 2;\n      result.alternateGroup = view.getUint16(i);\n      i += 2;\n      // convert fixed-point, base 16 back to a number\n      result.volume = view.getUint8(i) + (view.getUint8(i + 1) / 8);\n      i += 2;\n      i += 2;\n      result.matrix = new Uint32Array(data.subarray(i, i + (9 * 4)));\n      i += 9 * 4;\n      result.width = view.getUint16(i) + (view.getUint16(i + 2) / 16);\n      i += 4;\n      result.height = view.getUint16(i) + (view.getUint16(i + 2) / 16);\n      return result;\n    },\n    traf: function(data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    trak: function(data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    trex: function(data) {\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n      return {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        trackId: view.getUint32(4),\n        defaultSampleDescriptionIndex: view.getUint32(8),\n        defaultSampleDuration: view.getUint32(12),\n        defaultSampleSize: view.getUint32(16),\n        sampleDependsOn: data[20] & 0x03,\n        sampleIsDependedOn: (data[21] & 0xc0) >> 6,\n        sampleHasRedundancy: (data[21] & 0x30) >> 4,\n        samplePaddingValue: (data[21] & 0x0e) >> 1,\n        sampleIsDifferenceSample: !!(data[21] & 0x01),\n        sampleDegradationPriority: view.getUint16(22)\n      };\n    },\n    trun: function(data) {\n      var\n        result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          samples: []\n        },\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        // Flag interpretation\n        dataOffsetPresent = result.flags[2] & 0x01, // compare with 2nd byte of 0x1\n        firstSampleFlagsPresent = result.flags[2] & 0x04, // compare with 2nd byte of 0x4\n        sampleDurationPresent = result.flags[1] & 0x01, // compare with 2nd byte of 0x100\n        sampleSizePresent = result.flags[1] & 0x02, // compare with 2nd byte of 0x200\n        sampleFlagsPresent = result.flags[1] & 0x04, // compare with 2nd byte of 0x400\n        sampleCompositionTimeOffsetPresent = result.flags[1] & 0x08, // compare with 2nd byte of 0x800\n        sampleCount = view.getUint32(4),\n        offset = 8,\n        sample;\n\n      if (dataOffsetPresent) {\n        // 32 bit signed integer\n        result.dataOffset = view.getInt32(offset);\n        offset += 4;\n      }\n\n      // Overrides the flags for the first sample only. The order of\n      // optional values will be: duration, size, compositionTimeOffset\n      if (firstSampleFlagsPresent && sampleCount) {\n        sample = {\n          flags: parseSampleFlags(data.subarray(offset, offset + 4))\n        };\n        offset += 4;\n        if (sampleDurationPresent) {\n          sample.duration = view.getUint32(offset);\n          offset += 4;\n        }\n        if (sampleSizePresent) {\n          sample.size = view.getUint32(offset);\n          offset += 4;\n        }\n        if (sampleCompositionTimeOffsetPresent) {\n          // Note: this should be a signed int if version is 1\n          sample.compositionTimeOffset = view.getUint32(offset);\n          offset += 4;\n        }\n        result.samples.push(sample);\n        sampleCount--;\n      }\n\n      while (sampleCount--) {\n        sample = {};\n        if (sampleDurationPresent) {\n          sample.duration = view.getUint32(offset);\n          offset += 4;\n        }\n        if (sampleSizePresent) {\n          sample.size = view.getUint32(offset);\n          offset += 4;\n        }\n        if (sampleFlagsPresent) {\n          sample.flags = parseSampleFlags(data.subarray(offset, offset + 4));\n          offset += 4;\n        }\n        if (sampleCompositionTimeOffsetPresent) {\n          // Note: this should be a signed int if version is 1\n          sample.compositionTimeOffset = view.getUint32(offset);\n          offset += 4;\n        }\n        result.samples.push(sample);\n      }\n      return result;\n    },\n    'url ': function(data) {\n      return {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4))\n      };\n    },\n    vmhd: function(data) {\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n      return {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        graphicsmode: view.getUint16(4),\n        opcolor: new Uint16Array([view.getUint16(6),\n                                  view.getUint16(8),\n                                  view.getUint16(10)])\n      };\n    }\n  };\n\n\n/**\n * Return a javascript array of box objects parsed from an ISO base\n * media file.\n * @param data {Uint8Array} the binary data of the media to be inspected\n * @return {array} a javascript array of potentially nested box objects\n */\ninspectMp4 = function(data) {\n  var\n    i = 0,\n    result = [],\n    view,\n    size,\n    type,\n    end,\n    box;\n\n  // Convert data from Uint8Array to ArrayBuffer, to follow Dataview API\n  var ab = new ArrayBuffer(data.length);\n  var v = new Uint8Array(ab);\n  for (var z = 0; z < data.length; ++z) {\n      v[z] = data[z];\n  }\n  view = new DataView(ab);\n\n  while (i < data.byteLength) {\n    // parse box data\n    size = view.getUint32(i);\n    type =  parseType(data.subarray(i + 4, i + 8));\n    end = size > 1 ? i + size : data.byteLength;\n\n    // parse type-specific data\n    box = (parse[type] || function(data) {\n      return {\n        data: data\n      };\n    })(data.subarray(i + 8, end));\n    box.size = size;\n    box.type = type;\n\n    // store this box and move to the next\n    result.push(box);\n    i = end;\n  }\n  return result;\n};\n\n/**\n * Returns a textual representation of the javascript represtentation\n * of an MP4 file. You can use it as an alternative to\n * JSON.stringify() to compare inspected MP4s.\n * @param inspectedMp4 {array} the parsed array of boxes in an MP4\n * file\n * @param depth {number} (optional) the number of ancestor boxes of\n * the elements of inspectedMp4. Assumed to be zero if unspecified.\n * @return {string} a text representation of the parsed MP4\n */\ntextifyMp4 = function(inspectedMp4, depth) {\n  var indent;\n  depth = depth || 0;\n  indent = new Array(depth * 2 + 1).join(' ');\n\n  // iterate over all the boxes\n  return inspectedMp4.map(function(box, index) {\n\n    // list the box type first at the current indentation level\n    return indent + box.type + '\\n' +\n\n      // the type is already included and handle child boxes separately\n      Object.keys(box).filter(function(key) {\n        return key !== 'type' && key !== 'boxes';\n\n      // output all the box properties\n      }).map(function(key) {\n        var prefix = indent + '  ' + key + ': ',\n            value = box[key];\n\n        // print out raw bytes as hexademical\n        if (value instanceof Uint8Array || value instanceof Uint32Array) {\n          var bytes = Array.prototype.slice.call(new Uint8Array(value.buffer, value.byteOffset, value.byteLength))\n              .map(function(byte) {\n                return ' ' + ('00' + byte.toString(16)).slice(-2);\n              }).join('').match(/.{1,24}/g);\n          if (!bytes) {\n            return prefix + '<>';\n          }\n          if (bytes.length === 1) {\n            return prefix + '<' + bytes.join('').slice(1) + '>';\n          }\n          return prefix + '<\\n' + bytes.map(function(line) {\n            return indent + '  ' + line;\n          }).join('\\n') + '\\n' + indent + '  >';\n        }\n\n        // stringify generic objects\n        return prefix +\n            JSON.stringify(value, null, 2)\n              .split('\\n').map(function(line, index) {\n                if (index === 0) {\n                  return line;\n                }\n                return indent + '  ' + line;\n              }).join('\\n');\n      }).join('\\n') +\n\n    // recursively textify the child boxes\n    (box.boxes ? '\\n' + textifyMp4(box.boxes, depth + 1) : '');\n  }).join('\\n');\n};\n\nmodule.exports = {\n  inspect: inspectMp4,\n  textify: textifyMp4,\n  parseTfdt: parse.tfdt,\n  parseHdlr: parse.hdlr,\n  parseTfhd: parse.tfhd,\n  parseTrun: parse.trun,\n  parseSidx: parse.sidx\n};\n","/**\n * mux.js\n *\n * Copyright (c) Brightcove\n * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n *\n * A stream-based aac to mp4 converter. This utility can be used to\n * deliver mp4s to a SourceBuffer on platforms that support native\n * Media Source Extensions.\n */\n'use strict';\nvar Stream = require('../utils/stream.js');\nvar aacUtils = require('./utils');\n\n// Constants\nvar AacStream;\n\n/**\n * Splits an incoming stream of binary data into ADTS and ID3 Frames.\n */\n\nAacStream = function() {\n  var\n    everything = new Uint8Array(),\n    timeStamp = 0;\n\n  AacStream.prototype.init.call(this);\n\n  this.setTimestamp = function(timestamp) {\n    timeStamp = timestamp;\n  };\n\n  this.push = function(bytes) {\n    var\n      frameSize = 0,\n      byteIndex = 0,\n      bytesLeft,\n      chunk,\n      packet,\n      tempLength;\n\n    // If there are bytes remaining from the last segment, prepend them to the\n    // bytes that were pushed in\n    if (everything.length) {\n      tempLength = everything.length;\n      everything = new Uint8Array(bytes.byteLength + tempLength);\n      everything.set(everything.subarray(0, tempLength));\n      everything.set(bytes, tempLength);\n    } else {\n      everything = bytes;\n    }\n\n    while (everything.length - byteIndex >= 3) {\n      if ((everything[byteIndex] === 'I'.charCodeAt(0)) &&\n          (everything[byteIndex + 1] === 'D'.charCodeAt(0)) &&\n          (everything[byteIndex + 2] === '3'.charCodeAt(0))) {\n\n        // Exit early because we don't have enough to parse\n        // the ID3 tag header\n        if (everything.length - byteIndex < 10) {\n          break;\n        }\n\n        // check framesize\n        frameSize = aacUtils.parseId3TagSize(everything, byteIndex);\n\n        // Exit early if we don't have enough in the buffer\n        // to emit a full packet\n        // Add to byteIndex to support multiple ID3 tags in sequence\n        if (byteIndex + frameSize > everything.length) {\n          break;\n        }\n        chunk = {\n          type: 'timed-metadata',\n          data: everything.subarray(byteIndex, byteIndex + frameSize)\n        };\n        this.trigger('data', chunk);\n        byteIndex += frameSize;\n        continue;\n      } else if (((everything[byteIndex] & 0xff) === 0xff) &&\n                 ((everything[byteIndex + 1] & 0xf0) === 0xf0)) {\n\n        // Exit early because we don't have enough to parse\n        // the ADTS frame header\n        if (everything.length - byteIndex < 7) {\n          break;\n        }\n\n        frameSize = aacUtils.parseAdtsSize(everything, byteIndex);\n\n        // Exit early if we don't have enough in the buffer\n        // to emit a full packet\n        if (byteIndex + frameSize > everything.length) {\n          break;\n        }\n\n        packet = {\n          type: 'audio',\n          data: everything.subarray(byteIndex, byteIndex + frameSize),\n          pts: timeStamp,\n          dts: timeStamp\n        };\n        this.trigger('data', packet);\n        byteIndex += frameSize;\n        continue;\n      }\n      byteIndex++;\n    }\n    bytesLeft = everything.length - byteIndex;\n\n    if (bytesLeft > 0) {\n      everything = everything.subarray(byteIndex);\n    } else {\n      everything = new Uint8Array();\n    }\n  };\n};\n\nAacStream.prototype = new Stream();\n\nmodule.exports = AacStream;\n","'use strict';\n\nvar bind = require('function-bind');\n\nmodule.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);\n","/**\n * mux.js\n *\n * Copyright (c) Brightcove\n * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n *\n * Reads in-band CEA-708 captions out of FMP4 segments.\n * @see https://en.wikipedia.org/wiki/CEA-708\n */\n'use strict';\n\nvar discardEmulationPreventionBytes = require('../tools/caption-packet-parser').discardEmulationPreventionBytes;\nvar CaptionStream = require('../m2ts/caption-stream').CaptionStream;\nvar probe = require('./probe');\nvar inspect = require('../tools/mp4-inspector');\n\n/**\n  * Maps an offset in the mdat to a sample based on the the size of the samples.\n  * Assumes that `parseSamples` has been called first.\n  *\n  * @param {Number} offset - The offset into the mdat\n  * @param {Object[]} samples - An array of samples, parsed using `parseSamples`\n  * @return {?Object} The matching sample, or null if no match was found.\n  *\n  * @see ISO-BMFF-12/2015, Section 8.8.8\n **/\nvar mapToSample = function(offset, samples) {\n  var approximateOffset = offset;\n\n  for (var i = 0; i < samples.length; i++) {\n    var sample = samples[i];\n\n    if (approximateOffset < sample.size) {\n      return sample;\n    }\n\n    approximateOffset -= sample.size;\n  }\n\n  return null;\n};\n\n/**\n  * Finds SEI nal units contained in a Media Data Box.\n  * Assumes that `parseSamples` has been called first.\n  *\n  * @param {Uint8Array} avcStream - The bytes of the mdat\n  * @param {Object[]} samples - The samples parsed out by `parseSamples`\n  * @param {Number} trackId - The trackId of this video track\n  * @return {Object[]} seiNals - the parsed SEI NALUs found.\n  *   The contents of the seiNal should match what is expected by\n  *   CaptionStream.push (nalUnitType, size, data, escapedRBSP, pts, dts)\n  *\n  * @see ISO-BMFF-12/2015, Section 8.1.1\n  * @see Rec. ITU-T H.264, 7.3.2.3.1\n **/\nvar findSeiNals = function(avcStream, samples, trackId) {\n  var\n    avcView = new DataView(avcStream.buffer, avcStream.byteOffset, avcStream.byteLength),\n    result = [],\n    seiNal,\n    i,\n    length,\n    lastMatchedSample;\n\n  for (i = 0; i + 4 < avcStream.length; i += length) {\n    length = avcView.getUint32(i);\n    i += 4;\n\n    // Bail if this doesn't appear to be an H264 stream\n    if (length <= 0) {\n      continue;\n    }\n\n    switch (avcStream[i] & 0x1F) {\n    case 0x06:\n      var data = avcStream.subarray(i + 1, i + 1 + length);\n      var matchingSample = mapToSample(i, samples);\n\n      seiNal = {\n        nalUnitType: 'sei_rbsp',\n        size: length,\n        data: data,\n        escapedRBSP: discardEmulationPreventionBytes(data),\n        trackId: trackId\n      };\n\n      if (matchingSample) {\n        seiNal.pts = matchingSample.pts;\n        seiNal.dts = matchingSample.dts;\n        lastMatchedSample = matchingSample;\n      } else {\n        // If a matching sample cannot be found, use the last\n        // sample's values as they should be as close as possible\n        seiNal.pts = lastMatchedSample.pts;\n        seiNal.dts = lastMatchedSample.dts;\n      }\n\n      result.push(seiNal);\n      break;\n    default:\n      break;\n    }\n  }\n\n  return result;\n};\n\n/**\n  * Parses sample information out of Track Run Boxes and calculates\n  * the absolute presentation and decode timestamps of each sample.\n  *\n  * @param {Array<Uint8Array>} truns - The Trun Run boxes to be parsed\n  * @param {Number} baseMediaDecodeTime - base media decode time from tfdt\n      @see ISO-BMFF-12/2015, Section 8.8.12\n  * @param {Object} tfhd - The parsed Track Fragment Header\n  *   @see inspect.parseTfhd\n  * @return {Object[]} the parsed samples\n  *\n  * @see ISO-BMFF-12/2015, Section 8.8.8\n **/\nvar parseSamples = function(truns, baseMediaDecodeTime, tfhd) {\n  var currentDts = baseMediaDecodeTime;\n  var defaultSampleDuration = tfhd.defaultSampleDuration || 0;\n  var defaultSampleSize = tfhd.defaultSampleSize || 0;\n  var trackId = tfhd.trackId;\n  var allSamples = [];\n\n  truns.forEach(function(trun) {\n    // Note: We currently do not parse the sample table as well\n    // as the trun. It's possible some sources will require this.\n    // moov > trak > mdia > minf > stbl\n    var trackRun = inspect.parseTrun(trun);\n    var samples = trackRun.samples;\n\n    samples.forEach(function(sample) {\n      if (sample.duration === undefined) {\n        sample.duration = defaultSampleDuration;\n      }\n      if (sample.size === undefined) {\n        sample.size = defaultSampleSize;\n      }\n      sample.trackId = trackId;\n      sample.dts = currentDts;\n      if (sample.compositionTimeOffset === undefined) {\n        sample.compositionTimeOffset = 0;\n      }\n      sample.pts = currentDts + sample.compositionTimeOffset;\n\n      currentDts += sample.duration;\n    });\n\n    allSamples = allSamples.concat(samples);\n  });\n\n  return allSamples;\n};\n\n/**\n  * Parses out caption nals from an FMP4 segment's video tracks.\n  *\n  * @param {Uint8Array} segment - The bytes of a single segment\n  * @param {Number} videoTrackId - The trackId of a video track in the segment\n  * @return {Object.<Number, Object[]>} A mapping of video trackId to\n  *   a list of seiNals found in that track\n **/\nvar parseCaptionNals = function(segment, videoTrackId) {\n  // To get the samples\n  var trafs = probe.findBox(segment, ['moof', 'traf']);\n  // To get SEI NAL units\n  var mdats = probe.findBox(segment, ['mdat']);\n  var captionNals = {};\n  var mdatTrafPairs = [];\n\n  // Pair up each traf with a mdat as moofs and mdats are in pairs\n  mdats.forEach(function(mdat, index) {\n    var matchingTraf = trafs[index];\n    mdatTrafPairs.push({\n      mdat: mdat,\n      traf: matchingTraf\n    });\n  });\n\n  mdatTrafPairs.forEach(function(pair) {\n    var mdat = pair.mdat;\n    var traf = pair.traf;\n    var tfhd = probe.findBox(traf, ['tfhd']);\n    // Exactly 1 tfhd per traf\n    var headerInfo = inspect.parseTfhd(tfhd[0]);\n    var trackId = headerInfo.trackId;\n    var tfdt = probe.findBox(traf, ['tfdt']);\n    // Either 0 or 1 tfdt per traf\n    var baseMediaDecodeTime = (tfdt.length > 0) ? inspect.parseTfdt(tfdt[0]).baseMediaDecodeTime : 0;\n    var truns = probe.findBox(traf, ['trun']);\n    var samples;\n    var seiNals;\n\n    // Only parse video data for the chosen video track\n    if (videoTrackId === trackId && truns.length > 0) {\n      samples = parseSamples(truns, baseMediaDecodeTime, headerInfo);\n\n      seiNals = findSeiNals(mdat, samples, trackId);\n\n      if (!captionNals[trackId]) {\n        captionNals[trackId] = [];\n      }\n\n      captionNals[trackId] = captionNals[trackId].concat(seiNals);\n    }\n  });\n\n  return captionNals;\n};\n\n/**\n  * Parses out inband captions from an MP4 container and returns\n  * caption objects that can be used by WebVTT and the TextTrack API.\n  * @see https://developer.mozilla.org/en-US/docs/Web/API/VTTCue\n  * @see https://developer.mozilla.org/en-US/docs/Web/API/TextTrack\n  * Assumes that `probe.getVideoTrackIds` and `probe.timescale` have been called first\n  *\n  * @param {Uint8Array} segment - The fmp4 segment containing embedded captions\n  * @param {Number} trackId - The id of the video track to parse\n  * @param {Number} timescale - The timescale for the video track from the init segment\n  *\n  * @return {?Object[]} parsedCaptions - A list of captions or null if no video tracks\n  * @return {Number} parsedCaptions[].startTime - The time to show the caption in seconds\n  * @return {Number} parsedCaptions[].endTime - The time to stop showing the caption in seconds\n  * @return {String} parsedCaptions[].text - The visible content of the caption\n **/\nvar parseEmbeddedCaptions = function(segment, trackId, timescale) {\n  var seiNals;\n\n  if (!trackId) {\n    return null;\n  }\n\n  seiNals = parseCaptionNals(segment, trackId);\n\n  return {\n    seiNals: seiNals[trackId],\n    timescale: timescale\n  };\n};\n\n/**\n  * Converts SEI NALUs into captions that can be used by video.js\n **/\nvar CaptionParser = function() {\n  var isInitialized = false;\n  var captionStream;\n\n  // Stores segments seen before trackId and timescale are set\n  var segmentCache;\n  // Stores video track ID of the track being parsed\n  var trackId;\n  // Stores the timescale of the track being parsed\n  var timescale;\n  // Stores captions parsed so far\n  var parsedCaptions;\n\n  /**\n    * A method to indicate whether a CaptionParser has been initalized\n    * @returns {Boolean}\n   **/\n  this.isInitialized = function() {\n    return isInitialized;\n  };\n\n  /**\n    * Initializes the underlying CaptionStream, SEI NAL parsing\n    * and management, and caption collection\n   **/\n  this.init = function() {\n    captionStream = new CaptionStream();\n    isInitialized = true;\n\n    // Collect dispatched captions\n    captionStream.on('data', function(event) {\n      // Convert to seconds in the source's timescale\n      event.startTime = event.startPts / timescale;\n      event.endTime = event.endPts / timescale;\n\n      parsedCaptions.captions.push(event);\n      parsedCaptions.captionStreams[event.stream] = true;\n    });\n  };\n\n  /**\n    * Determines if a new video track will be selected\n    * or if the timescale changed\n    * @return {Boolean}\n   **/\n  this.isNewInit = function(videoTrackIds, timescales) {\n    if ((videoTrackIds && videoTrackIds.length === 0) ||\n        (timescales && typeof timescales === 'object' &&\n          Object.keys(timescales).length === 0)) {\n      return false;\n    }\n\n    return trackId !== videoTrackIds[0] ||\n      timescale !== timescales[trackId];\n  };\n\n  /**\n    * Parses out SEI captions and interacts with underlying\n    * CaptionStream to return dispatched captions\n    *\n    * @param {Uint8Array} segment - The fmp4 segment containing embedded captions\n    * @param {Number[]} videoTrackIds - A list of video tracks found in the init segment\n    * @param {Object.<Number, Number>} timescales - The timescales found in the init segment\n    * @see parseEmbeddedCaptions\n    * @see m2ts/caption-stream.js\n   **/\n  this.parse = function(segment, videoTrackIds, timescales) {\n    var parsedData;\n\n    if (!this.isInitialized()) {\n      return null;\n\n    // This is not likely to be a video segment\n    } else if (!videoTrackIds || !timescales) {\n      return null;\n\n    } else if (this.isNewInit(videoTrackIds, timescales)) {\n      // Use the first video track only as there is no\n      // mechanism to switch to other video tracks\n      trackId = videoTrackIds[0];\n      timescale = timescales[trackId];\n\n    // If an init segment has not been seen yet, hold onto segment\n    // data until we have one\n    } else if (!trackId || !timescale) {\n      segmentCache.push(segment);\n      return null;\n    }\n\n    // Now that a timescale and trackId is set, parse cached segments\n    while (segmentCache.length > 0) {\n      var cachedSegment = segmentCache.shift();\n\n      this.parse(cachedSegment, videoTrackIds, timescales);\n    }\n\n    parsedData = parseEmbeddedCaptions(segment, trackId, timescale);\n\n    if (parsedData === null || !parsedData.seiNals) {\n      return null;\n    }\n\n    this.pushNals(parsedData.seiNals);\n    // Force the parsed captions to be dispatched\n    this.flushStream();\n\n    return parsedCaptions;\n  };\n\n  /**\n    * Pushes SEI NALUs onto CaptionStream\n    * @param {Object[]} nals - A list of SEI nals parsed using `parseCaptionNals`\n    * Assumes that `parseCaptionNals` has been called first\n    * @see m2ts/caption-stream.js\n    **/\n  this.pushNals = function(nals) {\n    if (!this.isInitialized() || !nals || nals.length === 0) {\n      return null;\n    }\n\n    nals.forEach(function(nal) {\n      captionStream.push(nal);\n    });\n  };\n\n  /**\n    * Flushes underlying CaptionStream to dispatch processed, displayable captions\n    * @see m2ts/caption-stream.js\n   **/\n  this.flushStream = function() {\n    if (!this.isInitialized()) {\n      return null;\n    }\n\n    captionStream.flush();\n  };\n\n  /**\n    * Reset caption buckets for new data\n   **/\n  this.clearParsedCaptions = function() {\n    parsedCaptions.captions = [];\n    parsedCaptions.captionStreams = {};\n  };\n\n  /**\n    * Resets underlying CaptionStream\n    * @see m2ts/caption-stream.js\n   **/\n  this.resetCaptionStream = function() {\n    if (!this.isInitialized()) {\n      return null;\n    }\n\n    captionStream.reset();\n  };\n\n  /**\n    * Convenience method to clear all captions flushed from the\n    * CaptionStream and still being parsed\n    * @see m2ts/caption-stream.js\n   **/\n  this.clearAllCaptions = function() {\n    this.clearParsedCaptions();\n    this.resetCaptionStream();\n  };\n\n  /**\n    * Reset caption parser\n   **/\n  this.reset = function() {\n    segmentCache = [];\n    trackId = null;\n    timescale = null;\n\n    if (!parsedCaptions) {\n      parsedCaptions = {\n        captions: [],\n        // CC1, CC2, CC3, CC4\n        captionStreams: {}\n      };\n    } else {\n      this.clearParsedCaptions();\n    }\n\n    this.resetCaptionStream();\n  };\n\n  this.reset();\n};\n\nmodule.exports = CaptionParser;\n","/**\n * mux.js\n *\n * Copyright (c) Brightcove\n * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n */\n'use strict';\n\nmodule.exports = {\n  H264_STREAM_TYPE: 0x1B,\n  ADTS_STREAM_TYPE: 0x0F,\n  METADATA_STREAM_TYPE: 0x15\n};\n","/**\n * Copyright 2013 vtt.js Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar autoKeyword = \"auto\";\nvar directionSetting = {\n  \"\": 1,\n  \"lr\": 1,\n  \"rl\": 1\n};\nvar alignSetting = {\n  \"start\": 1,\n  \"middle\": 1,\n  \"end\": 1,\n  \"left\": 1,\n  \"right\": 1\n};\n\nfunction findDirectionSetting(value) {\n  if (typeof value !== \"string\") {\n    return false;\n  }\n  var dir = directionSetting[value.toLowerCase()];\n  return dir ? value.toLowerCase() : false;\n}\n\nfunction findAlignSetting(value) {\n  if (typeof value !== \"string\") {\n    return false;\n  }\n  var align = alignSetting[value.toLowerCase()];\n  return align ? value.toLowerCase() : false;\n}\n\nfunction VTTCue(startTime, endTime, text) {\n  /**\n   * Shim implementation specific properties. These properties are not in\n   * the spec.\n   */\n\n  // Lets us know when the VTTCue's data has changed in such a way that we need\n  // to recompute its display state. This lets us compute its display state\n  // lazily.\n  this.hasBeenReset = false;\n\n  /**\n   * VTTCue and TextTrackCue properties\n   * http://dev.w3.org/html5/webvtt/#vttcue-interface\n   */\n\n  var _id = \"\";\n  var _pauseOnExit = false;\n  var _startTime = startTime;\n  var _endTime = endTime;\n  var _text = text;\n  var _region = null;\n  var _vertical = \"\";\n  var _snapToLines = true;\n  var _line = \"auto\";\n  var _lineAlign = \"start\";\n  var _position = 50;\n  var _positionAlign = \"middle\";\n  var _size = 50;\n  var _align = \"middle\";\n\n  Object.defineProperties(this, {\n    \"id\": {\n      enumerable: true,\n      get: function() {\n        return _id;\n      },\n      set: function(value) {\n        _id = \"\" + value;\n      }\n    },\n\n    \"pauseOnExit\": {\n      enumerable: true,\n      get: function() {\n        return _pauseOnExit;\n      },\n      set: function(value) {\n        _pauseOnExit = !!value;\n      }\n    },\n\n    \"startTime\": {\n      enumerable: true,\n      get: function() {\n        return _startTime;\n      },\n      set: function(value) {\n        if (typeof value !== \"number\") {\n          throw new TypeError(\"Start time must be set to a number.\");\n        }\n        _startTime = value;\n        this.hasBeenReset = true;\n      }\n    },\n\n    \"endTime\": {\n      enumerable: true,\n      get: function() {\n        return _endTime;\n      },\n      set: function(value) {\n        if (typeof value !== \"number\") {\n          throw new TypeError(\"End time must be set to a number.\");\n        }\n        _endTime = value;\n        this.hasBeenReset = true;\n      }\n    },\n\n    \"text\": {\n      enumerable: true,\n      get: function() {\n        return _text;\n      },\n      set: function(value) {\n        _text = \"\" + value;\n        this.hasBeenReset = true;\n      }\n    },\n\n    \"region\": {\n      enumerable: true,\n      get: function() {\n        return _region;\n      },\n      set: function(value) {\n        _region = value;\n        this.hasBeenReset = true;\n      }\n    },\n\n    \"vertical\": {\n      enumerable: true,\n      get: function() {\n        return _vertical;\n      },\n      set: function(value) {\n        var setting = findDirectionSetting(value);\n        // Have to check for false because the setting an be an empty string.\n        if (setting === false) {\n          throw new SyntaxError(\"An invalid or illegal string was specified.\");\n        }\n        _vertical = setting;\n        this.hasBeenReset = true;\n      }\n    },\n\n    \"snapToLines\": {\n      enumerable: true,\n      get: function() {\n        return _snapToLines;\n      },\n      set: function(value) {\n        _snapToLines = !!value;\n        this.hasBeenReset = true;\n      }\n    },\n\n    \"line\": {\n      enumerable: true,\n      get: function() {\n        return _line;\n      },\n      set: function(value) {\n        if (typeof value !== \"number\" && value !== autoKeyword) {\n          throw new SyntaxError(\"An invalid number or illegal string was specified.\");\n        }\n        _line = value;\n        this.hasBeenReset = true;\n      }\n    },\n\n    \"lineAlign\": {\n      enumerable: true,\n      get: function() {\n        return _lineAlign;\n      },\n      set: function(value) {\n        var setting = findAlignSetting(value);\n        if (!setting) {\n          throw new SyntaxError(\"An invalid or illegal string was specified.\");\n        }\n        _lineAlign = setting;\n        this.hasBeenReset = true;\n      }\n    },\n\n    \"position\": {\n      enumerable: true,\n      get: function() {\n        return _position;\n      },\n      set: function(value) {\n        if (value < 0 || value > 100) {\n          throw new Error(\"Position must be between 0 and 100.\");\n        }\n        _position = value;\n        this.hasBeenReset = true;\n      }\n    },\n\n    \"positionAlign\": {\n      enumerable: true,\n      get: function() {\n        return _positionAlign;\n      },\n      set: function(value) {\n        var setting = findAlignSetting(value);\n        if (!setting) {\n          throw new SyntaxError(\"An invalid or illegal string was specified.\");\n        }\n        _positionAlign = setting;\n        this.hasBeenReset = true;\n      }\n    },\n\n    \"size\": {\n      enumerable: true,\n      get: function() {\n        return _size;\n      },\n      set: function(value) {\n        if (value < 0 || value > 100) {\n          throw new Error(\"Size must be between 0 and 100.\");\n        }\n        _size = value;\n        this.hasBeenReset = true;\n      }\n    },\n\n    \"align\": {\n      enumerable: true,\n      get: function() {\n        return _align;\n      },\n      set: function(value) {\n        var setting = findAlignSetting(value);\n        if (!setting) {\n          throw new SyntaxError(\"An invalid or illegal string was specified.\");\n        }\n        _align = setting;\n        this.hasBeenReset = true;\n      }\n    }\n  });\n\n  /**\n   * Other <track> spec defined properties\n   */\n\n  // http://www.whatwg.org/specs/web-apps/current-work/multipage/the-video-element.html#text-track-cue-display-state\n  this.displayState = undefined;\n}\n\n/**\n * VTTCue methods\n */\n\nVTTCue.prototype.getCueAsHTML = function() {\n  // Assume WebVTT.convertCueToDOMTree is on the global.\n  return WebVTT.convertCueToDOMTree(window, this.text);\n};\n\nmodule.exports = VTTCue;\n","'use strict';\n\nvar keysShim;\nif (!Object.keys) {\n\t// modified from https://github.com/es-shims/es5-shim\n\tvar has = Object.prototype.hasOwnProperty;\n\tvar toStr = Object.prototype.toString;\n\tvar isArgs = require('./isArguments'); // eslint-disable-line global-require\n\tvar isEnumerable = Object.prototype.propertyIsEnumerable;\n\tvar hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');\n\tvar hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');\n\tvar dontEnums = [\n\t\t'toString',\n\t\t'toLocaleString',\n\t\t'valueOf',\n\t\t'hasOwnProperty',\n\t\t'isPrototypeOf',\n\t\t'propertyIsEnumerable',\n\t\t'constructor'\n\t];\n\tvar equalsConstructorPrototype = function (o) {\n\t\tvar ctor = o.constructor;\n\t\treturn ctor && ctor.prototype === o;\n\t};\n\tvar excludedKeys = {\n\t\t$applicationCache: true,\n\t\t$console: true,\n\t\t$external: true,\n\t\t$frame: true,\n\t\t$frameElement: true,\n\t\t$frames: true,\n\t\t$innerHeight: true,\n\t\t$innerWidth: true,\n\t\t$onmozfullscreenchange: true,\n\t\t$onmozfullscreenerror: true,\n\t\t$outerHeight: true,\n\t\t$outerWidth: true,\n\t\t$pageXOffset: true,\n\t\t$pageYOffset: true,\n\t\t$parent: true,\n\t\t$scrollLeft: true,\n\t\t$scrollTop: true,\n\t\t$scrollX: true,\n\t\t$scrollY: true,\n\t\t$self: true,\n\t\t$webkitIndexedDB: true,\n\t\t$webkitStorageInfo: true,\n\t\t$window: true\n\t};\n\tvar hasAutomationEqualityBug = (function () {\n\t\t/* global window */\n\t\tif (typeof window === 'undefined') { return false; }\n\t\tfor (var k in window) {\n\t\t\ttry {\n\t\t\t\tif (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tequalsConstructorPrototype(window[k]);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}());\n\tvar equalsConstructorPrototypeIfNotBuggy = function (o) {\n\t\t/* global window */\n\t\tif (typeof window === 'undefined' || !hasAutomationEqualityBug) {\n\t\t\treturn equalsConstructorPrototype(o);\n\t\t}\n\t\ttry {\n\t\t\treturn equalsConstructorPrototype(o);\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t};\n\n\tkeysShim = function keys(object) {\n\t\tvar isObject = object !== null && typeof object === 'object';\n\t\tvar isFunction = toStr.call(object) === '[object Function]';\n\t\tvar isArguments = isArgs(object);\n\t\tvar isString = isObject && toStr.call(object) === '[object String]';\n\t\tvar theKeys = [];\n\n\t\tif (!isObject && !isFunction && !isArguments) {\n\t\t\tthrow new TypeError('Object.keys called on a non-object');\n\t\t}\n\n\t\tvar skipProto = hasProtoEnumBug && isFunction;\n\t\tif (isString && object.length > 0 && !has.call(object, 0)) {\n\t\t\tfor (var i = 0; i < object.length; ++i) {\n\t\t\t\ttheKeys.push(String(i));\n\t\t\t}\n\t\t}\n\n\t\tif (isArguments && object.length > 0) {\n\t\t\tfor (var j = 0; j < object.length; ++j) {\n\t\t\t\ttheKeys.push(String(j));\n\t\t\t}\n\t\t} else {\n\t\t\tfor (var name in object) {\n\t\t\t\tif (!(skipProto && name === 'prototype') && has.call(object, name)) {\n\t\t\t\t\ttheKeys.push(String(name));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (hasDontEnumBug) {\n\t\t\tvar skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);\n\n\t\t\tfor (var k = 0; k < dontEnums.length; ++k) {\n\t\t\t\tif (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {\n\t\t\t\t\ttheKeys.push(dontEnums[k]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn theKeys;\n\t};\n}\nmodule.exports = keysShim;\n","'use strict';\n\nvar define = require('define-properties');\nvar getPolyfill = require('./polyfill');\n\nmodule.exports = function shimStringTrim() {\n\tvar polyfill = getPolyfill();\n\tdefine(String.prototype, { trim: polyfill }, { trim: function () { return String.prototype.trim !== polyfill; } });\n\treturn polyfill;\n};\n","module.exports = function mod(number, modulo) {\n\tvar remain = number % modulo;\n\treturn Math.floor(remain >= 0 ? remain : remain + modulo);\n};\n","import mod from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../../node_modules/css-loader/index.js??ref--8-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../../node_modules/sass-loader/lib/loader.js??ref--8-oneOf-1-3!../../../node_modules/vuetify-loader/lib/loader.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Video.vue?vue&type=style&index=0&id=a73de09c&lang=scss&scoped=true&\"; export default mod; export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../../node_modules/css-loader/index.js??ref--8-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../../node_modules/sass-loader/lib/loader.js??ref--8-oneOf-1-3!../../../node_modules/vuetify-loader/lib/loader.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Video.vue?vue&type=style&index=0&id=a73de09c&lang=scss&scoped=true&\"","var win;\n\nif (typeof window !== \"undefined\") {\n    win = window;\n} else if (typeof global !== \"undefined\") {\n    win = global;\n} else if (typeof self !== \"undefined\"){\n    win = self;\n} else {\n    win = {};\n}\n\nmodule.exports = win;\n","'use strict';\n\nvar GetIntrinsic = require('../GetIntrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar $SyntaxError = GetIntrinsic('%SyntaxError%');\n\nvar has = require('has');\n\nvar predicates = {\n  // https://ecma-international.org/ecma-262/6.0/#sec-property-descriptor-specification-type\n  'Property Descriptor': function isPropertyDescriptor(ES, Desc) {\n    if (ES.Type(Desc) !== 'Object') {\n      return false;\n    }\n    var allowed = {\n      '[[Configurable]]': true,\n      '[[Enumerable]]': true,\n      '[[Get]]': true,\n      '[[Set]]': true,\n      '[[Value]]': true,\n      '[[Writable]]': true\n    };\n\n    for (var key in Desc) { // eslint-disable-line\n      if (has(Desc, key) && !allowed[key]) {\n        return false;\n      }\n    }\n\n    var isData = has(Desc, '[[Value]]');\n    var IsAccessor = has(Desc, '[[Get]]') || has(Desc, '[[Set]]');\n    if (isData && IsAccessor) {\n      throw new $TypeError('Property Descriptors may not be both accessor and data descriptors');\n    }\n    return true;\n  }\n};\n\nmodule.exports = function assertRecord(ES, recordType, argumentName, value) {\n  var predicate = predicates[recordType];\n  if (typeof predicate !== 'function') {\n    throw new $SyntaxError('unknown record type: ' + recordType);\n  }\n  if (!predicate(ES, value)) {\n    throw new $TypeError(argumentName + ' must be a ' + recordType);\n  }\n  console.log(predicate(ES, value), value);\n};\n","var $isNaN = Number.isNaN || function (a) { return a !== a; };\n\nmodule.exports = Number.isFinite || function (x) { return typeof x === 'number' && !$isNaN(x) && x !== Infinity && x !== -Infinity; };\n","'use strict';\n\nvar bind = require('function-bind');\nvar define = require('define-properties');\n\nvar implementation = require('./implementation');\nvar getPolyfill = require('./polyfill');\nvar shim = require('./shim');\n\nvar boundTrim = bind.call(Function.call, getPolyfill());\n\ndefine(boundTrim, {\n\tgetPolyfill: getPolyfill,\n\timplementation: implementation,\n\tshim: shim\n});\n\nmodule.exports = boundTrim;\n","'use strict';\n\nvar isCallable = require('is-callable');\n\nvar toStr = Object.prototype.toString;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar forEachArray = function forEachArray(array, iterator, receiver) {\n    for (var i = 0, len = array.length; i < len; i++) {\n        if (hasOwnProperty.call(array, i)) {\n            if (receiver == null) {\n                iterator(array[i], i, array);\n            } else {\n                iterator.call(receiver, array[i], i, array);\n            }\n        }\n    }\n};\n\nvar forEachString = function forEachString(string, iterator, receiver) {\n    for (var i = 0, len = string.length; i < len; i++) {\n        // no such thing as a sparse string.\n        if (receiver == null) {\n            iterator(string.charAt(i), i, string);\n        } else {\n            iterator.call(receiver, string.charAt(i), i, string);\n        }\n    }\n};\n\nvar forEachObject = function forEachObject(object, iterator, receiver) {\n    for (var k in object) {\n        if (hasOwnProperty.call(object, k)) {\n            if (receiver == null) {\n                iterator(object[k], k, object);\n            } else {\n                iterator.call(receiver, object[k], k, object);\n            }\n        }\n    }\n};\n\nvar forEach = function forEach(list, iterator, thisArg) {\n    if (!isCallable(iterator)) {\n        throw new TypeError('iterator must be a function');\n    }\n\n    var receiver;\n    if (arguments.length >= 3) {\n        receiver = thisArg;\n    }\n\n    if (toStr.call(list) === '[object Array]') {\n        forEachArray(list, iterator, receiver);\n    } else if (typeof list === 'string') {\n        forEachString(list, iterator, receiver);\n    } else {\n        forEachObject(list, iterator, receiver);\n    }\n};\n\nmodule.exports = forEach;\n","/**\n * Copyright 2013 vtt.js Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */\nvar _objCreate = Object.create || (function() {\n  function F() {}\n  return function(o) {\n    if (arguments.length !== 1) {\n      throw new Error('Object.create shim only accepts one parameter.');\n    }\n    F.prototype = o;\n    return new F();\n  };\n})();\n\n// Creates a new ParserError object from an errorData object. The errorData\n// object should have default code and message properties. The default message\n// property can be overriden by passing in a message parameter.\n// See ParsingError.Errors below for acceptable errors.\nfunction ParsingError(errorData, message) {\n  this.name = \"ParsingError\";\n  this.code = errorData.code;\n  this.message = message || errorData.message;\n}\nParsingError.prototype = _objCreate(Error.prototype);\nParsingError.prototype.constructor = ParsingError;\n\n// ParsingError metadata for acceptable ParsingErrors.\nParsingError.Errors = {\n  BadSignature: {\n    code: 0,\n    message: \"Malformed WebVTT signature.\"\n  },\n  BadTimeStamp: {\n    code: 1,\n    message: \"Malformed time stamp.\"\n  }\n};\n\n// Try to parse input as a time stamp.\nfunction parseTimeStamp(input) {\n\n  function computeSeconds(h, m, s, f) {\n    return (h | 0) * 3600 + (m | 0) * 60 + (s | 0) + (f | 0) / 1000;\n  }\n\n  var m = input.match(/^(\\d+):(\\d{2})(:\\d{2})?\\.(\\d{3})/);\n  if (!m) {\n    return null;\n  }\n\n  if (m[3]) {\n    // Timestamp takes the form of [hours]:[minutes]:[seconds].[milliseconds]\n    return computeSeconds(m[1], m[2], m[3].replace(\":\", \"\"), m[4]);\n  } else if (m[1] > 59) {\n    // Timestamp takes the form of [hours]:[minutes].[milliseconds]\n    // First position is hours as it's over 59.\n    return computeSeconds(m[1], m[2], 0,  m[4]);\n  } else {\n    // Timestamp takes the form of [minutes]:[seconds].[milliseconds]\n    return computeSeconds(0, m[1], m[2], m[4]);\n  }\n}\n\n// A settings object holds key/value pairs and will ignore anything but the first\n// assignment to a specific key.\nfunction Settings() {\n  this.values = _objCreate(null);\n}\n\nSettings.prototype = {\n  // Only accept the first assignment to any key.\n  set: function(k, v) {\n    if (!this.get(k) && v !== \"\") {\n      this.values[k] = v;\n    }\n  },\n  // Return the value for a key, or a default value.\n  // If 'defaultKey' is passed then 'dflt' is assumed to be an object with\n  // a number of possible default values as properties where 'defaultKey' is\n  // the key of the property that will be chosen; otherwise it's assumed to be\n  // a single value.\n  get: function(k, dflt, defaultKey) {\n    if (defaultKey) {\n      return this.has(k) ? this.values[k] : dflt[defaultKey];\n    }\n    return this.has(k) ? this.values[k] : dflt;\n  },\n  // Check whether we have a value for a key.\n  has: function(k) {\n    return k in this.values;\n  },\n  // Accept a setting if its one of the given alternatives.\n  alt: function(k, v, a) {\n    for (var n = 0; n < a.length; ++n) {\n      if (v === a[n]) {\n        this.set(k, v);\n        break;\n      }\n    }\n  },\n  // Accept a setting if its a valid (signed) integer.\n  integer: function(k, v) {\n    if (/^-?\\d+$/.test(v)) { // integer\n      this.set(k, parseInt(v, 10));\n    }\n  },\n  // Accept a setting if its a valid percentage.\n  percent: function(k, v) {\n    var m;\n    if ((m = v.match(/^([\\d]{1,3})(\\.[\\d]*)?%$/))) {\n      v = parseFloat(v);\n      if (v >= 0 && v <= 100) {\n        this.set(k, v);\n        return true;\n      }\n    }\n    return false;\n  }\n};\n\n// Helper function to parse input into groups separated by 'groupDelim', and\n// interprete each group as a key/value pair separated by 'keyValueDelim'.\nfunction parseOptions(input, callback, keyValueDelim, groupDelim) {\n  var groups = groupDelim ? input.split(groupDelim) : [input];\n  for (var i in groups) {\n    if (typeof groups[i] !== \"string\") {\n      continue;\n    }\n    var kv = groups[i].split(keyValueDelim);\n    if (kv.length !== 2) {\n      continue;\n    }\n    var k = kv[0];\n    var v = kv[1];\n    callback(k, v);\n  }\n}\n\nfunction parseCue(input, cue, regionList) {\n  // Remember the original input if we need to throw an error.\n  var oInput = input;\n  // 4.1 WebVTT timestamp\n  function consumeTimeStamp() {\n    var ts = parseTimeStamp(input);\n    if (ts === null) {\n      throw new ParsingError(ParsingError.Errors.BadTimeStamp,\n                            \"Malformed timestamp: \" + oInput);\n    }\n    // Remove time stamp from input.\n    input = input.replace(/^[^\\sa-zA-Z-]+/, \"\");\n    return ts;\n  }\n\n  // 4.4.2 WebVTT cue settings\n  function consumeCueSettings(input, cue) {\n    var settings = new Settings();\n\n    parseOptions(input, function (k, v) {\n      switch (k) {\n      case \"region\":\n        // Find the last region we parsed with the same region id.\n        for (var i = regionList.length - 1; i >= 0; i--) {\n          if (regionList[i].id === v) {\n            settings.set(k, regionList[i].region);\n            break;\n          }\n        }\n        break;\n      case \"vertical\":\n        settings.alt(k, v, [\"rl\", \"lr\"]);\n        break;\n      case \"line\":\n        var vals = v.split(\",\"),\n            vals0 = vals[0];\n        settings.integer(k, vals0);\n        settings.percent(k, vals0) ? settings.set(\"snapToLines\", false) : null;\n        settings.alt(k, vals0, [\"auto\"]);\n        if (vals.length === 2) {\n          settings.alt(\"lineAlign\", vals[1], [\"start\", \"middle\", \"end\"]);\n        }\n        break;\n      case \"position\":\n        vals = v.split(\",\");\n        settings.percent(k, vals[0]);\n        if (vals.length === 2) {\n          settings.alt(\"positionAlign\", vals[1], [\"start\", \"middle\", \"end\"]);\n        }\n        break;\n      case \"size\":\n        settings.percent(k, v);\n        break;\n      case \"align\":\n        settings.alt(k, v, [\"start\", \"middle\", \"end\", \"left\", \"right\"]);\n        break;\n      }\n    }, /:/, /\\s/);\n\n    // Apply default values for any missing fields.\n    cue.region = settings.get(\"region\", null);\n    cue.vertical = settings.get(\"vertical\", \"\");\n    cue.line = settings.get(\"line\", \"auto\");\n    cue.lineAlign = settings.get(\"lineAlign\", \"start\");\n    cue.snapToLines = settings.get(\"snapToLines\", true);\n    cue.size = settings.get(\"size\", 100);\n    cue.align = settings.get(\"align\", \"middle\");\n    cue.position = settings.get(\"position\", {\n      start: 0,\n      left: 0,\n      middle: 50,\n      end: 100,\n      right: 100\n    }, cue.align);\n    cue.positionAlign = settings.get(\"positionAlign\", {\n      start: \"start\",\n      left: \"start\",\n      middle: \"middle\",\n      end: \"end\",\n      right: \"end\"\n    }, cue.align);\n  }\n\n  function skipWhitespace() {\n    input = input.replace(/^\\s+/, \"\");\n  }\n\n  // 4.1 WebVTT cue timings.\n  skipWhitespace();\n  cue.startTime = consumeTimeStamp();   // (1) collect cue start time\n  skipWhitespace();\n  if (input.substr(0, 3) !== \"-->\") {     // (3) next characters must match \"-->\"\n    throw new ParsingError(ParsingError.Errors.BadTimeStamp,\n                           \"Malformed time stamp (time stamps must be separated by '-->'): \" +\n                           oInput);\n  }\n  input = input.substr(3);\n  skipWhitespace();\n  cue.endTime = consumeTimeStamp();     // (5) collect cue end time\n\n  // 4.1 WebVTT cue settings list.\n  skipWhitespace();\n  consumeCueSettings(input, cue);\n}\n\nvar ESCAPE = {\n  \"&amp;\": \"&\",\n  \"&lt;\": \"<\",\n  \"&gt;\": \">\",\n  \"&lrm;\": \"\\u200e\",\n  \"&rlm;\": \"\\u200f\",\n  \"&nbsp;\": \"\\u00a0\"\n};\n\nvar TAG_NAME = {\n  c: \"span\",\n  i: \"i\",\n  b: \"b\",\n  u: \"u\",\n  ruby: \"ruby\",\n  rt: \"rt\",\n  v: \"span\",\n  lang: \"span\"\n};\n\nvar TAG_ANNOTATION = {\n  v: \"title\",\n  lang: \"lang\"\n};\n\nvar NEEDS_PARENT = {\n  rt: \"ruby\"\n};\n\n// Parse content into a document fragment.\nfunction parseContent(window, input) {\n  function nextToken() {\n    // Check for end-of-string.\n    if (!input) {\n      return null;\n    }\n\n    // Consume 'n' characters from the input.\n    function consume(result) {\n      input = input.substr(result.length);\n      return result;\n    }\n\n    var m = input.match(/^([^<]*)(<[^>]*>?)?/);\n    // If there is some text before the next tag, return it, otherwise return\n    // the tag.\n    return consume(m[1] ? m[1] : m[2]);\n  }\n\n  // Unescape a string 's'.\n  function unescape1(e) {\n    return ESCAPE[e];\n  }\n  function unescape(s) {\n    while ((m = s.match(/&(amp|lt|gt|lrm|rlm|nbsp);/))) {\n      s = s.replace(m[0], unescape1);\n    }\n    return s;\n  }\n\n  function shouldAdd(current, element) {\n    return !NEEDS_PARENT[element.localName] ||\n           NEEDS_PARENT[element.localName] === current.localName;\n  }\n\n  // Create an element for this tag.\n  function createElement(type, annotation) {\n    var tagName = TAG_NAME[type];\n    if (!tagName) {\n      return null;\n    }\n    var element = window.document.createElement(tagName);\n    element.localName = tagName;\n    var name = TAG_ANNOTATION[type];\n    if (name && annotation) {\n      element[name] = annotation.trim();\n    }\n    return element;\n  }\n\n  var rootDiv = window.document.createElement(\"div\"),\n      current = rootDiv,\n      t,\n      tagStack = [];\n\n  while ((t = nextToken()) !== null) {\n    if (t[0] === '<') {\n      if (t[1] === \"/\") {\n        // If the closing tag matches, move back up to the parent node.\n        if (tagStack.length &&\n            tagStack[tagStack.length - 1] === t.substr(2).replace(\">\", \"\")) {\n          tagStack.pop();\n          current = current.parentNode;\n        }\n        // Otherwise just ignore the end tag.\n        continue;\n      }\n      var ts = parseTimeStamp(t.substr(1, t.length - 2));\n      var node;\n      if (ts) {\n        // Timestamps are lead nodes as well.\n        node = window.document.createProcessingInstruction(\"timestamp\", ts);\n        current.appendChild(node);\n        continue;\n      }\n      var m = t.match(/^<([^.\\s/0-9>]+)(\\.[^\\s\\\\>]+)?([^>\\\\]+)?(\\\\?)>?$/);\n      // If we can't parse the tag, skip to the next tag.\n      if (!m) {\n        continue;\n      }\n      // Try to construct an element, and ignore the tag if we couldn't.\n      node = createElement(m[1], m[3]);\n      if (!node) {\n        continue;\n      }\n      // Determine if the tag should be added based on the context of where it\n      // is placed in the cuetext.\n      if (!shouldAdd(current, node)) {\n        continue;\n      }\n      // Set the class list (as a list of classes, separated by space).\n      if (m[2]) {\n        node.className = m[2].substr(1).replace('.', ' ');\n      }\n      // Append the node to the current node, and enter the scope of the new\n      // node.\n      tagStack.push(m[1]);\n      current.appendChild(node);\n      current = node;\n      continue;\n    }\n\n    // Text nodes are leaf nodes.\n    current.appendChild(window.document.createTextNode(unescape(t)));\n  }\n\n  return rootDiv;\n}\n\n// This is a list of all the Unicode characters that have a strong\n// right-to-left category. What this means is that these characters are\n// written right-to-left for sure. It was generated by pulling all the strong\n// right-to-left characters out of the Unicode data table. That table can\n// found at: http://www.unicode.org/Public/UNIDATA/UnicodeData.txt\nvar strongRTLRanges = [[0x5be, 0x5be], [0x5c0, 0x5c0], [0x5c3, 0x5c3], [0x5c6, 0x5c6],\n [0x5d0, 0x5ea], [0x5f0, 0x5f4], [0x608, 0x608], [0x60b, 0x60b], [0x60d, 0x60d],\n [0x61b, 0x61b], [0x61e, 0x64a], [0x66d, 0x66f], [0x671, 0x6d5], [0x6e5, 0x6e6],\n [0x6ee, 0x6ef], [0x6fa, 0x70d], [0x70f, 0x710], [0x712, 0x72f], [0x74d, 0x7a5],\n [0x7b1, 0x7b1], [0x7c0, 0x7ea], [0x7f4, 0x7f5], [0x7fa, 0x7fa], [0x800, 0x815],\n [0x81a, 0x81a], [0x824, 0x824], [0x828, 0x828], [0x830, 0x83e], [0x840, 0x858],\n [0x85e, 0x85e], [0x8a0, 0x8a0], [0x8a2, 0x8ac], [0x200f, 0x200f],\n [0xfb1d, 0xfb1d], [0xfb1f, 0xfb28], [0xfb2a, 0xfb36], [0xfb38, 0xfb3c],\n [0xfb3e, 0xfb3e], [0xfb40, 0xfb41], [0xfb43, 0xfb44], [0xfb46, 0xfbc1],\n [0xfbd3, 0xfd3d], [0xfd50, 0xfd8f], [0xfd92, 0xfdc7], [0xfdf0, 0xfdfc],\n [0xfe70, 0xfe74], [0xfe76, 0xfefc], [0x10800, 0x10805], [0x10808, 0x10808],\n [0x1080a, 0x10835], [0x10837, 0x10838], [0x1083c, 0x1083c], [0x1083f, 0x10855],\n [0x10857, 0x1085f], [0x10900, 0x1091b], [0x10920, 0x10939], [0x1093f, 0x1093f],\n [0x10980, 0x109b7], [0x109be, 0x109bf], [0x10a00, 0x10a00], [0x10a10, 0x10a13],\n [0x10a15, 0x10a17], [0x10a19, 0x10a33], [0x10a40, 0x10a47], [0x10a50, 0x10a58],\n [0x10a60, 0x10a7f], [0x10b00, 0x10b35], [0x10b40, 0x10b55], [0x10b58, 0x10b72],\n [0x10b78, 0x10b7f], [0x10c00, 0x10c48], [0x1ee00, 0x1ee03], [0x1ee05, 0x1ee1f],\n [0x1ee21, 0x1ee22], [0x1ee24, 0x1ee24], [0x1ee27, 0x1ee27], [0x1ee29, 0x1ee32],\n [0x1ee34, 0x1ee37], [0x1ee39, 0x1ee39], [0x1ee3b, 0x1ee3b], [0x1ee42, 0x1ee42],\n [0x1ee47, 0x1ee47], [0x1ee49, 0x1ee49], [0x1ee4b, 0x1ee4b], [0x1ee4d, 0x1ee4f],\n [0x1ee51, 0x1ee52], [0x1ee54, 0x1ee54], [0x1ee57, 0x1ee57], [0x1ee59, 0x1ee59],\n [0x1ee5b, 0x1ee5b], [0x1ee5d, 0x1ee5d], [0x1ee5f, 0x1ee5f], [0x1ee61, 0x1ee62],\n [0x1ee64, 0x1ee64], [0x1ee67, 0x1ee6a], [0x1ee6c, 0x1ee72], [0x1ee74, 0x1ee77],\n [0x1ee79, 0x1ee7c], [0x1ee7e, 0x1ee7e], [0x1ee80, 0x1ee89], [0x1ee8b, 0x1ee9b],\n [0x1eea1, 0x1eea3], [0x1eea5, 0x1eea9], [0x1eeab, 0x1eebb], [0x10fffd, 0x10fffd]];\n\nfunction isStrongRTLChar(charCode) {\n  for (var i = 0; i < strongRTLRanges.length; i++) {\n    var currentRange = strongRTLRanges[i];\n    if (charCode >= currentRange[0] && charCode <= currentRange[1]) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction determineBidi(cueDiv) {\n  var nodeStack = [],\n      text = \"\",\n      charCode;\n\n  if (!cueDiv || !cueDiv.childNodes) {\n    return \"ltr\";\n  }\n\n  function pushNodes(nodeStack, node) {\n    for (var i = node.childNodes.length - 1; i >= 0; i--) {\n      nodeStack.push(node.childNodes[i]);\n    }\n  }\n\n  function nextTextNode(nodeStack) {\n    if (!nodeStack || !nodeStack.length) {\n      return null;\n    }\n\n    var node = nodeStack.pop(),\n        text = node.textContent || node.innerText;\n    if (text) {\n      // TODO: This should match all unicode type B characters (paragraph\n      // separator characters). See issue #115.\n      var m = text.match(/^.*(\\n|\\r)/);\n      if (m) {\n        nodeStack.length = 0;\n        return m[0];\n      }\n      return text;\n    }\n    if (node.tagName === \"ruby\") {\n      return nextTextNode(nodeStack);\n    }\n    if (node.childNodes) {\n      pushNodes(nodeStack, node);\n      return nextTextNode(nodeStack);\n    }\n  }\n\n  pushNodes(nodeStack, cueDiv);\n  while ((text = nextTextNode(nodeStack))) {\n    for (var i = 0; i < text.length; i++) {\n      charCode = text.charCodeAt(i);\n      if (isStrongRTLChar(charCode)) {\n        return \"rtl\";\n      }\n    }\n  }\n  return \"ltr\";\n}\n\nfunction computeLinePos(cue) {\n  if (typeof cue.line === \"number\" &&\n      (cue.snapToLines || (cue.line >= 0 && cue.line <= 100))) {\n    return cue.line;\n  }\n  if (!cue.track || !cue.track.textTrackList ||\n      !cue.track.textTrackList.mediaElement) {\n    return -1;\n  }\n  var track = cue.track,\n      trackList = track.textTrackList,\n      count = 0;\n  for (var i = 0; i < trackList.length && trackList[i] !== track; i++) {\n    if (trackList[i].mode === \"showing\") {\n      count++;\n    }\n  }\n  return ++count * -1;\n}\n\nfunction StyleBox() {\n}\n\n// Apply styles to a div. If there is no div passed then it defaults to the\n// div on 'this'.\nStyleBox.prototype.applyStyles = function(styles, div) {\n  div = div || this.div;\n  for (var prop in styles) {\n    if (styles.hasOwnProperty(prop)) {\n      div.style[prop] = styles[prop];\n    }\n  }\n};\n\nStyleBox.prototype.formatStyle = function(val, unit) {\n  return val === 0 ? 0 : val + unit;\n};\n\n// Constructs the computed display state of the cue (a div). Places the div\n// into the overlay which should be a block level element (usually a div).\nfunction CueStyleBox(window, cue, styleOptions) {\n  StyleBox.call(this);\n  this.cue = cue;\n\n  // Parse our cue's text into a DOM tree rooted at 'cueDiv'. This div will\n  // have inline positioning and will function as the cue background box.\n  this.cueDiv = parseContent(window, cue.text);\n  var styles = {\n    color: \"rgba(255, 255, 255, 1)\",\n    backgroundColor:  \"rgba(0, 0, 0, 0.8)\",\n    position: \"relative\",\n    left: 0,\n    right: 0,\n    top: 0,\n    bottom: 0,\n    display: \"inline\",\n    writingMode: cue.vertical === \"\" ? \"horizontal-tb\"\n                                     : cue.vertical === \"lr\" ? \"vertical-lr\"\n                                                             : \"vertical-rl\",\n    unicodeBidi: \"plaintext\"\n  };\n\n  this.applyStyles(styles, this.cueDiv);\n\n  // Create an absolutely positioned div that will be used to position the cue\n  // div. Note, all WebVTT cue-setting alignments are equivalent to the CSS\n  // mirrors of them except \"middle\" which is \"center\" in CSS.\n  this.div = window.document.createElement(\"div\");\n  styles = {\n    direction: determineBidi(this.cueDiv),\n    writingMode: cue.vertical === \"\" ? \"horizontal-tb\"\n                                     : cue.vertical === \"lr\" ? \"vertical-lr\"\n                                                             : \"vertical-rl\",\n    unicodeBidi: \"plaintext\",\n    textAlign: cue.align === \"middle\" ? \"center\" : cue.align,\n    font: styleOptions.font,\n    whiteSpace: \"pre-line\",\n    position: \"absolute\"\n  };\n\n  this.applyStyles(styles);\n  this.div.appendChild(this.cueDiv);\n\n  // Calculate the distance from the reference edge of the viewport to the text\n  // position of the cue box. The reference edge will be resolved later when\n  // the box orientation styles are applied.\n  var textPos = 0;\n  switch (cue.positionAlign) {\n  case \"start\":\n    textPos = cue.position;\n    break;\n  case \"middle\":\n    textPos = cue.position - (cue.size / 2);\n    break;\n  case \"end\":\n    textPos = cue.position - cue.size;\n    break;\n  }\n\n  // Horizontal box orientation; textPos is the distance from the left edge of the\n  // area to the left edge of the box and cue.size is the distance extending to\n  // the right from there.\n  if (cue.vertical === \"\") {\n    this.applyStyles({\n      left:  this.formatStyle(textPos, \"%\"),\n      width: this.formatStyle(cue.size, \"%\")\n    });\n  // Vertical box orientation; textPos is the distance from the top edge of the\n  // area to the top edge of the box and cue.size is the height extending\n  // downwards from there.\n  } else {\n    this.applyStyles({\n      top: this.formatStyle(textPos, \"%\"),\n      height: this.formatStyle(cue.size, \"%\")\n    });\n  }\n\n  this.move = function(box) {\n    this.applyStyles({\n      top: this.formatStyle(box.top, \"px\"),\n      bottom: this.formatStyle(box.bottom, \"px\"),\n      left: this.formatStyle(box.left, \"px\"),\n      right: this.formatStyle(box.right, \"px\"),\n      height: this.formatStyle(box.height, \"px\"),\n      width: this.formatStyle(box.width, \"px\")\n    });\n  };\n}\nCueStyleBox.prototype = _objCreate(StyleBox.prototype);\nCueStyleBox.prototype.constructor = CueStyleBox;\n\n// Represents the co-ordinates of an Element in a way that we can easily\n// compute things with such as if it overlaps or intersects with another Element.\n// Can initialize it with either a StyleBox or another BoxPosition.\nfunction BoxPosition(obj) {\n  // Either a BoxPosition was passed in and we need to copy it, or a StyleBox\n  // was passed in and we need to copy the results of 'getBoundingClientRect'\n  // as the object returned is readonly. All co-ordinate values are in reference\n  // to the viewport origin (top left).\n  var lh, height, width, top;\n  if (obj.div) {\n    height = obj.div.offsetHeight;\n    width = obj.div.offsetWidth;\n    top = obj.div.offsetTop;\n\n    var rects = (rects = obj.div.childNodes) && (rects = rects[0]) &&\n                rects.getClientRects && rects.getClientRects();\n    obj = obj.div.getBoundingClientRect();\n    // In certain cases the outter div will be slightly larger then the sum of\n    // the inner div's lines. This could be due to bold text, etc, on some platforms.\n    // In this case we should get the average line height and use that. This will\n    // result in the desired behaviour.\n    lh = rects ? Math.max((rects[0] && rects[0].height) || 0, obj.height / rects.length)\n               : 0;\n\n  }\n  this.left = obj.left;\n  this.right = obj.right;\n  this.top = obj.top || top;\n  this.height = obj.height || height;\n  this.bottom = obj.bottom || (top + (obj.height || height));\n  this.width = obj.width || width;\n  this.lineHeight = lh !== undefined ? lh : obj.lineHeight;\n}\n\n// Move the box along a particular axis. Optionally pass in an amount to move\n// the box. If no amount is passed then the default is the line height of the\n// box.\nBoxPosition.prototype.move = function(axis, toMove) {\n  toMove = toMove !== undefined ? toMove : this.lineHeight;\n  switch (axis) {\n  case \"+x\":\n    this.left += toMove;\n    this.right += toMove;\n    break;\n  case \"-x\":\n    this.left -= toMove;\n    this.right -= toMove;\n    break;\n  case \"+y\":\n    this.top += toMove;\n    this.bottom += toMove;\n    break;\n  case \"-y\":\n    this.top -= toMove;\n    this.bottom -= toMove;\n    break;\n  }\n};\n\n// Check if this box overlaps another box, b2.\nBoxPosition.prototype.overlaps = function(b2) {\n  return this.left < b2.right &&\n         this.right > b2.left &&\n         this.top < b2.bottom &&\n         this.bottom > b2.top;\n};\n\n// Check if this box overlaps any other boxes in boxes.\nBoxPosition.prototype.overlapsAny = function(boxes) {\n  for (var i = 0; i < boxes.length; i++) {\n    if (this.overlaps(boxes[i])) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Check if this box is within another box.\nBoxPosition.prototype.within = function(container) {\n  return this.top >= container.top &&\n         this.bottom <= container.bottom &&\n         this.left >= container.left &&\n         this.right <= container.right;\n};\n\n// Check if this box is entirely within the container or it is overlapping\n// on the edge opposite of the axis direction passed. For example, if \"+x\" is\n// passed and the box is overlapping on the left edge of the container, then\n// return true.\nBoxPosition.prototype.overlapsOppositeAxis = function(container, axis) {\n  switch (axis) {\n  case \"+x\":\n    return this.left < container.left;\n  case \"-x\":\n    return this.right > container.right;\n  case \"+y\":\n    return this.top < container.top;\n  case \"-y\":\n    return this.bottom > container.bottom;\n  }\n};\n\n// Find the percentage of the area that this box is overlapping with another\n// box.\nBoxPosition.prototype.intersectPercentage = function(b2) {\n  var x = Math.max(0, Math.min(this.right, b2.right) - Math.max(this.left, b2.left)),\n      y = Math.max(0, Math.min(this.bottom, b2.bottom) - Math.max(this.top, b2.top)),\n      intersectArea = x * y;\n  return intersectArea / (this.height * this.width);\n};\n\n// Convert the positions from this box to CSS compatible positions using\n// the reference container's positions. This has to be done because this\n// box's positions are in reference to the viewport origin, whereas, CSS\n// values are in referecne to their respective edges.\nBoxPosition.prototype.toCSSCompatValues = function(reference) {\n  return {\n    top: this.top - reference.top,\n    bottom: reference.bottom - this.bottom,\n    left: this.left - reference.left,\n    right: reference.right - this.right,\n    height: this.height,\n    width: this.width\n  };\n};\n\n// Get an object that represents the box's position without anything extra.\n// Can pass a StyleBox, HTMLElement, or another BoxPositon.\nBoxPosition.getSimpleBoxPosition = function(obj) {\n  var height = obj.div ? obj.div.offsetHeight : obj.tagName ? obj.offsetHeight : 0;\n  var width = obj.div ? obj.div.offsetWidth : obj.tagName ? obj.offsetWidth : 0;\n  var top = obj.div ? obj.div.offsetTop : obj.tagName ? obj.offsetTop : 0;\n\n  obj = obj.div ? obj.div.getBoundingClientRect() :\n                obj.tagName ? obj.getBoundingClientRect() : obj;\n  var ret = {\n    left: obj.left,\n    right: obj.right,\n    top: obj.top || top,\n    height: obj.height || height,\n    bottom: obj.bottom || (top + (obj.height || height)),\n    width: obj.width || width\n  };\n  return ret;\n};\n\n// Move a StyleBox to its specified, or next best, position. The containerBox\n// is the box that contains the StyleBox, such as a div. boxPositions are\n// a list of other boxes that the styleBox can't overlap with.\nfunction moveBoxToLinePosition(window, styleBox, containerBox, boxPositions) {\n\n  // Find the best position for a cue box, b, on the video. The axis parameter\n  // is a list of axis, the order of which, it will move the box along. For example:\n  // Passing [\"+x\", \"-x\"] will move the box first along the x axis in the positive\n  // direction. If it doesn't find a good position for it there it will then move\n  // it along the x axis in the negative direction.\n  function findBestPosition(b, axis) {\n    var bestPosition,\n        specifiedPosition = new BoxPosition(b),\n        percentage = 1; // Highest possible so the first thing we get is better.\n\n    for (var i = 0; i < axis.length; i++) {\n      while (b.overlapsOppositeAxis(containerBox, axis[i]) ||\n             (b.within(containerBox) && b.overlapsAny(boxPositions))) {\n        b.move(axis[i]);\n      }\n      // We found a spot where we aren't overlapping anything. This is our\n      // best position.\n      if (b.within(containerBox)) {\n        return b;\n      }\n      var p = b.intersectPercentage(containerBox);\n      // If we're outside the container box less then we were on our last try\n      // then remember this position as the best position.\n      if (percentage > p) {\n        bestPosition = new BoxPosition(b);\n        percentage = p;\n      }\n      // Reset the box position to the specified position.\n      b = new BoxPosition(specifiedPosition);\n    }\n    return bestPosition || specifiedPosition;\n  }\n\n  var boxPosition = new BoxPosition(styleBox),\n      cue = styleBox.cue,\n      linePos = computeLinePos(cue),\n      axis = [];\n\n  // If we have a line number to align the cue to.\n  if (cue.snapToLines) {\n    var size;\n    switch (cue.vertical) {\n    case \"\":\n      axis = [ \"+y\", \"-y\" ];\n      size = \"height\";\n      break;\n    case \"rl\":\n      axis = [ \"+x\", \"-x\" ];\n      size = \"width\";\n      break;\n    case \"lr\":\n      axis = [ \"-x\", \"+x\" ];\n      size = \"width\";\n      break;\n    }\n\n    var step = boxPosition.lineHeight,\n        position = step * Math.round(linePos),\n        maxPosition = containerBox[size] + step,\n        initialAxis = axis[0];\n\n    // If the specified intial position is greater then the max position then\n    // clamp the box to the amount of steps it would take for the box to\n    // reach the max position.\n    if (Math.abs(position) > maxPosition) {\n      position = position < 0 ? -1 : 1;\n      position *= Math.ceil(maxPosition / step) * step;\n    }\n\n    // If computed line position returns negative then line numbers are\n    // relative to the bottom of the video instead of the top. Therefore, we\n    // need to increase our initial position by the length or width of the\n    // video, depending on the writing direction, and reverse our axis directions.\n    if (linePos < 0) {\n      position += cue.vertical === \"\" ? containerBox.height : containerBox.width;\n      axis = axis.reverse();\n    }\n\n    // Move the box to the specified position. This may not be its best\n    // position.\n    boxPosition.move(initialAxis, position);\n\n  } else {\n    // If we have a percentage line value for the cue.\n    var calculatedPercentage = (boxPosition.lineHeight / containerBox.height) * 100;\n\n    switch (cue.lineAlign) {\n    case \"middle\":\n      linePos -= (calculatedPercentage / 2);\n      break;\n    case \"end\":\n      linePos -= calculatedPercentage;\n      break;\n    }\n\n    // Apply initial line position to the cue box.\n    switch (cue.vertical) {\n    case \"\":\n      styleBox.applyStyles({\n        top: styleBox.formatStyle(linePos, \"%\")\n      });\n      break;\n    case \"rl\":\n      styleBox.applyStyles({\n        left: styleBox.formatStyle(linePos, \"%\")\n      });\n      break;\n    case \"lr\":\n      styleBox.applyStyles({\n        right: styleBox.formatStyle(linePos, \"%\")\n      });\n      break;\n    }\n\n    axis = [ \"+y\", \"-x\", \"+x\", \"-y\" ];\n\n    // Get the box position again after we've applied the specified positioning\n    // to it.\n    boxPosition = new BoxPosition(styleBox);\n  }\n\n  var bestPosition = findBestPosition(boxPosition, axis);\n  styleBox.move(bestPosition.toCSSCompatValues(containerBox));\n}\n\nfunction WebVTT() {\n  // Nothing\n}\n\n// Helper to allow strings to be decoded instead of the default binary utf8 data.\nWebVTT.StringDecoder = function() {\n  return {\n    decode: function(data) {\n      if (!data) {\n        return \"\";\n      }\n      if (typeof data !== \"string\") {\n        throw new Error(\"Error - expected string data.\");\n      }\n      return decodeURIComponent(encodeURIComponent(data));\n    }\n  };\n};\n\nWebVTT.convertCueToDOMTree = function(window, cuetext) {\n  if (!window || !cuetext) {\n    return null;\n  }\n  return parseContent(window, cuetext);\n};\n\nvar FONT_SIZE_PERCENT = 0.05;\nvar FONT_STYLE = \"sans-serif\";\nvar CUE_BACKGROUND_PADDING = \"1.5%\";\n\n// Runs the processing model over the cues and regions passed to it.\n// @param overlay A block level element (usually a div) that the computed cues\n//                and regions will be placed into.\nWebVTT.processCues = function(window, cues, overlay) {\n  if (!window || !cues || !overlay) {\n    return null;\n  }\n\n  // Remove all previous children.\n  while (overlay.firstChild) {\n    overlay.removeChild(overlay.firstChild);\n  }\n\n  var paddedOverlay = window.document.createElement(\"div\");\n  paddedOverlay.style.position = \"absolute\";\n  paddedOverlay.style.left = \"0\";\n  paddedOverlay.style.right = \"0\";\n  paddedOverlay.style.top = \"0\";\n  paddedOverlay.style.bottom = \"0\";\n  paddedOverlay.style.margin = CUE_BACKGROUND_PADDING;\n  overlay.appendChild(paddedOverlay);\n\n  // Determine if we need to compute the display states of the cues. This could\n  // be the case if a cue's state has been changed since the last computation or\n  // if it has not been computed yet.\n  function shouldCompute(cues) {\n    for (var i = 0; i < cues.length; i++) {\n      if (cues[i].hasBeenReset || !cues[i].displayState) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // We don't need to recompute the cues' display states. Just reuse them.\n  if (!shouldCompute(cues)) {\n    for (var i = 0; i < cues.length; i++) {\n      paddedOverlay.appendChild(cues[i].displayState);\n    }\n    return;\n  }\n\n  var boxPositions = [],\n      containerBox = BoxPosition.getSimpleBoxPosition(paddedOverlay),\n      fontSize = Math.round(containerBox.height * FONT_SIZE_PERCENT * 100) / 100;\n  var styleOptions = {\n    font: fontSize + \"px \" + FONT_STYLE\n  };\n\n  (function() {\n    var styleBox, cue;\n\n    for (var i = 0; i < cues.length; i++) {\n      cue = cues[i];\n\n      // Compute the intial position and styles of the cue div.\n      styleBox = new CueStyleBox(window, cue, styleOptions);\n      paddedOverlay.appendChild(styleBox.div);\n\n      // Move the cue div to it's correct line position.\n      moveBoxToLinePosition(window, styleBox, containerBox, boxPositions);\n\n      // Remember the computed div so that we don't have to recompute it later\n      // if we don't have too.\n      cue.displayState = styleBox.div;\n\n      boxPositions.push(BoxPosition.getSimpleBoxPosition(styleBox));\n    }\n  })();\n};\n\nWebVTT.Parser = function(window, vttjs, decoder) {\n  if (!decoder) {\n    decoder = vttjs;\n    vttjs = {};\n  }\n  if (!vttjs) {\n    vttjs = {};\n  }\n\n  this.window = window;\n  this.vttjs = vttjs;\n  this.state = \"INITIAL\";\n  this.buffer = \"\";\n  this.decoder = decoder || new TextDecoder(\"utf8\");\n  this.regionList = [];\n};\n\nWebVTT.Parser.prototype = {\n  // If the error is a ParsingError then report it to the consumer if\n  // possible. If it's not a ParsingError then throw it like normal.\n  reportOrThrowError: function(e) {\n    if (e instanceof ParsingError) {\n      this.onparsingerror && this.onparsingerror(e);\n    } else {\n      throw e;\n    }\n  },\n  parse: function (data) {\n    var self = this;\n\n    // If there is no data then we won't decode it, but will just try to parse\n    // whatever is in buffer already. This may occur in circumstances, for\n    // example when flush() is called.\n    if (data) {\n      // Try to decode the data that we received.\n      self.buffer += self.decoder.decode(data, {stream: true});\n    }\n\n    function collectNextLine() {\n      var buffer = self.buffer;\n      var pos = 0;\n      while (pos < buffer.length && buffer[pos] !== '\\r' && buffer[pos] !== '\\n') {\n        ++pos;\n      }\n      var line = buffer.substr(0, pos);\n      // Advance the buffer early in case we fail below.\n      if (buffer[pos] === '\\r') {\n        ++pos;\n      }\n      if (buffer[pos] === '\\n') {\n        ++pos;\n      }\n      self.buffer = buffer.substr(pos);\n      return line;\n    }\n\n    // 3.4 WebVTT region and WebVTT region settings syntax\n    function parseRegion(input) {\n      var settings = new Settings();\n\n      parseOptions(input, function (k, v) {\n        switch (k) {\n        case \"id\":\n          settings.set(k, v);\n          break;\n        case \"width\":\n          settings.percent(k, v);\n          break;\n        case \"lines\":\n          settings.integer(k, v);\n          break;\n        case \"regionanchor\":\n        case \"viewportanchor\":\n          var xy = v.split(',');\n          if (xy.length !== 2) {\n            break;\n          }\n          // We have to make sure both x and y parse, so use a temporary\n          // settings object here.\n          var anchor = new Settings();\n          anchor.percent(\"x\", xy[0]);\n          anchor.percent(\"y\", xy[1]);\n          if (!anchor.has(\"x\") || !anchor.has(\"y\")) {\n            break;\n          }\n          settings.set(k + \"X\", anchor.get(\"x\"));\n          settings.set(k + \"Y\", anchor.get(\"y\"));\n          break;\n        case \"scroll\":\n          settings.alt(k, v, [\"up\"]);\n          break;\n        }\n      }, /=/, /\\s/);\n\n      // Create the region, using default values for any values that were not\n      // specified.\n      if (settings.has(\"id\")) {\n        var region = new (self.vttjs.VTTRegion || self.window.VTTRegion)();\n        region.width = settings.get(\"width\", 100);\n        region.lines = settings.get(\"lines\", 3);\n        region.regionAnchorX = settings.get(\"regionanchorX\", 0);\n        region.regionAnchorY = settings.get(\"regionanchorY\", 100);\n        region.viewportAnchorX = settings.get(\"viewportanchorX\", 0);\n        region.viewportAnchorY = settings.get(\"viewportanchorY\", 100);\n        region.scroll = settings.get(\"scroll\", \"\");\n        // Register the region.\n        self.onregion && self.onregion(region);\n        // Remember the VTTRegion for later in case we parse any VTTCues that\n        // reference it.\n        self.regionList.push({\n          id: settings.get(\"id\"),\n          region: region\n        });\n      }\n    }\n\n    // draft-pantos-http-live-streaming-20\n    // https://tools.ietf.org/html/draft-pantos-http-live-streaming-20#section-3.5\n    // 3.5 WebVTT\n    function parseTimestampMap(input) {\n      var settings = new Settings();\n\n      parseOptions(input, function(k, v) {\n        switch(k) {\n        case \"MPEGT\":\n          settings.integer(k + 'S', v);\n          break;\n        case \"LOCA\":\n          settings.set(k + 'L', parseTimeStamp(v));\n          break;\n        }\n      }, /[^\\d]:/, /,/);\n\n      self.ontimestampmap && self.ontimestampmap({\n        \"MPEGTS\": settings.get(\"MPEGTS\"),\n        \"LOCAL\": settings.get(\"LOCAL\")\n      });\n    }\n\n    // 3.2 WebVTT metadata header syntax\n    function parseHeader(input) {\n      if (input.match(/X-TIMESTAMP-MAP/)) {\n        // This line contains HLS X-TIMESTAMP-MAP metadata\n        parseOptions(input, function(k, v) {\n          switch(k) {\n          case \"X-TIMESTAMP-MAP\":\n            parseTimestampMap(v);\n            break;\n          }\n        }, /=/);\n      } else {\n        parseOptions(input, function (k, v) {\n          switch (k) {\n          case \"Region\":\n            // 3.3 WebVTT region metadata header syntax\n            parseRegion(v);\n            break;\n          }\n        }, /:/);\n      }\n\n    }\n\n    // 5.1 WebVTT file parsing.\n    try {\n      var line;\n      if (self.state === \"INITIAL\") {\n        // We can't start parsing until we have the first line.\n        if (!/\\r\\n|\\n/.test(self.buffer)) {\n          return this;\n        }\n\n        line = collectNextLine();\n\n        var m = line.match(/^WEBVTT([ \\t].*)?$/);\n        if (!m || !m[0]) {\n          throw new ParsingError(ParsingError.Errors.BadSignature);\n        }\n\n        self.state = \"HEADER\";\n      }\n\n      var alreadyCollectedLine = false;\n      while (self.buffer) {\n        // We can't parse a line until we have the full line.\n        if (!/\\r\\n|\\n/.test(self.buffer)) {\n          return this;\n        }\n\n        if (!alreadyCollectedLine) {\n          line = collectNextLine();\n        } else {\n          alreadyCollectedLine = false;\n        }\n\n        switch (self.state) {\n        case \"HEADER\":\n          // 13-18 - Allow a header (metadata) under the WEBVTT line.\n          if (/:/.test(line)) {\n            parseHeader(line);\n          } else if (!line) {\n            // An empty line terminates the header and starts the body (cues).\n            self.state = \"ID\";\n          }\n          continue;\n        case \"NOTE\":\n          // Ignore NOTE blocks.\n          if (!line) {\n            self.state = \"ID\";\n          }\n          continue;\n        case \"ID\":\n          // Check for the start of NOTE blocks.\n          if (/^NOTE($|[ \\t])/.test(line)) {\n            self.state = \"NOTE\";\n            break;\n          }\n          // 19-29 - Allow any number of line terminators, then initialize new cue values.\n          if (!line) {\n            continue;\n          }\n          self.cue = new (self.vttjs.VTTCue || self.window.VTTCue)(0, 0, \"\");\n          self.state = \"CUE\";\n          // 30-39 - Check if self line contains an optional identifier or timing data.\n          if (line.indexOf(\"-->\") === -1) {\n            self.cue.id = line;\n            continue;\n          }\n          // Process line as start of a cue.\n          /*falls through*/\n        case \"CUE\":\n          // 40 - Collect cue timings and settings.\n          try {\n            parseCue(line, self.cue, self.regionList);\n          } catch (e) {\n            self.reportOrThrowError(e);\n            // In case of an error ignore rest of the cue.\n            self.cue = null;\n            self.state = \"BADCUE\";\n            continue;\n          }\n          self.state = \"CUETEXT\";\n          continue;\n        case \"CUETEXT\":\n          var hasSubstring = line.indexOf(\"-->\") !== -1;\n          // 34 - If we have an empty line then report the cue.\n          // 35 - If we have the special substring '-->' then report the cue,\n          // but do not collect the line as we need to process the current\n          // one as a new cue.\n          if (!line || hasSubstring && (alreadyCollectedLine = true)) {\n            // We are done parsing self cue.\n            self.oncue && self.oncue(self.cue);\n            self.cue = null;\n            self.state = \"ID\";\n            continue;\n          }\n          if (self.cue.text) {\n            self.cue.text += \"\\n\";\n          }\n          self.cue.text += line;\n          continue;\n        case \"BADCUE\": // BADCUE\n          // 54-62 - Collect and discard the remaining cue.\n          if (!line) {\n            self.state = \"ID\";\n          }\n          continue;\n        }\n      }\n    } catch (e) {\n      self.reportOrThrowError(e);\n\n      // If we are currently parsing a cue, report what we have.\n      if (self.state === \"CUETEXT\" && self.cue && self.oncue) {\n        self.oncue(self.cue);\n      }\n      self.cue = null;\n      // Enter BADWEBVTT state if header was not parsed correctly otherwise\n      // another exception occurred so enter BADCUE state.\n      self.state = self.state === \"INITIAL\" ? \"BADWEBVTT\" : \"BADCUE\";\n    }\n    return this;\n  },\n  flush: function () {\n    var self = this;\n    try {\n      // Finish decoding the stream.\n      self.buffer += self.decoder.decode();\n      // Synthesize the end of the current cue or region.\n      if (self.cue || self.state === \"HEADER\") {\n        self.buffer += \"\\n\\n\";\n        self.parse();\n      }\n      // If we've flushed, parsed, and we're still on the INITIAL state then\n      // that means we don't have enough of the stream to parse the first\n      // line.\n      if (self.state === \"INITIAL\") {\n        throw new ParsingError(ParsingError.Errors.BadSignature);\n      }\n    } catch(e) {\n      self.reportOrThrowError(e);\n    }\n    self.onflush && self.onflush();\n    return this;\n  }\n};\n\nmodule.exports = WebVTT;\n","// see https://tools.ietf.org/html/rfc1808\n\n/* jshint ignore:start */\n(function(root) { \n/* jshint ignore:end */\n\n  var URL_REGEX = /^((?:[a-zA-Z0-9+\\-.]+:)?)(\\/\\/[^\\/?#]*)?((?:[^\\/\\?#]*\\/)*.*?)??(;.*?)?(\\?.*?)?(#.*?)?$/;\n  var FIRST_SEGMENT_REGEX = /^([^\\/?#]*)(.*)$/;\n  var SLASH_DOT_REGEX = /(?:\\/|^)\\.(?=\\/)/g;\n  var SLASH_DOT_DOT_REGEX = /(?:\\/|^)\\.\\.\\/(?!\\.\\.\\/).*?(?=\\/)/g;\n\n  var URLToolkit = { // jshint ignore:line\n    // If opts.alwaysNormalize is true then the path will always be normalized even when it starts with / or //\n    // E.g\n    // With opts.alwaysNormalize = false (default, spec compliant)\n    // http://a.com/b/cd + /e/f/../g => http://a.com/e/f/../g\n    // With opts.alwaysNormalize = true (not spec compliant)\n    // http://a.com/b/cd + /e/f/../g => http://a.com/e/g\n    buildAbsoluteURL: function(baseURL, relativeURL, opts) {\n      opts = opts || {};\n      // remove any remaining space and CRLF\n      baseURL = baseURL.trim();\n      relativeURL = relativeURL.trim();\n      if (!relativeURL) {\n        // 2a) If the embedded URL is entirely empty, it inherits the\n        // entire base URL (i.e., is set equal to the base URL)\n        // and we are done.\n        if (!opts.alwaysNormalize) {\n          return baseURL;\n        }\n        var basePartsForNormalise = URLToolkit.parseURL(baseURL);\n        if (!basePartsForNormalise) {\n          throw new Error('Error trying to parse base URL.');\n        }\n        basePartsForNormalise.path = URLToolkit.normalizePath(basePartsForNormalise.path);\n        return URLToolkit.buildURLFromParts(basePartsForNormalise);\n      }\n      var relativeParts = URLToolkit.parseURL(relativeURL);\n      if (!relativeParts) {\n        throw new Error('Error trying to parse relative URL.');\n      }\n      if (relativeParts.scheme) {\n        // 2b) If the embedded URL starts with a scheme name, it is\n        // interpreted as an absolute URL and we are done.\n        if (!opts.alwaysNormalize) {\n          return relativeURL;\n        }\n        relativeParts.path = URLToolkit.normalizePath(relativeParts.path);\n        return URLToolkit.buildURLFromParts(relativeParts);\n      }\n      var baseParts = URLToolkit.parseURL(baseURL);\n      if (!baseParts) {\n        throw new Error('Error trying to parse base URL.');\n      }\n      if (!baseParts.netLoc && baseParts.path && baseParts.path[0] !== '/') {\n        // If netLoc missing and path doesn't start with '/', assume everthing before the first '/' is the netLoc\n        // This causes 'example.com/a' to be handled as '//example.com/a' instead of '/example.com/a'\n        var pathParts = FIRST_SEGMENT_REGEX.exec(baseParts.path);\n        baseParts.netLoc = pathParts[1];\n        baseParts.path = pathParts[2];\n      }\n      if (baseParts.netLoc && !baseParts.path) {\n        baseParts.path = '/';\n      }\n      var builtParts = {\n        // 2c) Otherwise, the embedded URL inherits the scheme of\n        // the base URL.\n        scheme: baseParts.scheme,\n        netLoc: relativeParts.netLoc,\n        path: null,\n        params: relativeParts.params,\n        query: relativeParts.query,\n        fragment: relativeParts.fragment\n      };\n      if (!relativeParts.netLoc) {\n        // 3) If the embedded URL's <net_loc> is non-empty, we skip to\n        // Step 7.  Otherwise, the embedded URL inherits the <net_loc>\n        // (if any) of the base URL.\n        builtParts.netLoc = baseParts.netLoc;\n        // 4) If the embedded URL path is preceded by a slash \"/\", the\n        // path is not relative and we skip to Step 7.\n        if (relativeParts.path[0] !== '/') {\n          if (!relativeParts.path) {\n            // 5) If the embedded URL path is empty (and not preceded by a\n            // slash), then the embedded URL inherits the base URL path\n            builtParts.path = baseParts.path;\n            // 5a) if the embedded URL's <params> is non-empty, we skip to\n            // step 7; otherwise, it inherits the <params> of the base\n            // URL (if any) and\n            if (!relativeParts.params) {\n              builtParts.params = baseParts.params;\n              // 5b) if the embedded URL's <query> is non-empty, we skip to\n              // step 7; otherwise, it inherits the <query> of the base\n              // URL (if any) and we skip to step 7.\n              if (!relativeParts.query) {\n                builtParts.query = baseParts.query;\n              }\n            }\n          } else {\n            // 6) The last segment of the base URL's path (anything\n            // following the rightmost slash \"/\", or the entire path if no\n            // slash is present) is removed and the embedded URL's path is\n            // appended in its place.\n            var baseURLPath = baseParts.path;\n            var newPath = baseURLPath.substring(0, baseURLPath.lastIndexOf('/') + 1) + relativeParts.path;\n            builtParts.path = URLToolkit.normalizePath(newPath);\n          }\n        }\n      }\n      if (builtParts.path === null) {\n        builtParts.path = opts.alwaysNormalize ? URLToolkit.normalizePath(relativeParts.path) : relativeParts.path;\n      }\n      return URLToolkit.buildURLFromParts(builtParts);\n    },\n    parseURL: function(url) {\n      var parts = URL_REGEX.exec(url);\n      if (!parts) {\n        return null;\n      }\n      return {\n        scheme: parts[1] || '',\n        netLoc: parts[2] || '',\n        path: parts[3] || '',\n        params: parts[4] || '',\n        query: parts[5] || '',\n        fragment: parts[6] || ''\n      };\n    },\n    normalizePath: function(path) {\n      // The following operations are\n      // then applied, in order, to the new path:\n      // 6a) All occurrences of \"./\", where \".\" is a complete path\n      // segment, are removed.\n      // 6b) If the path ends with \".\" as a complete path segment,\n      // that \".\" is removed.\n      path = path.split('').reverse().join('').replace(SLASH_DOT_REGEX, '');\n      // 6c) All occurrences of \"<segment>/../\", where <segment> is a\n      // complete path segment not equal to \"..\", are removed.\n      // Removal of these path segments is performed iteratively,\n      // removing the leftmost matching pattern on each iteration,\n      // until no matching pattern remains.\n      // 6d) If the path ends with \"<segment>/..\", where <segment> is a\n      // complete path segment not equal to \"..\", that\n      // \"<segment>/..\" is removed.\n      while (path.length !== (path = path.replace(SLASH_DOT_DOT_REGEX, '')).length) {} // jshint ignore:line\n      return path.split('').reverse().join('');\n    },\n    buildURLFromParts: function(parts) {\n      return parts.scheme + parts.netLoc + parts.path + parts.params + parts.query + parts.fragment;\n    }\n  };\n\n/* jshint ignore:start */\n  if(typeof exports === 'object' && typeof module === 'object')\n    module.exports = URLToolkit;\n  else if(typeof define === 'function' && define.amd)\n    define([], function() { return URLToolkit; });\n  else if(typeof exports === 'object')\n    exports[\"URLToolkit\"] = URLToolkit;\n  else\n    root[\"URLToolkit\"] = URLToolkit;\n})(this);\n/* jshint ignore:end */\n","'use strict';\n\nvar toStr = Object.prototype.toString;\n\nmodule.exports = function isArguments(value) {\n\tvar str = toStr.call(value);\n\tvar isArgs = str === '[object Arguments]';\n\tif (!isArgs) {\n\t\tisArgs = str !== '[object Array]' &&\n\t\t\tvalue !== null &&\n\t\t\ttypeof value === 'object' &&\n\t\t\ttypeof value.length === 'number' &&\n\t\t\tvalue.length >= 0 &&\n\t\t\ttoStr.call(value.callee) === '[object Function]';\n\t}\n\treturn isArgs;\n};\n","'use strict';\n\nvar slice = Array.prototype.slice;\nvar isArgs = require('./isArguments');\n\nvar origKeys = Object.keys;\nvar keysShim = origKeys ? function keys(o) { return origKeys(o); } : require('./implementation');\n\nvar originalKeys = Object.keys;\n\nkeysShim.shim = function shimObjectKeys() {\n\tif (Object.keys) {\n\t\tvar keysWorksWithArguments = (function () {\n\t\t\t// Safari 5.0 bug\n\t\t\tvar args = Object.keys(arguments);\n\t\t\treturn args && args.length === arguments.length;\n\t\t}(1, 2));\n\t\tif (!keysWorksWithArguments) {\n\t\t\tObject.keys = function keys(object) { // eslint-disable-line func-name-matching\n\t\t\t\tif (isArgs(object)) {\n\t\t\t\t\treturn originalKeys(slice.call(object));\n\t\t\t\t}\n\t\t\t\treturn originalKeys(object);\n\t\t\t};\n\t\t}\n\t} else {\n\t\tObject.keys = keysShim;\n\t}\n\treturn Object.keys || keysShim;\n};\n\nmodule.exports = keysShim;\n","/**\n * mux.js\n *\n * Copyright (c) Brightcove\n * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n *\n * Parse mpeg2 transport stream packets to extract basic timing information\n */\n'use strict';\n\nvar StreamTypes = require('../m2ts/stream-types.js');\nvar handleRollover = require('../m2ts/timestamp-rollover-stream.js').handleRollover;\nvar probe = {};\nprobe.ts = require('../m2ts/probe.js');\nprobe.aac = require('../aac/utils.js');\n\n\nvar\n  PES_TIMESCALE = 90000,\n  MP2T_PACKET_LENGTH = 188, // bytes\n  SYNC_BYTE = 0x47;\n\n/**\n * walks through segment data looking for pat and pmt packets to parse out\n * program map table information\n */\nvar parsePsi_ = function(bytes, pmt) {\n  var\n    startIndex = 0,\n    endIndex = MP2T_PACKET_LENGTH,\n    packet, type;\n\n  while (endIndex < bytes.byteLength) {\n    // Look for a pair of start and end sync bytes in the data..\n    if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n      // We found a packet\n      packet = bytes.subarray(startIndex, endIndex);\n      type = probe.ts.parseType(packet, pmt.pid);\n\n      switch (type) {\n        case 'pat':\n          if (!pmt.pid) {\n            pmt.pid = probe.ts.parsePat(packet);\n          }\n          break;\n        case 'pmt':\n          if (!pmt.table) {\n            pmt.table = probe.ts.parsePmt(packet);\n          }\n          break;\n        default:\n          break;\n      }\n\n      // Found the pat and pmt, we can stop walking the segment\n      if (pmt.pid && pmt.table) {\n        return;\n      }\n\n      startIndex += MP2T_PACKET_LENGTH;\n      endIndex += MP2T_PACKET_LENGTH;\n      continue;\n    }\n\n    // If we get here, we have somehow become de-synchronized and we need to step\n    // forward one byte at a time until we find a pair of sync bytes that denote\n    // a packet\n    startIndex++;\n    endIndex++;\n  }\n};\n\n/**\n * walks through the segment data from the start and end to get timing information\n * for the first and last audio pes packets\n */\nvar parseAudioPes_ = function(bytes, pmt, result) {\n  var\n    startIndex = 0,\n    endIndex = MP2T_PACKET_LENGTH,\n    packet, type, pesType, pusi, parsed;\n\n  var endLoop = false;\n\n  // Start walking from start of segment to get first audio packet\n  while (endIndex <= bytes.byteLength) {\n    // Look for a pair of start and end sync bytes in the data..\n    if (bytes[startIndex] === SYNC_BYTE &&\n        (bytes[endIndex] === SYNC_BYTE || endIndex === bytes.byteLength)) {\n      // We found a packet\n      packet = bytes.subarray(startIndex, endIndex);\n      type = probe.ts.parseType(packet, pmt.pid);\n\n      switch (type) {\n        case 'pes':\n          pesType = probe.ts.parsePesType(packet, pmt.table);\n          pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\n          if (pesType === 'audio' && pusi) {\n            parsed = probe.ts.parsePesTime(packet);\n            if (parsed) {\n              parsed.type = 'audio';\n              result.audio.push(parsed);\n              endLoop = true;\n            }\n          }\n          break;\n        default:\n          break;\n      }\n\n      if (endLoop) {\n        break;\n      }\n\n      startIndex += MP2T_PACKET_LENGTH;\n      endIndex += MP2T_PACKET_LENGTH;\n      continue;\n    }\n\n    // If we get here, we have somehow become de-synchronized and we need to step\n    // forward one byte at a time until we find a pair of sync bytes that denote\n    // a packet\n    startIndex++;\n    endIndex++;\n  }\n\n  // Start walking from end of segment to get last audio packet\n  endIndex = bytes.byteLength;\n  startIndex = endIndex - MP2T_PACKET_LENGTH;\n  endLoop = false;\n  while (startIndex >= 0) {\n    // Look for a pair of start and end sync bytes in the data..\n    if (bytes[startIndex] === SYNC_BYTE &&\n        (bytes[endIndex] === SYNC_BYTE || endIndex === bytes.byteLength)) {\n      // We found a packet\n      packet = bytes.subarray(startIndex, endIndex);\n      type = probe.ts.parseType(packet, pmt.pid);\n\n      switch (type) {\n        case 'pes':\n          pesType = probe.ts.parsePesType(packet, pmt.table);\n          pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\n          if (pesType === 'audio' && pusi) {\n            parsed = probe.ts.parsePesTime(packet);\n            if (parsed) {\n              parsed.type = 'audio';\n              result.audio.push(parsed);\n              endLoop = true;\n            }\n          }\n          break;\n        default:\n          break;\n      }\n\n      if (endLoop) {\n        break;\n      }\n\n      startIndex -= MP2T_PACKET_LENGTH;\n      endIndex -= MP2T_PACKET_LENGTH;\n      continue;\n    }\n\n    // If we get here, we have somehow become de-synchronized and we need to step\n    // forward one byte at a time until we find a pair of sync bytes that denote\n    // a packet\n    startIndex--;\n    endIndex--;\n  }\n};\n\n/**\n * walks through the segment data from the start and end to get timing information\n * for the first and last video pes packets as well as timing information for the first\n * key frame.\n */\nvar parseVideoPes_ = function(bytes, pmt, result) {\n  var\n    startIndex = 0,\n    endIndex = MP2T_PACKET_LENGTH,\n    packet, type, pesType, pusi, parsed, frame, i, pes;\n\n  var endLoop = false;\n\n  var currentFrame = {\n    data: [],\n    size: 0\n  };\n\n  // Start walking from start of segment to get first video packet\n  while (endIndex < bytes.byteLength) {\n    // Look for a pair of start and end sync bytes in the data..\n    if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n      // We found a packet\n      packet = bytes.subarray(startIndex, endIndex);\n      type = probe.ts.parseType(packet, pmt.pid);\n\n      switch (type) {\n        case 'pes':\n          pesType = probe.ts.parsePesType(packet, pmt.table);\n          pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\n          if (pesType === 'video') {\n            if (pusi && !endLoop) {\n              parsed = probe.ts.parsePesTime(packet);\n              if (parsed) {\n                parsed.type = 'video';\n                result.video.push(parsed);\n                endLoop = true;\n              }\n            }\n            if (!result.firstKeyFrame) {\n              if (pusi) {\n                if (currentFrame.size !== 0) {\n                  frame = new Uint8Array(currentFrame.size);\n                  i = 0;\n                  while (currentFrame.data.length) {\n                    pes = currentFrame.data.shift();\n                    frame.set(pes, i);\n                    i += pes.byteLength;\n                  }\n                  if (probe.ts.videoPacketContainsKeyFrame(frame)) {\n                    var firstKeyFrame = probe.ts.parsePesTime(frame);\n\n                    // PTS/DTS may not be available. Simply *not* setting\n                    // the keyframe seems to work fine with HLS playback\n                    // and definitely preferable to a crash with TypeError...\n                    if (firstKeyFrame) {\n                      result.firstKeyFrame = firstKeyFrame;\n                      result.firstKeyFrame.type = 'video';\n                    } else {\n                      // eslint-disable-next-line\n                      console.warn(\n                        'Failed to extract PTS/DTS from PES at first keyframe. ' +\n                        'This could be an unusual TS segment, or else mux.js did not ' +\n                        'parse your TS segment correctly. If you know your TS ' +\n                        'segments do contain PTS/DTS on keyframes please file a bug ' +\n                        'report! You can try ffprobe to double check for yourself.'\n                      );\n                    }\n                  }\n                  currentFrame.size = 0;\n                }\n              }\n              currentFrame.data.push(packet);\n              currentFrame.size += packet.byteLength;\n            }\n          }\n          break;\n        default:\n          break;\n      }\n\n      if (endLoop && result.firstKeyFrame) {\n        break;\n      }\n\n      startIndex += MP2T_PACKET_LENGTH;\n      endIndex += MP2T_PACKET_LENGTH;\n      continue;\n    }\n\n    // If we get here, we have somehow become de-synchronized and we need to step\n    // forward one byte at a time until we find a pair of sync bytes that denote\n    // a packet\n    startIndex++;\n    endIndex++;\n  }\n\n  // Start walking from end of segment to get last video packet\n  endIndex = bytes.byteLength;\n  startIndex = endIndex - MP2T_PACKET_LENGTH;\n  endLoop = false;\n  while (startIndex >= 0) {\n    // Look for a pair of start and end sync bytes in the data..\n    if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n      // We found a packet\n      packet = bytes.subarray(startIndex, endIndex);\n      type = probe.ts.parseType(packet, pmt.pid);\n\n      switch (type) {\n        case 'pes':\n          pesType = probe.ts.parsePesType(packet, pmt.table);\n          pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\n          if (pesType === 'video' && pusi) {\n              parsed = probe.ts.parsePesTime(packet);\n              if (parsed) {\n                parsed.type = 'video';\n                result.video.push(parsed);\n                endLoop = true;\n              }\n          }\n          break;\n        default:\n          break;\n      }\n\n      if (endLoop) {\n        break;\n      }\n\n      startIndex -= MP2T_PACKET_LENGTH;\n      endIndex -= MP2T_PACKET_LENGTH;\n      continue;\n    }\n\n    // If we get here, we have somehow become de-synchronized and we need to step\n    // forward one byte at a time until we find a pair of sync bytes that denote\n    // a packet\n    startIndex--;\n    endIndex--;\n  }\n};\n\n/**\n * Adjusts the timestamp information for the segment to account for\n * rollover and convert to seconds based on pes packet timescale (90khz clock)\n */\nvar adjustTimestamp_ = function(segmentInfo, baseTimestamp) {\n  if (segmentInfo.audio && segmentInfo.audio.length) {\n    var audioBaseTimestamp = baseTimestamp;\n    if (typeof audioBaseTimestamp === 'undefined') {\n      audioBaseTimestamp = segmentInfo.audio[0].dts;\n    }\n    segmentInfo.audio.forEach(function(info) {\n      info.dts = handleRollover(info.dts, audioBaseTimestamp);\n      info.pts = handleRollover(info.pts, audioBaseTimestamp);\n      // time in seconds\n      info.dtsTime = info.dts / PES_TIMESCALE;\n      info.ptsTime = info.pts / PES_TIMESCALE;\n    });\n  }\n\n  if (segmentInfo.video && segmentInfo.video.length) {\n    var videoBaseTimestamp = baseTimestamp;\n    if (typeof videoBaseTimestamp === 'undefined') {\n      videoBaseTimestamp = segmentInfo.video[0].dts;\n    }\n    segmentInfo.video.forEach(function(info) {\n      info.dts = handleRollover(info.dts, videoBaseTimestamp);\n      info.pts = handleRollover(info.pts, videoBaseTimestamp);\n      // time in seconds\n      info.dtsTime = info.dts / PES_TIMESCALE;\n      info.ptsTime = info.pts / PES_TIMESCALE;\n    });\n    if (segmentInfo.firstKeyFrame) {\n      var frame = segmentInfo.firstKeyFrame;\n      frame.dts = handleRollover(frame.dts, videoBaseTimestamp);\n      frame.pts = handleRollover(frame.pts, videoBaseTimestamp);\n      // time in seconds\n      frame.dtsTime = frame.dts / PES_TIMESCALE;\n      frame.ptsTime = frame.dts / PES_TIMESCALE;\n    }\n  }\n};\n\n/**\n * inspects the aac data stream for start and end time information\n */\nvar inspectAac_ = function(bytes) {\n  var\n    endLoop = false,\n    audioCount = 0,\n    sampleRate = null,\n    timestamp = null,\n    frameSize = 0,\n    byteIndex = 0,\n    packet;\n\n  while (bytes.length - byteIndex >= 3) {\n    var type = probe.aac.parseType(bytes, byteIndex);\n    switch (type) {\n      case 'timed-metadata':\n        // Exit early because we don't have enough to parse\n        // the ID3 tag header\n        if (bytes.length - byteIndex < 10) {\n          endLoop = true;\n          break;\n        }\n\n        frameSize = probe.aac.parseId3TagSize(bytes, byteIndex);\n\n        // Exit early if we don't have enough in the buffer\n        // to emit a full packet\n        if (frameSize > bytes.length) {\n          endLoop = true;\n          break;\n        }\n        if (timestamp === null) {\n          packet = bytes.subarray(byteIndex, byteIndex + frameSize);\n          timestamp = probe.aac.parseAacTimestamp(packet);\n        }\n        byteIndex += frameSize;\n        break;\n      case 'audio':\n        // Exit early because we don't have enough to parse\n        // the ADTS frame header\n        if (bytes.length - byteIndex < 7) {\n          endLoop = true;\n          break;\n        }\n\n        frameSize = probe.aac.parseAdtsSize(bytes, byteIndex);\n\n        // Exit early if we don't have enough in the buffer\n        // to emit a full packet\n        if (frameSize > bytes.length) {\n          endLoop = true;\n          break;\n        }\n        if (sampleRate === null) {\n          packet = bytes.subarray(byteIndex, byteIndex + frameSize);\n          sampleRate = probe.aac.parseSampleRate(packet);\n        }\n        audioCount++;\n        byteIndex += frameSize;\n        break;\n      default:\n        byteIndex++;\n        break;\n    }\n    if (endLoop) {\n      return null;\n    }\n  }\n  if (sampleRate === null || timestamp === null) {\n    return null;\n  }\n\n  var audioTimescale = PES_TIMESCALE / sampleRate;\n\n  var result = {\n    audio: [\n      {\n        type: 'audio',\n        dts: timestamp,\n        pts: timestamp\n      },\n      {\n        type: 'audio',\n        dts: timestamp + (audioCount * 1024 * audioTimescale),\n        pts: timestamp + (audioCount * 1024 * audioTimescale)\n      }\n    ]\n  };\n\n  return result;\n};\n\n/**\n * inspects the transport stream segment data for start and end time information\n * of the audio and video tracks (when present) as well as the first key frame's\n * start time.\n */\nvar inspectTs_ = function(bytes) {\n  var pmt = {\n    pid: null,\n    table: null\n  };\n\n  var result = {};\n\n  parsePsi_(bytes, pmt);\n\n  for (var pid in pmt.table) {\n    if (pmt.table.hasOwnProperty(pid)) {\n      var type = pmt.table[pid];\n      switch (type) {\n        case StreamTypes.H264_STREAM_TYPE:\n          result.video = [];\n          parseVideoPes_(bytes, pmt, result);\n          if (result.video.length === 0) {\n            delete result.video;\n          }\n          break;\n        case StreamTypes.ADTS_STREAM_TYPE:\n          result.audio = [];\n          parseAudioPes_(bytes, pmt, result);\n          if (result.audio.length === 0) {\n            delete result.audio;\n          }\n          break;\n        default:\n          break;\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Inspects segment byte data and returns an object with start and end timing information\n *\n * @param {Uint8Array} bytes The segment byte data\n * @param {Number} baseTimestamp Relative reference timestamp used when adjusting frame\n *  timestamps for rollover. This value must be in 90khz clock.\n * @return {Object} Object containing start and end frame timing info of segment.\n */\nvar inspect = function(bytes, baseTimestamp) {\n  var isAacData = probe.aac.isLikelyAacData(bytes);\n\n  var result;\n\n  if (isAacData) {\n    result = inspectAac_(bytes);\n  } else {\n    result = inspectTs_(bytes);\n  }\n\n  if (!result || (!result.audio && !result.video)) {\n    return null;\n  }\n\n  adjustTimestamp_(result, baseTimestamp);\n\n  return result;\n};\n\nmodule.exports = {\n  inspect: inspect,\n  parseAudioPes_: parseAudioPes_\n};\n","/**\n * mux.js\n *\n * Copyright (c) Brightcove\n * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n *\n * Reads in-band caption information from a video elementary\n * stream. Captions must follow the CEA-708 standard for injection\n * into an MPEG-2 transport streams.\n * @see https://en.wikipedia.org/wiki/CEA-708\n * @see https://www.gpo.gov/fdsys/pkg/CFR-2007-title47-vol1/pdf/CFR-2007-title47-vol1-sec15-119.pdf\n */\n\n'use strict';\n\n// Supplemental enhancement information (SEI) NAL units have a\n// payload type field to indicate how they are to be\n// interpreted. CEAS-708 caption content is always transmitted with\n// payload type 0x04.\nvar USER_DATA_REGISTERED_ITU_T_T35 = 4,\n    RBSP_TRAILING_BITS = 128;\n\n/**\n  * Parse a supplemental enhancement information (SEI) NAL unit.\n  * Stops parsing once a message of type ITU T T35 has been found.\n  *\n  * @param bytes {Uint8Array} the bytes of a SEI NAL unit\n  * @return {object} the parsed SEI payload\n  * @see Rec. ITU-T H.264, 7.3.2.3.1\n  */\nvar parseSei = function(bytes) {\n  var\n    i = 0,\n    result = {\n      payloadType: -1,\n      payloadSize: 0\n    },\n    payloadType = 0,\n    payloadSize = 0;\n\n  // go through the sei_rbsp parsing each each individual sei_message\n  while (i < bytes.byteLength) {\n    // stop once we have hit the end of the sei_rbsp\n    if (bytes[i] === RBSP_TRAILING_BITS) {\n      break;\n    }\n\n    // Parse payload type\n    while (bytes[i] === 0xFF) {\n      payloadType += 255;\n      i++;\n    }\n    payloadType += bytes[i++];\n\n    // Parse payload size\n    while (bytes[i] === 0xFF) {\n      payloadSize += 255;\n      i++;\n    }\n    payloadSize += bytes[i++];\n\n    // this sei_message is a 608/708 caption so save it and break\n    // there can only ever be one caption message in a frame's sei\n    if (!result.payload && payloadType === USER_DATA_REGISTERED_ITU_T_T35) {\n      result.payloadType = payloadType;\n      result.payloadSize = payloadSize;\n      result.payload = bytes.subarray(i, i + payloadSize);\n      break;\n    }\n\n    // skip the payload and parse the next message\n    i += payloadSize;\n    payloadType = 0;\n    payloadSize = 0;\n  }\n\n  return result;\n};\n\n// see ANSI/SCTE 128-1 (2013), section 8.1\nvar parseUserData = function(sei) {\n  // itu_t_t35_contry_code must be 181 (United States) for\n  // captions\n  if (sei.payload[0] !== 181) {\n    return null;\n  }\n\n  // itu_t_t35_provider_code should be 49 (ATSC) for captions\n  if (((sei.payload[1] << 8) | sei.payload[2]) !== 49) {\n    return null;\n  }\n\n  // the user_identifier should be \"GA94\" to indicate ATSC1 data\n  if (String.fromCharCode(sei.payload[3],\n                          sei.payload[4],\n                          sei.payload[5],\n                          sei.payload[6]) !== 'GA94') {\n    return null;\n  }\n\n  // finally, user_data_type_code should be 0x03 for caption data\n  if (sei.payload[7] !== 0x03) {\n    return null;\n  }\n\n  // return the user_data_type_structure and strip the trailing\n  // marker bits\n  return sei.payload.subarray(8, sei.payload.length - 1);\n};\n\n// see CEA-708-D, section 4.4\nvar parseCaptionPackets = function(pts, userData) {\n  var results = [], i, count, offset, data;\n\n  // if this is just filler, return immediately\n  if (!(userData[0] & 0x40)) {\n    return results;\n  }\n\n  // parse out the cc_data_1 and cc_data_2 fields\n  count = userData[0] & 0x1f;\n  for (i = 0; i < count; i++) {\n    offset = i * 3;\n    data = {\n      type: userData[offset + 2] & 0x03,\n      pts: pts\n    };\n\n    // capture cc data when cc_valid is 1\n    if (userData[offset + 2] & 0x04) {\n      data.ccData = (userData[offset + 3] << 8) | userData[offset + 4];\n      results.push(data);\n    }\n  }\n  return results;\n};\n\nvar discardEmulationPreventionBytes = function(data) {\n    var\n      length = data.byteLength,\n      emulationPreventionBytesPositions = [],\n      i = 1,\n      newLength, newData;\n\n    // Find all `Emulation Prevention Bytes`\n    while (i < length - 2) {\n      if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {\n        emulationPreventionBytesPositions.push(i + 2);\n        i += 2;\n      } else {\n        i++;\n      }\n    }\n\n    // If no Emulation Prevention Bytes were found just return the original\n    // array\n    if (emulationPreventionBytesPositions.length === 0) {\n      return data;\n    }\n\n    // Create a new array to hold the NAL unit data\n    newLength = length - emulationPreventionBytesPositions.length;\n    newData = new Uint8Array(newLength);\n    var sourceIndex = 0;\n\n    for (i = 0; i < newLength; sourceIndex++, i++) {\n      if (sourceIndex === emulationPreventionBytesPositions[0]) {\n        // Skip this byte\n        sourceIndex++;\n        // Remove this position index\n        emulationPreventionBytesPositions.shift();\n      }\n      newData[i] = data[sourceIndex];\n    }\n\n    return newData;\n};\n\n// exports\nmodule.exports = {\n  parseSei: parseSei,\n  parseUserData: parseUserData,\n  parseCaptionPackets: parseCaptionPackets,\n  discardEmulationPreventionBytes: discardEmulationPreventionBytes,\n  USER_DATA_REGISTERED_ITU_T_T35: USER_DATA_REGISTERED_ITU_T_T35\n};\n","// Source: http://jsfiddle.net/vWx8V/\n// http://stackoverflow.com/questions/5603195/full-list-of-javascript-keycodes\n\n/**\n * Conenience method returns corresponding value for given keyName or keyCode.\n *\n * @param {Mixed} keyCode {Number} or keyName {String}\n * @return {Mixed}\n * @api public\n */\n\nfunction keyCode(searchInput) {\n  // Keyboard Events\n  if (searchInput && 'object' === typeof searchInput) {\n    var hasKeyCode = searchInput.which || searchInput.keyCode || searchInput.charCode\n    if (hasKeyCode) searchInput = hasKeyCode\n  }\n\n  // Numbers\n  if ('number' === typeof searchInput) return names[searchInput]\n\n  // Everything else (cast to string)\n  var search = String(searchInput)\n\n  // check codes\n  var foundNamedKey = codes[search.toLowerCase()]\n  if (foundNamedKey) return foundNamedKey\n\n  // check aliases\n  var foundNamedKey = aliases[search.toLowerCase()]\n  if (foundNamedKey) return foundNamedKey\n\n  // weird character?\n  if (search.length === 1) return search.charCodeAt(0)\n\n  return undefined\n}\n\n/**\n * Compares a keyboard event with a given keyCode or keyName.\n *\n * @param {Event} event Keyboard event that should be tested\n * @param {Mixed} keyCode {Number} or keyName {String}\n * @return {Boolean}\n * @api public\n */\nkeyCode.isEventKey = function isEventKey(event, nameOrCode) {\n  if (event && 'object' === typeof event) {\n    var keyCode = event.which || event.keyCode || event.charCode\n    if (keyCode === null || keyCode === undefined) { return false; }\n    if (typeof nameOrCode === 'string') {\n      // check codes\n      var foundNamedKey = codes[nameOrCode.toLowerCase()]\n      if (foundNamedKey) { return foundNamedKey === keyCode; }\n    \n      // check aliases\n      var foundNamedKey = aliases[nameOrCode.toLowerCase()]\n      if (foundNamedKey) { return foundNamedKey === keyCode; }\n    } else if (typeof nameOrCode === 'number') {\n      return nameOrCode === keyCode;\n    }\n    return false;\n  }\n}\n\nexports = module.exports = keyCode;\n\n/**\n * Get by name\n *\n *   exports.code['enter'] // => 13\n */\n\nvar codes = exports.code = exports.codes = {\n  'backspace': 8,\n  'tab': 9,\n  'enter': 13,\n  'shift': 16,\n  'ctrl': 17,\n  'alt': 18,\n  'pause/break': 19,\n  'caps lock': 20,\n  'esc': 27,\n  'space': 32,\n  'page up': 33,\n  'page down': 34,\n  'end': 35,\n  'home': 36,\n  'left': 37,\n  'up': 38,\n  'right': 39,\n  'down': 40,\n  'insert': 45,\n  'delete': 46,\n  'command': 91,\n  'left command': 91,\n  'right command': 93,\n  'numpad *': 106,\n  'numpad +': 107,\n  'numpad -': 109,\n  'numpad .': 110,\n  'numpad /': 111,\n  'num lock': 144,\n  'scroll lock': 145,\n  'my computer': 182,\n  'my calculator': 183,\n  ';': 186,\n  '=': 187,\n  ',': 188,\n  '-': 189,\n  '.': 190,\n  '/': 191,\n  '`': 192,\n  '[': 219,\n  '\\\\': 220,\n  ']': 221,\n  \"'\": 222\n}\n\n// Helper aliases\n\nvar aliases = exports.aliases = {\n  'windows': 91,\n  '⇧': 16,\n  '⌥': 18,\n  '⌃': 17,\n  '⌘': 91,\n  'ctl': 17,\n  'control': 17,\n  'option': 18,\n  'pause': 19,\n  'break': 19,\n  'caps': 20,\n  'return': 13,\n  'escape': 27,\n  'spc': 32,\n  'spacebar': 32,\n  'pgup': 33,\n  'pgdn': 34,\n  'ins': 45,\n  'del': 46,\n  'cmd': 91\n}\n\n/*!\n * Programatically add the following\n */\n\n// lower case chars\nfor (i = 97; i < 123; i++) codes[String.fromCharCode(i)] = i - 32\n\n// numbers\nfor (var i = 48; i < 58; i++) codes[i - 48] = i\n\n// function keys\nfor (i = 1; i < 13; i++) codes['f'+i] = i + 111\n\n// numpad keys\nfor (i = 0; i < 10; i++) codes['numpad '+i] = i + 96\n\n/**\n * Get by code\n *\n *   exports.name[13] // => 'Enter'\n */\n\nvar names = exports.names = exports.title = {} // title for backward compat\n\n// Create reverse mapping\nfor (i in codes) names[codes[i]] = i\n\n// Add aliases\nfor (var alias in aliases) {\n  codes[alias] = aliases[alias]\n}\n","'use strict';\n\n/* globals\n\tSet,\n\tMap,\n\tWeakSet,\n\tWeakMap,\n\n\tPromise,\n\n\tSymbol,\n\tProxy,\n\n\tAtomics,\n\tSharedArrayBuffer,\n\n\tArrayBuffer,\n\tDataView,\n\tUint8Array,\n\tFloat32Array,\n\tFloat64Array,\n\tInt8Array,\n\tInt16Array,\n\tInt32Array,\n\tUint8ClampedArray,\n\tUint16Array,\n\tUint32Array,\n*/\n\nvar undefined; // eslint-disable-line no-shadow-restricted-names\n\nvar ThrowTypeError = Object.getOwnPropertyDescriptor\n\t? (function () { return Object.getOwnPropertyDescriptor(arguments, 'callee').get; }())\n\t: function () { throw new TypeError(); };\n\nvar hasSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol';\n\nvar getProto = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto\n\nvar generator; // = function * () {};\nvar generatorFunction = generator ? getProto(generator) : undefined;\nvar asyncFn; // async function() {};\nvar asyncFunction = asyncFn ? asyncFn.constructor : undefined;\nvar asyncGen; // async function * () {};\nvar asyncGenFunction = asyncGen ? getProto(asyncGen) : undefined;\nvar asyncGenIterator = asyncGen ? asyncGen() : undefined;\n\nvar TypedArray = typeof Uint8Array === 'undefined' ? undefined : getProto(Uint8Array);\n\nvar INTRINSICS = {\n\t'$ %Array%': Array,\n\t'$ %ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,\n\t'$ %ArrayBufferPrototype%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer.prototype,\n\t'$ %ArrayIteratorPrototype%': hasSymbols ? getProto([][Symbol.iterator]()) : undefined,\n\t'$ %ArrayPrototype%': Array.prototype,\n\t'$ %ArrayProto_entries%': Array.prototype.entries,\n\t'$ %ArrayProto_forEach%': Array.prototype.forEach,\n\t'$ %ArrayProto_keys%': Array.prototype.keys,\n\t'$ %ArrayProto_values%': Array.prototype.values,\n\t'$ %AsyncFromSyncIteratorPrototype%': undefined,\n\t'$ %AsyncFunction%': asyncFunction,\n\t'$ %AsyncFunctionPrototype%': asyncFunction ? asyncFunction.prototype : undefined,\n\t'$ %AsyncGenerator%': asyncGen ? getProto(asyncGenIterator) : undefined,\n\t'$ %AsyncGeneratorFunction%': asyncGenFunction,\n\t'$ %AsyncGeneratorPrototype%': asyncGenFunction ? asyncGenFunction.prototype : undefined,\n\t'$ %AsyncIteratorPrototype%': asyncGenIterator && hasSymbols && Symbol.asyncIterator ? asyncGenIterator[Symbol.asyncIterator]() : undefined,\n\t'$ %Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,\n\t'$ %Boolean%': Boolean,\n\t'$ %BooleanPrototype%': Boolean.prototype,\n\t'$ %DataView%': typeof DataView === 'undefined' ? undefined : DataView,\n\t'$ %DataViewPrototype%': typeof DataView === 'undefined' ? undefined : DataView.prototype,\n\t'$ %Date%': Date,\n\t'$ %DatePrototype%': Date.prototype,\n\t'$ %decodeURI%': decodeURI,\n\t'$ %decodeURIComponent%': decodeURIComponent,\n\t'$ %encodeURI%': encodeURI,\n\t'$ %encodeURIComponent%': encodeURIComponent,\n\t'$ %Error%': Error,\n\t'$ %ErrorPrototype%': Error.prototype,\n\t'$ %eval%': eval, // eslint-disable-line no-eval\n\t'$ %EvalError%': EvalError,\n\t'$ %EvalErrorPrototype%': EvalError.prototype,\n\t'$ %Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,\n\t'$ %Float32ArrayPrototype%': typeof Float32Array === 'undefined' ? undefined : Float32Array.prototype,\n\t'$ %Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,\n\t'$ %Float64ArrayPrototype%': typeof Float64Array === 'undefined' ? undefined : Float64Array.prototype,\n\t'$ %Function%': Function,\n\t'$ %FunctionPrototype%': Function.prototype,\n\t'$ %Generator%': generator ? getProto(generator()) : undefined,\n\t'$ %GeneratorFunction%': generatorFunction,\n\t'$ %GeneratorPrototype%': generatorFunction ? generatorFunction.prototype : undefined,\n\t'$ %Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,\n\t'$ %Int8ArrayPrototype%': typeof Int8Array === 'undefined' ? undefined : Int8Array.prototype,\n\t'$ %Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,\n\t'$ %Int16ArrayPrototype%': typeof Int16Array === 'undefined' ? undefined : Int8Array.prototype,\n\t'$ %Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,\n\t'$ %Int32ArrayPrototype%': typeof Int32Array === 'undefined' ? undefined : Int32Array.prototype,\n\t'$ %isFinite%': isFinite,\n\t'$ %isNaN%': isNaN,\n\t'$ %IteratorPrototype%': hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined,\n\t'$ %JSON%': JSON,\n\t'$ %JSONParse%': JSON.parse,\n\t'$ %Map%': typeof Map === 'undefined' ? undefined : Map,\n\t'$ %MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined : getProto(new Map()[Symbol.iterator]()),\n\t'$ %MapPrototype%': typeof Map === 'undefined' ? undefined : Map.prototype,\n\t'$ %Math%': Math,\n\t'$ %Number%': Number,\n\t'$ %NumberPrototype%': Number.prototype,\n\t'$ %Object%': Object,\n\t'$ %ObjectPrototype%': Object.prototype,\n\t'$ %ObjProto_toString%': Object.prototype.toString,\n\t'$ %ObjProto_valueOf%': Object.prototype.valueOf,\n\t'$ %parseFloat%': parseFloat,\n\t'$ %parseInt%': parseInt,\n\t'$ %Promise%': typeof Promise === 'undefined' ? undefined : Promise,\n\t'$ %PromisePrototype%': typeof Promise === 'undefined' ? undefined : Promise.prototype,\n\t'$ %PromiseProto_then%': typeof Promise === 'undefined' ? undefined : Promise.prototype.then,\n\t'$ %Promise_all%': typeof Promise === 'undefined' ? undefined : Promise.all,\n\t'$ %Promise_reject%': typeof Promise === 'undefined' ? undefined : Promise.reject,\n\t'$ %Promise_resolve%': typeof Promise === 'undefined' ? undefined : Promise.resolve,\n\t'$ %Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,\n\t'$ %RangeError%': RangeError,\n\t'$ %RangeErrorPrototype%': RangeError.prototype,\n\t'$ %ReferenceError%': ReferenceError,\n\t'$ %ReferenceErrorPrototype%': ReferenceError.prototype,\n\t'$ %Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,\n\t'$ %RegExp%': RegExp,\n\t'$ %RegExpPrototype%': RegExp.prototype,\n\t'$ %Set%': typeof Set === 'undefined' ? undefined : Set,\n\t'$ %SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined : getProto(new Set()[Symbol.iterator]()),\n\t'$ %SetPrototype%': typeof Set === 'undefined' ? undefined : Set.prototype,\n\t'$ %SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,\n\t'$ %SharedArrayBufferPrototype%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer.prototype,\n\t'$ %String%': String,\n\t'$ %StringIteratorPrototype%': hasSymbols ? getProto(''[Symbol.iterator]()) : undefined,\n\t'$ %StringPrototype%': String.prototype,\n\t'$ %Symbol%': hasSymbols ? Symbol : undefined,\n\t'$ %SymbolPrototype%': hasSymbols ? Symbol.prototype : undefined,\n\t'$ %SyntaxError%': SyntaxError,\n\t'$ %SyntaxErrorPrototype%': SyntaxError.prototype,\n\t'$ %ThrowTypeError%': ThrowTypeError,\n\t'$ %TypedArray%': TypedArray,\n\t'$ %TypedArrayPrototype%': TypedArray ? TypedArray.prototype : undefined,\n\t'$ %TypeError%': TypeError,\n\t'$ %TypeErrorPrototype%': TypeError.prototype,\n\t'$ %Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,\n\t'$ %Uint8ArrayPrototype%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array.prototype,\n\t'$ %Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,\n\t'$ %Uint8ClampedArrayPrototype%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray.prototype,\n\t'$ %Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,\n\t'$ %Uint16ArrayPrototype%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array.prototype,\n\t'$ %Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,\n\t'$ %Uint32ArrayPrototype%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array.prototype,\n\t'$ %URIError%': URIError,\n\t'$ %URIErrorPrototype%': URIError.prototype,\n\t'$ %WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,\n\t'$ %WeakMapPrototype%': typeof WeakMap === 'undefined' ? undefined : WeakMap.prototype,\n\t'$ %WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet,\n\t'$ %WeakSetPrototype%': typeof WeakSet === 'undefined' ? undefined : WeakSet.prototype\n};\n\nmodule.exports = function GetIntrinsic(name, allowMissing) {\n\tif (arguments.length > 1 && typeof allowMissing !== 'boolean') {\n\t\tthrow new TypeError('\"allowMissing\" argument must be a boolean');\n\t}\n\n\tvar key = '$ ' + name;\n\tif (!(key in INTRINSICS)) {\n\t\tthrow new SyntaxError('intrinsic ' + name + ' does not exist!');\n\t}\n\n\t// istanbul ignore if // hopefully this is impossible to test :-)\n\tif (typeof INTRINSICS[key] === 'undefined' && !allowMissing) {\n\t\tthrow new TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');\n\t}\n\treturn INTRINSICS[key];\n};\n","/**\n * mux.js\n *\n * Copyright (c) Brightcove\n * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n */\nvar ONE_SECOND_IN_TS = 90000; // 90kHz clock\n\n/**\n * Store information about the start and end of the track and the\n * duration for each frame/sample we process in order to calculate\n * the baseMediaDecodeTime\n */\nvar collectDtsInfo = function(track, data) {\n  if (typeof data.pts === 'number') {\n    if (track.timelineStartInfo.pts === undefined) {\n      track.timelineStartInfo.pts = data.pts;\n    }\n\n    if (track.minSegmentPts === undefined) {\n      track.minSegmentPts = data.pts;\n    } else {\n      track.minSegmentPts = Math.min(track.minSegmentPts, data.pts);\n    }\n\n    if (track.maxSegmentPts === undefined) {\n      track.maxSegmentPts = data.pts;\n    } else {\n      track.maxSegmentPts = Math.max(track.maxSegmentPts, data.pts);\n    }\n  }\n\n  if (typeof data.dts === 'number') {\n    if (track.timelineStartInfo.dts === undefined) {\n      track.timelineStartInfo.dts = data.dts;\n    }\n\n    if (track.minSegmentDts === undefined) {\n      track.minSegmentDts = data.dts;\n    } else {\n      track.minSegmentDts = Math.min(track.minSegmentDts, data.dts);\n    }\n\n    if (track.maxSegmentDts === undefined) {\n      track.maxSegmentDts = data.dts;\n    } else {\n      track.maxSegmentDts = Math.max(track.maxSegmentDts, data.dts);\n    }\n  }\n};\n\n/**\n * Clear values used to calculate the baseMediaDecodeTime between\n * tracks\n */\nvar clearDtsInfo = function(track) {\n  delete track.minSegmentDts;\n  delete track.maxSegmentDts;\n  delete track.minSegmentPts;\n  delete track.maxSegmentPts;\n};\n\n/**\n * Calculate the track's baseMediaDecodeTime based on the earliest\n * DTS the transmuxer has ever seen and the minimum DTS for the\n * current track\n * @param track {object} track metadata configuration\n * @param keepOriginalTimestamps {boolean} If true, keep the timestamps\n *        in the source; false to adjust the first segment to start at 0.\n */\nvar calculateTrackBaseMediaDecodeTime = function(track, keepOriginalTimestamps) {\n  var\n    baseMediaDecodeTime,\n    scale,\n    minSegmentDts = track.minSegmentDts;\n\n  // Optionally adjust the time so the first segment starts at zero.\n  if (!keepOriginalTimestamps) {\n    minSegmentDts -= track.timelineStartInfo.dts;\n  }\n\n  // track.timelineStartInfo.baseMediaDecodeTime is the location, in time, where\n  // we want the start of the first segment to be placed\n  baseMediaDecodeTime = track.timelineStartInfo.baseMediaDecodeTime;\n\n  // Add to that the distance this segment is from the very first\n  baseMediaDecodeTime += minSegmentDts;\n\n  // baseMediaDecodeTime must not become negative\n  baseMediaDecodeTime = Math.max(0, baseMediaDecodeTime);\n\n  if (track.type === 'audio') {\n    // Audio has a different clock equal to the sampling_rate so we need to\n    // scale the PTS values into the clock rate of the track\n    scale = track.samplerate / ONE_SECOND_IN_TS;\n    baseMediaDecodeTime *= scale;\n    baseMediaDecodeTime = Math.floor(baseMediaDecodeTime);\n  }\n\n  return baseMediaDecodeTime;\n};\n\nmodule.exports = {\n  clearDtsInfo: clearDtsInfo,\n  calculateTrackBaseMediaDecodeTime: calculateTrackBaseMediaDecodeTime,\n  collectDtsInfo: collectDtsInfo\n};\n","\"use strict\";\nvar window = require(\"global/window\")\nvar isFunction = require(\"is-function\")\nvar parseHeaders = require(\"parse-headers\")\nvar xtend = require(\"xtend\")\n\nmodule.exports = createXHR\ncreateXHR.XMLHttpRequest = window.XMLHttpRequest || noop\ncreateXHR.XDomainRequest = \"withCredentials\" in (new createXHR.XMLHttpRequest()) ? createXHR.XMLHttpRequest : window.XDomainRequest\n\nforEachArray([\"get\", \"put\", \"post\", \"patch\", \"head\", \"delete\"], function(method) {\n    createXHR[method === \"delete\" ? \"del\" : method] = function(uri, options, callback) {\n        options = initParams(uri, options, callback)\n        options.method = method.toUpperCase()\n        return _createXHR(options)\n    }\n})\n\nfunction forEachArray(array, iterator) {\n    for (var i = 0; i < array.length; i++) {\n        iterator(array[i])\n    }\n}\n\nfunction isEmpty(obj){\n    for(var i in obj){\n        if(obj.hasOwnProperty(i)) return false\n    }\n    return true\n}\n\nfunction initParams(uri, options, callback) {\n    var params = uri\n\n    if (isFunction(options)) {\n        callback = options\n        if (typeof uri === \"string\") {\n            params = {uri:uri}\n        }\n    } else {\n        params = xtend(options, {uri: uri})\n    }\n\n    params.callback = callback\n    return params\n}\n\nfunction createXHR(uri, options, callback) {\n    options = initParams(uri, options, callback)\n    return _createXHR(options)\n}\n\nfunction _createXHR(options) {\n    if(typeof options.callback === \"undefined\"){\n        throw new Error(\"callback argument missing\")\n    }\n\n    var called = false\n    var callback = function cbOnce(err, response, body){\n        if(!called){\n            called = true\n            options.callback(err, response, body)\n        }\n    }\n\n    function readystatechange() {\n        if (xhr.readyState === 4) {\n            setTimeout(loadFunc, 0)\n        }\n    }\n\n    function getBody() {\n        // Chrome with requestType=blob throws errors arround when even testing access to responseText\n        var body = undefined\n\n        if (xhr.response) {\n            body = xhr.response\n        } else {\n            body = xhr.responseText || getXml(xhr)\n        }\n\n        if (isJson) {\n            try {\n                body = JSON.parse(body)\n            } catch (e) {}\n        }\n\n        return body\n    }\n\n    function errorFunc(evt) {\n        clearTimeout(timeoutTimer)\n        if(!(evt instanceof Error)){\n            evt = new Error(\"\" + (evt || \"Unknown XMLHttpRequest Error\") )\n        }\n        evt.statusCode = 0\n        return callback(evt, failureResponse)\n    }\n\n    // will load the data & process the response in a special response object\n    function loadFunc() {\n        if (aborted) return\n        var status\n        clearTimeout(timeoutTimer)\n        if(options.useXDR && xhr.status===undefined) {\n            //IE8 CORS GET successful response doesn't have a status field, but body is fine\n            status = 200\n        } else {\n            status = (xhr.status === 1223 ? 204 : xhr.status)\n        }\n        var response = failureResponse\n        var err = null\n\n        if (status !== 0){\n            response = {\n                body: getBody(),\n                statusCode: status,\n                method: method,\n                headers: {},\n                url: uri,\n                rawRequest: xhr\n            }\n            if(xhr.getAllResponseHeaders){ //remember xhr can in fact be XDR for CORS in IE\n                response.headers = parseHeaders(xhr.getAllResponseHeaders())\n            }\n        } else {\n            err = new Error(\"Internal XMLHttpRequest Error\")\n        }\n        return callback(err, response, response.body)\n    }\n\n    var xhr = options.xhr || null\n\n    if (!xhr) {\n        if (options.cors || options.useXDR) {\n            xhr = new createXHR.XDomainRequest()\n        }else{\n            xhr = new createXHR.XMLHttpRequest()\n        }\n    }\n\n    var key\n    var aborted\n    var uri = xhr.url = options.uri || options.url\n    var method = xhr.method = options.method || \"GET\"\n    var body = options.body || options.data\n    var headers = xhr.headers = options.headers || {}\n    var sync = !!options.sync\n    var isJson = false\n    var timeoutTimer\n    var failureResponse = {\n        body: undefined,\n        headers: {},\n        statusCode: 0,\n        method: method,\n        url: uri,\n        rawRequest: xhr\n    }\n\n    if (\"json\" in options && options.json !== false) {\n        isJson = true\n        headers[\"accept\"] || headers[\"Accept\"] || (headers[\"Accept\"] = \"application/json\") //Don't override existing accept header declared by user\n        if (method !== \"GET\" && method !== \"HEAD\") {\n            headers[\"content-type\"] || headers[\"Content-Type\"] || (headers[\"Content-Type\"] = \"application/json\") //Don't override existing accept header declared by user\n            body = JSON.stringify(options.json === true ? body : options.json)\n        }\n    }\n\n    xhr.onreadystatechange = readystatechange\n    xhr.onload = loadFunc\n    xhr.onerror = errorFunc\n    // IE9 must have onprogress be set to a unique function.\n    xhr.onprogress = function () {\n        // IE must die\n    }\n    xhr.onabort = function(){\n        aborted = true;\n    }\n    xhr.ontimeout = errorFunc\n    xhr.open(method, uri, !sync, options.username, options.password)\n    //has to be after open\n    if(!sync) {\n        xhr.withCredentials = !!options.withCredentials\n    }\n    // Cannot set timeout with sync request\n    // not setting timeout on the xhr object, because of old webkits etc. not handling that correctly\n    // both npm's request and jquery 1.x use this kind of timeout, so this is being consistent\n    if (!sync && options.timeout > 0 ) {\n        timeoutTimer = setTimeout(function(){\n            if (aborted) return\n            aborted = true//IE9 may still call readystatechange\n            xhr.abort(\"timeout\")\n            var e = new Error(\"XMLHttpRequest timeout\")\n            e.code = \"ETIMEDOUT\"\n            errorFunc(e)\n        }, options.timeout )\n    }\n\n    if (xhr.setRequestHeader) {\n        for(key in headers){\n            if(headers.hasOwnProperty(key)){\n                xhr.setRequestHeader(key, headers[key])\n            }\n        }\n    } else if (options.headers && !isEmpty(options.headers)) {\n        throw new Error(\"Headers cannot be set on an XDomainRequest object\")\n    }\n\n    if (\"responseType\" in options) {\n        xhr.responseType = options.responseType\n    }\n\n    if (\"beforeSend\" in options &&\n        typeof options.beforeSend === \"function\"\n    ) {\n        options.beforeSend(xhr)\n    }\n\n    // Microsoft Edge browser sends \"undefined\" when send is called with undefined value.\n    // XMLHttpRequest spec says to pass null as body to indicate no body\n    // See https://github.com/naugtur/xhr/issues/100.\n    xhr.send(body || null)\n\n    return xhr\n\n\n}\n\nfunction getXml(xhr) {\n    if (xhr.responseType === \"document\") {\n        return xhr.responseXML\n    }\n    var firefoxBugTakenEffect = xhr.responseXML && xhr.responseXML.documentElement.nodeName === \"parsererror\"\n    if (xhr.responseType === \"\" && !firefoxBugTakenEffect) {\n        return xhr.responseXML\n    }\n\n    return null\n}\n\nfunction noop() {}\n","var topLevel = typeof global !== 'undefined' ? global :\n    typeof window !== 'undefined' ? window : {}\nvar minDoc = require('min-document');\n\nvar doccy;\n\nif (typeof document !== 'undefined') {\n    doccy = document;\n} else {\n    doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];\n\n    if (!doccy) {\n        doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;\n    }\n}\n\nmodule.exports = doccy;\n","'use strict';\n\nvar keys = require('object-keys');\nvar hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';\n\nvar toStr = Object.prototype.toString;\nvar concat = Array.prototype.concat;\nvar origDefineProperty = Object.defineProperty;\n\nvar isFunction = function (fn) {\n\treturn typeof fn === 'function' && toStr.call(fn) === '[object Function]';\n};\n\nvar arePropertyDescriptorsSupported = function () {\n\tvar obj = {};\n\ttry {\n\t\torigDefineProperty(obj, 'x', { enumerable: false, value: obj });\n\t\t// eslint-disable-next-line no-unused-vars, no-restricted-syntax\n\t\tfor (var _ in obj) { // jscs:ignore disallowUnusedVariables\n\t\t\treturn false;\n\t\t}\n\t\treturn obj.x === obj;\n\t} catch (e) { /* this is IE 8. */\n\t\treturn false;\n\t}\n};\nvar supportsDescriptors = origDefineProperty && arePropertyDescriptorsSupported();\n\nvar defineProperty = function (object, name, value, predicate) {\n\tif (name in object && (!isFunction(predicate) || !predicate())) {\n\t\treturn;\n\t}\n\tif (supportsDescriptors) {\n\t\torigDefineProperty(object, name, {\n\t\t\tconfigurable: true,\n\t\t\tenumerable: false,\n\t\t\tvalue: value,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\tobject[name] = value;\n\t}\n};\n\nvar defineProperties = function (object, map) {\n\tvar predicates = arguments.length > 2 ? arguments[2] : {};\n\tvar props = keys(map);\n\tif (hasSymbols) {\n\t\tprops = concat.call(props, Object.getOwnPropertySymbols(map));\n\t}\n\tfor (var i = 0; i < props.length; i += 1) {\n\t\tdefineProperty(object, props[i], map[props[i]], predicates[props[i]]);\n\t}\n};\n\ndefineProperties.supportsDescriptors = !!supportsDescriptors;\n\nmodule.exports = defineProperties;\n","/**\n * Copyright 2013 vtt.js Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar scrollSetting = {\n  \"\": true,\n  \"up\": true\n};\n\nfunction findScrollSetting(value) {\n  if (typeof value !== \"string\") {\n    return false;\n  }\n  var scroll = scrollSetting[value.toLowerCase()];\n  return scroll ? value.toLowerCase() : false;\n}\n\nfunction isValidPercentValue(value) {\n  return typeof value === \"number\" && (value >= 0 && value <= 100);\n}\n\n// VTTRegion shim http://dev.w3.org/html5/webvtt/#vttregion-interface\nfunction VTTRegion() {\n  var _width = 100;\n  var _lines = 3;\n  var _regionAnchorX = 0;\n  var _regionAnchorY = 100;\n  var _viewportAnchorX = 0;\n  var _viewportAnchorY = 100;\n  var _scroll = \"\";\n\n  Object.defineProperties(this, {\n    \"width\": {\n      enumerable: true,\n      get: function() {\n        return _width;\n      },\n      set: function(value) {\n        if (!isValidPercentValue(value)) {\n          throw new Error(\"Width must be between 0 and 100.\");\n        }\n        _width = value;\n      }\n    },\n    \"lines\": {\n      enumerable: true,\n      get: function() {\n        return _lines;\n      },\n      set: function(value) {\n        if (typeof value !== \"number\") {\n          throw new TypeError(\"Lines must be set to a number.\");\n        }\n        _lines = value;\n      }\n    },\n    \"regionAnchorY\": {\n      enumerable: true,\n      get: function() {\n        return _regionAnchorY;\n      },\n      set: function(value) {\n        if (!isValidPercentValue(value)) {\n          throw new Error(\"RegionAnchorX must be between 0 and 100.\");\n        }\n        _regionAnchorY = value;\n      }\n    },\n    \"regionAnchorX\": {\n      enumerable: true,\n      get: function() {\n        return _regionAnchorX;\n      },\n      set: function(value) {\n        if(!isValidPercentValue(value)) {\n          throw new Error(\"RegionAnchorY must be between 0 and 100.\");\n        }\n        _regionAnchorX = value;\n      }\n    },\n    \"viewportAnchorY\": {\n      enumerable: true,\n      get: function() {\n        return _viewportAnchorY;\n      },\n      set: function(value) {\n        if (!isValidPercentValue(value)) {\n          throw new Error(\"ViewportAnchorY must be between 0 and 100.\");\n        }\n        _viewportAnchorY = value;\n      }\n    },\n    \"viewportAnchorX\": {\n      enumerable: true,\n      get: function() {\n        return _viewportAnchorX;\n      },\n      set: function(value) {\n        if (!isValidPercentValue(value)) {\n          throw new Error(\"ViewportAnchorX must be between 0 and 100.\");\n        }\n        _viewportAnchorX = value;\n      }\n    },\n    \"scroll\": {\n      enumerable: true,\n      get: function() {\n        return _scroll;\n      },\n      set: function(value) {\n        var setting = findScrollSetting(value);\n        // Have to check for false as an empty string is a legal value.\n        if (setting === false) {\n          throw new SyntaxError(\"An invalid or illegal string was specified.\");\n        }\n        _scroll = setting;\n      }\n    }\n  });\n}\n\nmodule.exports = VTTRegion;\n","/**\n * mux.js\n *\n * Copyright (c) Brightcove\n * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n *\n * Utilities to detect basic properties and metadata about Aac data.\n */\n'use strict';\n\nvar ADTS_SAMPLING_FREQUENCIES = [\n  96000,\n  88200,\n  64000,\n  48000,\n  44100,\n  32000,\n  24000,\n  22050,\n  16000,\n  12000,\n  11025,\n  8000,\n  7350\n];\n\nvar isLikelyAacData = function(data) {\n  if ((data[0] === 'I'.charCodeAt(0)) &&\n      (data[1] === 'D'.charCodeAt(0)) &&\n      (data[2] === '3'.charCodeAt(0))) {\n    return true;\n  }\n  return false;\n};\n\nvar parseSyncSafeInteger = function(data) {\n  return (data[0] << 21) |\n          (data[1] << 14) |\n          (data[2] << 7) |\n          (data[3]);\n};\n\n// return a percent-encoded representation of the specified byte range\n// @see http://en.wikipedia.org/wiki/Percent-encoding\nvar percentEncode = function(bytes, start, end) {\n  var i, result = '';\n  for (i = start; i < end; i++) {\n    result += '%' + ('00' + bytes[i].toString(16)).slice(-2);\n  }\n  return result;\n};\n\n// return the string representation of the specified byte range,\n// interpreted as ISO-8859-1.\nvar parseIso88591 = function(bytes, start, end) {\n  return unescape(percentEncode(bytes, start, end)); // jshint ignore:line\n};\n\nvar parseId3TagSize = function(header, byteIndex) {\n  var\n    returnSize = (header[byteIndex + 6] << 21) |\n                 (header[byteIndex + 7] << 14) |\n                 (header[byteIndex + 8] << 7) |\n                 (header[byteIndex + 9]),\n    flags = header[byteIndex + 5],\n    footerPresent = (flags & 16) >> 4;\n\n  if (footerPresent) {\n    return returnSize + 20;\n  }\n  return returnSize + 10;\n};\n\nvar parseAdtsSize = function(header, byteIndex) {\n  var\n    lowThree = (header[byteIndex + 5] & 0xE0) >> 5,\n    middle = header[byteIndex + 4] << 3,\n    highTwo = header[byteIndex + 3] & 0x3 << 11;\n\n  return (highTwo | middle) | lowThree;\n};\n\nvar parseType = function(header, byteIndex) {\n  if ((header[byteIndex] === 'I'.charCodeAt(0)) &&\n      (header[byteIndex + 1] === 'D'.charCodeAt(0)) &&\n      (header[byteIndex + 2] === '3'.charCodeAt(0))) {\n    return 'timed-metadata';\n  } else if ((header[byteIndex] & 0xff === 0xff) &&\n             ((header[byteIndex + 1] & 0xf0) === 0xf0)) {\n    return 'audio';\n  }\n  return null;\n};\n\nvar parseSampleRate = function(packet) {\n  var i = 0;\n\n  while (i + 5 < packet.length) {\n    if (packet[i] !== 0xFF || (packet[i + 1] & 0xF6) !== 0xF0) {\n      // If a valid header was not found,  jump one forward and attempt to\n      // find a valid ADTS header starting at the next byte\n      i++;\n      continue;\n    }\n    return ADTS_SAMPLING_FREQUENCIES[(packet[i + 2] & 0x3c) >>> 2];\n  }\n\n  return null;\n};\n\nvar parseAacTimestamp = function(packet) {\n  var frameStart, frameSize, frame, frameHeader;\n\n  // find the start of the first frame and the end of the tag\n  frameStart = 10;\n  if (packet[5] & 0x40) {\n    // advance the frame start past the extended header\n    frameStart += 4; // header size field\n    frameStart += parseSyncSafeInteger(packet.subarray(10, 14));\n  }\n\n  // parse one or more ID3 frames\n  // http://id3.org/id3v2.3.0#ID3v2_frame_overview\n  do {\n    // determine the number of bytes in this frame\n    frameSize = parseSyncSafeInteger(packet.subarray(frameStart + 4, frameStart + 8));\n    if (frameSize < 1) {\n      return null;\n    }\n    frameHeader = String.fromCharCode(packet[frameStart],\n                                      packet[frameStart + 1],\n                                      packet[frameStart + 2],\n                                      packet[frameStart + 3]);\n\n    if (frameHeader === 'PRIV') {\n      frame = packet.subarray(frameStart + 10, frameStart + frameSize + 10);\n\n      for (var i = 0; i < frame.byteLength; i++) {\n        if (frame[i] === 0) {\n          var owner = parseIso88591(frame, 0, i);\n          if (owner === 'com.apple.streaming.transportStreamTimestamp') {\n            var d = frame.subarray(i + 1);\n            var size = ((d[3] & 0x01)  << 30) |\n                       (d[4]  << 22) |\n                       (d[5] << 14) |\n                       (d[6] << 6) |\n                       (d[7] >>> 2);\n            size *= 4;\n            size += d[7] & 0x03;\n\n            return size;\n          }\n          break;\n        }\n      }\n    }\n\n    frameStart += 10; // advance past the frame header\n    frameStart += frameSize; // advance past the frame body\n  } while (frameStart < packet.byteLength);\n  return null;\n};\n\nmodule.exports = {\n  isLikelyAacData: isLikelyAacData,\n  parseId3TagSize: parseId3TagSize,\n  parseAdtsSize: parseAdtsSize,\n  parseType: parseType,\n  parseSampleRate: parseSampleRate,\n  parseAacTimestamp: parseAacTimestamp\n};\n"],"sourceRoot":""}